
demo_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004148  08004148  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004148  08004148  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004148  08004148  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004148  08004148  00014148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800414c  0800414c  0001414c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200000cc  0800421c  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  0800421c  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010548  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280f  00000000  00000000  0003063d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00032e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00033ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001916f  00000000  00000000  000347f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f610  00000000  00000000  0004d95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088ea8  00000000  00000000  0005cf6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e5e17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e0  00000000  00000000  000e5e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800404c 	.word	0x0800404c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	0800404c 	.word	0x0800404c

0800014c <button_reading>:

int TimeOutForKeyPress[MAX_BUTTON] = {LONG_DURATION};
int flagBtn[MAX_BUTTON] = {0};
int flagBtnLong[MAX_BUTTON] = {0};

void button_reading(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e096      	b.n	8000286 <button_reading+0x13a>
		KeyReg2[i] = KeyReg1[i];
 8000158:	4a4f      	ldr	r2, [pc, #316]	; (8000298 <button_reading+0x14c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	494e      	ldr	r1, [pc, #312]	; (800029c <button_reading+0x150>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000168:	4a4d      	ldr	r2, [pc, #308]	; (80002a0 <button_reading+0x154>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4949      	ldr	r1, [pc, #292]	; (8000298 <button_reading+0x14c>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch (i){ //check which button is being read now
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b02      	cmp	r3, #2
 800017c:	d01f      	beq.n	80001be <button_reading+0x72>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b02      	cmp	r3, #2
 8000182:	dc28      	bgt.n	80001d6 <button_reading+0x8a>
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d003      	beq.n	8000192 <button_reading+0x46>
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d00b      	beq.n	80001a8 <button_reading+0x5c>
			break;
//		case BTN_PD:
//			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, PD_BTN_Pin);
//			break;
		default:
			break;
 8000190:	e021      	b.n	80001d6 <button_reading+0x8a>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_1_Pin);
 8000192:	2101      	movs	r1, #1
 8000194:	4843      	ldr	r0, [pc, #268]	; (80002a4 <button_reading+0x158>)
 8000196:	f001 fd5f 	bl	8001c58 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	4619      	mov	r1, r3
 800019e:	4a40      	ldr	r2, [pc, #256]	; (80002a0 <button_reading+0x154>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001a6:	e017      	b.n	80001d8 <button_reading+0x8c>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_2_Pin);
 80001a8:	2102      	movs	r1, #2
 80001aa:	483e      	ldr	r0, [pc, #248]	; (80002a4 <button_reading+0x158>)
 80001ac:	f001 fd54 	bl	8001c58 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	4a3a      	ldr	r2, [pc, #232]	; (80002a0 <button_reading+0x154>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001bc:	e00c      	b.n	80001d8 <button_reading+0x8c>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_3_Pin);
 80001be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c2:	4838      	ldr	r0, [pc, #224]	; (80002a4 <button_reading+0x158>)
 80001c4:	f001 fd48 	bl	8001c58 <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	4619      	mov	r1, r3
 80001cc:	4a34      	ldr	r2, [pc, #208]	; (80002a0 <button_reading+0x154>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001d4:	e000      	b.n	80001d8 <button_reading+0x8c>
			break;
 80001d6:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001d8:	4a2f      	ldr	r2, [pc, #188]	; (8000298 <button_reading+0x14c>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e0:	492f      	ldr	r1, [pc, #188]	; (80002a0 <button_reading+0x154>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d149      	bne.n	8000280 <button_reading+0x134>
 80001ec:	4a2a      	ldr	r2, [pc, #168]	; (8000298 <button_reading+0x14c>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4929      	ldr	r1, [pc, #164]	; (800029c <button_reading+0x150>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d13f      	bne.n	8000280 <button_reading+0x134>
			if (KeyReg2[i] != KeyReg3[i]){
 8000200:	4a26      	ldr	r2, [pc, #152]	; (800029c <button_reading+0x150>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4927      	ldr	r1, [pc, #156]	; (80002a8 <button_reading+0x15c>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d021      	beq.n	8000258 <button_reading+0x10c>
				KeyReg3[i] = KeyReg2[i];
 8000214:	4a21      	ldr	r2, [pc, #132]	; (800029c <button_reading+0x150>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	4922      	ldr	r1, [pc, #136]	; (80002a8 <button_reading+0x15c>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == IS_PRESSED){
 8000224:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <button_reading+0x15c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d108      	bne.n	8000242 <button_reading+0xf6>
					TimeOutForKeyPress[i] = LONG_DURATION;
 8000230:	4a1e      	ldr	r2, [pc, #120]	; (80002ac <button_reading+0x160>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	21c8      	movs	r1, #200	; 0xc8
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 f83c 	bl	80002b8 <subKeyProcess>
 8000240:	e01e      	b.n	8000280 <button_reading+0x134>
				}
				else{
					flagBtnLong[i] = 0;
 8000242:	4a1b      	ldr	r2, [pc, #108]	; (80002b0 <button_reading+0x164>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2100      	movs	r1, #0
 8000248:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					Over1Sec[i] = 0;
 800024c:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <button_reading+0x168>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2100      	movs	r1, #0
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000256:	e013      	b.n	8000280 <button_reading+0x134>
				}
			} else {
				TimeOutForKeyPress[i] --;
 8000258:	4a14      	ldr	r2, [pc, #80]	; (80002ac <button_reading+0x160>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	4912      	ldr	r1, [pc, #72]	; (80002ac <button_reading+0x160>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800026a:	4a10      	ldr	r2, [pc, #64]	; (80002ac <button_reading+0x160>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d104      	bne.n	8000280 <button_reading+0x134>
					KeyReg3[i] = IS_RELEASED;
 8000276:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <button_reading+0x15c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b03      	cmp	r3, #3
 800028a:	f77f af65 	ble.w	8000158 <button_reading+0xc>
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000010 	.word	0x20000010
 800029c:	20000020 	.word	0x20000020
 80002a0:	20000000 	.word	0x20000000
 80002a4:	40010800 	.word	0x40010800
 80002a8:	20000030 	.word	0x20000030
 80002ac:	20000040 	.word	0x20000040
 80002b0:	20000108 	.word	0x20000108
 80002b4:	200000e8 	.word	0x200000e8

080002b8 <subKeyProcess>:

void subKeyProcess(int index){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	flagBtn[index] = 1;
 80002c0:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <subKeyProcess+0x48>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2101      	movs	r1, #1
 80002c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (Over1Sec[index] == 0){
 80002ca:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <subKeyProcess+0x4c>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d105      	bne.n	80002e2 <subKeyProcess+0x2a>
		Over1Sec[index] = 1;
 80002d6:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <subKeyProcess+0x4c>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2101      	movs	r1, #1
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else{
		flagBtnLong[index] = 1;
		flagBtn[index] = 0;
	}
}
 80002e0:	e009      	b.n	80002f6 <subKeyProcess+0x3e>
		flagBtnLong[index] = 1;
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <subKeyProcess+0x50>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2101      	movs	r1, #1
 80002e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagBtn[index] = 0;
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <subKeyProcess+0x48>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2100      	movs	r1, #0
 80002f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	200000f8 	.word	0x200000f8
 8000304:	200000e8 	.word	0x200000e8
 8000308:	20000108 	.word	0x20000108

0800030c <button_isPressed>:

int button_isPressed(int index){
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	if (flagBtn[index] == 1){
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <button_isPressed+0x30>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d106      	bne.n	800032e <button_isPressed+0x22>
		flagBtn[index] = 0;
 8000320:	4a06      	ldr	r2, [pc, #24]	; (800033c <button_isPressed+0x30>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2100      	movs	r1, #0
 8000326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800032a:	2301      	movs	r3, #1
 800032c:	e000      	b.n	8000330 <button_isPressed+0x24>
	}
	return 0;
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	200000f8 	.word	0x200000f8

08000340 <button_isLongPressed>:

int button_isLongPressed(int index){
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	return (flagBtnLong[index] == 1);
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <button_isLongPressed+0x24>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000350:	2b01      	cmp	r3, #1
 8000352:	bf0c      	ite	eq
 8000354:	2301      	moveq	r3, #1
 8000356:	2300      	movne	r3, #0
 8000358:	b2db      	uxtb	r3, r3
}
 800035a:	4618      	mov	r0, r3
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	20000108 	.word	0x20000108

08000368 <led_clear_all>:
	}
}
#endif

#ifdef PROTEUS
void led_clear_all() {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin|
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8000372:	4802      	ldr	r0, [pc, #8]	; (800037c <led_clear_all+0x14>)
 8000374:	f001 fc87 	bl	8001c86 <HAL_GPIO_WritePin>
			  	  	  	  	 RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin, GPIO_PIN_SET);
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40010800 	.word	0x40010800

08000380 <led_turn_on>:

void led_turn_on(uint8_t led_index, uint8_t led_type) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	460a      	mov	r2, r1
 800038a:	71fb      	strb	r3, [r7, #7]
 800038c:	4613      	mov	r3, r2
 800038e:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	2b05      	cmp	r3, #5
 8000394:	d002      	beq.n	800039c <led_turn_on+0x1c>
 8000396:	2b06      	cmp	r3, #6
 8000398:	d01e      	beq.n	80003d8 <led_turn_on+0x58>
//			break;
//		}
//		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 800039a:	e040      	b.n	800041e <led_turn_on+0x9e>
		switch (led_type) {
 800039c:	79bb      	ldrb	r3, [r7, #6]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d012      	beq.n	80003c8 <led_turn_on+0x48>
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	dc38      	bgt.n	8000418 <led_turn_on+0x98>
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d002      	beq.n	80003b0 <led_turn_on+0x30>
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d006      	beq.n	80003bc <led_turn_on+0x3c>
		break;
 80003ae:	e033      	b.n	8000418 <led_turn_on+0x98>
			HAL_GPIO_WritePin(GPIOA, RED_0_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2140      	movs	r1, #64	; 0x40
 80003b4:	481c      	ldr	r0, [pc, #112]	; (8000428 <led_turn_on+0xa8>)
 80003b6:	f001 fc66 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 80003ba:	e00c      	b.n	80003d6 <led_turn_on+0x56>
			HAL_GPIO_WritePin(GPIOA, GREEN_0_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2180      	movs	r1, #128	; 0x80
 80003c0:	4819      	ldr	r0, [pc, #100]	; (8000428 <led_turn_on+0xa8>)
 80003c2:	f001 fc60 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 80003c6:	e006      	b.n	80003d6 <led_turn_on+0x56>
			HAL_GPIO_WritePin(GPIOA, YELLOW_0_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ce:	4816      	ldr	r0, [pc, #88]	; (8000428 <led_turn_on+0xa8>)
 80003d0:	f001 fc59 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 80003d4:	bf00      	nop
		break;
 80003d6:	e01f      	b.n	8000418 <led_turn_on+0x98>
		switch (led_type) {
 80003d8:	79bb      	ldrb	r3, [r7, #6]
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d014      	beq.n	8000408 <led_turn_on+0x88>
 80003de:	2b02      	cmp	r3, #2
 80003e0:	dc1c      	bgt.n	800041c <led_turn_on+0x9c>
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d002      	beq.n	80003ec <led_turn_on+0x6c>
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d007      	beq.n	80003fa <led_turn_on+0x7a>
		break;
 80003ea:	e017      	b.n	800041c <led_turn_on+0x9c>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f2:	480d      	ldr	r0, [pc, #52]	; (8000428 <led_turn_on+0xa8>)
 80003f4:	f001 fc47 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 80003f8:	e00d      	b.n	8000416 <led_turn_on+0x96>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000400:	4809      	ldr	r0, [pc, #36]	; (8000428 <led_turn_on+0xa8>)
 8000402:	f001 fc40 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 8000406:	e006      	b.n	8000416 <led_turn_on+0x96>
			HAL_GPIO_WritePin(GPIOA, YELLOW_1_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <led_turn_on+0xa8>)
 8000410:	f001 fc39 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 8000414:	bf00      	nop
		break;
 8000416:	e001      	b.n	800041c <led_turn_on+0x9c>
		break;
 8000418:	bf00      	nop
 800041a:	e000      	b.n	800041e <led_turn_on+0x9e>
		break;
 800041c:	bf00      	nop
	}
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010800 	.word	0x40010800

0800042c <led_turn_off>:

void led_turn_off(uint8_t led_index, uint8_t led_type) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	460a      	mov	r2, r1
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	4613      	mov	r3, r2
 800043a:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b05      	cmp	r3, #5
 8000440:	d002      	beq.n	8000448 <led_turn_off+0x1c>
 8000442:	2b06      	cmp	r3, #6
 8000444:	d01e      	beq.n	8000484 <led_turn_off+0x58>
//			break;
//		}
//		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 8000446:	e040      	b.n	80004ca <led_turn_off+0x9e>
		switch (led_type) {
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d012      	beq.n	8000474 <led_turn_off+0x48>
 800044e:	2b02      	cmp	r3, #2
 8000450:	dc38      	bgt.n	80004c4 <led_turn_off+0x98>
 8000452:	2b00      	cmp	r3, #0
 8000454:	d002      	beq.n	800045c <led_turn_off+0x30>
 8000456:	2b01      	cmp	r3, #1
 8000458:	d006      	beq.n	8000468 <led_turn_off+0x3c>
		break;
 800045a:	e033      	b.n	80004c4 <led_turn_off+0x98>
			HAL_GPIO_WritePin(GPIOA, RED_0_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2140      	movs	r1, #64	; 0x40
 8000460:	481c      	ldr	r0, [pc, #112]	; (80004d4 <led_turn_off+0xa8>)
 8000462:	f001 fc10 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 8000466:	e00c      	b.n	8000482 <led_turn_off+0x56>
			HAL_GPIO_WritePin(GPIOA, GREEN_0_Pin, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	4819      	ldr	r0, [pc, #100]	; (80004d4 <led_turn_off+0xa8>)
 800046e:	f001 fc0a 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 8000472:	e006      	b.n	8000482 <led_turn_off+0x56>
			HAL_GPIO_WritePin(GPIOA, YELLOW_0_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047a:	4816      	ldr	r0, [pc, #88]	; (80004d4 <led_turn_off+0xa8>)
 800047c:	f001 fc03 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 8000480:	bf00      	nop
		break;
 8000482:	e01f      	b.n	80004c4 <led_turn_off+0x98>
		switch (led_type) {
 8000484:	79bb      	ldrb	r3, [r7, #6]
 8000486:	2b02      	cmp	r3, #2
 8000488:	d014      	beq.n	80004b4 <led_turn_off+0x88>
 800048a:	2b02      	cmp	r3, #2
 800048c:	dc1c      	bgt.n	80004c8 <led_turn_off+0x9c>
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <led_turn_off+0x6c>
 8000492:	2b01      	cmp	r3, #1
 8000494:	d007      	beq.n	80004a6 <led_turn_off+0x7a>
		break;
 8000496:	e017      	b.n	80004c8 <led_turn_off+0x9c>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800049e:	480d      	ldr	r0, [pc, #52]	; (80004d4 <led_turn_off+0xa8>)
 80004a0:	f001 fbf1 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 80004a4:	e00d      	b.n	80004c2 <led_turn_off+0x96>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ac:	4809      	ldr	r0, [pc, #36]	; (80004d4 <led_turn_off+0xa8>)
 80004ae:	f001 fbea 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 80004b2:	e006      	b.n	80004c2 <led_turn_off+0x96>
			HAL_GPIO_WritePin(GPIOA, YELLOW_1_Pin, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <led_turn_off+0xa8>)
 80004bc:	f001 fbe3 	bl	8001c86 <HAL_GPIO_WritePin>
			break;
 80004c0:	bf00      	nop
		break;
 80004c2:	e001      	b.n	80004c8 <led_turn_off+0x9c>
		break;
 80004c4:	bf00      	nop
 80004c6:	e000      	b.n	80004ca <led_turn_off+0x9e>
		break;
 80004c8:	bf00      	nop
	}
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40010800 	.word	0x40010800

080004d8 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_UART_RxCpltCallback+0x20>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d101      	bne.n	80004ee <HAL_UART_RxCpltCallback+0x16>
		uart_init();
 80004ea:	f000 ff93 	bl	8001414 <uart_init>
	}
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40004400 	.word	0x40004400

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 f810 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f828 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8d8 	bl	80006bc <MX_GPIO_Init>
  MX_TIM2_Init();
 800050c:	f000 f860 	bl	80005d0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000510:	f000 f8aa 	bl	8000668 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000514:	480e      	ldr	r0, [pc, #56]	; (8000550 <main+0x54>)
 8000516:	f002 f851 	bl	80025bc <HAL_TIM_Base_Start_IT>
  timer_init();
 800051a:	f000 fb01 	bl	8000b20 <timer_init>
  traffic_init();
 800051e:	f000 fbbb 	bl	8000c98 <traffic_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timer_setDuration(TIMER_TEST_0, 500);
 8000522:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000526:	2000      	movs	r0, #0
 8000528:	f000 fb38 	bl	8000b9c <timer_setDuration>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (timer_checkFlag(TIMER_TEST_0)) {
 800052c:	2000      	movs	r0, #0
 800052e:	f000 fb4f 	bl	8000bd0 <timer_checkFlag>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d008      	beq.n	800054a <main+0x4e>
		timer_setDuration(TIMER_TEST_0, 500);
 8000538:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fb2d 	bl	8000b9c <timer_setDuration>
		HAL_GPIO_TogglePin(GPIOA, LED_TEST_0_Pin);
 8000542:	2120      	movs	r1, #32
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <main+0x58>)
 8000546:	f001 fbb6 	bl	8001cb6 <HAL_GPIO_TogglePin>
	}
	traffic_fsm();
 800054a:	f000 fe6f 	bl	800122c <traffic_fsm>
	if (timer_checkFlag(TIMER_TEST_0)) {
 800054e:	e7ed      	b.n	800052c <main+0x30>
 8000550:	2000015c 	.word	0x2000015c
 8000554:	40010800 	.word	0x40010800

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b090      	sub	sp, #64	; 0x40
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0318 	add.w	r3, r7, #24
 8000562:	2228      	movs	r2, #40	; 0x28
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 f92e 	bl	80037c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057a:	2302      	movs	r3, #2
 800057c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000582:	2310      	movs	r3, #16
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000586:	2300      	movs	r3, #0
 8000588:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0318 	add.w	r3, r7, #24
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fbaa 	bl	8001ce8 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800059a:	f000 f8db 	bl	8000754 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fe16 	bl	80021e8 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005c2:	f000 f8c7 	bl	8000754 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3740      	adds	r7, #64	; 0x40
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d6:	f107 0308 	add.w	r3, r7, #8
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_TIM2_Init+0x94>)
 80005ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_TIM2_Init+0x94>)
 80005f6:	2209      	movs	r2, #9
 80005f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_TIM2_Init+0x94>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_TIM2_Init+0x94>)
 8000602:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000606:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_TIM2_Init+0x94>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_TIM2_Init+0x94>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000614:	4813      	ldr	r0, [pc, #76]	; (8000664 <MX_TIM2_Init+0x94>)
 8000616:	f001 ff81 	bl	800251c <HAL_TIM_Base_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000620:	f000 f898 	bl	8000754 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	4619      	mov	r1, r3
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <MX_TIM2_Init+0x94>)
 8000632:	f002 f917 	bl	8002864 <HAL_TIM_ConfigClockSource>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800063c:	f000 f88a 	bl	8000754 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_TIM2_Init+0x94>)
 800064e:	f002 fadf 	bl	8002c10 <HAL_TIMEx_MasterConfigSynchronization>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000658:	f000 f87c 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000015c 	.word	0x2000015c

08000668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_USART2_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000674:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f002 fb20 	bl	8002ce4 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f853 	bl	8000754 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200001a4 	.word	0x200001a4
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_GPIO_Init+0x78>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <MX_GPIO_Init+0x78>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_GPIO_Init+0x78>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_0_Pin|RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin
 80006e8:	2201      	movs	r2, #1
 80006ea:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 80006ee:	4812      	ldr	r0, [pc, #72]	; (8000738 <MX_GPIO_Init+0x7c>)
 80006f0:	f001 fac9 	bl	8001c86 <HAL_GPIO_WritePin>
                          |RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_archv_Pin BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_archv_Pin|BTN_3_Pin;
 80006f4:	f241 0313 	movw	r3, #4115	; 0x1013
 80006f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fe:	2301      	movs	r3, #1
 8000700:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	4619      	mov	r1, r3
 8000708:	480b      	ldr	r0, [pc, #44]	; (8000738 <MX_GPIO_Init+0x7c>)
 800070a:	f001 f92b 	bl	8001964 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TEST_0_Pin RED_0_Pin GREEN_0_Pin YELLOW_0_Pin
                           RED_1_Pin GREEN_1_Pin YELLOW_1_Pin */
  GPIO_InitStruct.Pin = LED_TEST_0_Pin|RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin
 800070e:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
 8000712:	60bb      	str	r3, [r7, #8]
                          |RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000714:	2301      	movs	r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	2302      	movs	r3, #2
 800071e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	4619      	mov	r1, r3
 8000726:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_GPIO_Init+0x7c>)
 8000728:	f001 f91c 	bl	8001964 <HAL_GPIO_Init>

}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800

0800073c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	timer_run();
 8000744:	f000 f9fa 	bl	8000b3c <timer_run>
	button_reading();
 8000748:	f7ff fd00 	bl	800014c <button_reading>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <HAL_MspInit+0x5c>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a14      	ldr	r2, [pc, #80]	; (80007bc <HAL_MspInit+0x5c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_MspInit+0x5c>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x5c>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <HAL_MspInit+0x5c>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x5c>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_MspInit+0x60>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_MspInit+0x60>)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	3714      	adds	r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010000 	.word	0x40010000

080007c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007d4:	d113      	bne.n	80007fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_TIM_Base_MspInit+0x44>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <HAL_TIM_Base_MspInit+0x44>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_TIM_Base_MspInit+0x44>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	201c      	movs	r0, #28
 80007f4:	f000 ffcf 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007f8:	201c      	movs	r0, #28
 80007fa:	f000 ffe8 	bl	80017ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <HAL_UART_MspInit+0x98>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d137      	bne.n	800089c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 800082e:	69db      	ldr	r3, [r3, #28]
 8000830:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 8000832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000836:	61d3      	str	r3, [r2, #28]
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 800085c:	2304      	movs	r3, #4
 800085e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <HAL_UART_MspInit+0xa0>)
 8000870:	f001 f878 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8000874:	2308      	movs	r3, #8
 8000876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <HAL_UART_MspInit+0xa0>)
 8000888:	f001 f86c 	bl	8001964 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2026      	movs	r0, #38	; 0x26
 8000892:	f000 ff80 	bl	8001796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000896:	2026      	movs	r0, #38	; 0x26
 8000898:	f000 ff99 	bl	80017ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010800 	.word	0x40010800

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr

080008da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr

080008f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f6:	f000 fe5b 	bl	80015b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <TIM2_IRQHandler+0x10>)
 8000906:	f001 fea5 	bl	8002654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000015c 	.word	0x2000015c

08000914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <USART2_IRQHandler+0x10>)
 800091a:	f002 faf3 	bl	8002f04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001a4 	.word	0x200001a4

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f002 fefc 	bl	8003754 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20002800 	.word	0x20002800
 8000988:	00000400 	.word	0x00000400
 800098c:	20000120 	.word	0x20000120
 8000990:	20000208 	.word	0x20000208

08000994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <timer_unit_construct>:

struct timer_list timerList;
uint8_t	timerFlag[MAX_TIMER] = {0};

/*-------------- unit function -------------------*/
struct timer_unit* timer_unit_construct(uint8_t index, uint32_t duration) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = malloc(sizeof (struct timer_unit)); //dynamic allocating a timer unit
 80009ac:	200c      	movs	r0, #12
 80009ae:	f002 fefb 	bl	80037a8 <malloc>
 80009b2:	4603      	mov	r3, r0
 80009b4:	60fb      	str	r3, [r7, #12]
	if (newUnit == NULL) {
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d101      	bne.n	80009c0 <timer_unit_construct+0x20>
		return NULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	e009      	b.n	80009d4 <timer_unit_construct+0x34>
	}
	newUnit->index = index;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	701a      	strb	r2, [r3, #0]
	newUnit->duration = duration;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	605a      	str	r2, [r3, #4]
	newUnit->nextTimer = NULL;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
	return newUnit;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <timer_unit_destruct>:

void timer_unit_destruct(struct timer_unit *unit) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	free(unit);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f002 fee7 	bl	80037b8 <free>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <timer_list_add>:

/*-------------- list function -------------------*/
void timer_list_add(struct timer_unit *unit){
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	//list full
	if (timerList.size == MAX_TIMER) return;
 80009fc:	4b38      	ldr	r3, [pc, #224]	; (8000ae0 <timer_list_add+0xec>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d068      	beq.n	8000ad6 <timer_list_add+0xe2>

	//list empty
	if (timerList.size == 0) {
 8000a04:	4b36      	ldr	r3, [pc, #216]	; (8000ae0 <timer_list_add+0xec>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d109      	bne.n	8000a20 <timer_list_add+0x2c>
		timerList.head = unit;
 8000a0c:	4a34      	ldr	r2, [pc, #208]	; (8000ae0 <timer_list_add+0xec>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6053      	str	r3, [r2, #4]
		timerList.size++;
 8000a12:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <timer_list_add+0xec>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	3301      	adds	r3, #1
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	4b31      	ldr	r3, [pc, #196]	; (8000ae0 <timer_list_add+0xec>)
 8000a1c:	701a      	strb	r2, [r3, #0]
		return;
 8000a1e:	e05b      	b.n	8000ad8 <timer_list_add+0xe4>
	}

	//list has at least 1 item
	struct timer_unit *curr = timerList.head,
 8000a20:	4b2f      	ldr	r3, [pc, #188]	; (8000ae0 <timer_list_add+0xec>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	617b      	str	r3, [r7, #20]
					  *prev = NULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
	uint32_t totalDuration = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
	while(curr != NULL) { //iterating the list
 8000a2e:	e00e      	b.n	8000a4e <timer_list_add+0x5a>
		totalDuration += curr->duration;
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
		if (unit->duration < totalDuration) break;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d808      	bhi.n	8000a56 <timer_list_add+0x62>
		prev = curr;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	613b      	str	r3, [r7, #16]
		curr = curr->nextTimer;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	617b      	str	r3, [r7, #20]
	while(curr != NULL) { //iterating the list
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1ed      	bne.n	8000a30 <timer_list_add+0x3c>
 8000a54:	e000      	b.n	8000a58 <timer_list_add+0x64>
		if (unit->duration < totalDuration) break;
 8000a56:	bf00      	nop
	}
	if (prev == NULL) { //new unit is added before the head
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d113      	bne.n	8000a86 <timer_list_add+0x92>
		unit->nextTimer = curr;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	609a      	str	r2, [r3, #8]
		curr->duration -= unit->duration;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	685a      	ldr	r2, [r3, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	1ad2      	subs	r2, r2, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	605a      	str	r2, [r3, #4]
		timerList.head = unit;
 8000a72:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <timer_list_add+0xec>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6053      	str	r3, [r2, #4]
		timerList.size++;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <timer_list_add+0xec>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <timer_list_add+0xec>)
 8000a82:	701a      	strb	r2, [r3, #0]
		return;
 8000a84:	e028      	b.n	8000ad8 <timer_list_add+0xe4>
	}
	prev->nextTimer = unit;
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
	unit->nextTimer = curr;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	697a      	ldr	r2, [r7, #20]
 8000a90:	609a      	str	r2, [r3, #8]
	if (curr == NULL){
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d106      	bne.n	8000aa6 <timer_list_add+0xb2>
		unit->duration -= totalDuration;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	1ad2      	subs	r2, r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	e010      	b.n	8000ac8 <timer_list_add+0xd4>
	}
	else{
		uint32_t tmp = unit->duration;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	60bb      	str	r3, [r7, #8]
		unit->duration -= (totalDuration - curr->duration);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	6859      	ldr	r1, [r3, #4]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	1acb      	subs	r3, r1, r3
 8000ab8:	441a      	add	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	605a      	str	r2, [r3, #4]
		curr->duration = (totalDuration - tmp);
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	1ad2      	subs	r2, r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	605a      	str	r2, [r3, #4]
	}
	timerList.size++;
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <timer_list_add+0xec>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <timer_list_add+0xec>)
 8000ad2:	701a      	strb	r2, [r3, #0]
 8000ad4:	e000      	b.n	8000ad8 <timer_list_add+0xe4>
	if (timerList.size == MAX_TIMER) return;
 8000ad6:	bf00      	nop
}
 8000ad8:	371c      	adds	r7, #28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	200001e8 	.word	0x200001e8

08000ae4 <timer_list_pop>:

void timer_list_pop(){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
	//list empty
	if (timerList.size == 0) return;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <timer_list_pop+0x38>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d010      	beq.n	8000b14 <timer_list_pop+0x30>

	struct timer_unit *delUnit = timerList.head;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <timer_list_pop+0x38>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	607b      	str	r3, [r7, #4]
	timerList.head = delUnit->nextTimer;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <timer_list_pop+0x38>)
 8000afe:	6053      	str	r3, [r2, #4]
	timer_unit_destruct(delUnit);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff6b 	bl	80009dc <timer_unit_destruct>
	timerList.size--;
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <timer_list_pop+0x38>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <timer_list_pop+0x38>)
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e000      	b.n	8000b16 <timer_list_pop+0x32>
	if (timerList.size == 0) return;
 8000b14:	bf00      	nop
}
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001e8 	.word	0x200001e8

08000b20 <timer_init>:

/*-------------- global function -------------------*/
void timer_init(){
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	timerList.head = NULL;
 8000b24:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <timer_init+0x18>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
	timerList.size = 0;
 8000b2a:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <timer_init+0x18>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	200001e8 	.word	0x200001e8

08000b3c <timer_run>:

void timer_run(){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
	if (timerList.size == 0) return;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <timer_run+0x58>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d020      	beq.n	8000b8c <timer_run+0x50>
	if (timerList.head->duration >= 0) {
		timerList.head->duration--;
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <timer_run+0x58>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	685a      	ldr	r2, [r3, #4]
 8000b50:	3a01      	subs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
		if (timerList.head->duration <= 0) {
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <timer_run+0x58>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d117      	bne.n	8000b8e <timer_run+0x52>
			uint8_t index = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	71fb      	strb	r3, [r7, #7]
			while(timerList.size && timerList.head->duration == 0) {
 8000b62:	e009      	b.n	8000b78 <timer_run+0x3c>
				index = timerList.head->index;
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <timer_run+0x58>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
				timerFlag[index] = 1;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <timer_run+0x5c>)
 8000b70:	2101      	movs	r1, #1
 8000b72:	54d1      	strb	r1, [r2, r3]
				timer_list_pop();
 8000b74:	f7ff ffb6 	bl	8000ae4 <timer_list_pop>
			while(timerList.size && timerList.head->duration == 0) {
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <timer_run+0x58>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <timer_run+0x52>
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <timer_run+0x58>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0ec      	beq.n	8000b64 <timer_run+0x28>
 8000b8a:	e000      	b.n	8000b8e <timer_run+0x52>
	if (timerList.size == 0) return;
 8000b8c:	bf00      	nop
			}
		}
	}
}
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200001e8 	.word	0x200001e8
 8000b98:	20000124 	.word	0x20000124

08000b9c <timer_setDuration>:

void timer_setDuration(uint8_t index, uint32_t duration) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = timer_unit_construct(index, duration/CYCLE);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <timer_setDuration+0x30>)
 8000bac:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb0:	08da      	lsrs	r2, r3, #3
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fef2 	bl	80009a0 <timer_unit_construct>
 8000bbc:	60f8      	str	r0, [r7, #12]
	timer_list_add(newUnit);
 8000bbe:	68f8      	ldr	r0, [r7, #12]
 8000bc0:	f7ff ff18 	bl	80009f4 <timer_list_add>
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	cccccccd 	.word	0xcccccccd

08000bd0 <timer_checkFlag>:

uint8_t	timer_checkFlag(uint8_t index) {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	if (timerFlag[index] == 1) {
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	; (8000bfc <timer_checkFlag+0x2c>)
 8000bde:	5cd3      	ldrb	r3, [r2, r3]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d105      	bne.n	8000bf0 <timer_checkFlag+0x20>
		timerFlag[index] = 0;
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <timer_checkFlag+0x2c>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <timer_checkFlag+0x22>
	}
	return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000124 	.word	0x20000124

08000c00 <timer_clear>:

void timer_clear(uint8_t index) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
//	uint32_t totalDuration = 0;
	timerFlag[index] = 0;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <timer_clear+0x90>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	54d1      	strb	r1, [r2, r3]
	struct timer_unit *curr = timerList.head,
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <timer_clear+0x94>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	60fb      	str	r3, [r7, #12]
			          *prev = NULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60bb      	str	r3, [r7, #8]
	while (curr != NULL) {
 8000c1c:	e009      	b.n	8000c32 <timer_clear+0x32>
		if (curr->index == index) break;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	79fa      	ldrb	r2, [r7, #7]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d008      	beq.n	8000c3a <timer_clear+0x3a>

//		totalDuration += curr->duration;
		prev = curr;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	60bb      	str	r3, [r7, #8]
		curr = curr->nextTimer;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	60fb      	str	r3, [r7, #12]
	while (curr != NULL) {
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1f2      	bne.n	8000c1e <timer_clear+0x1e>
 8000c38:	e000      	b.n	8000c3c <timer_clear+0x3c>
		if (curr->index == index) break;
 8000c3a:	bf00      	nop
	}

	if (curr == NULL) return;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d022      	beq.n	8000c88 <timer_clear+0x88>
	if (prev == NULL) { //item at the head of list
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d104      	bne.n	8000c52 <timer_clear+0x52>
		timerList.head = curr->nextTimer;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <timer_clear+0x94>)
 8000c4e:	6053      	str	r3, [r2, #4]
 8000c50:	e003      	b.n	8000c5a <timer_clear+0x5a>
	}
	else {
		prev->nextTimer = curr->nextTimer;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	609a      	str	r2, [r3, #8]
	}
	if (curr->nextTimer != NULL) curr->nextTimer->duration += curr->duration;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <timer_clear+0x74>
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	6859      	ldr	r1, [r3, #4]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	685a      	ldr	r2, [r3, #4]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	440a      	add	r2, r1
 8000c72:	605a      	str	r2, [r3, #4]
	timer_unit_destruct(curr);
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f7ff feb1 	bl	80009dc <timer_unit_destruct>
	timerList.size--;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <timer_clear+0x94>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <timer_clear+0x94>)
 8000c84:	701a      	strb	r2, [r3, #0]
 8000c86:	e000      	b.n	8000c8a <timer_clear+0x8a>
	if (curr == NULL) return;
 8000c88:	bf00      	nop
}
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000124 	.word	0x20000124
 8000c94:	200001e8 	.word	0x200001e8

08000c98 <traffic_init>:
#include "uart.h"

/*-------------------- init setting --------------------*/
uint32_t	trafficDuration[3] = {2000, 1200, 800};

void traffic_init() {
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	global_state = INIT_MODE;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <traffic_init+0x2c>)
 8000c9e:	220a      	movs	r2, #10
 8000ca0:	701a      	strb	r2, [r3, #0]
	auto_A_state = AUTO_INIT;
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <traffic_init+0x30>)
 8000ca4:	2214      	movs	r2, #20
 8000ca6:	701a      	strb	r2, [r3, #0]
	auto_B_state = AUTO_INIT;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <traffic_init+0x34>)
 8000caa:	2214      	movs	r2, #20
 8000cac:	701a      	strb	r2, [r3, #0]
	manual_state = MN_INIT;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <traffic_init+0x38>)
 8000cb0:	221e      	movs	r2, #30
 8000cb2:	701a      	strb	r2, [r3, #0]
	set_state = SET_INIT;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <traffic_init+0x3c>)
 8000cb6:	2228      	movs	r2, #40	; 0x28
 8000cb8:	701a      	strb	r2, [r3, #0]
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc80      	pop	{r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000118 	.word	0x20000118
 8000cc8:	20000119 	.word	0x20000119
 8000ccc:	2000011a 	.word	0x2000011a
 8000cd0:	2000011b 	.word	0x2000011b
 8000cd4:	2000011c 	.word	0x2000011c

08000cd8 <traffic_auto_fsm_A>:

/*------------------- auto fsm -------------------------*/
void traffic_auto_fsm_A() {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	switch(auto_A_state) {
 8000cdc:	4b32      	ldr	r3, [pc, #200]	; (8000da8 <traffic_auto_fsm_A+0xd0>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	3b14      	subs	r3, #20
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d85c      	bhi.n	8000da0 <traffic_auto_fsm_A+0xc8>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <traffic_auto_fsm_A+0x14>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000cfd 	.word	0x08000cfd
 8000cf0:	08000d11 	.word	0x08000d11
 8000cf4:	08000d41 	.word	0x08000d41
 8000cf8:	08000d71 	.word	0x08000d71
	case AUTO_INIT:
		auto_A_state = AUTO_RED;
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <traffic_auto_fsm_A+0xd0>)
 8000cfe:	2215      	movs	r2, #21
 8000d00:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000d02:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <traffic_auto_fsm_A+0xd4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4619      	mov	r1, r3
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff ff47 	bl	8000b9c <timer_setDuration>
		break;
 8000d0e:	e048      	b.n	8000da2 <traffic_auto_fsm_A+0xca>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff ff5d 	bl	8000bd0 <timer_checkFlag>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d008      	beq.n	8000d2e <traffic_auto_fsm_A+0x56>
			auto_A_state = AUTO_GREEN;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <traffic_auto_fsm_A+0xd0>)
 8000d1e:	2216      	movs	r2, #22
 8000d20:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000d22:	4b22      	ldr	r3, [pc, #136]	; (8000dac <traffic_auto_fsm_A+0xd4>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4619      	mov	r1, r3
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff ff37 	bl	8000b9c <timer_setDuration>
		}

		led_turn_on(TRAFFIC_1, LED_RED);
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2005      	movs	r0, #5
 8000d32:	f7ff fb25 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_1, LED_YELLOW);
 8000d36:	2102      	movs	r1, #2
 8000d38:	2005      	movs	r0, #5
 8000d3a:	f7ff fb77 	bl	800042c <led_turn_off>
		break;
 8000d3e:	e030      	b.n	8000da2 <traffic_auto_fsm_A+0xca>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff ff45 	bl	8000bd0 <timer_checkFlag>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d008      	beq.n	8000d5e <traffic_auto_fsm_A+0x86>
			auto_A_state = AUTO_YELLOW;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <traffic_auto_fsm_A+0xd0>)
 8000d4e:	2217      	movs	r2, #23
 8000d50:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <traffic_auto_fsm_A+0xd4>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	4619      	mov	r1, r3
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff ff1f 	bl	8000b9c <timer_setDuration>
		}

		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000d5e:	2101      	movs	r1, #1
 8000d60:	2005      	movs	r0, #5
 8000d62:	f7ff fb0d 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_1, LED_RED);
 8000d66:	2100      	movs	r1, #0
 8000d68:	2005      	movs	r0, #5
 8000d6a:	f7ff fb5f 	bl	800042c <led_turn_off>
		break;
 8000d6e:	e018      	b.n	8000da2 <traffic_auto_fsm_A+0xca>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff ff2d 	bl	8000bd0 <timer_checkFlag>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d008      	beq.n	8000d8e <traffic_auto_fsm_A+0xb6>
			auto_A_state = AUTO_RED;
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <traffic_auto_fsm_A+0xd0>)
 8000d7e:	2215      	movs	r2, #21
 8000d80:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <traffic_auto_fsm_A+0xd4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4619      	mov	r1, r3
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff ff07 	bl	8000b9c <timer_setDuration>
		}

		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000d8e:	2102      	movs	r1, #2
 8000d90:	2005      	movs	r0, #5
 8000d92:	f7ff faf5 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_1, LED_GREEN);
 8000d96:	2101      	movs	r1, #1
 8000d98:	2005      	movs	r0, #5
 8000d9a:	f7ff fb47 	bl	800042c <led_turn_off>
		break;
 8000d9e:	e000      	b.n	8000da2 <traffic_auto_fsm_A+0xca>

	/////////////////////////////////////////////////////
	default:
		break;
 8000da0:	bf00      	nop
	}
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000119 	.word	0x20000119
 8000dac:	20000054 	.word	0x20000054

08000db0 <traffic_auto_fsm_B>:

void traffic_auto_fsm_B() {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	switch(auto_B_state) {
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <traffic_auto_fsm_B+0xd0>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	3b14      	subs	r3, #20
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d85c      	bhi.n	8000e78 <traffic_auto_fsm_B+0xc8>
 8000dbe:	a201      	add	r2, pc, #4	; (adr r2, 8000dc4 <traffic_auto_fsm_B+0x14>)
 8000dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc4:	08000dd5 	.word	0x08000dd5
 8000dc8:	08000de9 	.word	0x08000de9
 8000dcc:	08000e19 	.word	0x08000e19
 8000dd0:	08000e49 	.word	0x08000e49
	case AUTO_INIT:
		auto_B_state = AUTO_GREEN;
 8000dd4:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <traffic_auto_fsm_B+0xd0>)
 8000dd6:	2216      	movs	r2, #22
 8000dd8:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <traffic_auto_fsm_B+0xd4>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	4619      	mov	r1, r3
 8000de0:	2002      	movs	r0, #2
 8000de2:	f7ff fedb 	bl	8000b9c <timer_setDuration>
		break;
 8000de6:	e048      	b.n	8000e7a <traffic_auto_fsm_B+0xca>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000de8:	2002      	movs	r0, #2
 8000dea:	f7ff fef1 	bl	8000bd0 <timer_checkFlag>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d008      	beq.n	8000e06 <traffic_auto_fsm_B+0x56>
			auto_B_state = AUTO_GREEN;
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <traffic_auto_fsm_B+0xd0>)
 8000df6:	2216      	movs	r2, #22
 8000df8:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <traffic_auto_fsm_B+0xd4>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	2002      	movs	r0, #2
 8000e02:	f7ff fecb 	bl	8000b9c <timer_setDuration>
		}

		led_turn_on(TRAFFIC_2, LED_RED);
 8000e06:	2100      	movs	r1, #0
 8000e08:	2006      	movs	r0, #6
 8000e0a:	f7ff fab9 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_2, LED_YELLOW);
 8000e0e:	2102      	movs	r1, #2
 8000e10:	2006      	movs	r0, #6
 8000e12:	f7ff fb0b 	bl	800042c <led_turn_off>
		break;
 8000e16:	e030      	b.n	8000e7a <traffic_auto_fsm_B+0xca>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f7ff fed9 	bl	8000bd0 <timer_checkFlag>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d008      	beq.n	8000e36 <traffic_auto_fsm_B+0x86>
			auto_B_state = AUTO_YELLOW;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <traffic_auto_fsm_B+0xd0>)
 8000e26:	2217      	movs	r2, #23
 8000e28:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <traffic_auto_fsm_B+0xd4>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff feb3 	bl	8000b9c <timer_setDuration>
		}

		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000e36:	2101      	movs	r1, #1
 8000e38:	2006      	movs	r0, #6
 8000e3a:	f7ff faa1 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_2, LED_RED);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2006      	movs	r0, #6
 8000e42:	f7ff faf3 	bl	800042c <led_turn_off>
		break;
 8000e46:	e018      	b.n	8000e7a <traffic_auto_fsm_B+0xca>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff fec1 	bl	8000bd0 <timer_checkFlag>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d008      	beq.n	8000e66 <traffic_auto_fsm_B+0xb6>
			auto_B_state = AUTO_RED;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <traffic_auto_fsm_B+0xd0>)
 8000e56:	2215      	movs	r2, #21
 8000e58:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <traffic_auto_fsm_B+0xd4>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff fe9b 	bl	8000b9c <timer_setDuration>
		}

		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000e66:	2102      	movs	r1, #2
 8000e68:	2006      	movs	r0, #6
 8000e6a:	f7ff fa89 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_2, LED_GREEN);
 8000e6e:	2101      	movs	r1, #1
 8000e70:	2006      	movs	r0, #6
 8000e72:	f7ff fadb 	bl	800042c <led_turn_off>
		break;
 8000e76:	e000      	b.n	8000e7a <traffic_auto_fsm_B+0xca>

	/////////////////////////////////////////////////////
	default:
		break;
 8000e78:	bf00      	nop
	}
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000011a 	.word	0x2000011a
 8000e84:	20000054 	.word	0x20000054

08000e88 <traffic_manual_fsm>:

/*----------------- manual fsm -------------------------*/
void traffic_manual_fsm() {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	switch(manual_state) {
 8000e8c:	4b3d      	ldr	r3, [pc, #244]	; (8000f84 <traffic_manual_fsm+0xfc>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3b1e      	subs	r3, #30
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d872      	bhi.n	8000f7c <traffic_manual_fsm+0xf4>
 8000e96:	a201      	add	r2, pc, #4	; (adr r2, 8000e9c <traffic_manual_fsm+0x14>)
 8000e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9c:	08000eb1 	.word	0x08000eb1
 8000ea0:	08000ebd 	.word	0x08000ebd
 8000ea4:	08000ef1 	.word	0x08000ef1
 8000ea8:	08000f1d 	.word	0x08000f1d
 8000eac:	08000f51 	.word	0x08000f51
	case MN_INIT:
		led_clear_all();
 8000eb0:	f7ff fa5a 	bl	8000368 <led_clear_all>
		manual_state = MN_RED0;
 8000eb4:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <traffic_manual_fsm+0xfc>)
 8000eb6:	221f      	movs	r2, #31
 8000eb8:	701a      	strb	r2, [r3, #0]
		break;
 8000eba:	e060      	b.n	8000f7e <traffic_manual_fsm+0xf6>

	///////////////////////////////////////////////////////////
	case MN_RED0:
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fa25 	bl	800030c <button_isPressed>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <traffic_manual_fsm+0x46>
			manual_state = MN_RED1;
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <traffic_manual_fsm+0xfc>)
 8000eca:	2220      	movs	r2, #32
 8000ecc:	701a      	strb	r2, [r3, #0]
		}

		led_turn_off(TRAFFIC_1, LED_YELLOW);
 8000ece:	2102      	movs	r1, #2
 8000ed0:	2005      	movs	r0, #5
 8000ed2:	f7ff faab 	bl	800042c <led_turn_off>
		led_turn_off(TRAFFIC_2, LED_RED);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	2006      	movs	r0, #6
 8000eda:	f7ff faa7 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_RED);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2005      	movs	r0, #5
 8000ee2:	f7ff fa4d 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2006      	movs	r0, #6
 8000eea:	f7ff fa49 	bl	8000380 <led_turn_on>
		break;
 8000eee:	e046      	b.n	8000f7e <traffic_manual_fsm+0xf6>

	///////////////////////////////////////////////////////////
	case MN_RED1:
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff fa0b 	bl	800030c <button_isPressed>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <traffic_manual_fsm+0x7a>
			manual_state = MN_GREEN;
 8000efc:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <traffic_manual_fsm+0xfc>)
 8000efe:	2221      	movs	r2, #33	; 0x21
 8000f00:	701a      	strb	r2, [r3, #0]
		}

		led_turn_off(TRAFFIC_2, LED_GREEN);
 8000f02:	2101      	movs	r1, #1
 8000f04:	2006      	movs	r0, #6
 8000f06:	f7ff fa91 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_RED);
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	2005      	movs	r0, #5
 8000f0e:	f7ff fa37 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000f12:	2102      	movs	r1, #2
 8000f14:	2006      	movs	r0, #6
 8000f16:	f7ff fa33 	bl	8000380 <led_turn_on>
		break;
 8000f1a:	e030      	b.n	8000f7e <traffic_manual_fsm+0xf6>

	///////////////////////////////////////////////////////////
	case MN_GREEN:
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f7ff f9f5 	bl	800030c <button_isPressed>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <traffic_manual_fsm+0xa6>
			manual_state = MN_YELLOW;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <traffic_manual_fsm+0xfc>)
 8000f2a:	2222      	movs	r2, #34	; 0x22
 8000f2c:	701a      	strb	r2, [r3, #0]
		}

		led_turn_off(TRAFFIC_1, LED_RED);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2005      	movs	r0, #5
 8000f32:	f7ff fa7b 	bl	800042c <led_turn_off>
		led_turn_off(TRAFFIC_2, LED_YELLOW);
 8000f36:	2102      	movs	r1, #2
 8000f38:	2006      	movs	r0, #6
 8000f3a:	f7ff fa77 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2005      	movs	r0, #5
 8000f42:	f7ff fa1d 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2006      	movs	r0, #6
 8000f4a:	f7ff fa19 	bl	8000380 <led_turn_on>
		break;
 8000f4e:	e016      	b.n	8000f7e <traffic_manual_fsm+0xf6>

	///////////////////////////////////////////////////////////
	case MN_YELLOW:
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff f9db 	bl	800030c <button_isPressed>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <traffic_manual_fsm+0xda>
			manual_state = MN_RED0;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <traffic_manual_fsm+0xfc>)
 8000f5e:	221f      	movs	r2, #31
 8000f60:	701a      	strb	r2, [r3, #0]
		}

		led_turn_off(TRAFFIC_1, LED_GREEN);
 8000f62:	2101      	movs	r1, #1
 8000f64:	2005      	movs	r0, #5
 8000f66:	f7ff fa61 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	2005      	movs	r0, #5
 8000f6e:	f7ff fa07 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000f72:	2100      	movs	r1, #0
 8000f74:	2006      	movs	r0, #6
 8000f76:	f7ff fa03 	bl	8000380 <led_turn_on>
		break;
 8000f7a:	e000      	b.n	8000f7e <traffic_manual_fsm+0xf6>

	///////////////////////////////////////////////////////////
	default:
		break;
 8000f7c:	bf00      	nop
	}
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000011b 	.word	0x2000011b

08000f88 <duration_inc>:

/*-------------------- set fsm -------------------------*/
void duration_inc(uint8_t led_type) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
	trafficDuration[led_type] += DURATION_UNIT;
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <duration_inc+0x50>)
 8000f96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000fa0:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <duration_inc+0x50>)
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (trafficDuration[led_type] > DURATION_MAX) { //if duration over max, reset to DURATION_UNIT
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <duration_inc+0x50>)
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d90a      	bls.n	8000fcc <duration_inc+0x44>
		trafficDuration[led_type] -= DURATION_MAX;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <duration_inc+0x50>)
 8000fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbe:	79fa      	ldrb	r2, [r7, #7]
 8000fc0:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000fc4:	3b10      	subs	r3, #16
 8000fc6:	4904      	ldr	r1, [pc, #16]	; (8000fd8 <duration_inc+0x50>)
 8000fc8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000054 	.word	0x20000054

08000fdc <traffic_set_fsm>:

void traffic_set_fsm() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	switch(set_state) {
 8000fe0:	4b8b      	ldr	r3, [pc, #556]	; (8001210 <traffic_set_fsm+0x234>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3b28      	subs	r3, #40	; 0x28
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	f200 8108 	bhi.w	80011fc <traffic_set_fsm+0x220>
 8000fec:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <traffic_set_fsm+0x18>)
 8000fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff2:	bf00      	nop
 8000ff4:	08001005 	.word	0x08001005
 8000ff8:	08001019 	.word	0x08001019
 8000ffc:	080010bd 	.word	0x080010bd
 8001000:	0800115d 	.word	0x0800115d
	case SET_INIT:
		set_state = SET_RED;
 8001004:	4b82      	ldr	r3, [pc, #520]	; (8001210 <traffic_set_fsm+0x234>)
 8001006:	2229      	movs	r2, #41	; 0x29
 8001008:	701a      	strb	r2, [r3, #0]
		uart_send_num("Led red: ", trafficDuration[LED_RED]);
 800100a:	4b82      	ldr	r3, [pc, #520]	; (8001214 <traffic_set_fsm+0x238>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4619      	mov	r1, r3
 8001010:	4881      	ldr	r0, [pc, #516]	; (8001218 <traffic_set_fsm+0x23c>)
 8001012:	f000 fa3d 	bl	8001490 <uart_send_num>
		break;
 8001016:	e0f8      	b.n	800120a <traffic_set_fsm+0x22e>
	case SET_RED:
		//change led
		if (button_isPressed(BTN_2)) {
 8001018:	2001      	movs	r0, #1
 800101a:	f7ff f977 	bl	800030c <button_isPressed>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d008      	beq.n	8001036 <traffic_set_fsm+0x5a>
			set_state = SET_GREEN;
 8001024:	4b7a      	ldr	r3, [pc, #488]	; (8001210 <traffic_set_fsm+0x234>)
 8001026:	222a      	movs	r2, #42	; 0x2a
 8001028:	701a      	strb	r2, [r3, #0]
#ifdef PROTEUS
			uart_send_num("Led green: ", trafficDuration[LED_GREEN]);
 800102a:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <traffic_set_fsm+0x238>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4619      	mov	r1, r3
 8001030:	487a      	ldr	r0, [pc, #488]	; (800121c <traffic_set_fsm+0x240>)
 8001032:	f000 fa2d 	bl	8001490 <uart_send_num>
#endif
		}
		//TODO
		led_turn_off(TRAFFIC_1, LED_YELLOW);
 8001036:	2102      	movs	r1, #2
 8001038:	2005      	movs	r0, #5
 800103a:	f7ff f9f7 	bl	800042c <led_turn_off>
		led_turn_off(TRAFFIC_2, LED_YELLOW);
 800103e:	2102      	movs	r1, #2
 8001040:	2006      	movs	r0, #6
 8001042:	f7ff f9f3 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_RED);
 8001046:	2100      	movs	r1, #0
 8001048:	2005      	movs	r0, #5
 800104a:	f7ff f999 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 800104e:	2100      	movs	r1, #0
 8001050:	2006      	movs	r0, #6
 8001052:	f7ff f995 	bl	8000380 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8001056:	2002      	movs	r0, #2
 8001058:	f7ff f958 	bl	800030c <button_isPressed>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00f      	beq.n	8001082 <traffic_set_fsm+0xa6>
			duration_inc(LED_RED);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff ff90 	bl	8000f88 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8001068:	2003      	movs	r0, #3
 800106a:	f7ff fdc9 	bl	8000c00 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 800106e:	210a      	movs	r1, #10
 8001070:	2003      	movs	r0, #3
 8001072:	f7ff fd93 	bl	8000b9c <timer_setDuration>
#ifdef PROTEUS
			uart_send_num("Changing: ", trafficDuration[LED_RED]);
 8001076:	4b67      	ldr	r3, [pc, #412]	; (8001214 <traffic_set_fsm+0x238>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	4868      	ldr	r0, [pc, #416]	; (8001220 <traffic_set_fsm+0x244>)
 800107e:	f000 fa07 	bl	8001490 <uart_send_num>
#endif
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8001082:	2002      	movs	r0, #2
 8001084:	f7ff f95c 	bl	8000340 <button_isLongPressed>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 80b8 	beq.w	8001200 <traffic_set_fsm+0x224>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8001090:	2003      	movs	r0, #3
 8001092:	f7ff fd9d 	bl	8000bd0 <timer_checkFlag>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80b1 	beq.w	8001200 <traffic_set_fsm+0x224>
				duration_inc(LED_RED);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff ff72 	bl	8000f88 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 80010a4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010a8:	2003      	movs	r0, #3
 80010aa:	f7ff fd77 	bl	8000b9c <timer_setDuration>
#ifdef PROTEUS
				uart_send_num("Changing 2: ", trafficDuration[LED_RED]);
 80010ae:	4b59      	ldr	r3, [pc, #356]	; (8001214 <traffic_set_fsm+0x238>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4619      	mov	r1, r3
 80010b4:	485b      	ldr	r0, [pc, #364]	; (8001224 <traffic_set_fsm+0x248>)
 80010b6:	f000 f9eb 	bl	8001490 <uart_send_num>
#endif
			}
		}

		break;
 80010ba:	e0a1      	b.n	8001200 <traffic_set_fsm+0x224>
	case SET_GREEN:
		//change led
		if (button_isPressed(BTN_2)){
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff f925 	bl	800030c <button_isPressed>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <traffic_set_fsm+0xfe>
			set_state = SET_YELLOW;
 80010c8:	4b51      	ldr	r3, [pc, #324]	; (8001210 <traffic_set_fsm+0x234>)
 80010ca:	222b      	movs	r2, #43	; 0x2b
 80010cc:	701a      	strb	r2, [r3, #0]
#ifdef PROTEUS
			uart_send_num("Led yellow: ", trafficDuration[LED_YELLOW]);
 80010ce:	4b51      	ldr	r3, [pc, #324]	; (8001214 <traffic_set_fsm+0x238>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4854      	ldr	r0, [pc, #336]	; (8001228 <traffic_set_fsm+0x24c>)
 80010d6:	f000 f9db 	bl	8001490 <uart_send_num>
#endif
		}

		//TODO
		led_turn_off(TRAFFIC_1, LED_RED);
 80010da:	2100      	movs	r1, #0
 80010dc:	2005      	movs	r0, #5
 80010de:	f7ff f9a5 	bl	800042c <led_turn_off>
		led_turn_off(TRAFFIC_2, LED_RED);
 80010e2:	2100      	movs	r1, #0
 80010e4:	2006      	movs	r0, #6
 80010e6:	f7ff f9a1 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_GREEN);
 80010ea:	2101      	movs	r1, #1
 80010ec:	2005      	movs	r0, #5
 80010ee:	f7ff f947 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 80010f2:	2101      	movs	r1, #1
 80010f4:	2006      	movs	r0, #6
 80010f6:	f7ff f943 	bl	8000380 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff f906 	bl	800030c <button_isPressed>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00f      	beq.n	8001126 <traffic_set_fsm+0x14a>
			duration_inc(LED_GREEN);
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff ff3e 	bl	8000f88 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 800110c:	2003      	movs	r0, #3
 800110e:	f7ff fd77 	bl	8000c00 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8001112:	210a      	movs	r1, #10
 8001114:	2003      	movs	r0, #3
 8001116:	f7ff fd41 	bl	8000b9c <timer_setDuration>
#ifdef PROTEUS
			uart_send_num("Changing: ", trafficDuration[LED_GREEN]);
 800111a:	4b3e      	ldr	r3, [pc, #248]	; (8001214 <traffic_set_fsm+0x238>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4619      	mov	r1, r3
 8001120:	483f      	ldr	r0, [pc, #252]	; (8001220 <traffic_set_fsm+0x244>)
 8001122:	f000 f9b5 	bl	8001490 <uart_send_num>
#endif
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8001126:	2002      	movs	r0, #2
 8001128:	f7ff f90a 	bl	8000340 <button_isLongPressed>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d068      	beq.n	8001204 <traffic_set_fsm+0x228>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8001132:	2003      	movs	r0, #3
 8001134:	f7ff fd4c 	bl	8000bd0 <timer_checkFlag>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d062      	beq.n	8001204 <traffic_set_fsm+0x228>
				duration_inc(LED_GREEN);
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff ff22 	bl	8000f88 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8001144:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001148:	2003      	movs	r0, #3
 800114a:	f7ff fd27 	bl	8000b9c <timer_setDuration>
#ifdef PROTEUS
				uart_send_num("Changing 2: ", trafficDuration[LED_GREEN]);
 800114e:	4b31      	ldr	r3, [pc, #196]	; (8001214 <traffic_set_fsm+0x238>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4619      	mov	r1, r3
 8001154:	4833      	ldr	r0, [pc, #204]	; (8001224 <traffic_set_fsm+0x248>)
 8001156:	f000 f99b 	bl	8001490 <uart_send_num>
#endif
			}
		}

		break;
 800115a:	e053      	b.n	8001204 <traffic_set_fsm+0x228>
	case SET_YELLOW:
		//change led
		if (button_isPressed(BTN_2)){
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff f8d5 	bl	800030c <button_isPressed>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <traffic_set_fsm+0x19e>
			set_state = SET_RED;
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <traffic_set_fsm+0x234>)
 800116a:	2229      	movs	r2, #41	; 0x29
 800116c:	701a      	strb	r2, [r3, #0]
#ifdef PROTEUS
			uart_send_num("Led red: ", trafficDuration[LED_RED]);
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <traffic_set_fsm+0x238>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	4828      	ldr	r0, [pc, #160]	; (8001218 <traffic_set_fsm+0x23c>)
 8001176:	f000 f98b 	bl	8001490 <uart_send_num>
#endif
		}

		//TODO
		led_turn_off(TRAFFIC_1, LED_GREEN);
 800117a:	2101      	movs	r1, #1
 800117c:	2005      	movs	r0, #5
 800117e:	f7ff f955 	bl	800042c <led_turn_off>
		led_turn_off(TRAFFIC_2, LED_GREEN);
 8001182:	2101      	movs	r1, #1
 8001184:	2006      	movs	r0, #6
 8001186:	f7ff f951 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 800118a:	2102      	movs	r1, #2
 800118c:	2005      	movs	r0, #5
 800118e:	f7ff f8f7 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8001192:	2102      	movs	r1, #2
 8001194:	2006      	movs	r0, #6
 8001196:	f7ff f8f3 	bl	8000380 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 800119a:	2002      	movs	r0, #2
 800119c:	f7ff f8b6 	bl	800030c <button_isPressed>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00f      	beq.n	80011c6 <traffic_set_fsm+0x1ea>
			duration_inc(LED_YELLOW);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f7ff feee 	bl	8000f88 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f7ff fd27 	bl	8000c00 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 80011b2:	210a      	movs	r1, #10
 80011b4:	2003      	movs	r0, #3
 80011b6:	f7ff fcf1 	bl	8000b9c <timer_setDuration>
#ifdef PROTEUS
			uart_send_num("Changing: ", trafficDuration[LED_YELLOW]);
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <traffic_set_fsm+0x238>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	4619      	mov	r1, r3
 80011c0:	4817      	ldr	r0, [pc, #92]	; (8001220 <traffic_set_fsm+0x244>)
 80011c2:	f000 f965 	bl	8001490 <uart_send_num>
#endif
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 80011c6:	2002      	movs	r0, #2
 80011c8:	f7ff f8ba 	bl	8000340 <button_isLongPressed>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d01a      	beq.n	8001208 <traffic_set_fsm+0x22c>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 80011d2:	2003      	movs	r0, #3
 80011d4:	f7ff fcfc 	bl	8000bd0 <timer_checkFlag>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d014      	beq.n	8001208 <traffic_set_fsm+0x22c>
				duration_inc(LED_YELLOW);
 80011de:	2002      	movs	r0, #2
 80011e0:	f7ff fed2 	bl	8000f88 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 80011e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011e8:	2003      	movs	r0, #3
 80011ea:	f7ff fcd7 	bl	8000b9c <timer_setDuration>
#ifdef PROTEUS
				uart_send_num("Changing 2: ", trafficDuration[LED_YELLOW]);
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <traffic_set_fsm+0x238>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	4619      	mov	r1, r3
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <traffic_set_fsm+0x248>)
 80011f6:	f000 f94b 	bl	8001490 <uart_send_num>
#endif
			}
		}

		break;
 80011fa:	e005      	b.n	8001208 <traffic_set_fsm+0x22c>
	default:
		break;
 80011fc:	bf00      	nop
 80011fe:	e004      	b.n	800120a <traffic_set_fsm+0x22e>
		break;
 8001200:	bf00      	nop
 8001202:	e002      	b.n	800120a <traffic_set_fsm+0x22e>
		break;
 8001204:	bf00      	nop
 8001206:	e000      	b.n	800120a <traffic_set_fsm+0x22e>
		break;
 8001208:	bf00      	nop
	}
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000011c 	.word	0x2000011c
 8001214:	20000054 	.word	0x20000054
 8001218:	08004064 	.word	0x08004064
 800121c:	08004070 	.word	0x08004070
 8001220:	0800407c 	.word	0x0800407c
 8001224:	08004088 	.word	0x08004088
 8001228:	08004098 	.word	0x08004098

0800122c <traffic_fsm>:

/*----------------- global fsm -------------------------*/
void traffic_fsm() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	switch(global_state) {
 8001230:	4b6f      	ldr	r3, [pc, #444]	; (80013f0 <traffic_fsm+0x1c4>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	3b0a      	subs	r3, #10
 8001236:	2b03      	cmp	r3, #3
 8001238:	f200 80d6 	bhi.w	80013e8 <traffic_fsm+0x1bc>
 800123c:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <traffic_fsm+0x18>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	08001255 	.word	0x08001255
 8001248:	08001267 	.word	0x08001267
 800124c:	080012d7 	.word	0x080012d7
 8001250:	08001301 	.word	0x08001301
	case INIT_MODE:
		led_clear_all();
 8001254:	f7ff f888 	bl	8000368 <led_clear_all>
		global_state = AUTO_MODE;
 8001258:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <traffic_fsm+0x1c4>)
 800125a:	220b      	movs	r2, #11
 800125c:	701a      	strb	r2, [r3, #0]
#ifdef PROTEUS
		uart_send_str("AUTO MODE:");
 800125e:	4865      	ldr	r0, [pc, #404]	; (80013f4 <traffic_fsm+0x1c8>)
 8001260:	f000 f8f4 	bl	800144c <uart_send_str>
#endif
		break;
 8001264:	e0c3      	b.n	80013ee <traffic_fsm+0x1c2>

	///////////////////////////////////////////////
	case AUTO_MODE:
		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff f850 	bl	800030c <button_isPressed>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d02c      	beq.n	80012cc <traffic_fsm+0xa0>
#ifdef PROTEUS
			uart_send_str("MANUAL MODE:");
 8001272:	4861      	ldr	r0, [pc, #388]	; (80013f8 <traffic_fsm+0x1cc>)
 8001274:	f000 f8ea 	bl	800144c <uart_send_str>
#endif
			led_clear_all();
 8001278:	f7ff f876 	bl	8000368 <led_clear_all>
			global_state = MANUAL_MODE;
 800127c:	4b5c      	ldr	r3, [pc, #368]	; (80013f0 <traffic_fsm+0x1c4>)
 800127e:	220c      	movs	r2, #12
 8001280:	701a      	strb	r2, [r3, #0]
			switch (auto_A_state) { //manual mode with previous auto state
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <traffic_fsm+0x1d0>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b17      	cmp	r3, #23
 8001288:	d01a      	beq.n	80012c0 <traffic_fsm+0x94>
 800128a:	2b17      	cmp	r3, #23
 800128c:	dc1c      	bgt.n	80012c8 <traffic_fsm+0x9c>
 800128e:	2b15      	cmp	r3, #21
 8001290:	d002      	beq.n	8001298 <traffic_fsm+0x6c>
 8001292:	2b16      	cmp	r3, #22
 8001294:	d010      	beq.n	80012b8 <traffic_fsm+0x8c>
				break;
			case AUTO_YELLOW:
				manual_state = MN_YELLOW;
				break;
			default:
				break;
 8001296:	e017      	b.n	80012c8 <traffic_fsm+0x9c>
				switch (auto_B_state){
 8001298:	4b59      	ldr	r3, [pc, #356]	; (8001400 <traffic_fsm+0x1d4>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b16      	cmp	r3, #22
 800129e:	d002      	beq.n	80012a6 <traffic_fsm+0x7a>
 80012a0:	2b17      	cmp	r3, #23
 80012a2:	d004      	beq.n	80012ae <traffic_fsm+0x82>
				break;
 80012a4:	e011      	b.n	80012ca <traffic_fsm+0x9e>
					manual_state = MN_RED0;
 80012a6:	4b57      	ldr	r3, [pc, #348]	; (8001404 <traffic_fsm+0x1d8>)
 80012a8:	221f      	movs	r2, #31
 80012aa:	701a      	strb	r2, [r3, #0]
					break;
 80012ac:	e003      	b.n	80012b6 <traffic_fsm+0x8a>
					manual_state = MN_RED1;
 80012ae:	4b55      	ldr	r3, [pc, #340]	; (8001404 <traffic_fsm+0x1d8>)
 80012b0:	2220      	movs	r2, #32
 80012b2:	701a      	strb	r2, [r3, #0]
					break;
 80012b4:	bf00      	nop
				break;
 80012b6:	e008      	b.n	80012ca <traffic_fsm+0x9e>
				manual_state = MN_GREEN;
 80012b8:	4b52      	ldr	r3, [pc, #328]	; (8001404 <traffic_fsm+0x1d8>)
 80012ba:	2221      	movs	r2, #33	; 0x21
 80012bc:	701a      	strb	r2, [r3, #0]
				break;
 80012be:	e004      	b.n	80012ca <traffic_fsm+0x9e>
				manual_state = MN_YELLOW;
 80012c0:	4b50      	ldr	r3, [pc, #320]	; (8001404 <traffic_fsm+0x1d8>)
 80012c2:	2222      	movs	r2, #34	; 0x22
 80012c4:	701a      	strb	r2, [r3, #0]
				break;
 80012c6:	e000      	b.n	80012ca <traffic_fsm+0x9e>
				break;
 80012c8:	bf00      	nop
			}
			return;
 80012ca:	e090      	b.n	80013ee <traffic_fsm+0x1c2>
		}

		//TODO
		traffic_auto_fsm_A();
 80012cc:	f7ff fd04 	bl	8000cd8 <traffic_auto_fsm_A>
		traffic_auto_fsm_B();
 80012d0:	f7ff fd6e 	bl	8000db0 <traffic_auto_fsm_B>
		break;
 80012d4:	e08b      	b.n	80013ee <traffic_fsm+0x1c2>

	///////////////////////////////////////////////
	case MANUAL_MODE:
		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff f818 	bl	800030c <button_isPressed>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <traffic_fsm+0xce>
#ifdef PROTEUS
			uart_send_str("SET MODE:");
 80012e2:	4849      	ldr	r0, [pc, #292]	; (8001408 <traffic_fsm+0x1dc>)
 80012e4:	f000 f8b2 	bl	800144c <uart_send_str>
#endif
			global_state = SET_MODE;
 80012e8:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <traffic_fsm+0x1c4>)
 80012ea:	220d      	movs	r2, #13
 80012ec:	701a      	strb	r2, [r3, #0]
			set_state = SET_INIT;
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <traffic_fsm+0x1e0>)
 80012f0:	2228      	movs	r2, #40	; 0x28
 80012f2:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 80012f4:	f7ff f838 	bl	8000368 <led_clear_all>
			return;
 80012f8:	e079      	b.n	80013ee <traffic_fsm+0x1c2>
		}

		//TODO
		traffic_manual_fsm();
 80012fa:	f7ff fdc5 	bl	8000e88 <traffic_manual_fsm>
		break;
 80012fe:	e076      	b.n	80013ee <traffic_fsm+0x1c2>

	///////////////////////////////////////////////
	case SET_MODE:
		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff f803 	bl	800030c <button_isPressed>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d06a      	beq.n	80013e2 <traffic_fsm+0x1b6>
#ifdef PROTEUS
			uart_send_str("AUTO MODE:");
 800130c:	4839      	ldr	r0, [pc, #228]	; (80013f4 <traffic_fsm+0x1c8>)
 800130e:	f000 f89d 	bl	800144c <uart_send_str>
#endif
			global_state = AUTO_MODE;
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <traffic_fsm+0x1c4>)
 8001314:	220b      	movs	r2, #11
 8001316:	701a      	strb	r2, [r3, #0]
			timer_clear(TIMER_AUTO_A);
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fc71 	bl	8000c00 <timer_clear>
			timer_clear(TIMER_AUTO_B);
 800131e:	2002      	movs	r0, #2
 8001320:	f7ff fc6e 	bl	8000c00 <timer_clear>
			led_clear_all();
 8001324:	f7ff f820 	bl	8000368 <led_clear_all>
			switch(manual_state) { //auto mode with previous manual state
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <traffic_fsm+0x1d8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	3b1f      	subs	r3, #31
 800132e:	2b03      	cmp	r3, #3
 8001330:	d85c      	bhi.n	80013ec <traffic_fsm+0x1c0>
 8001332:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <traffic_fsm+0x10c>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	08001349 	.word	0x08001349
 800133c:	0800136f 	.word	0x0800136f
 8001340:	08001395 	.word	0x08001395
 8001344:	080013bb 	.word	0x080013bb
			case MN_RED0:
				auto_A_state = AUTO_RED;
 8001348:	4b2c      	ldr	r3, [pc, #176]	; (80013fc <traffic_fsm+0x1d0>)
 800134a:	2215      	movs	r2, #21
 800134c:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <traffic_fsm+0x1e4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	2001      	movs	r0, #1
 8001356:	f7ff fc21 	bl	8000b9c <timer_setDuration>
				auto_B_state = AUTO_GREEN;
 800135a:	4b29      	ldr	r3, [pc, #164]	; (8001400 <traffic_fsm+0x1d4>)
 800135c:	2216      	movs	r2, #22
 800135e:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <traffic_fsm+0x1e4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4619      	mov	r1, r3
 8001366:	2002      	movs	r0, #2
 8001368:	f7ff fc18 	bl	8000b9c <timer_setDuration>
				break;
 800136c:	e038      	b.n	80013e0 <traffic_fsm+0x1b4>
			case MN_RED1:
				auto_A_state = AUTO_RED;
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <traffic_fsm+0x1d0>)
 8001370:	2215      	movs	r2, #21
 8001372:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <traffic_fsm+0x1e4>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4619      	mov	r1, r3
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff fc0e 	bl	8000b9c <timer_setDuration>
				auto_B_state = AUTO_YELLOW;
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <traffic_fsm+0x1d4>)
 8001382:	2217      	movs	r2, #23
 8001384:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <traffic_fsm+0x1e4>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	4619      	mov	r1, r3
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff fc05 	bl	8000b9c <timer_setDuration>
				break;
 8001392:	e025      	b.n	80013e0 <traffic_fsm+0x1b4>
			case MN_GREEN:
				auto_A_state = AUTO_GREEN;
 8001394:	4b19      	ldr	r3, [pc, #100]	; (80013fc <traffic_fsm+0x1d0>)
 8001396:	2216      	movs	r2, #22
 8001398:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <traffic_fsm+0x1e4>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4619      	mov	r1, r3
 80013a0:	2001      	movs	r0, #1
 80013a2:	f7ff fbfb 	bl	8000b9c <timer_setDuration>
				auto_B_state = AUTO_RED;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <traffic_fsm+0x1d4>)
 80013a8:	2215      	movs	r2, #21
 80013aa:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <traffic_fsm+0x1e4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	2002      	movs	r0, #2
 80013b4:	f7ff fbf2 	bl	8000b9c <timer_setDuration>
				break;
 80013b8:	e012      	b.n	80013e0 <traffic_fsm+0x1b4>
			case MN_YELLOW:
				auto_A_state = AUTO_YELLOW;
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <traffic_fsm+0x1d0>)
 80013bc:	2217      	movs	r2, #23
 80013be:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <traffic_fsm+0x1e4>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	4619      	mov	r1, r3
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff fbe8 	bl	8000b9c <timer_setDuration>
				auto_B_state = AUTO_RED;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <traffic_fsm+0x1d4>)
 80013ce:	2215      	movs	r2, #21
 80013d0:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <traffic_fsm+0x1e4>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	4619      	mov	r1, r3
 80013d8:	2002      	movs	r0, #2
 80013da:	f7ff fbdf 	bl	8000b9c <timer_setDuration>
				break;
 80013de:	bf00      	nop
			}
			return;
 80013e0:	e004      	b.n	80013ec <traffic_fsm+0x1c0>
		}

		//TODO
		traffic_set_fsm();
 80013e2:	f7ff fdfb 	bl	8000fdc <traffic_set_fsm>
		break;
 80013e6:	e002      	b.n	80013ee <traffic_fsm+0x1c2>

	///////////////////////////////////////////////
	default:
		break;
 80013e8:	bf00      	nop
 80013ea:	e000      	b.n	80013ee <traffic_fsm+0x1c2>
			return;
 80013ec:	bf00      	nop
	}
}
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000118 	.word	0x20000118
 80013f4:	080040a8 	.word	0x080040a8
 80013f8:	080040b4 	.word	0x080040b4
 80013fc:	20000119 	.word	0x20000119
 8001400:	2000011a 	.word	0x2000011a
 8001404:	2000011b 	.word	0x2000011b
 8001408:	080040c4 	.word	0x080040c4
 800140c:	2000011c 	.word	0x2000011c
 8001410:	20000054 	.word	0x20000054

08001414 <uart_init>:

#include "uart.h"

UART_HandleTypeDef huart2;

void uart_init() {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	sprintf(tx_data, "HELLO!\r\n");
 8001418:	4908      	ldr	r1, [pc, #32]	; (800143c <uart_init+0x28>)
 800141a:	4809      	ldr	r0, [pc, #36]	; (8001440 <uart_init+0x2c>)
 800141c:	f002 fa92 	bl	8003944 <siprintf>
	HAL_UART_Transmit(&huart2, &tx_data, sizeof(tx_data), 1000);
 8001420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001424:	2228      	movs	r2, #40	; 0x28
 8001426:	4906      	ldr	r1, [pc, #24]	; (8001440 <uart_init+0x2c>)
 8001428:	4806      	ldr	r0, [pc, #24]	; (8001444 <uart_init+0x30>)
 800142a:	f001 fca8 	bl	8002d7e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800142e:	2201      	movs	r2, #1
 8001430:	4905      	ldr	r1, [pc, #20]	; (8001448 <uart_init+0x34>)
 8001432:	4804      	ldr	r0, [pc, #16]	; (8001444 <uart_init+0x30>)
 8001434:	f001 fd35 	bl	8002ea2 <HAL_UART_Receive_IT>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	080040d0 	.word	0x080040d0
 8001440:	20000134 	.word	0x20000134
 8001444:	200001a4 	.word	0x200001a4
 8001448:	20000130 	.word	0x20000130

0800144c <uart_send_str>:

void uart_send_str(char str[]) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	sprintf(tx_data, "%s\r\n", str);
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	490a      	ldr	r1, [pc, #40]	; (8001480 <uart_send_str+0x34>)
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <uart_send_str+0x38>)
 800145a:	f002 fa73 	bl	8003944 <siprintf>
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	2228      	movs	r2, #40	; 0x28
 8001464:	4907      	ldr	r1, [pc, #28]	; (8001484 <uart_send_str+0x38>)
 8001466:	4808      	ldr	r0, [pc, #32]	; (8001488 <uart_send_str+0x3c>)
 8001468:	f001 fc89 	bl	8002d7e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800146c:	2201      	movs	r2, #1
 800146e:	4907      	ldr	r1, [pc, #28]	; (800148c <uart_send_str+0x40>)
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <uart_send_str+0x3c>)
 8001472:	f001 fd16 	bl	8002ea2 <HAL_UART_Receive_IT>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	080040dc 	.word	0x080040dc
 8001484:	20000134 	.word	0x20000134
 8001488:	200001a4 	.word	0x200001a4
 800148c:	20000130 	.word	0x20000130

08001490 <uart_send_num>:

void uart_send_num(char str[], uint32_t data) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	sprintf(tx_data, "%s%d\r\n", str, data);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	490a      	ldr	r1, [pc, #40]	; (80014c8 <uart_send_num+0x38>)
 80014a0:	480a      	ldr	r0, [pc, #40]	; (80014cc <uart_send_num+0x3c>)
 80014a2:	f002 fa4f 	bl	8003944 <siprintf>
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	2228      	movs	r2, #40	; 0x28
 80014ac:	4907      	ldr	r1, [pc, #28]	; (80014cc <uart_send_num+0x3c>)
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <uart_send_num+0x40>)
 80014b0:	f001 fc65 	bl	8002d7e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80014b4:	2201      	movs	r2, #1
 80014b6:	4907      	ldr	r1, [pc, #28]	; (80014d4 <uart_send_num+0x44>)
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <uart_send_num+0x40>)
 80014ba:	f001 fcf2 	bl	8002ea2 <HAL_UART_Receive_IT>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	080040e4 	.word	0x080040e4
 80014cc:	20000134 	.word	0x20000134
 80014d0:	200001a4 	.word	0x200001a4
 80014d4:	20000130 	.word	0x20000130

080014d8 <Reset_Handler>:
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <LoopFillZerobss+0x12>)
 80014da:	490d      	ldr	r1, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
 80014dc:	4a0d      	ldr	r2, [pc, #52]	; (8001514 <LoopFillZerobss+0x1a>)
 80014de:	2300      	movs	r3, #0
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:
 80014e2:	58d4      	ldr	r4, [r2, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:
 80014e8:	18c4      	adds	r4, r0, r3
 80014ea:	428c      	cmp	r4, r1
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <LoopFillZerobss+0x1e>)
 80014f0:	4c0a      	ldr	r4, [pc, #40]	; (800151c <LoopFillZerobss+0x22>)
 80014f2:	2300      	movs	r3, #0
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:
 80014fa:	42a2      	cmp	r2, r4
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>
 80014fe:	f7ff fa49 	bl	8000994 <SystemInit>
 8001502:	f002 f92d 	bl	8003760 <__libc_init_array>
 8001506:	f7fe fff9 	bl	80004fc <main>
 800150a:	4770      	bx	lr
 800150c:	20000000 	.word	0x20000000
 8001510:	200000cc 	.word	0x200000cc
 8001514:	08004150 	.word	0x08004150
 8001518:	200000cc 	.word	0x200000cc
 800151c:	20000204 	.word	0x20000204

08001520 <ADC1_2_IRQHandler>:
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <HAL_Init+0x28>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_Init+0x28>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001534:	2003      	movs	r0, #3
 8001536:	f000 f923 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800153a:	200f      	movs	r0, #15
 800153c:	f000 f808 	bl	8001550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001540:	f7ff f90e 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40022000 	.word	0x40022000

08001550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x54>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <HAL_InitTick+0x58>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001566:	fbb3 f3f1 	udiv	r3, r3, r1
 800156a:	fbb2 f3f3 	udiv	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f000 f93b 	bl	80017ea <HAL_SYSTICK_Config>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e00e      	b.n	800159c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b0f      	cmp	r3, #15
 8001582:	d80a      	bhi.n	800159a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001584:	2200      	movs	r2, #0
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	f04f 30ff 	mov.w	r0, #4294967295
 800158c:	f000 f903 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <HAL_InitTick+0x5c>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	e000      	b.n	800159c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000050 	.word	0x20000050
 80015a8:	20000064 	.word	0x20000064
 80015ac:	20000060 	.word	0x20000060

080015b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_IncTick+0x1c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_IncTick+0x20>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	4a03      	ldr	r2, [pc, #12]	; (80015d0 <HAL_IncTick+0x20>)
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000064 	.word	0x20000064
 80015d0:	200001f0 	.word	0x200001f0

080015d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <HAL_GetTick+0x10>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	200001f0 	.word	0x200001f0

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4906      	ldr	r1, [pc, #24]	; (8001680 <__NVIC_EnableIRQ+0x34>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff90 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff2d 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff42 	bl	8001630 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff90 	bl	80016d8 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5f 	bl	8001684 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff35 	bl	800164c <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa2 	bl	800173c <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001814:	2b02      	cmp	r3, #2
 8001816:	d008      	beq.n	800182a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2204      	movs	r2, #4
 800181c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e020      	b.n	800186c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 020e 	bic.w	r2, r2, #14
 8001838:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
	...

08001878 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800188a:	2b02      	cmp	r3, #2
 800188c:	d005      	beq.n	800189a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2204      	movs	r2, #4
 8001892:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	73fb      	strb	r3, [r7, #15]
 8001898:	e051      	b.n	800193e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 020e 	bic.w	r2, r2, #14
 80018a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0201 	bic.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a22      	ldr	r2, [pc, #136]	; (8001948 <HAL_DMA_Abort_IT+0xd0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d029      	beq.n	8001918 <HAL_DMA_Abort_IT+0xa0>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a20      	ldr	r2, [pc, #128]	; (800194c <HAL_DMA_Abort_IT+0xd4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d022      	beq.n	8001914 <HAL_DMA_Abort_IT+0x9c>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <HAL_DMA_Abort_IT+0xd8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d01a      	beq.n	800190e <HAL_DMA_Abort_IT+0x96>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <HAL_DMA_Abort_IT+0xdc>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d012      	beq.n	8001908 <HAL_DMA_Abort_IT+0x90>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_DMA_Abort_IT+0xe0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00a      	beq.n	8001902 <HAL_DMA_Abort_IT+0x8a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1a      	ldr	r2, [pc, #104]	; (800195c <HAL_DMA_Abort_IT+0xe4>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d102      	bne.n	80018fc <HAL_DMA_Abort_IT+0x84>
 80018f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80018fa:	e00e      	b.n	800191a <HAL_DMA_Abort_IT+0xa2>
 80018fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001900:	e00b      	b.n	800191a <HAL_DMA_Abort_IT+0xa2>
 8001902:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001906:	e008      	b.n	800191a <HAL_DMA_Abort_IT+0xa2>
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	e005      	b.n	800191a <HAL_DMA_Abort_IT+0xa2>
 800190e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001912:	e002      	b.n	800191a <HAL_DMA_Abort_IT+0xa2>
 8001914:	2310      	movs	r3, #16
 8001916:	e000      	b.n	800191a <HAL_DMA_Abort_IT+0xa2>
 8001918:	2301      	movs	r3, #1
 800191a:	4a11      	ldr	r2, [pc, #68]	; (8001960 <HAL_DMA_Abort_IT+0xe8>)
 800191c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	4798      	blx	r3
    } 
  }
  return status;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020008 	.word	0x40020008
 800194c:	4002001c 	.word	0x4002001c
 8001950:	40020030 	.word	0x40020030
 8001954:	40020044 	.word	0x40020044
 8001958:	40020058 	.word	0x40020058
 800195c:	4002006c 	.word	0x4002006c
 8001960:	40020000 	.word	0x40020000

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	; 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e148      	b.n	8001c0a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001978:	2201      	movs	r2, #1
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8137 	bne.w	8001c04 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4aa3      	ldr	r2, [pc, #652]	; (8001c28 <HAL_GPIO_Init+0x2c4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d05e      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019a0:	4aa1      	ldr	r2, [pc, #644]	; (8001c28 <HAL_GPIO_Init+0x2c4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d875      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019a6:	4aa1      	ldr	r2, [pc, #644]	; (8001c2c <HAL_GPIO_Init+0x2c8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d058      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019ac:	4a9f      	ldr	r2, [pc, #636]	; (8001c2c <HAL_GPIO_Init+0x2c8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d86f      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019b2:	4a9f      	ldr	r2, [pc, #636]	; (8001c30 <HAL_GPIO_Init+0x2cc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d052      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019b8:	4a9d      	ldr	r2, [pc, #628]	; (8001c30 <HAL_GPIO_Init+0x2cc>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d869      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019be:	4a9d      	ldr	r2, [pc, #628]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d04c      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019c4:	4a9b      	ldr	r2, [pc, #620]	; (8001c34 <HAL_GPIO_Init+0x2d0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d863      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019ca:	4a9b      	ldr	r2, [pc, #620]	; (8001c38 <HAL_GPIO_Init+0x2d4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d046      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
 80019d0:	4a99      	ldr	r2, [pc, #612]	; (8001c38 <HAL_GPIO_Init+0x2d4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d85d      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019d6:	2b12      	cmp	r3, #18
 80019d8:	d82a      	bhi.n	8001a30 <HAL_GPIO_Init+0xcc>
 80019da:	2b12      	cmp	r3, #18
 80019dc:	d859      	bhi.n	8001a92 <HAL_GPIO_Init+0x12e>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <HAL_GPIO_Init+0x80>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a39 	.word	0x08001a39
 80019ec:	08001a4b 	.word	0x08001a4b
 80019f0:	08001a8d 	.word	0x08001a8d
 80019f4:	08001a93 	.word	0x08001a93
 80019f8:	08001a93 	.word	0x08001a93
 80019fc:	08001a93 	.word	0x08001a93
 8001a00:	08001a93 	.word	0x08001a93
 8001a04:	08001a93 	.word	0x08001a93
 8001a08:	08001a93 	.word	0x08001a93
 8001a0c:	08001a93 	.word	0x08001a93
 8001a10:	08001a93 	.word	0x08001a93
 8001a14:	08001a93 	.word	0x08001a93
 8001a18:	08001a93 	.word	0x08001a93
 8001a1c:	08001a93 	.word	0x08001a93
 8001a20:	08001a93 	.word	0x08001a93
 8001a24:	08001a93 	.word	0x08001a93
 8001a28:	08001a41 	.word	0x08001a41
 8001a2c:	08001a55 	.word	0x08001a55
 8001a30:	4a82      	ldr	r2, [pc, #520]	; (8001c3c <HAL_GPIO_Init+0x2d8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a36:	e02c      	b.n	8001a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e029      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	3304      	adds	r3, #4
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e024      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	3308      	adds	r3, #8
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e01f      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	330c      	adds	r3, #12
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e01a      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a66:	2304      	movs	r3, #4
 8001a68:	623b      	str	r3, [r7, #32]
          break;
 8001a6a:	e013      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a74:	2308      	movs	r3, #8
 8001a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69fa      	ldr	r2, [r7, #28]
 8001a7c:	611a      	str	r2, [r3, #16]
          break;
 8001a7e:	e009      	b.n	8001a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a80:	2308      	movs	r3, #8
 8001a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69fa      	ldr	r2, [r7, #28]
 8001a88:	615a      	str	r2, [r3, #20]
          break;
 8001a8a:	e003      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	623b      	str	r3, [r7, #32]
          break;
 8001a90:	e000      	b.n	8001a94 <HAL_GPIO_Init+0x130>
          break;
 8001a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2bff      	cmp	r3, #255	; 0xff
 8001a98:	d801      	bhi.n	8001a9e <HAL_GPIO_Init+0x13a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	e001      	b.n	8001aa2 <HAL_GPIO_Init+0x13e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d802      	bhi.n	8001ab0 <HAL_GPIO_Init+0x14c>
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x152>
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	3b08      	subs	r3, #8
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	210f      	movs	r1, #15
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	6a39      	ldr	r1, [r7, #32]
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8090 	beq.w	8001c04 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae4:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <HAL_GPIO_Init+0x2dc>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a55      	ldr	r2, [pc, #340]	; (8001c40 <HAL_GPIO_Init+0x2dc>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_GPIO_Init+0x2dc>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001afc:	4a51      	ldr	r2, [pc, #324]	; (8001c44 <HAL_GPIO_Init+0x2e0>)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a49      	ldr	r2, [pc, #292]	; (8001c48 <HAL_GPIO_Init+0x2e4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00d      	beq.n	8001b44 <HAL_GPIO_Init+0x1e0>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a48      	ldr	r2, [pc, #288]	; (8001c4c <HAL_GPIO_Init+0x2e8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d007      	beq.n	8001b40 <HAL_GPIO_Init+0x1dc>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a47      	ldr	r2, [pc, #284]	; (8001c50 <HAL_GPIO_Init+0x2ec>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_GPIO_Init+0x1d8>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e004      	b.n	8001b46 <HAL_GPIO_Init+0x1e2>
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e002      	b.n	8001b46 <HAL_GPIO_Init+0x1e2>
 8001b40:	2301      	movs	r3, #1
 8001b42:	e000      	b.n	8001b46 <HAL_GPIO_Init+0x1e2>
 8001b44:	2300      	movs	r3, #0
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	f002 0203 	and.w	r2, r2, #3
 8001b4c:	0092      	lsls	r2, r2, #2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b56:	493b      	ldr	r1, [pc, #236]	; (8001c44 <HAL_GPIO_Init+0x2e0>)
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4937      	ldr	r1, [pc, #220]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	e006      	b.n	8001b8c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b7e:	4b35      	ldr	r3, [pc, #212]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4933      	ldr	r1, [pc, #204]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b98:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	492d      	ldr	r1, [pc, #180]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4929      	ldr	r1, [pc, #164]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4923      	ldr	r1, [pc, #140]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	491f      	ldr	r1, [pc, #124]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	4919      	ldr	r1, [pc, #100]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	60cb      	str	r3, [r1, #12]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4915      	ldr	r1, [pc, #84]	; (8001c54 <HAL_GPIO_Init+0x2f0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	3301      	adds	r3, #1
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f47f aeaf 	bne.w	8001978 <HAL_GPIO_Init+0x14>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	372c      	adds	r7, #44	; 0x2c
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	10320000 	.word	0x10320000
 8001c2c:	10310000 	.word	0x10310000
 8001c30:	10220000 	.word	0x10220000
 8001c34:	10210000 	.word	0x10210000
 8001c38:	10120000 	.word	0x10120000
 8001c3c:	10110000 	.word	0x10110000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	40010c00 	.word	0x40010c00
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40010400 	.word	0x40010400

08001c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e001      	b.n	8001c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	807b      	strh	r3, [r7, #2]
 8001c92:	4613      	mov	r3, r2
 8001c94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c96:	787b      	ldrb	r3, [r7, #1]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9c:	887a      	ldrh	r2, [r7, #2]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ca2:	e003      	b.n	8001cac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	041a      	lsls	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	611a      	str	r2, [r3, #16]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cc8:	887a      	ldrh	r2, [r7, #2]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	041a      	lsls	r2, r3, #16
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43d9      	mvns	r1, r3
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	611a      	str	r2, [r3, #16]
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e26c      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 8087 	beq.w	8001e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d08:	4b92      	ldr	r3, [pc, #584]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 030c 	and.w	r3, r3, #12
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d00c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d14:	4b8f      	ldr	r3, [pc, #572]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 030c 	and.w	r3, r3, #12
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d112      	bne.n	8001d46 <HAL_RCC_OscConfig+0x5e>
 8001d20:	4b8c      	ldr	r3, [pc, #560]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d2c:	d10b      	bne.n	8001d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2e:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d06c      	beq.n	8001e14 <HAL_RCC_OscConfig+0x12c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d168      	bne.n	8001e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e246      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x76>
 8001d50:	4b80      	ldr	r3, [pc, #512]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a7f      	ldr	r2, [pc, #508]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e02e      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x98>
 8001d66:	4b7b      	ldr	r3, [pc, #492]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7a      	ldr	r2, [pc, #488]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b78      	ldr	r3, [pc, #480]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a77      	ldr	r2, [pc, #476]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e01d      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d88:	d10c      	bne.n	8001da4 <HAL_RCC_OscConfig+0xbc>
 8001d8a:	4b72      	ldr	r3, [pc, #456]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a71      	ldr	r2, [pc, #452]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b6f      	ldr	r3, [pc, #444]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6e      	ldr	r2, [pc, #440]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e00b      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001da4:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a6a      	ldr	r2, [pc, #424]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a67      	ldr	r2, [pc, #412]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d013      	beq.n	8001dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fc06 	bl	80015d4 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7ff fc02 	bl	80015d4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e1fa      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0xe4>
 8001dea:	e014      	b.n	8001e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7ff fbf2 	bl	80015d4 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fbee 	bl	80015d4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e1e6      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e06:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x10c>
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d063      	beq.n	8001eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e22:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e2e:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d11c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x18c>
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d116      	bne.n	8001e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_RCC_OscConfig+0x176>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e1ba      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4939      	ldr	r1, [pc, #228]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e72:	e03a      	b.n	8001eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d020      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fba7 	bl	80015d4 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fba3 	bl	80015d4 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e19b      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4927      	ldr	r1, [pc, #156]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	600b      	str	r3, [r1, #0]
 8001ebc:	e015      	b.n	8001eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fb86 	bl	80015d4 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ecc:	f7ff fb82 	bl	80015d4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e17a      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d03a      	beq.n	8001f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d019      	beq.n	8001f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f04:	f7ff fb66 	bl	80015d4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fb62 	bl	80015d4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e15a      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f000 fad8 	bl	80024e0 <RCC_Delay>
 8001f30:	e01c      	b.n	8001f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_RCC_OscConfig+0x274>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f38:	f7ff fb4c 	bl	80015d4 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3e:	e00f      	b.n	8001f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f40:	f7ff fb48 	bl	80015d4 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d908      	bls.n	8001f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e140      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	42420000 	.word	0x42420000
 8001f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f60:	4b9e      	ldr	r3, [pc, #632]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e9      	bne.n	8001f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 80a6 	beq.w	80020c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7e:	4b97      	ldr	r3, [pc, #604]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10d      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8a:	4b94      	ldr	r3, [pc, #592]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a93      	ldr	r2, [pc, #588]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	61d3      	str	r3, [r2, #28]
 8001f96:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b8e      	ldr	r3, [pc, #568]	; (80021e0 <HAL_RCC_OscConfig+0x4f8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb2:	4b8b      	ldr	r3, [pc, #556]	; (80021e0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a8a      	ldr	r2, [pc, #552]	; (80021e0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7ff fb09 	bl	80015d4 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7ff fb05 	bl	80015d4 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b64      	cmp	r3, #100	; 0x64
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0fd      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_OscConfig+0x4f8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x312>
 8001fec:	4b7b      	ldr	r3, [pc, #492]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	4a7a      	ldr	r2, [pc, #488]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6213      	str	r3, [r2, #32]
 8001ff8:	e02d      	b.n	8002056 <HAL_RCC_OscConfig+0x36e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x334>
 8002002:	4b76      	ldr	r3, [pc, #472]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a75      	ldr	r2, [pc, #468]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	6213      	str	r3, [r2, #32]
 800200e:	4b73      	ldr	r3, [pc, #460]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4a72      	ldr	r2, [pc, #456]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	6213      	str	r3, [r2, #32]
 800201a:	e01c      	b.n	8002056 <HAL_RCC_OscConfig+0x36e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b05      	cmp	r3, #5
 8002022:	d10c      	bne.n	800203e <HAL_RCC_OscConfig+0x356>
 8002024:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4a6c      	ldr	r2, [pc, #432]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	6213      	str	r3, [r2, #32]
 8002030:	4b6a      	ldr	r3, [pc, #424]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a69      	ldr	r2, [pc, #420]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6213      	str	r3, [r2, #32]
 800203c:	e00b      	b.n	8002056 <HAL_RCC_OscConfig+0x36e>
 800203e:	4b67      	ldr	r3, [pc, #412]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a66      	ldr	r2, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	4b64      	ldr	r3, [pc, #400]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a63      	ldr	r2, [pc, #396]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d015      	beq.n	800208a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205e:	f7ff fab9 	bl	80015d4 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	e00a      	b.n	800207c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002066:	f7ff fab5 	bl	80015d4 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	f241 3288 	movw	r2, #5000	; 0x1388
 8002074:	4293      	cmp	r3, r2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0ab      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207c:	4b57      	ldr	r3, [pc, #348]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0ee      	beq.n	8002066 <HAL_RCC_OscConfig+0x37e>
 8002088:	e014      	b.n	80020b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7ff faa3 	bl	80015d4 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff fa9f 	bl	80015d4 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e095      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a8:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ee      	bne.n	8002092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d105      	bne.n	80020c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ba:	4b48      	ldr	r3, [pc, #288]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a47      	ldr	r2, [pc, #284]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8081 	beq.w	80021d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d0:	4b42      	ldr	r3, [pc, #264]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d061      	beq.n	80021a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d146      	bne.n	8002172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e4:	4b3f      	ldr	r3, [pc, #252]	; (80021e4 <HAL_RCC_OscConfig+0x4fc>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fa73 	bl	80015d4 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff fa6f 	bl	80015d4 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e067      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002104:	4b35      	ldr	r3, [pc, #212]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002118:	d108      	bne.n	800212c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800211a:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	492d      	ldr	r1, [pc, #180]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002128:	4313      	orrs	r3, r2
 800212a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a19      	ldr	r1, [r3, #32]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	430b      	orrs	r3, r1
 800213e:	4927      	ldr	r1, [pc, #156]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_RCC_OscConfig+0x4fc>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff fa43 	bl	80015d4 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff fa3f 	bl	80015d4 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e037      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x46a>
 8002170:	e02f      	b.n	80021d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_RCC_OscConfig+0x4fc>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7ff fa2c 	bl	80015d4 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff fa28 	bl	80015d4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e020      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x498>
 800219e:	e018      	b.n	80021d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e013      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42420060 	.word	0x42420060

080021e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0d0      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b6a      	ldr	r3, [pc, #424]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d910      	bls.n	800222c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b67      	ldr	r3, [pc, #412]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 0207 	bic.w	r2, r3, #7
 8002212:	4965      	ldr	r1, [pc, #404]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800224e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a52      	ldr	r2, [pc, #328]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002266:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d040      	beq.n	8002308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d115      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e073      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06b      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b39      	ldr	r3, [pc, #228]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4936      	ldr	r1, [pc, #216]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d8:	f7ff f97c 	bl	80015d4 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7ff f978 	bl	80015d4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e053      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d210      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 0207 	bic.w	r2, r3, #7
 800231e:	4922      	ldr	r1, [pc, #136]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002376:	f000 f821 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 800237a:	4602      	mov	r2, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	490a      	ldr	r1, [pc, #40]	; (80023b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff f8da 	bl	8001550 <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40021000 	.word	0x40021000
 80023b0:	080040fc 	.word	0x080040fc
 80023b4:	20000050 	.word	0x20000050
 80023b8:	20000060 	.word	0x20000060

080023bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	b490      	push	{r4, r7}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023c2:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCC_GetSysClockFreq+0xb0>)
 80023c4:	1d3c      	adds	r4, r7, #4
 80023c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023cc:	f240 2301 	movw	r3, #513	; 0x201
 80023d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d002      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x40>
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d003      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x46>
 80023fa:	e02d      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023fc:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fe:	623b      	str	r3, [r7, #32]
      break;
 8002400:	e02d      	b.n	800245e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	0c9b      	lsrs	r3, r3, #18
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800240e:	4413      	add	r3, r2
 8002410:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002414:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0c5b      	lsrs	r3, r3, #17
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800242e:	4413      	add	r3, r2
 8002430:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002434:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <HAL_RCC_GetSysClockFreq+0xb8>)
 800243a:	fb02 f203 	mul.w	r2, r2, r3
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	e004      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	4a0b      	ldr	r2, [pc, #44]	; (8002478 <HAL_RCC_GetSysClockFreq+0xbc>)
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	623b      	str	r3, [r7, #32]
      break;
 8002456:	e002      	b.n	800245e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245a:	623b      	str	r3, [r7, #32]
      break;
 800245c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800245e:	6a3b      	ldr	r3, [r7, #32]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bc90      	pop	{r4, r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	080040ec 	.word	0x080040ec
 8002470:	40021000 	.word	0x40021000
 8002474:	007a1200 	.word	0x007a1200
 8002478:	003d0900 	.word	0x003d0900

0800247c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002480:	4b02      	ldr	r3, [pc, #8]	; (800248c <HAL_RCC_GetHCLKFreq+0x10>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	20000050 	.word	0x20000050

08002490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002494:	f7ff fff2 	bl	800247c <HAL_RCC_GetHCLKFreq>
 8002498:	4602      	mov	r2, r0
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	4903      	ldr	r1, [pc, #12]	; (80024b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024a6:	5ccb      	ldrb	r3, [r1, r3]
 80024a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000
 80024b4:	0800410c 	.word	0x0800410c

080024b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024bc:	f7ff ffde 	bl	800247c <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	0adb      	lsrs	r3, r3, #11
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4903      	ldr	r1, [pc, #12]	; (80024dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	0800410c 	.word	0x0800410c

080024e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <RCC_Delay+0x34>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <RCC_Delay+0x38>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	0a5b      	lsrs	r3, r3, #9
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024fc:	bf00      	nop
  }
  while (Delay --);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1e5a      	subs	r2, r3, #1
 8002502:	60fa      	str	r2, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f9      	bne.n	80024fc <RCC_Delay+0x1c>
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	20000050 	.word	0x20000050
 8002518:	10624dd3 	.word	0x10624dd3

0800251c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e041      	b.n	80025b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe f93e 	bl	80007c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 fa6a 	bl	8002a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d001      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e035      	b.n	8002640 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_TIM_Base_Start_IT+0x90>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_TIM_Base_Start_IT+0x4e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fe:	d004      	beq.n	800260a <HAL_TIM_Base_Start_IT+0x4e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a12      	ldr	r2, [pc, #72]	; (8002650 <HAL_TIM_Base_Start_IT+0x94>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d111      	bne.n	800262e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b06      	cmp	r3, #6
 800261a:	d010      	beq.n	800263e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262c:	e007      	b.n	800263e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40000400 	.word	0x40000400

08002654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b02      	cmp	r3, #2
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0202 	mvn.w	r2, #2
 8002680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f9b1 	bl	80029fe <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f9a4 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f9b3 	bl	8002a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0204 	mvn.w	r2, #4
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f987 	bl	80029fe <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f97a 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f989 	bl	8002a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b08      	cmp	r3, #8
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b08      	cmp	r3, #8
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0208 	mvn.w	r2, #8
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2204      	movs	r2, #4
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f95d 	bl	80029fe <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f950 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f95f 	bl	8002a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d122      	bne.n	80027ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b10      	cmp	r3, #16
 8002772:	d11b      	bne.n	80027ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0210 	mvn.w	r2, #16
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2208      	movs	r2, #8
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f933 	bl	80029fe <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f926 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f935 	bl	8002a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d107      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0201 	mvn.w	r2, #1
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fd ffb2 	bl	800073c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b80      	cmp	r3, #128	; 0x80
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fa67 	bl	8002cd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8f9 	bl	8002a22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b20      	cmp	r3, #32
 800283c:	d10e      	bne.n	800285c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b20      	cmp	r3, #32
 800284a:	d107      	bne.n	800285c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0220 	mvn.w	r2, #32
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fa32 	bl	8002cc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_TIM_ConfigClockSource+0x18>
 8002878:	2302      	movs	r3, #2
 800287a:	e0b3      	b.n	80029e4 <HAL_TIM_ConfigClockSource+0x180>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800289a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b4:	d03e      	beq.n	8002934 <HAL_TIM_ConfigClockSource+0xd0>
 80028b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ba:	f200 8087 	bhi.w	80029cc <HAL_TIM_ConfigClockSource+0x168>
 80028be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c2:	f000 8085 	beq.w	80029d0 <HAL_TIM_ConfigClockSource+0x16c>
 80028c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ca:	d87f      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x168>
 80028cc:	2b70      	cmp	r3, #112	; 0x70
 80028ce:	d01a      	beq.n	8002906 <HAL_TIM_ConfigClockSource+0xa2>
 80028d0:	2b70      	cmp	r3, #112	; 0x70
 80028d2:	d87b      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x168>
 80028d4:	2b60      	cmp	r3, #96	; 0x60
 80028d6:	d050      	beq.n	800297a <HAL_TIM_ConfigClockSource+0x116>
 80028d8:	2b60      	cmp	r3, #96	; 0x60
 80028da:	d877      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x168>
 80028dc:	2b50      	cmp	r3, #80	; 0x50
 80028de:	d03c      	beq.n	800295a <HAL_TIM_ConfigClockSource+0xf6>
 80028e0:	2b50      	cmp	r3, #80	; 0x50
 80028e2:	d873      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x168>
 80028e4:	2b40      	cmp	r3, #64	; 0x40
 80028e6:	d058      	beq.n	800299a <HAL_TIM_ConfigClockSource+0x136>
 80028e8:	2b40      	cmp	r3, #64	; 0x40
 80028ea:	d86f      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x168>
 80028ec:	2b30      	cmp	r3, #48	; 0x30
 80028ee:	d064      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0x156>
 80028f0:	2b30      	cmp	r3, #48	; 0x30
 80028f2:	d86b      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x168>
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d060      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0x156>
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d867      	bhi.n	80029cc <HAL_TIM_ConfigClockSource+0x168>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d05c      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0x156>
 8002900:	2b10      	cmp	r3, #16
 8002902:	d05a      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002904:	e062      	b.n	80029cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f000 f95c 	bl	8002bd2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002928:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	609a      	str	r2, [r3, #8]
      break;
 8002932:	e04e      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6899      	ldr	r1, [r3, #8]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f000 f945 	bl	8002bd2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002956:	609a      	str	r2, [r3, #8]
      break;
 8002958:	e03b      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6818      	ldr	r0, [r3, #0]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	461a      	mov	r2, r3
 8002968:	f000 f8bc 	bl	8002ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2150      	movs	r1, #80	; 0x50
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f913 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 8002978:	e02b      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	461a      	mov	r2, r3
 8002988:	f000 f8da 	bl	8002b40 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2160      	movs	r1, #96	; 0x60
 8002992:	4618      	mov	r0, r3
 8002994:	f000 f903 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 8002998:	e01b      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6818      	ldr	r0, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6859      	ldr	r1, [r3, #4]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f000 f89c 	bl	8002ae4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2140      	movs	r1, #64	; 0x40
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 f8f3 	bl	8002b9e <TIM_ITRx_SetConfig>
      break;
 80029b8:	e00b      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f000 f8ea 	bl	8002b9e <TIM_ITRx_SetConfig>
        break;
 80029ca:	e002      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a25      	ldr	r2, [pc, #148]	; (8002adc <TIM_Base_SetConfig+0xa8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d007      	beq.n	8002a5c <TIM_Base_SetConfig+0x28>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a52:	d003      	beq.n	8002a5c <TIM_Base_SetConfig+0x28>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <TIM_Base_SetConfig+0xac>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d108      	bne.n	8002a6e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <TIM_Base_SetConfig+0xa8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <TIM_Base_SetConfig+0x52>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d003      	beq.n	8002a86 <TIM_Base_SetConfig+0x52>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <TIM_Base_SetConfig+0xac>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d108      	bne.n	8002a98 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a07      	ldr	r2, [pc, #28]	; (8002adc <TIM_Base_SetConfig+0xa8>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d103      	bne.n	8002acc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	615a      	str	r2, [r3, #20]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	40012c00 	.word	0x40012c00
 8002ae0:	40000400 	.word	0x40000400

08002ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	f023 0201 	bic.w	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f023 030a 	bic.w	r3, r3, #10
 8002b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	621a      	str	r2, [r3, #32]
}
 8002b36:	bf00      	nop
 8002b38:	371c      	adds	r7, #28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f023 0210 	bic.w	r2, r3, #16
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b6a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	031b      	lsls	r3, r3, #12
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	621a      	str	r2, [r3, #32]
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f043 0307 	orr.w	r3, r3, #7
 8002bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b087      	sub	sp, #28
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	021a      	lsls	r2, r3, #8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	609a      	str	r2, [r3, #8]
}
 8002c06:	bf00      	nop
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e041      	b.n	8002cac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d009      	beq.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c74:	d004      	beq.n	8002c80 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a10      	ldr	r2, [pc, #64]	; (8002cbc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d10c      	bne.n	8002c9a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40012c00 	.word	0x40012c00
 8002cbc:	40000400 	.word	0x40000400

08002cc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e03f      	b.n	8002d76 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fd fd7e 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2224      	movs	r2, #36	; 0x24
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fc85 	bl	8003638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b08a      	sub	sp, #40	; 0x28
 8002d82:	af02      	add	r7, sp, #8
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d17c      	bne.n	8002e98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_UART_Transmit+0x2c>
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e075      	b.n	8002e9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Transmit+0x3e>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e06e      	b.n	8002e9a <HAL_UART_Transmit+0x11c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2221      	movs	r2, #33	; 0x21
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dd2:	f7fe fbff 	bl	80015d4 <HAL_GetTick>
 8002dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	88fa      	ldrh	r2, [r7, #6]
 8002de2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dec:	d108      	bne.n	8002e00 <HAL_UART_Transmit+0x82>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e003      	b.n	8002e08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e10:	e02a      	b.n	8002e68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fa38 	bl	8003292 <UART_WaitOnFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e036      	b.n	8002e9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10b      	bne.n	8002e4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3302      	adds	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e007      	b.n	8002e5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	3301      	adds	r3, #1
 8002e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1cf      	bne.n	8002e12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2140      	movs	r1, #64	; 0x40
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fa08 	bl	8003292 <UART_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e006      	b.n	8002e9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e000      	b.n	8002e9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	4613      	mov	r3, r2
 8002eae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d11d      	bne.n	8002ef8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_UART_Receive_IT+0x26>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e016      	b.n	8002efa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_UART_Receive_IT+0x38>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e00f      	b.n	8002efa <HAL_UART_Receive_IT+0x58>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fa19 	bl	8003326 <UART_Start_Receive_IT>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	e000      	b.n	8002efa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10d      	bne.n	8002f56 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_UART_IRQHandler+0x52>
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fac9 	bl	80034e6 <UART_Receive_IT>
      return;
 8002f54:	e17b      	b.n	800324e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 80b1 	beq.w	80030c0 <HAL_UART_IRQHandler+0x1bc>
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d105      	bne.n	8002f74 <HAL_UART_IRQHandler+0x70>
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80a6 	beq.w	80030c0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_UART_IRQHandler+0x90>
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f043 0201 	orr.w	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_UART_IRQHandler+0xb0>
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d005      	beq.n	8002fb4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	f043 0202 	orr.w	r2, r3, #2
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HAL_UART_IRQHandler+0xd0>
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f043 0204 	orr.w	r2, r3, #4
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00f      	beq.n	8002ffe <HAL_UART_IRQHandler+0xfa>
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d104      	bne.n	8002ff2 <HAL_UART_IRQHandler+0xee>
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f043 0208 	orr.w	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 811e 	beq.w	8003244 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <HAL_UART_IRQHandler+0x11e>
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fa62 	bl	80034e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <HAL_UART_IRQHandler+0x146>
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d031      	beq.n	80030ae <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f9a4 	bl	8003398 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d023      	beq.n	80030a6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695a      	ldr	r2, [r3, #20]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800306c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003072:	2b00      	cmp	r3, #0
 8003074:	d013      	beq.n	800309e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307a:	4a76      	ldr	r2, [pc, #472]	; (8003254 <HAL_UART_IRQHandler+0x350>)
 800307c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fbf8 	bl	8001878 <HAL_DMA_Abort_IT>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d016      	beq.n	80030bc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003098:	4610      	mov	r0, r2
 800309a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800309c:	e00e      	b.n	80030bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f8e3 	bl	800326a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	e00a      	b.n	80030bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f8df 	bl	800326a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	e006      	b.n	80030bc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8db 	bl	800326a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80030ba:	e0c3      	b.n	8003244 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030bc:	bf00      	nop
    return;
 80030be:	e0c1      	b.n	8003244 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 80a1 	bne.w	800320c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 809b 	beq.w	800320c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8095 	beq.w	800320c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d04e      	beq.n	80031a4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003110:	8a3b      	ldrh	r3, [r7, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8098 	beq.w	8003248 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800311c:	8a3a      	ldrh	r2, [r7, #16]
 800311e:	429a      	cmp	r2, r3
 8003120:	f080 8092 	bcs.w	8003248 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8a3a      	ldrh	r2, [r7, #16]
 8003128:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	2b20      	cmp	r3, #32
 8003132:	d02b      	beq.n	800318c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003142:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003162:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0210 	bic.w	r2, r2, #16
 8003180:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe fb3b 	bl	8001802 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003194:	b29b      	uxth	r3, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	b29b      	uxth	r3, r3
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f86d 	bl	800327c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80031a2:	e051      	b.n	8003248 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d047      	beq.n	800324c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80031bc:	8a7b      	ldrh	r3, [r7, #18]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d044      	beq.n	800324c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031d0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0210 	bic.w	r2, r2, #16
 80031fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003200:	8a7b      	ldrh	r3, [r7, #18]
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f839 	bl	800327c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800320a:	e01f      	b.n	800324c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d008      	beq.n	8003228 <HAL_UART_IRQHandler+0x324>
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f8f9 	bl	8003418 <UART_Transmit_IT>
    return;
 8003226:	e012      	b.n	800324e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00d      	beq.n	800324e <HAL_UART_IRQHandler+0x34a>
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f93a 	bl	80034b6 <UART_EndTransmit_IT>
    return;
 8003242:	e004      	b.n	800324e <HAL_UART_IRQHandler+0x34a>
    return;
 8003244:	bf00      	nop
 8003246:	e002      	b.n	800324e <HAL_UART_IRQHandler+0x34a>
      return;
 8003248:	bf00      	nop
 800324a:	e000      	b.n	800324e <HAL_UART_IRQHandler+0x34a>
      return;
 800324c:	bf00      	nop
  }
}
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	080033f1 	.word	0x080033f1

08003258 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr

0800326a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	4613      	mov	r3, r2
 80032a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a2:	e02c      	b.n	80032fe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d028      	beq.n	80032fe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80032b2:	f7fe f98f 	bl	80015d4 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d21d      	bcs.n	80032fe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032d0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695a      	ldr	r2, [r3, #20]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e00f      	b.n	800331e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4013      	ands	r3, r2
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	429a      	cmp	r2, r3
 800330c:	bf0c      	ite	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	2300      	movne	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	429a      	cmp	r2, r3
 800331a:	d0c3      	beq.n	80032a4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	4613      	mov	r3, r2
 8003332:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	88fa      	ldrh	r2, [r7, #6]
 800333e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2222      	movs	r2, #34	; 0x22
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800336a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0220 	orr.w	r2, r2, #32
 800338a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0210 	bic.w	r2, r2, #16
 80033d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f7ff ff2d 	bl	800326a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b21      	cmp	r3, #33	; 0x21
 800342a:	d13e      	bne.n	80034aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003434:	d114      	bne.n	8003460 <UART_Transmit_IT+0x48>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d110      	bne.n	8003460 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	461a      	mov	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003452:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	621a      	str	r2, [r3, #32]
 800345e:	e008      	b.n	8003472 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	1c59      	adds	r1, r3, #1
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6211      	str	r1, [r2, #32]
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29b      	uxth	r3, r3
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4619      	mov	r1, r3
 8003480:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003494:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff febe 	bl	8003258 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b22      	cmp	r3, #34	; 0x22
 80034f8:	f040 8099 	bne.w	800362e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	d117      	bne.n	8003536 <UART_Receive_IT+0x50>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d113      	bne.n	8003536 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	b29b      	uxth	r3, r3
 8003520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003524:	b29a      	uxth	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	1c9a      	adds	r2, r3, #2
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28
 8003534:	e026      	b.n	8003584 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800353a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003548:	d007      	beq.n	800355a <UART_Receive_IT+0x74>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <UART_Receive_IT+0x82>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e008      	b.n	800357a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003574:	b2da      	uxtb	r2, r3
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003588:	b29b      	uxth	r3, r3
 800358a:	3b01      	subs	r3, #1
 800358c:	b29b      	uxth	r3, r3
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4619      	mov	r1, r3
 8003592:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003594:	2b00      	cmp	r3, #0
 8003596:	d148      	bne.n	800362a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0220 	bic.w	r2, r2, #32
 80035a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0201 	bic.w	r2, r2, #1
 80035c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d123      	bne.n	8003620 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0210 	bic.w	r2, r2, #16
 80035ec:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0310 	and.w	r3, r3, #16
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d10a      	bne.n	8003612 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff fe2f 	bl	800327c <HAL_UARTEx_RxEventCallback>
 800361e:	e002      	b.n	8003626 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7fc ff59 	bl	80004d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e002      	b.n	8003630 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e000      	b.n	8003630 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800362e:	2302      	movs	r3, #2
  }
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003672:	f023 030c 	bic.w	r3, r3, #12
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6812      	ldr	r2, [r2, #0]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	430b      	orrs	r3, r1
 800367e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2c      	ldr	r2, [pc, #176]	; (800374c <UART_SetConfig+0x114>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d103      	bne.n	80036a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036a0:	f7fe ff0a 	bl	80024b8 <HAL_RCC_GetPCLK2Freq>
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	e002      	b.n	80036ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036a8:	f7fe fef2 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 80036ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009a      	lsls	r2, r3, #2
 80036b8:	441a      	add	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	4a22      	ldr	r2, [pc, #136]	; (8003750 <UART_SetConfig+0x118>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	0119      	lsls	r1, r3, #4
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009a      	lsls	r2, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80036e4:	4b1a      	ldr	r3, [pc, #104]	; (8003750 <UART_SetConfig+0x118>)
 80036e6:	fba3 0302 	umull	r0, r3, r3, r2
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2064      	movs	r0, #100	; 0x64
 80036ee:	fb00 f303 	mul.w	r3, r0, r3
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	3332      	adds	r3, #50	; 0x32
 80036f8:	4a15      	ldr	r2, [pc, #84]	; (8003750 <UART_SetConfig+0x118>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003704:	4419      	add	r1, r3
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	009a      	lsls	r2, r3, #2
 8003710:	441a      	add	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	fbb2 f2f3 	udiv	r2, r2, r3
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <UART_SetConfig+0x118>)
 800371e:	fba3 0302 	umull	r0, r3, r3, r2
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	2064      	movs	r0, #100	; 0x64
 8003726:	fb00 f303 	mul.w	r3, r0, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	3332      	adds	r3, #50	; 0x32
 8003730:	4a07      	ldr	r2, [pc, #28]	; (8003750 <UART_SetConfig+0x118>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	f003 020f 	and.w	r2, r3, #15
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	440a      	add	r2, r1
 8003742:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40013800 	.word	0x40013800
 8003750:	51eb851f 	.word	0x51eb851f

08003754 <__errno>:
 8003754:	4b01      	ldr	r3, [pc, #4]	; (800375c <__errno+0x8>)
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000068 	.word	0x20000068

08003760 <__libc_init_array>:
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	2600      	movs	r6, #0
 8003764:	4d0c      	ldr	r5, [pc, #48]	; (8003798 <__libc_init_array+0x38>)
 8003766:	4c0d      	ldr	r4, [pc, #52]	; (800379c <__libc_init_array+0x3c>)
 8003768:	1b64      	subs	r4, r4, r5
 800376a:	10a4      	asrs	r4, r4, #2
 800376c:	42a6      	cmp	r6, r4
 800376e:	d109      	bne.n	8003784 <__libc_init_array+0x24>
 8003770:	f000 fc6c 	bl	800404c <_init>
 8003774:	2600      	movs	r6, #0
 8003776:	4d0a      	ldr	r5, [pc, #40]	; (80037a0 <__libc_init_array+0x40>)
 8003778:	4c0a      	ldr	r4, [pc, #40]	; (80037a4 <__libc_init_array+0x44>)
 800377a:	1b64      	subs	r4, r4, r5
 800377c:	10a4      	asrs	r4, r4, #2
 800377e:	42a6      	cmp	r6, r4
 8003780:	d105      	bne.n	800378e <__libc_init_array+0x2e>
 8003782:	bd70      	pop	{r4, r5, r6, pc}
 8003784:	f855 3b04 	ldr.w	r3, [r5], #4
 8003788:	4798      	blx	r3
 800378a:	3601      	adds	r6, #1
 800378c:	e7ee      	b.n	800376c <__libc_init_array+0xc>
 800378e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003792:	4798      	blx	r3
 8003794:	3601      	adds	r6, #1
 8003796:	e7f2      	b.n	800377e <__libc_init_array+0x1e>
 8003798:	08004148 	.word	0x08004148
 800379c:	08004148 	.word	0x08004148
 80037a0:	08004148 	.word	0x08004148
 80037a4:	0800414c 	.word	0x0800414c

080037a8 <malloc>:
 80037a8:	4b02      	ldr	r3, [pc, #8]	; (80037b4 <malloc+0xc>)
 80037aa:	4601      	mov	r1, r0
 80037ac:	6818      	ldr	r0, [r3, #0]
 80037ae:	f000 b85f 	b.w	8003870 <_malloc_r>
 80037b2:	bf00      	nop
 80037b4:	20000068 	.word	0x20000068

080037b8 <free>:
 80037b8:	4b02      	ldr	r3, [pc, #8]	; (80037c4 <free+0xc>)
 80037ba:	4601      	mov	r1, r0
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	f000 b80b 	b.w	80037d8 <_free_r>
 80037c2:	bf00      	nop
 80037c4:	20000068 	.word	0x20000068

080037c8 <memset>:
 80037c8:	4603      	mov	r3, r0
 80037ca:	4402      	add	r2, r0
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d100      	bne.n	80037d2 <memset+0xa>
 80037d0:	4770      	bx	lr
 80037d2:	f803 1b01 	strb.w	r1, [r3], #1
 80037d6:	e7f9      	b.n	80037cc <memset+0x4>

080037d8 <_free_r>:
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4605      	mov	r5, r0
 80037dc:	2900      	cmp	r1, #0
 80037de:	d043      	beq.n	8003868 <_free_r+0x90>
 80037e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037e4:	1f0c      	subs	r4, r1, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bfb8      	it	lt
 80037ea:	18e4      	addlt	r4, r4, r3
 80037ec:	f000 f8ca 	bl	8003984 <__malloc_lock>
 80037f0:	4a1e      	ldr	r2, [pc, #120]	; (800386c <_free_r+0x94>)
 80037f2:	6813      	ldr	r3, [r2, #0]
 80037f4:	4610      	mov	r0, r2
 80037f6:	b933      	cbnz	r3, 8003806 <_free_r+0x2e>
 80037f8:	6063      	str	r3, [r4, #4]
 80037fa:	6014      	str	r4, [r2, #0]
 80037fc:	4628      	mov	r0, r5
 80037fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003802:	f000 b8c5 	b.w	8003990 <__malloc_unlock>
 8003806:	42a3      	cmp	r3, r4
 8003808:	d90a      	bls.n	8003820 <_free_r+0x48>
 800380a:	6821      	ldr	r1, [r4, #0]
 800380c:	1862      	adds	r2, r4, r1
 800380e:	4293      	cmp	r3, r2
 8003810:	bf01      	itttt	eq
 8003812:	681a      	ldreq	r2, [r3, #0]
 8003814:	685b      	ldreq	r3, [r3, #4]
 8003816:	1852      	addeq	r2, r2, r1
 8003818:	6022      	streq	r2, [r4, #0]
 800381a:	6063      	str	r3, [r4, #4]
 800381c:	6004      	str	r4, [r0, #0]
 800381e:	e7ed      	b.n	80037fc <_free_r+0x24>
 8003820:	461a      	mov	r2, r3
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	b10b      	cbz	r3, 800382a <_free_r+0x52>
 8003826:	42a3      	cmp	r3, r4
 8003828:	d9fa      	bls.n	8003820 <_free_r+0x48>
 800382a:	6811      	ldr	r1, [r2, #0]
 800382c:	1850      	adds	r0, r2, r1
 800382e:	42a0      	cmp	r0, r4
 8003830:	d10b      	bne.n	800384a <_free_r+0x72>
 8003832:	6820      	ldr	r0, [r4, #0]
 8003834:	4401      	add	r1, r0
 8003836:	1850      	adds	r0, r2, r1
 8003838:	4283      	cmp	r3, r0
 800383a:	6011      	str	r1, [r2, #0]
 800383c:	d1de      	bne.n	80037fc <_free_r+0x24>
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4401      	add	r1, r0
 8003844:	6011      	str	r1, [r2, #0]
 8003846:	6053      	str	r3, [r2, #4]
 8003848:	e7d8      	b.n	80037fc <_free_r+0x24>
 800384a:	d902      	bls.n	8003852 <_free_r+0x7a>
 800384c:	230c      	movs	r3, #12
 800384e:	602b      	str	r3, [r5, #0]
 8003850:	e7d4      	b.n	80037fc <_free_r+0x24>
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	1821      	adds	r1, r4, r0
 8003856:	428b      	cmp	r3, r1
 8003858:	bf01      	itttt	eq
 800385a:	6819      	ldreq	r1, [r3, #0]
 800385c:	685b      	ldreq	r3, [r3, #4]
 800385e:	1809      	addeq	r1, r1, r0
 8003860:	6021      	streq	r1, [r4, #0]
 8003862:	6063      	str	r3, [r4, #4]
 8003864:	6054      	str	r4, [r2, #4]
 8003866:	e7c9      	b.n	80037fc <_free_r+0x24>
 8003868:	bd38      	pop	{r3, r4, r5, pc}
 800386a:	bf00      	nop
 800386c:	20000128 	.word	0x20000128

08003870 <_malloc_r>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	1ccd      	adds	r5, r1, #3
 8003874:	f025 0503 	bic.w	r5, r5, #3
 8003878:	3508      	adds	r5, #8
 800387a:	2d0c      	cmp	r5, #12
 800387c:	bf38      	it	cc
 800387e:	250c      	movcc	r5, #12
 8003880:	2d00      	cmp	r5, #0
 8003882:	4606      	mov	r6, r0
 8003884:	db01      	blt.n	800388a <_malloc_r+0x1a>
 8003886:	42a9      	cmp	r1, r5
 8003888:	d903      	bls.n	8003892 <_malloc_r+0x22>
 800388a:	230c      	movs	r3, #12
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	2000      	movs	r0, #0
 8003890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003892:	f000 f877 	bl	8003984 <__malloc_lock>
 8003896:	4921      	ldr	r1, [pc, #132]	; (800391c <_malloc_r+0xac>)
 8003898:	680a      	ldr	r2, [r1, #0]
 800389a:	4614      	mov	r4, r2
 800389c:	b99c      	cbnz	r4, 80038c6 <_malloc_r+0x56>
 800389e:	4f20      	ldr	r7, [pc, #128]	; (8003920 <_malloc_r+0xb0>)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	b923      	cbnz	r3, 80038ae <_malloc_r+0x3e>
 80038a4:	4621      	mov	r1, r4
 80038a6:	4630      	mov	r0, r6
 80038a8:	f000 f83c 	bl	8003924 <_sbrk_r>
 80038ac:	6038      	str	r0, [r7, #0]
 80038ae:	4629      	mov	r1, r5
 80038b0:	4630      	mov	r0, r6
 80038b2:	f000 f837 	bl	8003924 <_sbrk_r>
 80038b6:	1c43      	adds	r3, r0, #1
 80038b8:	d123      	bne.n	8003902 <_malloc_r+0x92>
 80038ba:	230c      	movs	r3, #12
 80038bc:	4630      	mov	r0, r6
 80038be:	6033      	str	r3, [r6, #0]
 80038c0:	f000 f866 	bl	8003990 <__malloc_unlock>
 80038c4:	e7e3      	b.n	800388e <_malloc_r+0x1e>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	1b5b      	subs	r3, r3, r5
 80038ca:	d417      	bmi.n	80038fc <_malloc_r+0x8c>
 80038cc:	2b0b      	cmp	r3, #11
 80038ce:	d903      	bls.n	80038d8 <_malloc_r+0x68>
 80038d0:	6023      	str	r3, [r4, #0]
 80038d2:	441c      	add	r4, r3
 80038d4:	6025      	str	r5, [r4, #0]
 80038d6:	e004      	b.n	80038e2 <_malloc_r+0x72>
 80038d8:	6863      	ldr	r3, [r4, #4]
 80038da:	42a2      	cmp	r2, r4
 80038dc:	bf0c      	ite	eq
 80038de:	600b      	streq	r3, [r1, #0]
 80038e0:	6053      	strne	r3, [r2, #4]
 80038e2:	4630      	mov	r0, r6
 80038e4:	f000 f854 	bl	8003990 <__malloc_unlock>
 80038e8:	f104 000b 	add.w	r0, r4, #11
 80038ec:	1d23      	adds	r3, r4, #4
 80038ee:	f020 0007 	bic.w	r0, r0, #7
 80038f2:	1ac2      	subs	r2, r0, r3
 80038f4:	d0cc      	beq.n	8003890 <_malloc_r+0x20>
 80038f6:	1a1b      	subs	r3, r3, r0
 80038f8:	50a3      	str	r3, [r4, r2]
 80038fa:	e7c9      	b.n	8003890 <_malloc_r+0x20>
 80038fc:	4622      	mov	r2, r4
 80038fe:	6864      	ldr	r4, [r4, #4]
 8003900:	e7cc      	b.n	800389c <_malloc_r+0x2c>
 8003902:	1cc4      	adds	r4, r0, #3
 8003904:	f024 0403 	bic.w	r4, r4, #3
 8003908:	42a0      	cmp	r0, r4
 800390a:	d0e3      	beq.n	80038d4 <_malloc_r+0x64>
 800390c:	1a21      	subs	r1, r4, r0
 800390e:	4630      	mov	r0, r6
 8003910:	f000 f808 	bl	8003924 <_sbrk_r>
 8003914:	3001      	adds	r0, #1
 8003916:	d1dd      	bne.n	80038d4 <_malloc_r+0x64>
 8003918:	e7cf      	b.n	80038ba <_malloc_r+0x4a>
 800391a:	bf00      	nop
 800391c:	20000128 	.word	0x20000128
 8003920:	2000012c 	.word	0x2000012c

08003924 <_sbrk_r>:
 8003924:	b538      	push	{r3, r4, r5, lr}
 8003926:	2300      	movs	r3, #0
 8003928:	4d05      	ldr	r5, [pc, #20]	; (8003940 <_sbrk_r+0x1c>)
 800392a:	4604      	mov	r4, r0
 800392c:	4608      	mov	r0, r1
 800392e:	602b      	str	r3, [r5, #0]
 8003930:	f7fc fffa 	bl	8000928 <_sbrk>
 8003934:	1c43      	adds	r3, r0, #1
 8003936:	d102      	bne.n	800393e <_sbrk_r+0x1a>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	b103      	cbz	r3, 800393e <_sbrk_r+0x1a>
 800393c:	6023      	str	r3, [r4, #0]
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	200001f4 	.word	0x200001f4

08003944 <siprintf>:
 8003944:	b40e      	push	{r1, r2, r3}
 8003946:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800394a:	b500      	push	{lr}
 800394c:	b09c      	sub	sp, #112	; 0x70
 800394e:	ab1d      	add	r3, sp, #116	; 0x74
 8003950:	9002      	str	r0, [sp, #8]
 8003952:	9006      	str	r0, [sp, #24]
 8003954:	9107      	str	r1, [sp, #28]
 8003956:	9104      	str	r1, [sp, #16]
 8003958:	4808      	ldr	r0, [pc, #32]	; (800397c <siprintf+0x38>)
 800395a:	4909      	ldr	r1, [pc, #36]	; (8003980 <siprintf+0x3c>)
 800395c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003960:	9105      	str	r1, [sp, #20]
 8003962:	6800      	ldr	r0, [r0, #0]
 8003964:	a902      	add	r1, sp, #8
 8003966:	9301      	str	r3, [sp, #4]
 8003968:	f000 f874 	bl	8003a54 <_svfiprintf_r>
 800396c:	2200      	movs	r2, #0
 800396e:	9b02      	ldr	r3, [sp, #8]
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	b01c      	add	sp, #112	; 0x70
 8003974:	f85d eb04 	ldr.w	lr, [sp], #4
 8003978:	b003      	add	sp, #12
 800397a:	4770      	bx	lr
 800397c:	20000068 	.word	0x20000068
 8003980:	ffff0208 	.word	0xffff0208

08003984 <__malloc_lock>:
 8003984:	4801      	ldr	r0, [pc, #4]	; (800398c <__malloc_lock+0x8>)
 8003986:	f000 bafb 	b.w	8003f80 <__retarget_lock_acquire_recursive>
 800398a:	bf00      	nop
 800398c:	200001fc 	.word	0x200001fc

08003990 <__malloc_unlock>:
 8003990:	4801      	ldr	r0, [pc, #4]	; (8003998 <__malloc_unlock+0x8>)
 8003992:	f000 baf6 	b.w	8003f82 <__retarget_lock_release_recursive>
 8003996:	bf00      	nop
 8003998:	200001fc 	.word	0x200001fc

0800399c <__ssputs_r>:
 800399c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a0:	688e      	ldr	r6, [r1, #8]
 80039a2:	4682      	mov	sl, r0
 80039a4:	429e      	cmp	r6, r3
 80039a6:	460c      	mov	r4, r1
 80039a8:	4690      	mov	r8, r2
 80039aa:	461f      	mov	r7, r3
 80039ac:	d838      	bhi.n	8003a20 <__ssputs_r+0x84>
 80039ae:	898a      	ldrh	r2, [r1, #12]
 80039b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039b4:	d032      	beq.n	8003a1c <__ssputs_r+0x80>
 80039b6:	6825      	ldr	r5, [r4, #0]
 80039b8:	6909      	ldr	r1, [r1, #16]
 80039ba:	3301      	adds	r3, #1
 80039bc:	eba5 0901 	sub.w	r9, r5, r1
 80039c0:	6965      	ldr	r5, [r4, #20]
 80039c2:	444b      	add	r3, r9
 80039c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039cc:	106d      	asrs	r5, r5, #1
 80039ce:	429d      	cmp	r5, r3
 80039d0:	bf38      	it	cc
 80039d2:	461d      	movcc	r5, r3
 80039d4:	0553      	lsls	r3, r2, #21
 80039d6:	d531      	bpl.n	8003a3c <__ssputs_r+0xa0>
 80039d8:	4629      	mov	r1, r5
 80039da:	f7ff ff49 	bl	8003870 <_malloc_r>
 80039de:	4606      	mov	r6, r0
 80039e0:	b950      	cbnz	r0, 80039f8 <__ssputs_r+0x5c>
 80039e2:	230c      	movs	r3, #12
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	f8ca 3000 	str.w	r3, [sl]
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f2:	81a3      	strh	r3, [r4, #12]
 80039f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f8:	464a      	mov	r2, r9
 80039fa:	6921      	ldr	r1, [r4, #16]
 80039fc:	f000 fad0 	bl	8003fa0 <memcpy>
 8003a00:	89a3      	ldrh	r3, [r4, #12]
 8003a02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0a:	81a3      	strh	r3, [r4, #12]
 8003a0c:	6126      	str	r6, [r4, #16]
 8003a0e:	444e      	add	r6, r9
 8003a10:	6026      	str	r6, [r4, #0]
 8003a12:	463e      	mov	r6, r7
 8003a14:	6165      	str	r5, [r4, #20]
 8003a16:	eba5 0509 	sub.w	r5, r5, r9
 8003a1a:	60a5      	str	r5, [r4, #8]
 8003a1c:	42be      	cmp	r6, r7
 8003a1e:	d900      	bls.n	8003a22 <__ssputs_r+0x86>
 8003a20:	463e      	mov	r6, r7
 8003a22:	4632      	mov	r2, r6
 8003a24:	4641      	mov	r1, r8
 8003a26:	6820      	ldr	r0, [r4, #0]
 8003a28:	f000 fac8 	bl	8003fbc <memmove>
 8003a2c:	68a3      	ldr	r3, [r4, #8]
 8003a2e:	6822      	ldr	r2, [r4, #0]
 8003a30:	1b9b      	subs	r3, r3, r6
 8003a32:	4432      	add	r2, r6
 8003a34:	2000      	movs	r0, #0
 8003a36:	60a3      	str	r3, [r4, #8]
 8003a38:	6022      	str	r2, [r4, #0]
 8003a3a:	e7db      	b.n	80039f4 <__ssputs_r+0x58>
 8003a3c:	462a      	mov	r2, r5
 8003a3e:	f000 fad7 	bl	8003ff0 <_realloc_r>
 8003a42:	4606      	mov	r6, r0
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d1e1      	bne.n	8003a0c <__ssputs_r+0x70>
 8003a48:	4650      	mov	r0, sl
 8003a4a:	6921      	ldr	r1, [r4, #16]
 8003a4c:	f7ff fec4 	bl	80037d8 <_free_r>
 8003a50:	e7c7      	b.n	80039e2 <__ssputs_r+0x46>
	...

08003a54 <_svfiprintf_r>:
 8003a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a58:	4698      	mov	r8, r3
 8003a5a:	898b      	ldrh	r3, [r1, #12]
 8003a5c:	4607      	mov	r7, r0
 8003a5e:	061b      	lsls	r3, r3, #24
 8003a60:	460d      	mov	r5, r1
 8003a62:	4614      	mov	r4, r2
 8003a64:	b09d      	sub	sp, #116	; 0x74
 8003a66:	d50e      	bpl.n	8003a86 <_svfiprintf_r+0x32>
 8003a68:	690b      	ldr	r3, [r1, #16]
 8003a6a:	b963      	cbnz	r3, 8003a86 <_svfiprintf_r+0x32>
 8003a6c:	2140      	movs	r1, #64	; 0x40
 8003a6e:	f7ff feff 	bl	8003870 <_malloc_r>
 8003a72:	6028      	str	r0, [r5, #0]
 8003a74:	6128      	str	r0, [r5, #16]
 8003a76:	b920      	cbnz	r0, 8003a82 <_svfiprintf_r+0x2e>
 8003a78:	230c      	movs	r3, #12
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	e0d1      	b.n	8003c26 <_svfiprintf_r+0x1d2>
 8003a82:	2340      	movs	r3, #64	; 0x40
 8003a84:	616b      	str	r3, [r5, #20]
 8003a86:	2300      	movs	r3, #0
 8003a88:	9309      	str	r3, [sp, #36]	; 0x24
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a90:	2330      	movs	r3, #48	; 0x30
 8003a92:	f04f 0901 	mov.w	r9, #1
 8003a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c40 <_svfiprintf_r+0x1ec>
 8003a9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	469a      	mov	sl, r3
 8003aa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aaa:	b10a      	cbz	r2, 8003ab0 <_svfiprintf_r+0x5c>
 8003aac:	2a25      	cmp	r2, #37	; 0x25
 8003aae:	d1f9      	bne.n	8003aa4 <_svfiprintf_r+0x50>
 8003ab0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ab4:	d00b      	beq.n	8003ace <_svfiprintf_r+0x7a>
 8003ab6:	465b      	mov	r3, fp
 8003ab8:	4622      	mov	r2, r4
 8003aba:	4629      	mov	r1, r5
 8003abc:	4638      	mov	r0, r7
 8003abe:	f7ff ff6d 	bl	800399c <__ssputs_r>
 8003ac2:	3001      	adds	r0, #1
 8003ac4:	f000 80aa 	beq.w	8003c1c <_svfiprintf_r+0x1c8>
 8003ac8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aca:	445a      	add	r2, fp
 8003acc:	9209      	str	r2, [sp, #36]	; 0x24
 8003ace:	f89a 3000 	ldrb.w	r3, [sl]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80a2 	beq.w	8003c1c <_svfiprintf_r+0x1c8>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295
 8003ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ae2:	f10a 0a01 	add.w	sl, sl, #1
 8003ae6:	9304      	str	r3, [sp, #16]
 8003ae8:	9307      	str	r3, [sp, #28]
 8003aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003aee:	931a      	str	r3, [sp, #104]	; 0x68
 8003af0:	4654      	mov	r4, sl
 8003af2:	2205      	movs	r2, #5
 8003af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af8:	4851      	ldr	r0, [pc, #324]	; (8003c40 <_svfiprintf_r+0x1ec>)
 8003afa:	f000 fa43 	bl	8003f84 <memchr>
 8003afe:	9a04      	ldr	r2, [sp, #16]
 8003b00:	b9d8      	cbnz	r0, 8003b3a <_svfiprintf_r+0xe6>
 8003b02:	06d0      	lsls	r0, r2, #27
 8003b04:	bf44      	itt	mi
 8003b06:	2320      	movmi	r3, #32
 8003b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b0c:	0711      	lsls	r1, r2, #28
 8003b0e:	bf44      	itt	mi
 8003b10:	232b      	movmi	r3, #43	; 0x2b
 8003b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b16:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b1c:	d015      	beq.n	8003b4a <_svfiprintf_r+0xf6>
 8003b1e:	4654      	mov	r4, sl
 8003b20:	2000      	movs	r0, #0
 8003b22:	f04f 0c0a 	mov.w	ip, #10
 8003b26:	9a07      	ldr	r2, [sp, #28]
 8003b28:	4621      	mov	r1, r4
 8003b2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b2e:	3b30      	subs	r3, #48	; 0x30
 8003b30:	2b09      	cmp	r3, #9
 8003b32:	d94e      	bls.n	8003bd2 <_svfiprintf_r+0x17e>
 8003b34:	b1b0      	cbz	r0, 8003b64 <_svfiprintf_r+0x110>
 8003b36:	9207      	str	r2, [sp, #28]
 8003b38:	e014      	b.n	8003b64 <_svfiprintf_r+0x110>
 8003b3a:	eba0 0308 	sub.w	r3, r0, r8
 8003b3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b42:	4313      	orrs	r3, r2
 8003b44:	46a2      	mov	sl, r4
 8003b46:	9304      	str	r3, [sp, #16]
 8003b48:	e7d2      	b.n	8003af0 <_svfiprintf_r+0x9c>
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	1d19      	adds	r1, r3, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	9103      	str	r1, [sp, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfbb      	ittet	lt
 8003b56:	425b      	neglt	r3, r3
 8003b58:	f042 0202 	orrlt.w	r2, r2, #2
 8003b5c:	9307      	strge	r3, [sp, #28]
 8003b5e:	9307      	strlt	r3, [sp, #28]
 8003b60:	bfb8      	it	lt
 8003b62:	9204      	strlt	r2, [sp, #16]
 8003b64:	7823      	ldrb	r3, [r4, #0]
 8003b66:	2b2e      	cmp	r3, #46	; 0x2e
 8003b68:	d10c      	bne.n	8003b84 <_svfiprintf_r+0x130>
 8003b6a:	7863      	ldrb	r3, [r4, #1]
 8003b6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b6e:	d135      	bne.n	8003bdc <_svfiprintf_r+0x188>
 8003b70:	9b03      	ldr	r3, [sp, #12]
 8003b72:	3402      	adds	r4, #2
 8003b74:	1d1a      	adds	r2, r3, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	9203      	str	r2, [sp, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bfb8      	it	lt
 8003b7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b82:	9305      	str	r3, [sp, #20]
 8003b84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c50 <_svfiprintf_r+0x1fc>
 8003b88:	2203      	movs	r2, #3
 8003b8a:	4650      	mov	r0, sl
 8003b8c:	7821      	ldrb	r1, [r4, #0]
 8003b8e:	f000 f9f9 	bl	8003f84 <memchr>
 8003b92:	b140      	cbz	r0, 8003ba6 <_svfiprintf_r+0x152>
 8003b94:	2340      	movs	r3, #64	; 0x40
 8003b96:	eba0 000a 	sub.w	r0, r0, sl
 8003b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b9e:	9b04      	ldr	r3, [sp, #16]
 8003ba0:	3401      	adds	r4, #1
 8003ba2:	4303      	orrs	r3, r0
 8003ba4:	9304      	str	r3, [sp, #16]
 8003ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003baa:	2206      	movs	r2, #6
 8003bac:	4825      	ldr	r0, [pc, #148]	; (8003c44 <_svfiprintf_r+0x1f0>)
 8003bae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bb2:	f000 f9e7 	bl	8003f84 <memchr>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	d038      	beq.n	8003c2c <_svfiprintf_r+0x1d8>
 8003bba:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <_svfiprintf_r+0x1f4>)
 8003bbc:	bb1b      	cbnz	r3, 8003c06 <_svfiprintf_r+0x1b2>
 8003bbe:	9b03      	ldr	r3, [sp, #12]
 8003bc0:	3307      	adds	r3, #7
 8003bc2:	f023 0307 	bic.w	r3, r3, #7
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	9303      	str	r3, [sp, #12]
 8003bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bcc:	4433      	add	r3, r6
 8003bce:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd0:	e767      	b.n	8003aa2 <_svfiprintf_r+0x4e>
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bda:	e7a5      	b.n	8003b28 <_svfiprintf_r+0xd4>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f04f 0c0a 	mov.w	ip, #10
 8003be2:	4619      	mov	r1, r3
 8003be4:	3401      	adds	r4, #1
 8003be6:	9305      	str	r3, [sp, #20]
 8003be8:	4620      	mov	r0, r4
 8003bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bee:	3a30      	subs	r2, #48	; 0x30
 8003bf0:	2a09      	cmp	r2, #9
 8003bf2:	d903      	bls.n	8003bfc <_svfiprintf_r+0x1a8>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0c5      	beq.n	8003b84 <_svfiprintf_r+0x130>
 8003bf8:	9105      	str	r1, [sp, #20]
 8003bfa:	e7c3      	b.n	8003b84 <_svfiprintf_r+0x130>
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	2301      	movs	r3, #1
 8003c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c04:	e7f0      	b.n	8003be8 <_svfiprintf_r+0x194>
 8003c06:	ab03      	add	r3, sp, #12
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	462a      	mov	r2, r5
 8003c0c:	4638      	mov	r0, r7
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <_svfiprintf_r+0x1f8>)
 8003c10:	a904      	add	r1, sp, #16
 8003c12:	f3af 8000 	nop.w
 8003c16:	1c42      	adds	r2, r0, #1
 8003c18:	4606      	mov	r6, r0
 8003c1a:	d1d6      	bne.n	8003bca <_svfiprintf_r+0x176>
 8003c1c:	89ab      	ldrh	r3, [r5, #12]
 8003c1e:	065b      	lsls	r3, r3, #25
 8003c20:	f53f af2c 	bmi.w	8003a7c <_svfiprintf_r+0x28>
 8003c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c26:	b01d      	add	sp, #116	; 0x74
 8003c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c2c:	ab03      	add	r3, sp, #12
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	462a      	mov	r2, r5
 8003c32:	4638      	mov	r0, r7
 8003c34:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <_svfiprintf_r+0x1f8>)
 8003c36:	a904      	add	r1, sp, #16
 8003c38:	f000 f87c 	bl	8003d34 <_printf_i>
 8003c3c:	e7eb      	b.n	8003c16 <_svfiprintf_r+0x1c2>
 8003c3e:	bf00      	nop
 8003c40:	08004114 	.word	0x08004114
 8003c44:	0800411e 	.word	0x0800411e
 8003c48:	00000000 	.word	0x00000000
 8003c4c:	0800399d 	.word	0x0800399d
 8003c50:	0800411a 	.word	0x0800411a

08003c54 <_printf_common>:
 8003c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c58:	4616      	mov	r6, r2
 8003c5a:	4699      	mov	r9, r3
 8003c5c:	688a      	ldr	r2, [r1, #8]
 8003c5e:	690b      	ldr	r3, [r1, #16]
 8003c60:	4607      	mov	r7, r0
 8003c62:	4293      	cmp	r3, r2
 8003c64:	bfb8      	it	lt
 8003c66:	4613      	movlt	r3, r2
 8003c68:	6033      	str	r3, [r6, #0]
 8003c6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c6e:	460c      	mov	r4, r1
 8003c70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c74:	b10a      	cbz	r2, 8003c7a <_printf_common+0x26>
 8003c76:	3301      	adds	r3, #1
 8003c78:	6033      	str	r3, [r6, #0]
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	0699      	lsls	r1, r3, #26
 8003c7e:	bf42      	ittt	mi
 8003c80:	6833      	ldrmi	r3, [r6, #0]
 8003c82:	3302      	addmi	r3, #2
 8003c84:	6033      	strmi	r3, [r6, #0]
 8003c86:	6825      	ldr	r5, [r4, #0]
 8003c88:	f015 0506 	ands.w	r5, r5, #6
 8003c8c:	d106      	bne.n	8003c9c <_printf_common+0x48>
 8003c8e:	f104 0a19 	add.w	sl, r4, #25
 8003c92:	68e3      	ldr	r3, [r4, #12]
 8003c94:	6832      	ldr	r2, [r6, #0]
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	42ab      	cmp	r3, r5
 8003c9a:	dc28      	bgt.n	8003cee <_printf_common+0x9a>
 8003c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ca0:	1e13      	subs	r3, r2, #0
 8003ca2:	6822      	ldr	r2, [r4, #0]
 8003ca4:	bf18      	it	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	0692      	lsls	r2, r2, #26
 8003caa:	d42d      	bmi.n	8003d08 <_printf_common+0xb4>
 8003cac:	4649      	mov	r1, r9
 8003cae:	4638      	mov	r0, r7
 8003cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cb4:	47c0      	blx	r8
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d020      	beq.n	8003cfc <_printf_common+0xa8>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	68e5      	ldr	r5, [r4, #12]
 8003cbe:	f003 0306 	and.w	r3, r3, #6
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	bf18      	it	ne
 8003cc6:	2500      	movne	r5, #0
 8003cc8:	6832      	ldr	r2, [r6, #0]
 8003cca:	f04f 0600 	mov.w	r6, #0
 8003cce:	68a3      	ldr	r3, [r4, #8]
 8003cd0:	bf08      	it	eq
 8003cd2:	1aad      	subeq	r5, r5, r2
 8003cd4:	6922      	ldr	r2, [r4, #16]
 8003cd6:	bf08      	it	eq
 8003cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	bfc4      	itt	gt
 8003ce0:	1a9b      	subgt	r3, r3, r2
 8003ce2:	18ed      	addgt	r5, r5, r3
 8003ce4:	341a      	adds	r4, #26
 8003ce6:	42b5      	cmp	r5, r6
 8003ce8:	d11a      	bne.n	8003d20 <_printf_common+0xcc>
 8003cea:	2000      	movs	r0, #0
 8003cec:	e008      	b.n	8003d00 <_printf_common+0xac>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4652      	mov	r2, sl
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	47c0      	blx	r8
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d103      	bne.n	8003d04 <_printf_common+0xb0>
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d04:	3501      	adds	r5, #1
 8003d06:	e7c4      	b.n	8003c92 <_printf_common+0x3e>
 8003d08:	2030      	movs	r0, #48	; 0x30
 8003d0a:	18e1      	adds	r1, r4, r3
 8003d0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d16:	4422      	add	r2, r4
 8003d18:	3302      	adds	r3, #2
 8003d1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d1e:	e7c5      	b.n	8003cac <_printf_common+0x58>
 8003d20:	2301      	movs	r3, #1
 8003d22:	4622      	mov	r2, r4
 8003d24:	4649      	mov	r1, r9
 8003d26:	4638      	mov	r0, r7
 8003d28:	47c0      	blx	r8
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d0e6      	beq.n	8003cfc <_printf_common+0xa8>
 8003d2e:	3601      	adds	r6, #1
 8003d30:	e7d9      	b.n	8003ce6 <_printf_common+0x92>
	...

08003d34 <_printf_i>:
 8003d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	460c      	mov	r4, r1
 8003d3a:	7e27      	ldrb	r7, [r4, #24]
 8003d3c:	4691      	mov	r9, r2
 8003d3e:	2f78      	cmp	r7, #120	; 0x78
 8003d40:	4680      	mov	r8, r0
 8003d42:	469a      	mov	sl, r3
 8003d44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d4a:	d807      	bhi.n	8003d5c <_printf_i+0x28>
 8003d4c:	2f62      	cmp	r7, #98	; 0x62
 8003d4e:	d80a      	bhi.n	8003d66 <_printf_i+0x32>
 8003d50:	2f00      	cmp	r7, #0
 8003d52:	f000 80d9 	beq.w	8003f08 <_printf_i+0x1d4>
 8003d56:	2f58      	cmp	r7, #88	; 0x58
 8003d58:	f000 80a4 	beq.w	8003ea4 <_printf_i+0x170>
 8003d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d64:	e03a      	b.n	8003ddc <_printf_i+0xa8>
 8003d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d6a:	2b15      	cmp	r3, #21
 8003d6c:	d8f6      	bhi.n	8003d5c <_printf_i+0x28>
 8003d6e:	a001      	add	r0, pc, #4	; (adr r0, 8003d74 <_printf_i+0x40>)
 8003d70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003d74:	08003dcd 	.word	0x08003dcd
 8003d78:	08003de1 	.word	0x08003de1
 8003d7c:	08003d5d 	.word	0x08003d5d
 8003d80:	08003d5d 	.word	0x08003d5d
 8003d84:	08003d5d 	.word	0x08003d5d
 8003d88:	08003d5d 	.word	0x08003d5d
 8003d8c:	08003de1 	.word	0x08003de1
 8003d90:	08003d5d 	.word	0x08003d5d
 8003d94:	08003d5d 	.word	0x08003d5d
 8003d98:	08003d5d 	.word	0x08003d5d
 8003d9c:	08003d5d 	.word	0x08003d5d
 8003da0:	08003eef 	.word	0x08003eef
 8003da4:	08003e11 	.word	0x08003e11
 8003da8:	08003ed1 	.word	0x08003ed1
 8003dac:	08003d5d 	.word	0x08003d5d
 8003db0:	08003d5d 	.word	0x08003d5d
 8003db4:	08003f11 	.word	0x08003f11
 8003db8:	08003d5d 	.word	0x08003d5d
 8003dbc:	08003e11 	.word	0x08003e11
 8003dc0:	08003d5d 	.word	0x08003d5d
 8003dc4:	08003d5d 	.word	0x08003d5d
 8003dc8:	08003ed9 	.word	0x08003ed9
 8003dcc:	680b      	ldr	r3, [r1, #0]
 8003dce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003dd2:	1d1a      	adds	r2, r3, #4
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	600a      	str	r2, [r1, #0]
 8003dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0a4      	b.n	8003f2a <_printf_i+0x1f6>
 8003de0:	6825      	ldr	r5, [r4, #0]
 8003de2:	6808      	ldr	r0, [r1, #0]
 8003de4:	062e      	lsls	r6, r5, #24
 8003de6:	f100 0304 	add.w	r3, r0, #4
 8003dea:	d50a      	bpl.n	8003e02 <_printf_i+0xce>
 8003dec:	6805      	ldr	r5, [r0, #0]
 8003dee:	600b      	str	r3, [r1, #0]
 8003df0:	2d00      	cmp	r5, #0
 8003df2:	da03      	bge.n	8003dfc <_printf_i+0xc8>
 8003df4:	232d      	movs	r3, #45	; 0x2d
 8003df6:	426d      	negs	r5, r5
 8003df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfc:	230a      	movs	r3, #10
 8003dfe:	485e      	ldr	r0, [pc, #376]	; (8003f78 <_printf_i+0x244>)
 8003e00:	e019      	b.n	8003e36 <_printf_i+0x102>
 8003e02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e06:	6805      	ldr	r5, [r0, #0]
 8003e08:	600b      	str	r3, [r1, #0]
 8003e0a:	bf18      	it	ne
 8003e0c:	b22d      	sxthne	r5, r5
 8003e0e:	e7ef      	b.n	8003df0 <_printf_i+0xbc>
 8003e10:	680b      	ldr	r3, [r1, #0]
 8003e12:	6825      	ldr	r5, [r4, #0]
 8003e14:	1d18      	adds	r0, r3, #4
 8003e16:	6008      	str	r0, [r1, #0]
 8003e18:	0628      	lsls	r0, r5, #24
 8003e1a:	d501      	bpl.n	8003e20 <_printf_i+0xec>
 8003e1c:	681d      	ldr	r5, [r3, #0]
 8003e1e:	e002      	b.n	8003e26 <_printf_i+0xf2>
 8003e20:	0669      	lsls	r1, r5, #25
 8003e22:	d5fb      	bpl.n	8003e1c <_printf_i+0xe8>
 8003e24:	881d      	ldrh	r5, [r3, #0]
 8003e26:	2f6f      	cmp	r7, #111	; 0x6f
 8003e28:	bf0c      	ite	eq
 8003e2a:	2308      	moveq	r3, #8
 8003e2c:	230a      	movne	r3, #10
 8003e2e:	4852      	ldr	r0, [pc, #328]	; (8003f78 <_printf_i+0x244>)
 8003e30:	2100      	movs	r1, #0
 8003e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e36:	6866      	ldr	r6, [r4, #4]
 8003e38:	2e00      	cmp	r6, #0
 8003e3a:	bfa8      	it	ge
 8003e3c:	6821      	ldrge	r1, [r4, #0]
 8003e3e:	60a6      	str	r6, [r4, #8]
 8003e40:	bfa4      	itt	ge
 8003e42:	f021 0104 	bicge.w	r1, r1, #4
 8003e46:	6021      	strge	r1, [r4, #0]
 8003e48:	b90d      	cbnz	r5, 8003e4e <_printf_i+0x11a>
 8003e4a:	2e00      	cmp	r6, #0
 8003e4c:	d04d      	beq.n	8003eea <_printf_i+0x1b6>
 8003e4e:	4616      	mov	r6, r2
 8003e50:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e54:	fb03 5711 	mls	r7, r3, r1, r5
 8003e58:	5dc7      	ldrb	r7, [r0, r7]
 8003e5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e5e:	462f      	mov	r7, r5
 8003e60:	42bb      	cmp	r3, r7
 8003e62:	460d      	mov	r5, r1
 8003e64:	d9f4      	bls.n	8003e50 <_printf_i+0x11c>
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d10b      	bne.n	8003e82 <_printf_i+0x14e>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	07df      	lsls	r7, r3, #31
 8003e6e:	d508      	bpl.n	8003e82 <_printf_i+0x14e>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	6861      	ldr	r1, [r4, #4]
 8003e74:	4299      	cmp	r1, r3
 8003e76:	bfde      	ittt	le
 8003e78:	2330      	movle	r3, #48	; 0x30
 8003e7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e82:	1b92      	subs	r2, r2, r6
 8003e84:	6122      	str	r2, [r4, #16]
 8003e86:	464b      	mov	r3, r9
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4640      	mov	r0, r8
 8003e8c:	f8cd a000 	str.w	sl, [sp]
 8003e90:	aa03      	add	r2, sp, #12
 8003e92:	f7ff fedf 	bl	8003c54 <_printf_common>
 8003e96:	3001      	adds	r0, #1
 8003e98:	d14c      	bne.n	8003f34 <_printf_i+0x200>
 8003e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9e:	b004      	add	sp, #16
 8003ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea4:	4834      	ldr	r0, [pc, #208]	; (8003f78 <_printf_i+0x244>)
 8003ea6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003eaa:	680e      	ldr	r6, [r1, #0]
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	f856 5b04 	ldr.w	r5, [r6], #4
 8003eb2:	061f      	lsls	r7, r3, #24
 8003eb4:	600e      	str	r6, [r1, #0]
 8003eb6:	d514      	bpl.n	8003ee2 <_printf_i+0x1ae>
 8003eb8:	07d9      	lsls	r1, r3, #31
 8003eba:	bf44      	itt	mi
 8003ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ec0:	6023      	strmi	r3, [r4, #0]
 8003ec2:	b91d      	cbnz	r5, 8003ecc <_printf_i+0x198>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	f023 0320 	bic.w	r3, r3, #32
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	2310      	movs	r3, #16
 8003ece:	e7af      	b.n	8003e30 <_printf_i+0xfc>
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	f043 0320 	orr.w	r3, r3, #32
 8003ed6:	6023      	str	r3, [r4, #0]
 8003ed8:	2378      	movs	r3, #120	; 0x78
 8003eda:	4828      	ldr	r0, [pc, #160]	; (8003f7c <_printf_i+0x248>)
 8003edc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ee0:	e7e3      	b.n	8003eaa <_printf_i+0x176>
 8003ee2:	065e      	lsls	r6, r3, #25
 8003ee4:	bf48      	it	mi
 8003ee6:	b2ad      	uxthmi	r5, r5
 8003ee8:	e7e6      	b.n	8003eb8 <_printf_i+0x184>
 8003eea:	4616      	mov	r6, r2
 8003eec:	e7bb      	b.n	8003e66 <_printf_i+0x132>
 8003eee:	680b      	ldr	r3, [r1, #0]
 8003ef0:	6826      	ldr	r6, [r4, #0]
 8003ef2:	1d1d      	adds	r5, r3, #4
 8003ef4:	6960      	ldr	r0, [r4, #20]
 8003ef6:	600d      	str	r5, [r1, #0]
 8003ef8:	0635      	lsls	r5, r6, #24
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	d501      	bpl.n	8003f02 <_printf_i+0x1ce>
 8003efe:	6018      	str	r0, [r3, #0]
 8003f00:	e002      	b.n	8003f08 <_printf_i+0x1d4>
 8003f02:	0671      	lsls	r1, r6, #25
 8003f04:	d5fb      	bpl.n	8003efe <_printf_i+0x1ca>
 8003f06:	8018      	strh	r0, [r3, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	4616      	mov	r6, r2
 8003f0c:	6123      	str	r3, [r4, #16]
 8003f0e:	e7ba      	b.n	8003e86 <_printf_i+0x152>
 8003f10:	680b      	ldr	r3, [r1, #0]
 8003f12:	1d1a      	adds	r2, r3, #4
 8003f14:	600a      	str	r2, [r1, #0]
 8003f16:	681e      	ldr	r6, [r3, #0]
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4630      	mov	r0, r6
 8003f1c:	6862      	ldr	r2, [r4, #4]
 8003f1e:	f000 f831 	bl	8003f84 <memchr>
 8003f22:	b108      	cbz	r0, 8003f28 <_printf_i+0x1f4>
 8003f24:	1b80      	subs	r0, r0, r6
 8003f26:	6060      	str	r0, [r4, #4]
 8003f28:	6863      	ldr	r3, [r4, #4]
 8003f2a:	6123      	str	r3, [r4, #16]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f32:	e7a8      	b.n	8003e86 <_printf_i+0x152>
 8003f34:	4632      	mov	r2, r6
 8003f36:	4649      	mov	r1, r9
 8003f38:	4640      	mov	r0, r8
 8003f3a:	6923      	ldr	r3, [r4, #16]
 8003f3c:	47d0      	blx	sl
 8003f3e:	3001      	adds	r0, #1
 8003f40:	d0ab      	beq.n	8003e9a <_printf_i+0x166>
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	079b      	lsls	r3, r3, #30
 8003f46:	d413      	bmi.n	8003f70 <_printf_i+0x23c>
 8003f48:	68e0      	ldr	r0, [r4, #12]
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	4298      	cmp	r0, r3
 8003f4e:	bfb8      	it	lt
 8003f50:	4618      	movlt	r0, r3
 8003f52:	e7a4      	b.n	8003e9e <_printf_i+0x16a>
 8003f54:	2301      	movs	r3, #1
 8003f56:	4632      	mov	r2, r6
 8003f58:	4649      	mov	r1, r9
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	47d0      	blx	sl
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d09b      	beq.n	8003e9a <_printf_i+0x166>
 8003f62:	3501      	adds	r5, #1
 8003f64:	68e3      	ldr	r3, [r4, #12]
 8003f66:	9903      	ldr	r1, [sp, #12]
 8003f68:	1a5b      	subs	r3, r3, r1
 8003f6a:	42ab      	cmp	r3, r5
 8003f6c:	dcf2      	bgt.n	8003f54 <_printf_i+0x220>
 8003f6e:	e7eb      	b.n	8003f48 <_printf_i+0x214>
 8003f70:	2500      	movs	r5, #0
 8003f72:	f104 0619 	add.w	r6, r4, #25
 8003f76:	e7f5      	b.n	8003f64 <_printf_i+0x230>
 8003f78:	08004125 	.word	0x08004125
 8003f7c:	08004136 	.word	0x08004136

08003f80 <__retarget_lock_acquire_recursive>:
 8003f80:	4770      	bx	lr

08003f82 <__retarget_lock_release_recursive>:
 8003f82:	4770      	bx	lr

08003f84 <memchr>:
 8003f84:	4603      	mov	r3, r0
 8003f86:	b510      	push	{r4, lr}
 8003f88:	b2c9      	uxtb	r1, r1
 8003f8a:	4402      	add	r2, r0
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	d101      	bne.n	8003f96 <memchr+0x12>
 8003f92:	2000      	movs	r0, #0
 8003f94:	e003      	b.n	8003f9e <memchr+0x1a>
 8003f96:	7804      	ldrb	r4, [r0, #0]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	428c      	cmp	r4, r1
 8003f9c:	d1f6      	bne.n	8003f8c <memchr+0x8>
 8003f9e:	bd10      	pop	{r4, pc}

08003fa0 <memcpy>:
 8003fa0:	440a      	add	r2, r1
 8003fa2:	4291      	cmp	r1, r2
 8003fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fa8:	d100      	bne.n	8003fac <memcpy+0xc>
 8003faa:	4770      	bx	lr
 8003fac:	b510      	push	{r4, lr}
 8003fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fb2:	4291      	cmp	r1, r2
 8003fb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fb8:	d1f9      	bne.n	8003fae <memcpy+0xe>
 8003fba:	bd10      	pop	{r4, pc}

08003fbc <memmove>:
 8003fbc:	4288      	cmp	r0, r1
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	eb01 0402 	add.w	r4, r1, r2
 8003fc4:	d902      	bls.n	8003fcc <memmove+0x10>
 8003fc6:	4284      	cmp	r4, r0
 8003fc8:	4623      	mov	r3, r4
 8003fca:	d807      	bhi.n	8003fdc <memmove+0x20>
 8003fcc:	1e43      	subs	r3, r0, #1
 8003fce:	42a1      	cmp	r1, r4
 8003fd0:	d008      	beq.n	8003fe4 <memmove+0x28>
 8003fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fda:	e7f8      	b.n	8003fce <memmove+0x12>
 8003fdc:	4601      	mov	r1, r0
 8003fde:	4402      	add	r2, r0
 8003fe0:	428a      	cmp	r2, r1
 8003fe2:	d100      	bne.n	8003fe6 <memmove+0x2a>
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fee:	e7f7      	b.n	8003fe0 <memmove+0x24>

08003ff0 <_realloc_r>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	4607      	mov	r7, r0
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	460e      	mov	r6, r1
 8003ff8:	b921      	cbnz	r1, 8004004 <_realloc_r+0x14>
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004000:	f7ff bc36 	b.w	8003870 <_malloc_r>
 8004004:	b922      	cbnz	r2, 8004010 <_realloc_r+0x20>
 8004006:	f7ff fbe7 	bl	80037d8 <_free_r>
 800400a:	4625      	mov	r5, r4
 800400c:	4628      	mov	r0, r5
 800400e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004010:	f000 f814 	bl	800403c <_malloc_usable_size_r>
 8004014:	42a0      	cmp	r0, r4
 8004016:	d20f      	bcs.n	8004038 <_realloc_r+0x48>
 8004018:	4621      	mov	r1, r4
 800401a:	4638      	mov	r0, r7
 800401c:	f7ff fc28 	bl	8003870 <_malloc_r>
 8004020:	4605      	mov	r5, r0
 8004022:	2800      	cmp	r0, #0
 8004024:	d0f2      	beq.n	800400c <_realloc_r+0x1c>
 8004026:	4631      	mov	r1, r6
 8004028:	4622      	mov	r2, r4
 800402a:	f7ff ffb9 	bl	8003fa0 <memcpy>
 800402e:	4631      	mov	r1, r6
 8004030:	4638      	mov	r0, r7
 8004032:	f7ff fbd1 	bl	80037d8 <_free_r>
 8004036:	e7e9      	b.n	800400c <_realloc_r+0x1c>
 8004038:	4635      	mov	r5, r6
 800403a:	e7e7      	b.n	800400c <_realloc_r+0x1c>

0800403c <_malloc_usable_size_r>:
 800403c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004040:	1f18      	subs	r0, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	bfbc      	itt	lt
 8004046:	580b      	ldrlt	r3, [r1, r0]
 8004048:	18c0      	addlt	r0, r0, r3
 800404a:	4770      	bx	lr

0800404c <_init>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	bf00      	nop
 8004050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004052:	bc08      	pop	{r3}
 8004054:	469e      	mov	lr, r3
 8004056:	4770      	bx	lr

08004058 <_fini>:
 8004058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405a:	bf00      	nop
 800405c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800405e:	bc08      	pop	{r3}
 8004060:	469e      	mov	lr, r3
 8004062:	4770      	bx	lr
