
demo_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000439c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800454c  0800454c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800454c  0800454c  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800454c  0800454c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004554  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200000cc  08004620  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08004620  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134bb  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d35  00000000  00000000  000335b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000362e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000370c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b5d  00000000  00000000  00037d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ca2  00000000  00000000  000518dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008914a  00000000  00000000  0006257f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb6c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b70  00000000  00000000  000eb71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004490 	.word	0x08004490

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08004490 	.word	0x08004490

0800014c <button_reading>:

int TimeOutForKeyPress[MAX_BUTTON] = {LONG_DURATION};
int flagBtn[MAX_BUTTON] = {0};
int flagBtnLong[MAX_BUTTON] = {0};

void button_reading(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e0a3      	b.n	80002a0 <button_reading+0x154>
		KeyReg2[i] = KeyReg1[i];
 8000158:	4a56      	ldr	r2, [pc, #344]	; (80002b4 <button_reading+0x168>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4955      	ldr	r1, [pc, #340]	; (80002b8 <button_reading+0x16c>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000168:	4a54      	ldr	r2, [pc, #336]	; (80002bc <button_reading+0x170>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4950      	ldr	r1, [pc, #320]	; (80002b4 <button_reading+0x168>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b03      	cmp	r3, #3
 800017c:	d838      	bhi.n	80001f0 <button_reading+0xa4>
 800017e:	a201      	add	r2, pc, #4	; (adr r2, 8000184 <button_reading+0x38>)
 8000180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000184:	08000195 	.word	0x08000195
 8000188:	080001ab 	.word	0x080001ab
 800018c:	080001c1 	.word	0x080001c1
 8000190:	080001d9 	.word	0x080001d9
		switch (i){ //check which button is being read now
		case BTN_1:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_1_Pin);
 8000194:	2101      	movs	r1, #1
 8000196:	484a      	ldr	r0, [pc, #296]	; (80002c0 <button_reading+0x174>)
 8000198:	f001 ff80 	bl	800209c <HAL_GPIO_ReadPin>
 800019c:	4603      	mov	r3, r0
 800019e:	4619      	mov	r1, r3
 80001a0:	4a46      	ldr	r2, [pc, #280]	; (80002bc <button_reading+0x170>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001a8:	e023      	b.n	80001f2 <button_reading+0xa6>
		case BTN_2:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_2_Pin);
 80001aa:	2102      	movs	r1, #2
 80001ac:	4844      	ldr	r0, [pc, #272]	; (80002c0 <button_reading+0x174>)
 80001ae:	f001 ff75 	bl	800209c <HAL_GPIO_ReadPin>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4619      	mov	r1, r3
 80001b6:	4a41      	ldr	r2, [pc, #260]	; (80002bc <button_reading+0x170>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001be:	e018      	b.n	80001f2 <button_reading+0xa6>
		case BTN_3:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_3_Pin);
 80001c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001c4:	483e      	ldr	r0, [pc, #248]	; (80002c0 <button_reading+0x174>)
 80001c6:	f001 ff69 	bl	800209c <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4619      	mov	r1, r3
 80001ce:	4a3b      	ldr	r2, [pc, #236]	; (80002bc <button_reading+0x170>)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001d6:	e00c      	b.n	80001f2 <button_reading+0xa6>
		case BTN_PD:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_PD_Pin);
 80001d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001dc:	4838      	ldr	r0, [pc, #224]	; (80002c0 <button_reading+0x174>)
 80001de:	f001 ff5d 	bl	800209c <HAL_GPIO_ReadPin>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4619      	mov	r1, r3
 80001e6:	4a35      	ldr	r2, [pc, #212]	; (80002bc <button_reading+0x170>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001ee:	e000      	b.n	80001f2 <button_reading+0xa6>
		default:
			break;
 80001f0:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001f2:	4a30      	ldr	r2, [pc, #192]	; (80002b4 <button_reading+0x168>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001fa:	4930      	ldr	r1, [pc, #192]	; (80002bc <button_reading+0x170>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000202:	429a      	cmp	r2, r3
 8000204:	d149      	bne.n	800029a <button_reading+0x14e>
 8000206:	4a2b      	ldr	r2, [pc, #172]	; (80002b4 <button_reading+0x168>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020e:	492a      	ldr	r1, [pc, #168]	; (80002b8 <button_reading+0x16c>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000216:	429a      	cmp	r2, r3
 8000218:	d13f      	bne.n	800029a <button_reading+0x14e>
			if (KeyReg2[i] != KeyReg3[i]){
 800021a:	4a27      	ldr	r2, [pc, #156]	; (80002b8 <button_reading+0x16c>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000222:	4928      	ldr	r1, [pc, #160]	; (80002c4 <button_reading+0x178>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022a:	429a      	cmp	r2, r3
 800022c:	d021      	beq.n	8000272 <button_reading+0x126>
				KeyReg3[i] = KeyReg2[i];
 800022e:	4a22      	ldr	r2, [pc, #136]	; (80002b8 <button_reading+0x16c>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000236:	4923      	ldr	r1, [pc, #140]	; (80002c4 <button_reading+0x178>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == IS_PRESSED){
 800023e:	4a21      	ldr	r2, [pc, #132]	; (80002c4 <button_reading+0x178>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d108      	bne.n	800025c <button_reading+0x110>
					TimeOutForKeyPress[i] = LONG_DURATION;
 800024a:	4a1f      	ldr	r2, [pc, #124]	; (80002c8 <button_reading+0x17c>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	21c8      	movs	r1, #200	; 0xc8
 8000250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 f83d 	bl	80002d4 <subKeyProcess>
 800025a:	e01e      	b.n	800029a <button_reading+0x14e>
				}
				else{
					flagBtnLong[i] = 0;
 800025c:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <button_reading+0x180>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2100      	movs	r1, #0
 8000262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					Over1Sec[i] = 0;
 8000266:	4a1a      	ldr	r2, [pc, #104]	; (80002d0 <button_reading+0x184>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2100      	movs	r1, #0
 800026c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000270:	e013      	b.n	800029a <button_reading+0x14e>
				}
			} else {
				TimeOutForKeyPress[i] --;
 8000272:	4a15      	ldr	r2, [pc, #84]	; (80002c8 <button_reading+0x17c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800027a:	1e5a      	subs	r2, r3, #1
 800027c:	4912      	ldr	r1, [pc, #72]	; (80002c8 <button_reading+0x17c>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000284:	4a10      	ldr	r2, [pc, #64]	; (80002c8 <button_reading+0x17c>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d104      	bne.n	800029a <button_reading+0x14e>
					KeyReg3[i] = IS_RELEASED;
 8000290:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <button_reading+0x178>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2101      	movs	r1, #1
 8000296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	3301      	adds	r3, #1
 800029e:	607b      	str	r3, [r7, #4]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b03      	cmp	r3, #3
 80002a4:	f77f af58 	ble.w	8000158 <button_reading+0xc>
				}
			}
		}
	}
}
 80002a8:	bf00      	nop
 80002aa:	bf00      	nop
 80002ac:	3708      	adds	r7, #8
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	bf00      	nop
 80002b4:	20000010 	.word	0x20000010
 80002b8:	20000020 	.word	0x20000020
 80002bc:	20000000 	.word	0x20000000
 80002c0:	40010800 	.word	0x40010800
 80002c4:	20000030 	.word	0x20000030
 80002c8:	20000040 	.word	0x20000040
 80002cc:	20000108 	.word	0x20000108
 80002d0:	200000e8 	.word	0x200000e8

080002d4 <subKeyProcess>:

void subKeyProcess(int index){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	flagBtn[index] = 1;
 80002dc:	4a0f      	ldr	r2, [pc, #60]	; (800031c <subKeyProcess+0x48>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	2101      	movs	r1, #1
 80002e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (Over1Sec[index] == 0){
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <subKeyProcess+0x4c>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d105      	bne.n	80002fe <subKeyProcess+0x2a>
		Over1Sec[index] = 1;
 80002f2:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <subKeyProcess+0x4c>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	2101      	movs	r1, #1
 80002f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else{
		flagBtnLong[index] = 1;
		flagBtn[index] = 0;
	}
}
 80002fc:	e009      	b.n	8000312 <subKeyProcess+0x3e>
		flagBtnLong[index] = 1;
 80002fe:	4a09      	ldr	r2, [pc, #36]	; (8000324 <subKeyProcess+0x50>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	2101      	movs	r1, #1
 8000304:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagBtn[index] = 0;
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <subKeyProcess+0x48>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2100      	movs	r1, #0
 800030e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	200000f8 	.word	0x200000f8
 8000320:	200000e8 	.word	0x200000e8
 8000324:	20000108 	.word	0x20000108

08000328 <button_isPressed>:

int button_isPressed(int index){
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
	if (flagBtn[index] == 1){
 8000330:	4a09      	ldr	r2, [pc, #36]	; (8000358 <button_isPressed+0x30>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000338:	2b01      	cmp	r3, #1
 800033a:	d106      	bne.n	800034a <button_isPressed+0x22>
		flagBtn[index] = 0;
 800033c:	4a06      	ldr	r2, [pc, #24]	; (8000358 <button_isPressed+0x30>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2100      	movs	r1, #0
 8000342:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000346:	2301      	movs	r3, #1
 8000348:	e000      	b.n	800034c <button_isPressed+0x24>
	}
	return 0;
 800034a:	2300      	movs	r3, #0
}
 800034c:	4618      	mov	r0, r3
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	bc80      	pop	{r7}
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	200000f8 	.word	0x200000f8

0800035c <button_isLongPressed>:

int button_isLongPressed(int index){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	return (flagBtnLong[index] == 1);
 8000364:	4a06      	ldr	r2, [pc, #24]	; (8000380 <button_isLongPressed+0x24>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036c:	2b01      	cmp	r3, #1
 800036e:	bf0c      	ite	eq
 8000370:	2301      	moveq	r3, #1
 8000372:	2300      	movne	r3, #0
 8000374:	b2db      	uxtb	r3, r3
}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	20000108 	.word	0x20000108

08000384 <duration_set>:

void duration_init() {
	timer_setDuration(TIMER_DUR, 10);
	durationList[0] = durationList[1] = 0; //0s
}
void duration_set(uint8_t index, uint32_t duration_ms) {
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	6039      	str	r1, [r7, #0]
 800038e:	71fb      	strb	r3, [r7, #7]
	durationList[index] = duration_ms / DUR_CYCLE; //unit of time: milisecond
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	683a      	ldr	r2, [r7, #0]
 8000394:	4905      	ldr	r1, [pc, #20]	; (80003ac <duration_set+0x28>)
 8000396:	fba1 1202 	umull	r1, r2, r1, r2
 800039a:	08d2      	lsrs	r2, r2, #3
 800039c:	4904      	ldr	r1, [pc, #16]	; (80003b0 <duration_set+0x2c>)
 800039e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	cccccccd 	.word	0xcccccccd
 80003b0:	20000148 	.word	0x20000148

080003b4 <duration_get>:

uint32_t duration_get(uint8_t index) { //return value of duration in second (not in milisecond)
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	uint32_t extra_duration = ((durationList[index] * DUR_CYCLE) % (DUR_UNIT)) ? 1 : 0;
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	4a15      	ldr	r2, [pc, #84]	; (8000418 <duration_get+0x64>)
 80003c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003c6:	4613      	mov	r3, r2
 80003c8:	009b      	lsls	r3, r3, #2
 80003ca:	4413      	add	r3, r2
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	461a      	mov	r2, r3
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <duration_get+0x68>)
 80003d2:	fba3 1302 	umull	r1, r3, r3, r2
 80003d6:	099b      	lsrs	r3, r3, #6
 80003d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003dc:	fb01 f303 	mul.w	r3, r1, r3
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	bf14      	ite	ne
 80003e6:	2301      	movne	r3, #1
 80003e8:	2300      	moveq	r3, #0
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	60fb      	str	r3, [r7, #12]
	return (durationList[index] * DUR_CYCLE / DUR_UNIT) + extra_duration;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4a09      	ldr	r2, [pc, #36]	; (8000418 <duration_get+0x64>)
 80003f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f6:	4613      	mov	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	461a      	mov	r2, r3
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <duration_get+0x68>)
 8000402:	fba3 2302 	umull	r2, r3, r3, r2
 8000406:	099a      	lsrs	r2, r3, #6
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4413      	add	r3, r2
}
 800040c:	4618      	mov	r0, r3
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	20000148 	.word	0x20000148
 800041c:	10624dd3 	.word	0x10624dd3

08000420 <duration_run>:

void duration_run() { //use timer interupt to auto increase
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	durationList[0] = (durationList[0] == 0) ? 0 : durationList[0] - 1;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <duration_run+0x38>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d003      	beq.n	8000434 <duration_run+0x14>
 800042c:	4b0a      	ldr	r3, [pc, #40]	; (8000458 <duration_run+0x38>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	3b01      	subs	r3, #1
 8000432:	e000      	b.n	8000436 <duration_run+0x16>
 8000434:	2300      	movs	r3, #0
 8000436:	4a08      	ldr	r2, [pc, #32]	; (8000458 <duration_run+0x38>)
 8000438:	6013      	str	r3, [r2, #0]
	durationList[1] = (durationList[1] == 0) ? 0 : durationList[1] - 1;
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <duration_run+0x38>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d003      	beq.n	800044a <duration_run+0x2a>
 8000442:	4b05      	ldr	r3, [pc, #20]	; (8000458 <duration_run+0x38>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	3b01      	subs	r3, #1
 8000448:	e000      	b.n	800044c <duration_run+0x2c>
 800044a:	2300      	movs	r3, #0
 800044c:	4a02      	ldr	r2, [pc, #8]	; (8000458 <duration_run+0x38>)
 800044e:	6053      	str	r3, [r2, #4]
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	20000148 	.word	0x20000148

0800045c <global_get_totalDuration>:
uint8_t pd_led_state = 0;

//function for duration
uint32_t trafficDuration[3] = {5000, 3000, 2000};

uint32_t global_get_totalDuration() {
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	return trafficDuration[0] + trafficDuration[1] + trafficDuration[2];
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <global_get_totalDuration+0x1c>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <global_get_totalDuration+0x1c>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	441a      	add	r2, r3
 800046a:	4b03      	ldr	r3, [pc, #12]	; (8000478 <global_get_totalDuration+0x1c>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	4413      	add	r3, r2
}
 8000470:	4618      	mov	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20000050 	.word	0x20000050

0800047c <led_clear_all>:
	}
}
#endif

#ifdef PROTEUS
void led_clear_all() {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin|
 8000480:	2201      	movs	r2, #1
 8000482:	f640 71c3 	movw	r1, #4035	; 0xfc3
 8000486:	4802      	ldr	r0, [pc, #8]	; (8000490 <led_clear_all+0x14>)
 8000488:	f001 fe1f 	bl	80020ca <HAL_GPIO_WritePin>
			  	  	  	  	 RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin|
							 PD_RED_Pin|PD_GREEN_Pin, GPIO_PIN_SET);
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40010800 	.word	0x40010800

08000494 <led_turn_on>:

void led_turn_on(uint8_t led_index, uint8_t led_type) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	460a      	mov	r2, r1
 800049e:	71fb      	strb	r3, [r7, #7]
 80004a0:	4613      	mov	r3, r2
 80004a2:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b07      	cmp	r3, #7
 80004a8:	f000 808b 	beq.w	80005c2 <led_turn_on+0x12e>
 80004ac:	2b07      	cmp	r3, #7
 80004ae:	f300 80a5 	bgt.w	80005fc <led_turn_on+0x168>
 80004b2:	2b05      	cmp	r3, #5
 80004b4:	d002      	beq.n	80004bc <led_turn_on+0x28>
 80004b6:	2b06      	cmp	r3, #6
 80004b8:	d03f      	beq.n	800053a <led_turn_on+0xa6>
			break;
		}
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 80004ba:	e09f      	b.n	80005fc <led_turn_on+0x168>
		switch (led_type) {
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	2b02      	cmp	r3, #2
 80004c0:	d029      	beq.n	8000516 <led_turn_on+0x82>
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	f300 809c 	bgt.w	8000600 <led_turn_on+0x16c>
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d002      	beq.n	80004d2 <led_turn_on+0x3e>
 80004cc:	2b01      	cmp	r3, #1
 80004ce:	d011      	beq.n	80004f4 <led_turn_on+0x60>
		break;
 80004d0:	e096      	b.n	8000600 <led_turn_on+0x16c>
			HAL_GPIO_WritePin(GPIOA, RED_0_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2140      	movs	r1, #64	; 0x40
 80004d6:	484e      	ldr	r0, [pc, #312]	; (8000610 <led_turn_on+0x17c>)
 80004d8:	f001 fdf7 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_0_Pin, GPIO_PIN_SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	2180      	movs	r1, #128	; 0x80
 80004e0:	484b      	ldr	r0, [pc, #300]	; (8000610 <led_turn_on+0x17c>)
 80004e2:	f001 fdf2 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, YELLOW_0_Pin, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ec:	4848      	ldr	r0, [pc, #288]	; (8000610 <led_turn_on+0x17c>)
 80004ee:	f001 fdec 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 80004f2:	e021      	b.n	8000538 <led_turn_on+0xa4>
			HAL_GPIO_WritePin(GPIOA, GREEN_0_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	4845      	ldr	r0, [pc, #276]	; (8000610 <led_turn_on+0x17c>)
 80004fa:	f001 fde6 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, RED_0_Pin, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2140      	movs	r1, #64	; 0x40
 8000502:	4843      	ldr	r0, [pc, #268]	; (8000610 <led_turn_on+0x17c>)
 8000504:	f001 fde1 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, YELLOW_0_Pin, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800050e:	4840      	ldr	r0, [pc, #256]	; (8000610 <led_turn_on+0x17c>)
 8000510:	f001 fddb 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 8000514:	e010      	b.n	8000538 <led_turn_on+0xa4>
			HAL_GPIO_WritePin(GPIOA, YELLOW_0_Pin, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800051c:	483c      	ldr	r0, [pc, #240]	; (8000610 <led_turn_on+0x17c>)
 800051e:	f001 fdd4 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_0_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	2180      	movs	r1, #128	; 0x80
 8000526:	483a      	ldr	r0, [pc, #232]	; (8000610 <led_turn_on+0x17c>)
 8000528:	f001 fdcf 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, RED_0_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	4837      	ldr	r0, [pc, #220]	; (8000610 <led_turn_on+0x17c>)
 8000532:	f001 fdca 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 8000536:	bf00      	nop
		break;
 8000538:	e062      	b.n	8000600 <led_turn_on+0x16c>
		switch (led_type) {
 800053a:	79bb      	ldrb	r3, [r7, #6]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d02c      	beq.n	800059a <led_turn_on+0x106>
 8000540:	2b02      	cmp	r3, #2
 8000542:	dc5f      	bgt.n	8000604 <led_turn_on+0x170>
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <led_turn_on+0xba>
 8000548:	2b01      	cmp	r3, #1
 800054a:	d013      	beq.n	8000574 <led_turn_on+0xe0>
		break;
 800054c:	e05a      	b.n	8000604 <led_turn_on+0x170>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000554:	482e      	ldr	r0, [pc, #184]	; (8000610 <led_turn_on+0x17c>)
 8000556:	f001 fdb8 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000560:	482b      	ldr	r0, [pc, #172]	; (8000610 <led_turn_on+0x17c>)
 8000562:	f001 fdb2 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, YELLOW_1_Pin, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800056c:	4828      	ldr	r0, [pc, #160]	; (8000610 <led_turn_on+0x17c>)
 800056e:	f001 fdac 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 8000572:	e025      	b.n	80005c0 <led_turn_on+0x12c>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057a:	4825      	ldr	r0, [pc, #148]	; (8000610 <led_turn_on+0x17c>)
 800057c:	f001 fda5 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000586:	4822      	ldr	r0, [pc, #136]	; (8000610 <led_turn_on+0x17c>)
 8000588:	f001 fd9f 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, YELLOW_1_Pin, GPIO_PIN_SET);
 800058c:	2201      	movs	r2, #1
 800058e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000592:	481f      	ldr	r0, [pc, #124]	; (8000610 <led_turn_on+0x17c>)
 8000594:	f001 fd99 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 8000598:	e012      	b.n	80005c0 <led_turn_on+0x12c>
			HAL_GPIO_WritePin(GPIOA, YELLOW_1_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a0:	481b      	ldr	r0, [pc, #108]	; (8000610 <led_turn_on+0x17c>)
 80005a2:	f001 fd92 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	4818      	ldr	r0, [pc, #96]	; (8000610 <led_turn_on+0x17c>)
 80005ae:	f001 fd8c 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <led_turn_on+0x17c>)
 80005ba:	f001 fd86 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 80005be:	bf00      	nop
		break;
 80005c0:	e020      	b.n	8000604 <led_turn_on+0x170>
		switch (led_type) {
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <led_turn_on+0x13a>
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d00b      	beq.n	80005e4 <led_turn_on+0x150>
		break;
 80005cc:	e01b      	b.n	8000606 <led_turn_on+0x172>
			HAL_GPIO_WritePin(GPIOB, PD_RED_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <led_turn_on+0x180>)
 80005d4:	f001 fd79 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, PD_GREEN_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2102      	movs	r1, #2
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <led_turn_on+0x180>)
 80005de:	f001 fd74 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 80005e2:	e00a      	b.n	80005fa <led_turn_on+0x166>
			HAL_GPIO_WritePin(GPIOB, PD_GREEN_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2102      	movs	r1, #2
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <led_turn_on+0x180>)
 80005ea:	f001 fd6e 	bl	80020ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, PD_RED_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2101      	movs	r1, #1
 80005f2:	4808      	ldr	r0, [pc, #32]	; (8000614 <led_turn_on+0x180>)
 80005f4:	f001 fd69 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 80005f8:	bf00      	nop
		break;
 80005fa:	e004      	b.n	8000606 <led_turn_on+0x172>
		break;
 80005fc:	bf00      	nop
 80005fe:	e002      	b.n	8000606 <led_turn_on+0x172>
		break;
 8000600:	bf00      	nop
 8000602:	e000      	b.n	8000606 <led_turn_on+0x172>
		break;
 8000604:	bf00      	nop
	}
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40010800 	.word	0x40010800
 8000614:	40010c00 	.word	0x40010c00

08000618 <led_turn_off>:

void led_turn_off(uint8_t led_index, uint8_t led_type) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	460a      	mov	r2, r1
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	4613      	mov	r3, r2
 8000626:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b07      	cmp	r3, #7
 800062c:	d044      	beq.n	80006b8 <led_turn_off+0xa0>
 800062e:	2b07      	cmp	r3, #7
 8000630:	dc55      	bgt.n	80006de <led_turn_off+0xc6>
 8000632:	2b05      	cmp	r3, #5
 8000634:	d002      	beq.n	800063c <led_turn_off+0x24>
 8000636:	2b06      	cmp	r3, #6
 8000638:	d01e      	beq.n	8000678 <led_turn_off+0x60>
			break;
		}
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 800063a:	e050      	b.n	80006de <led_turn_off+0xc6>
		switch (led_type) {
 800063c:	79bb      	ldrb	r3, [r7, #6]
 800063e:	2b02      	cmp	r3, #2
 8000640:	d012      	beq.n	8000668 <led_turn_off+0x50>
 8000642:	2b02      	cmp	r3, #2
 8000644:	dc4d      	bgt.n	80006e2 <led_turn_off+0xca>
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <led_turn_off+0x38>
 800064a:	2b01      	cmp	r3, #1
 800064c:	d006      	beq.n	800065c <led_turn_off+0x44>
		break;
 800064e:	e048      	b.n	80006e2 <led_turn_off+0xca>
			HAL_GPIO_WritePin(GPIOA, RED_0_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2140      	movs	r1, #64	; 0x40
 8000654:	4826      	ldr	r0, [pc, #152]	; (80006f0 <led_turn_off+0xd8>)
 8000656:	f001 fd38 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 800065a:	e00c      	b.n	8000676 <led_turn_off+0x5e>
			HAL_GPIO_WritePin(GPIOA, GREEN_0_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	4823      	ldr	r0, [pc, #140]	; (80006f0 <led_turn_off+0xd8>)
 8000662:	f001 fd32 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 8000666:	e006      	b.n	8000676 <led_turn_off+0x5e>
			HAL_GPIO_WritePin(GPIOA, YELLOW_0_Pin, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	4820      	ldr	r0, [pc, #128]	; (80006f0 <led_turn_off+0xd8>)
 8000670:	f001 fd2b 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 8000674:	bf00      	nop
		break;
 8000676:	e034      	b.n	80006e2 <led_turn_off+0xca>
		switch (led_type) {
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	2b02      	cmp	r3, #2
 800067c:	d014      	beq.n	80006a8 <led_turn_off+0x90>
 800067e:	2b02      	cmp	r3, #2
 8000680:	dc31      	bgt.n	80006e6 <led_turn_off+0xce>
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <led_turn_off+0x74>
 8000686:	2b01      	cmp	r3, #1
 8000688:	d007      	beq.n	800069a <led_turn_off+0x82>
		break;
 800068a:	e02c      	b.n	80006e6 <led_turn_off+0xce>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <led_turn_off+0xd8>)
 8000694:	f001 fd19 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 8000698:	e00d      	b.n	80006b6 <led_turn_off+0x9e>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a0:	4813      	ldr	r0, [pc, #76]	; (80006f0 <led_turn_off+0xd8>)
 80006a2:	f001 fd12 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 80006a6:	e006      	b.n	80006b6 <led_turn_off+0x9e>
			HAL_GPIO_WritePin(GPIOA, YELLOW_1_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ae:	4810      	ldr	r0, [pc, #64]	; (80006f0 <led_turn_off+0xd8>)
 80006b0:	f001 fd0b 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 80006b4:	bf00      	nop
		break;
 80006b6:	e016      	b.n	80006e6 <led_turn_off+0xce>
		switch (led_type) {
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d002      	beq.n	80006c4 <led_turn_off+0xac>
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d006      	beq.n	80006d0 <led_turn_off+0xb8>
		break;
 80006c2:	e011      	b.n	80006e8 <led_turn_off+0xd0>
			HAL_GPIO_WritePin(GPIOB, PD_RED_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2101      	movs	r1, #1
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <led_turn_off+0xdc>)
 80006ca:	f001 fcfe 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 80006ce:	e005      	b.n	80006dc <led_turn_off+0xc4>
			HAL_GPIO_WritePin(GPIOB, PD_GREEN_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2102      	movs	r1, #2
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <led_turn_off+0xdc>)
 80006d6:	f001 fcf8 	bl	80020ca <HAL_GPIO_WritePin>
			break;
 80006da:	bf00      	nop
		break;
 80006dc:	e004      	b.n	80006e8 <led_turn_off+0xd0>
		break;
 80006de:	bf00      	nop
 80006e0:	e002      	b.n	80006e8 <led_turn_off+0xd0>
		break;
 80006e2:	bf00      	nop
 80006e4:	e000      	b.n	80006e8 <led_turn_off+0xd0>
		break;
 80006e6:	bf00      	nop
	}
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40010800 	.word	0x40010800
 80006f4:	40010c00 	.word	0x40010c00

080006f8 <led_pedestrian_blinky>:

void led_pedestrian_blinky(uint8_t led_type) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	if (pd_led_state == PD_LED_ON) led_turn_on(PEDESTRIAN, led_type);
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <led_pedestrian_blinky+0x30>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b47      	cmp	r3, #71	; 0x47
 8000708:	d105      	bne.n	8000716 <led_pedestrian_blinky+0x1e>
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4619      	mov	r1, r3
 800070e:	2007      	movs	r0, #7
 8000710:	f7ff fec0 	bl	8000494 <led_turn_on>
	else led_turn_off(PEDESTRIAN, led_type);
}
 8000714:	e004      	b.n	8000720 <led_pedestrian_blinky+0x28>
	else led_turn_off(PEDESTRIAN, led_type);
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4619      	mov	r1, r3
 800071a:	2007      	movs	r0, #7
 800071c:	f7ff ff7c 	bl	8000618 <led_turn_off>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000011e 	.word	0x2000011e

0800072c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_UART_RxCpltCallback+0x20>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d101      	bne.n	8000742 <HAL_UART_RxCpltCallback+0x16>
		uart_init();
 800073e:	f001 f8ad 	bl	800189c <uart_init>
	}
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40004400 	.word	0x40004400

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000754:	f001 f908 	bl	8001968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000758:	f000 f82c 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075c:	f000 f8dc 	bl	8000918 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000760:	f000 f864 	bl	800082c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000764:	f000 f8ae 	bl	80008c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <main+0x5c>)
 800076a:	f002 f949 	bl	8002a00 <HAL_TIM_Base_Start_IT>
  timer_init();
 800076e:	f000 fc41 	bl	8000ff4 <timer_init>
  traffic_init();
 8000772:	f000 fcfb 	bl	800116c <traffic_init>
  pedestrian_init();
 8000776:	f000 f945 	bl	8000a04 <pedestrian_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timer_setDuration(TIMER_TEST_0, 500);
 800077a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800077e:	2000      	movs	r0, #0
 8000780:	f000 fc76 	bl	8001070 <timer_setDuration>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (timer_checkFlag(TIMER_TEST_0)) {
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fc8d 	bl	80010a4 <timer_checkFlag>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d008      	beq.n	80007a2 <main+0x52>
		timer_setDuration(TIMER_TEST_0, 500);
 8000790:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000794:	2000      	movs	r0, #0
 8000796:	f000 fc6b 	bl	8001070 <timer_setDuration>
		HAL_GPIO_TogglePin(GPIOA, LED_TEST_0_Pin);
 800079a:	2120      	movs	r1, #32
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <main+0x60>)
 800079e:	f001 fcac 	bl	80020fa <HAL_GPIO_TogglePin>
	}
	traffic_fsm();
 80007a2:	f000 ff77 	bl	8001694 <traffic_fsm>
	pedestrian_fsm();
 80007a6:	f000 f9e7 	bl	8000b78 <pedestrian_fsm>
	if (timer_checkFlag(TIMER_TEST_0)) {
 80007aa:	e7eb      	b.n	8000784 <main+0x34>
 80007ac:	2000017c 	.word	0x2000017c
 80007b0:	40010800 	.word	0x40010800

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b090      	sub	sp, #64	; 0x40
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	2228      	movs	r2, #40	; 0x28
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fa22 	bl	8003c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007da:	2301      	movs	r3, #1
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007de:	2310      	movs	r3, #16
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	4618      	mov	r0, r3
 80007ec:	f001 fc9e 	bl	800212c <HAL_RCC_OscConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007f6:	f000 f8ff 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fa:	230f      	movs	r3, #15
 80007fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f001 ff0a 	bl	800262c <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800081e:	f000 f8eb 	bl	80009f8 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3740      	adds	r7, #64	; 0x40
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000848:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_TIM2_Init+0x94>)
 800084a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000852:	2209      	movs	r2, #9
 8000854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_TIM2_Init+0x94>)
 800085e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000862:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086a:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <MX_TIM2_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <MX_TIM2_Init+0x94>)
 8000872:	f002 f875 	bl	8002960 <HAL_TIM_Base_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800087c:	f000 f8bc 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000884:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4619      	mov	r1, r3
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <MX_TIM2_Init+0x94>)
 800088e:	f002 fa0b 	bl	8002ca8 <HAL_TIM_ConfigClockSource>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000898:	f000 f8ae 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_TIM2_Init+0x94>)
 80008aa:	f002 fbd3 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008b4:	f000 f8a0 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000017c 	.word	0x2000017c

080008c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	; (8000914 <MX_USART2_UART_Init+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_USART2_UART_Init+0x4c>)
 80008fc:	f002 fc14 	bl	8003128 <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000906:	f000 f877 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200001d0 	.word	0x200001d0
 8000914:	40004400 	.word	0x40004400

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <MX_GPIO_Init+0xb8>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a27      	ldr	r2, [pc, #156]	; (80009d0 <MX_GPIO_Init+0xb8>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <MX_GPIO_Init+0xb8>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0304 	and.w	r3, r3, #4
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <MX_GPIO_Init+0xb8>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <MX_GPIO_Init+0xb8>)
 800094a:	f043 0308 	orr.w	r3, r3, #8
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <MX_GPIO_Init+0xb8>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_0_Pin|RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8000962:	481c      	ldr	r0, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xbc>)
 8000964:	f001 fbb1 	bl	80020ca <HAL_GPIO_WritePin>
                          |RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD_RED_Pin|PD_GREEN_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	2103      	movs	r1, #3
 800096c:	481a      	ldr	r0, [pc, #104]	; (80009d8 <MX_GPIO_Init+0xc0>)
 800096e:	f001 fbac 	bl	80020ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_PD_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_PD_Pin;
 8000972:	f249 0303 	movw	r3, #36867	; 0x9003
 8000976:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097c:	2301      	movs	r3, #1
 800097e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0308 	add.w	r3, r7, #8
 8000984:	4619      	mov	r1, r3
 8000986:	4813      	ldr	r0, [pc, #76]	; (80009d4 <MX_GPIO_Init+0xbc>)
 8000988:	f001 fa0e 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TEST_0_Pin RED_0_Pin GREEN_0_Pin YELLOW_0_Pin
                           RED_1_Pin GREEN_1_Pin YELLOW_1_Pin */
  GPIO_InitStruct.Pin = LED_TEST_0_Pin|RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin
 800098c:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
 8000990:	60bb      	str	r3, [r7, #8]
                          |RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2302      	movs	r3, #2
 800099c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	4619      	mov	r1, r3
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <MX_GPIO_Init+0xbc>)
 80009a6:	f001 f9ff 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_RED_Pin PD_GREEN_Pin */
  GPIO_InitStruct.Pin = PD_RED_Pin|PD_GREEN_Pin;
 80009aa:	2303      	movs	r3, #3
 80009ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2302      	movs	r3, #2
 80009b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_GPIO_Init+0xc0>)
 80009c2:	f001 f9f1 	bl	8001da8 <HAL_GPIO_Init>

}
 80009c6:	bf00      	nop
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40010800 	.word	0x40010800
 80009d8:	40010c00 	.word	0x40010c00

080009dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	timer_run();
 80009e4:	f000 fb14 	bl	8001010 <timer_run>
	button_reading();
 80009e8:	f7ff fbb0 	bl	800014c <button_reading>
	duration_run();
 80009ec:	f7ff fd18 	bl	8000420 <duration_run>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <pedestrian_init>:
uint32_t	pd_duration = 0,
			pedestrian_prevDur = 0,
			pedestrian_currDur = 0;

// initialize suitable state for each mode
void pedestrian_init() {
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	pd_state = PD_INIT;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <pedestrian_init+0x20>)
 8000a0a:	2232      	movs	r2, #50	; 0x32
 8000a0c:	701a      	strb	r2, [r3, #0]
	pd_active_state = PD_A_INIT;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <pedestrian_init+0x24>)
 8000a10:	223c      	movs	r2, #60	; 0x3c
 8000a12:	701a      	strb	r2, [r3, #0]
	pd_led_state = PD_LED_OFF;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <pedestrian_init+0x28>)
 8000a16:	2248      	movs	r2, #72	; 0x48
 8000a18:	701a      	strb	r2, [r3, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	200001c4 	.word	0x200001c4
 8000a28:	2000011d 	.word	0x2000011d
 8000a2c:	2000011e 	.word	0x2000011e

08000a30 <pedestrian_send_duration>:

void pedestrian_send_duration() { //send duration to uart
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	pedestrian_currDur = duration_get(DUR_PEDESTRIAN);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fcbd 	bl	80003b4 <duration_get>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <pedestrian_send_duration+0x34>)
 8000a3e:	6013      	str	r3, [r2, #0]
	if (pedestrian_currDur != pedestrian_prevDur) {
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <pedestrian_send_duration+0x34>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <pedestrian_send_duration+0x38>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d005      	beq.n	8000a58 <pedestrian_send_duration+0x28>
		uart_send_num("Pedestrian duration: ", pedestrian_currDur);
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <pedestrian_send_duration+0x34>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <pedestrian_send_duration+0x3c>)
 8000a54:	f000 ff3e 	bl	80018d4 <uart_send_num>
	}
	pedestrian_prevDur = pedestrian_currDur;
 8000a58:	4b02      	ldr	r3, [pc, #8]	; (8000a64 <pedestrian_send_duration+0x34>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a02      	ldr	r2, [pc, #8]	; (8000a68 <pedestrian_send_duration+0x38>)
 8000a5e:	6013      	str	r3, [r2, #0]
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000128 	.word	0x20000128
 8000a68:	20000124 	.word	0x20000124
 8000a6c:	080044a8 	.word	0x080044a8

08000a70 <pedestrian_active_fsm>:

void pedestrian_active_fsm() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	pd_duration = global_get_totalDuration(); //ge
 8000a74:	f7ff fcf2 	bl	800045c <global_get_totalDuration>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4a3b      	ldr	r2, [pc, #236]	; (8000b68 <pedestrian_active_fsm+0xf8>)
 8000a7c:	6013      	str	r3, [r2, #0]
	if (timer_checkFlag(TIMER_BLINK)) {
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f000 fb10 	bl	80010a4 <timer_checkFlag>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d00f      	beq.n	8000aaa <pedestrian_active_fsm+0x3a>
		timer_setDuration(TIMER_BLINK, PD_DUR_BLINK);
 8000a8a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000a8e:	2006      	movs	r0, #6
 8000a90:	f000 faee 	bl	8001070 <timer_setDuration>
		if (pd_led_state == PD_LED_OFF) pd_led_state = PD_LED_ON;
 8000a94:	4b35      	ldr	r3, [pc, #212]	; (8000b6c <pedestrian_active_fsm+0xfc>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b48      	cmp	r3, #72	; 0x48
 8000a9a:	d103      	bne.n	8000aa4 <pedestrian_active_fsm+0x34>
 8000a9c:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <pedestrian_active_fsm+0xfc>)
 8000a9e:	2247      	movs	r2, #71	; 0x47
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	e002      	b.n	8000aaa <pedestrian_active_fsm+0x3a>
		else pd_led_state = PD_LED_OFF;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <pedestrian_active_fsm+0xfc>)
 8000aa6:	2248      	movs	r2, #72	; 0x48
 8000aa8:	701a      	strb	r2, [r3, #0]
	}

	switch (pd_active_state) {
 8000aaa:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <pedestrian_active_fsm+0x100>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b3e      	cmp	r3, #62	; 0x3e
 8000ab0:	d02e      	beq.n	8000b10 <pedestrian_active_fsm+0xa0>
 8000ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8000ab4:	dc50      	bgt.n	8000b58 <pedestrian_active_fsm+0xe8>
 8000ab6:	2b3c      	cmp	r3, #60	; 0x3c
 8000ab8:	d002      	beq.n	8000ac0 <pedestrian_active_fsm+0x50>
 8000aba:	2b3d      	cmp	r3, #61	; 0x3d
 8000abc:	d004      	beq.n	8000ac8 <pedestrian_active_fsm+0x58>
		//change mode
		break;

	///////////////////////////////////////////
	default:
		break;
 8000abe:	e04b      	b.n	8000b58 <pedestrian_active_fsm+0xe8>
		pd_active_state = PD_A_RED;
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <pedestrian_active_fsm+0x100>)
 8000ac2:	223d      	movs	r2, #61	; 0x3d
 8000ac4:	701a      	strb	r2, [r3, #0]
		break;
 8000ac6:	e04c      	b.n	8000b62 <pedestrian_active_fsm+0xf2>
		pedestrian_send_duration();
 8000ac8:	f7ff ffb2 	bl	8000a30 <pedestrian_send_duration>
		if (pedestrian_currDur > 3) led_turn_on(PEDESTRIAN, LED_RED); //turn led red on when duration over 3 second
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <pedestrian_active_fsm+0x104>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	d904      	bls.n	8000ade <pedestrian_active_fsm+0x6e>
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff fcdc 	bl	8000494 <led_turn_on>
 8000adc:	e002      	b.n	8000ae4 <pedestrian_active_fsm+0x74>
		else led_pedestrian_blinky(LED_RED); //otherwise, blink led red
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fe0a 	bl	80006f8 <led_pedestrian_blinky>
		if (button_isPressed(BTN_PD)) { //reset duration for pedestrian led
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f7ff fc1f 	bl	8000328 <button_isPressed>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d035      	beq.n	8000b5c <pedestrian_active_fsm+0xec>
			timer_clear(TIMER_PD);
 8000af0:	2004      	movs	r0, #4
 8000af2:	f000 faef 	bl	80010d4 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <pedestrian_active_fsm+0xf8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4619      	mov	r1, r3
 8000afc:	2004      	movs	r0, #4
 8000afe:	f000 fab7 	bl	8001070 <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <pedestrian_active_fsm+0xf8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4619      	mov	r1, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff fc3b 	bl	8000384 <duration_set>
		break;
 8000b0e:	e025      	b.n	8000b5c <pedestrian_active_fsm+0xec>
		pedestrian_send_duration();
 8000b10:	f7ff ff8e 	bl	8000a30 <pedestrian_send_duration>
		if (pedestrian_currDur > 3) led_turn_on(PEDESTRIAN, LED_GREEN); //turn led green on when duration over 3 second
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <pedestrian_active_fsm+0x104>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d904      	bls.n	8000b26 <pedestrian_active_fsm+0xb6>
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	2007      	movs	r0, #7
 8000b20:	f7ff fcb8 	bl	8000494 <led_turn_on>
 8000b24:	e002      	b.n	8000b2c <pedestrian_active_fsm+0xbc>
		else led_pedestrian_blinky(LED_GREEN); //otherwise, blink led green
 8000b26:	2001      	movs	r0, #1
 8000b28:	f7ff fde6 	bl	80006f8 <led_pedestrian_blinky>
		if (button_isPressed(BTN_PD)) { //reset duration for pedestrian led
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f7ff fbfb 	bl	8000328 <button_isPressed>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d013      	beq.n	8000b60 <pedestrian_active_fsm+0xf0>
			timer_clear(TIMER_PD);
 8000b38:	2004      	movs	r0, #4
 8000b3a:	f000 facb 	bl	80010d4 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <pedestrian_active_fsm+0xf8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4619      	mov	r1, r3
 8000b44:	2004      	movs	r0, #4
 8000b46:	f000 fa93 	bl	8001070 <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <pedestrian_active_fsm+0xf8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	2001      	movs	r0, #1
 8000b52:	f7ff fc17 	bl	8000384 <duration_set>
		break;
 8000b56:	e003      	b.n	8000b60 <pedestrian_active_fsm+0xf0>
		break;
 8000b58:	bf00      	nop
 8000b5a:	e002      	b.n	8000b62 <pedestrian_active_fsm+0xf2>
		break;
 8000b5c:	bf00      	nop
 8000b5e:	e000      	b.n	8000b62 <pedestrian_active_fsm+0xf2>
		break;
 8000b60:	bf00      	nop
	}
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000120 	.word	0x20000120
 8000b6c:	2000011e 	.word	0x2000011e
 8000b70:	2000011d 	.word	0x2000011d
 8000b74:	20000128 	.word	0x20000128

08000b78 <pedestrian_fsm>:

void pedestrian_fsm() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	//check state of pd_state
	switch (pd_state) {
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <pedestrian_fsm+0xb4>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b34      	cmp	r3, #52	; 0x34
 8000b82:	d040      	beq.n	8000c06 <pedestrian_fsm+0x8e>
 8000b84:	2b34      	cmp	r3, #52	; 0x34
 8000b86:	dc4a      	bgt.n	8000c1e <pedestrian_fsm+0xa6>
 8000b88:	2b32      	cmp	r3, #50	; 0x32
 8000b8a:	d002      	beq.n	8000b92 <pedestrian_fsm+0x1a>
 8000b8c:	2b33      	cmp	r3, #51	; 0x33
 8000b8e:	d00c      	beq.n	8000baa <pedestrian_fsm+0x32>
		break;

	//////////////////////////////////////////////////////

	default:
		break;
 8000b90:	e045      	b.n	8000c1e <pedestrian_fsm+0xa6>
		led_turn_off(PEDESTRIAN, LED_RED);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2007      	movs	r0, #7
 8000b96:	f7ff fd3f 	bl	8000618 <led_turn_off>
		led_turn_off(PEDESTRIAN, LED_GREEN);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2007      	movs	r0, #7
 8000b9e:	f7ff fd3b 	bl	8000618 <led_turn_off>
		pd_state = PD_IDLE;
 8000ba2:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <pedestrian_fsm+0xb4>)
 8000ba4:	2233      	movs	r2, #51	; 0x33
 8000ba6:	701a      	strb	r2, [r3, #0]
		break;
 8000ba8:	e03e      	b.n	8000c28 <pedestrian_fsm+0xb0>
		led_turn_off(PEDESTRIAN, LED_RED);
 8000baa:	2100      	movs	r1, #0
 8000bac:	2007      	movs	r0, #7
 8000bae:	f7ff fd33 	bl	8000618 <led_turn_off>
		led_turn_off(PEDESTRIAN, LED_GREEN);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2007      	movs	r0, #7
 8000bb6:	f7ff fd2f 	bl	8000618 <led_turn_off>
		if (button_isPressed(BTN_PD)) {
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f7ff fbb4 	bl	8000328 <button_isPressed>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d02d      	beq.n	8000c22 <pedestrian_fsm+0xaa>
			pd_state = PD_ACTIVE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <pedestrian_fsm+0xb4>)
 8000bc8:	2234      	movs	r2, #52	; 0x34
 8000bca:	701a      	strb	r2, [r3, #0]
			pd_duration = global_get_totalDuration(); //get total duration for a cycle of traffic
 8000bcc:	f7ff fc46 	bl	800045c <global_get_totalDuration>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <pedestrian_fsm+0xb8>)
 8000bd4:	6013      	str	r3, [r2, #0]
			timer_clear(TIMER_PD); //clear timer for pedestrian (if yes)
 8000bd6:	2004      	movs	r0, #4
 8000bd8:	f000 fa7c 	bl	80010d4 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration); //set new timer for pedestrian
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <pedestrian_fsm+0xb8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	2004      	movs	r0, #4
 8000be4:	f000 fa44 	bl	8001070 <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);//set duration for counter
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <pedestrian_fsm+0xb8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff fbc8 	bl	8000384 <duration_set>
			timer_clear(TIMER_BLINK);
 8000bf4:	2006      	movs	r0, #6
 8000bf6:	f000 fa6d 	bl	80010d4 <timer_clear>
			timer_setDuration(TIMER_BLINK, PD_DUR_BLINK); //set timer for blinking led for the last 3 second
 8000bfa:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f000 fa36 	bl	8001070 <timer_setDuration>
		break;
 8000c04:	e00d      	b.n	8000c22 <pedestrian_fsm+0xaa>
		pedestrian_active_fsm();
 8000c06:	f7ff ff33 	bl	8000a70 <pedestrian_active_fsm>
		if (timer_checkFlag(TIMER_PD)) {
 8000c0a:	2004      	movs	r0, #4
 8000c0c:	f000 fa4a 	bl	80010a4 <timer_checkFlag>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d007      	beq.n	8000c26 <pedestrian_fsm+0xae>
			pd_state = PD_IDLE;
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <pedestrian_fsm+0xb4>)
 8000c18:	2233      	movs	r2, #51	; 0x33
 8000c1a:	701a      	strb	r2, [r3, #0]
		break;
 8000c1c:	e003      	b.n	8000c26 <pedestrian_fsm+0xae>
		break;
 8000c1e:	bf00      	nop
 8000c20:	e002      	b.n	8000c28 <pedestrian_fsm+0xb0>
		break;
 8000c22:	bf00      	nop
 8000c24:	e000      	b.n	8000c28 <pedestrian_fsm+0xb0>
		break;
 8000c26:	bf00      	nop
	}
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200001c4 	.word	0x200001c4
 8000c30:	20000120 	.word	0x20000120

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_MspInit+0x5c>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <HAL_MspInit+0x5c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_MspInit+0x5c>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <HAL_MspInit+0x5c>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <HAL_MspInit+0x5c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c5c:	61d3      	str	r3, [r2, #28]
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <HAL_MspInit+0x5c>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <HAL_MspInit+0x60>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_MspInit+0x60>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010000 	.word	0x40010000

08000c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ca8:	d113      	bne.n	8000cd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_TIM_Base_MspInit+0x44>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <HAL_TIM_Base_MspInit+0x44>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_TIM_Base_MspInit+0x44>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	201c      	movs	r0, #28
 8000cc8:	f000 ff87 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ccc:	201c      	movs	r0, #28
 8000cce:	f000 ffa0 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a1f      	ldr	r2, [pc, #124]	; (8000d78 <HAL_UART_MspInit+0x98>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d137      	bne.n	8000d70 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <HAL_UART_MspInit+0x9c>)
 8000d02:	69db      	ldr	r3, [r3, #28]
 8000d04:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <HAL_UART_MspInit+0x9c>)
 8000d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0a:	61d3      	str	r3, [r2, #28]
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_UART_MspInit+0x9c>)
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_UART_MspInit+0x9c>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_UART_MspInit+0x9c>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_UART_MspInit+0x9c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8000d30:	2304      	movs	r3, #4
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	480f      	ldr	r0, [pc, #60]	; (8000d80 <HAL_UART_MspInit+0xa0>)
 8000d44:	f001 f830 	bl	8001da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4809      	ldr	r0, [pc, #36]	; (8000d80 <HAL_UART_MspInit+0xa0>)
 8000d5c:	f001 f824 	bl	8001da8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	2026      	movs	r0, #38	; 0x26
 8000d66:	f000 ff38 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d6a:	2026      	movs	r0, #38	; 0x26
 8000d6c:	f000 ff51 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010800 	.word	0x40010800

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <NMI_Handler+0x4>

08000d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dca:	f000 fe13 	bl	80019f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <TIM2_IRQHandler+0x10>)
 8000dda:	f001 fe5d 	bl	8002a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000017c 	.word	0x2000017c

08000de8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <USART2_IRQHandler+0x10>)
 8000dee:	f002 faab 	bl	8003348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001d0 	.word	0x200001d0

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	; (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f002 feb4 	bl	8003b98 <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20002800 	.word	0x20002800
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	2000012c 	.word	0x2000012c
 8000e64:	20000228 	.word	0x20000228

08000e68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <timer_unit_construct>:

struct timer_list timerList;
uint8_t	timerFlag[MAX_TIMER] = {0};

/*-------------- unit function -------------------*/
struct timer_unit* timer_unit_construct(uint8_t index, uint32_t duration) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = malloc(sizeof (struct timer_unit)); //dynamic allocating a timer unit
 8000e80:	200c      	movs	r0, #12
 8000e82:	f002 feb3 	bl	8003bec <malloc>
 8000e86:	4603      	mov	r3, r0
 8000e88:	60fb      	str	r3, [r7, #12]
	if (newUnit == NULL) {
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <timer_unit_construct+0x20>
		return NULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	e009      	b.n	8000ea8 <timer_unit_construct+0x34>
	}
	newUnit->index = index;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	701a      	strb	r2, [r3, #0]
	newUnit->duration = duration;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
	newUnit->nextTimer = NULL;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
	return newUnit;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <timer_unit_destruct>:

void timer_unit_destruct(struct timer_unit *unit) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	free(unit);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f002 fe9f 	bl	8003bfc <free>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <timer_list_add>:

/*-------------- list function -------------------*/
void timer_list_add(struct timer_unit *unit){
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	//list full
	if (timerList.size == MAX_TIMER) return;
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <timer_list_add+0xec>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	d068      	beq.n	8000faa <timer_list_add+0xe2>

	//list empty
	if (timerList.size == 0) {
 8000ed8:	4b36      	ldr	r3, [pc, #216]	; (8000fb4 <timer_list_add+0xec>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d109      	bne.n	8000ef4 <timer_list_add+0x2c>
		timerList.head = unit;
 8000ee0:	4a34      	ldr	r2, [pc, #208]	; (8000fb4 <timer_list_add+0xec>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6053      	str	r3, [r2, #4]
		timerList.size++;
 8000ee6:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <timer_list_add+0xec>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <timer_list_add+0xec>)
 8000ef0:	701a      	strb	r2, [r3, #0]
		return;
 8000ef2:	e05b      	b.n	8000fac <timer_list_add+0xe4>
	}

	//list has at least 1 item
	struct timer_unit *curr = timerList.head,
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <timer_list_add+0xec>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	617b      	str	r3, [r7, #20]
					  *prev = NULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
	uint32_t totalDuration = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
	while(curr != NULL) { //iterating the list
 8000f02:	e00e      	b.n	8000f22 <timer_list_add+0x5a>
		totalDuration += curr->duration;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
		if (unit->duration < totalDuration) break;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d808      	bhi.n	8000f2a <timer_list_add+0x62>
		prev = curr;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
		curr = curr->nextTimer;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	617b      	str	r3, [r7, #20]
	while(curr != NULL) { //iterating the list
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1ed      	bne.n	8000f04 <timer_list_add+0x3c>
 8000f28:	e000      	b.n	8000f2c <timer_list_add+0x64>
		if (unit->duration < totalDuration) break;
 8000f2a:	bf00      	nop
	}
	if (prev == NULL) { //new unit is added before the head
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d113      	bne.n	8000f5a <timer_list_add+0x92>
		unit->nextTimer = curr;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	609a      	str	r2, [r3, #8]
		curr->duration -= unit->duration;
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	1ad2      	subs	r2, r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	605a      	str	r2, [r3, #4]
		timerList.head = unit;
 8000f46:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <timer_list_add+0xec>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6053      	str	r3, [r2, #4]
		timerList.size++;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <timer_list_add+0xec>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <timer_list_add+0xec>)
 8000f56:	701a      	strb	r2, [r3, #0]
		return;
 8000f58:	e028      	b.n	8000fac <timer_list_add+0xe4>
	}
	prev->nextTimer = unit;
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
	unit->nextTimer = curr;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	609a      	str	r2, [r3, #8]
	if (curr == NULL){
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d106      	bne.n	8000f7a <timer_list_add+0xb2>
		unit->duration -= totalDuration;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1ad2      	subs	r2, r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	e010      	b.n	8000f9c <timer_list_add+0xd4>
	}
	else{
		uint32_t tmp = unit->duration;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	60bb      	str	r3, [r7, #8]
		unit->duration -= (totalDuration - curr->duration);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	6859      	ldr	r1, [r3, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1acb      	subs	r3, r1, r3
 8000f8c:	441a      	add	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	605a      	str	r2, [r3, #4]
		curr->duration = (totalDuration - tmp);
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1ad2      	subs	r2, r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	605a      	str	r2, [r3, #4]
	}
	timerList.size++;
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <timer_list_add+0xec>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <timer_list_add+0xec>)
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e000      	b.n	8000fac <timer_list_add+0xe4>
	if (timerList.size == MAX_TIMER) return;
 8000faa:	bf00      	nop
}
 8000fac:	371c      	adds	r7, #28
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	200001c8 	.word	0x200001c8

08000fb8 <timer_list_pop>:

void timer_list_pop(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
	//list empty
	if (timerList.size == 0) return;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <timer_list_pop+0x38>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d010      	beq.n	8000fe8 <timer_list_pop+0x30>

	struct timer_unit *delUnit = timerList.head;
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <timer_list_pop+0x38>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	607b      	str	r3, [r7, #4]
	timerList.head = delUnit->nextTimer;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <timer_list_pop+0x38>)
 8000fd2:	6053      	str	r3, [r2, #4]
	timer_unit_destruct(delUnit);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff6b 	bl	8000eb0 <timer_unit_destruct>
	timerList.size--;
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <timer_list_pop+0x38>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <timer_list_pop+0x38>)
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e000      	b.n	8000fea <timer_list_pop+0x32>
	if (timerList.size == 0) return;
 8000fe8:	bf00      	nop
}
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200001c8 	.word	0x200001c8

08000ff4 <timer_init>:

/*-------------- global function -------------------*/
void timer_init(){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	timerList.head = NULL;
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <timer_init+0x18>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
	timerList.size = 0;
 8000ffe:	4b03      	ldr	r3, [pc, #12]	; (800100c <timer_init+0x18>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	200001c8 	.word	0x200001c8

08001010 <timer_run>:

void timer_run(){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
	if (timerList.size == 0) return;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <timer_run+0x58>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d020      	beq.n	8001060 <timer_run+0x50>
	if (timerList.head->duration >= 0) {
		timerList.head->duration--;
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <timer_run+0x58>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	685a      	ldr	r2, [r3, #4]
 8001024:	3a01      	subs	r2, #1
 8001026:	605a      	str	r2, [r3, #4]
		if (timerList.head->duration <= 0) {
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <timer_run+0x58>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d117      	bne.n	8001062 <timer_run+0x52>
			uint8_t index = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]
			while(timerList.size && timerList.head->duration == 0) {
 8001036:	e009      	b.n	800104c <timer_run+0x3c>
				index = timerList.head->index;
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <timer_run+0x58>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
				timerFlag[index] = 1;
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <timer_run+0x5c>)
 8001044:	2101      	movs	r1, #1
 8001046:	54d1      	strb	r1, [r2, r3]
				timer_list_pop();
 8001048:	f7ff ffb6 	bl	8000fb8 <timer_list_pop>
			while(timerList.size && timerList.head->duration == 0) {
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <timer_run+0x58>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <timer_run+0x52>
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <timer_run+0x58>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0ec      	beq.n	8001038 <timer_run+0x28>
 800105e:	e000      	b.n	8001062 <timer_run+0x52>
	if (timerList.size == 0) return;
 8001060:	bf00      	nop
			}
		}
	}
}
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200001c8 	.word	0x200001c8
 800106c:	20000130 	.word	0x20000130

08001070 <timer_setDuration>:

void timer_setDuration(uint8_t index, uint32_t duration) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = timer_unit_construct(index, duration/CYCLE);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <timer_setDuration+0x30>)
 8001080:	fba2 2303 	umull	r2, r3, r2, r3
 8001084:	08da      	lsrs	r2, r3, #3
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fef2 	bl	8000e74 <timer_unit_construct>
 8001090:	60f8      	str	r0, [r7, #12]
	timer_list_add(newUnit);
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f7ff ff18 	bl	8000ec8 <timer_list_add>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	cccccccd 	.word	0xcccccccd

080010a4 <timer_checkFlag>:

uint8_t	timer_checkFlag(uint8_t index) {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	if (timerFlag[index] == 1) {
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <timer_checkFlag+0x2c>)
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d105      	bne.n	80010c4 <timer_checkFlag+0x20>
		timerFlag[index] = 0;
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	4a05      	ldr	r2, [pc, #20]	; (80010d0 <timer_checkFlag+0x2c>)
 80010bc:	2100      	movs	r1, #0
 80010be:	54d1      	strb	r1, [r2, r3]
		return 1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <timer_checkFlag+0x22>
	}
	return 0;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	20000130 	.word	0x20000130

080010d4 <timer_clear>:

void timer_clear(uint8_t index) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
//	uint32_t totalDuration = 0;
	timerFlag[index] = 0;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <timer_clear+0x90>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	54d1      	strb	r1, [r2, r3]
	struct timer_unit *curr = timerList.head,
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <timer_clear+0x94>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	60fb      	str	r3, [r7, #12]
			          *prev = NULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
	while (curr != NULL) {
 80010f0:	e009      	b.n	8001106 <timer_clear+0x32>
		if (curr->index == index) break;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	79fa      	ldrb	r2, [r7, #7]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d008      	beq.n	800110e <timer_clear+0x3a>

//		totalDuration += curr->duration;
		prev = curr;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	60bb      	str	r3, [r7, #8]
		curr = curr->nextTimer;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	60fb      	str	r3, [r7, #12]
	while (curr != NULL) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f2      	bne.n	80010f2 <timer_clear+0x1e>
 800110c:	e000      	b.n	8001110 <timer_clear+0x3c>
		if (curr->index == index) break;
 800110e:	bf00      	nop
	}

	if (curr == NULL) return;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d022      	beq.n	800115c <timer_clear+0x88>
	if (prev == NULL) { //item at the head of list
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d104      	bne.n	8001126 <timer_clear+0x52>
		timerList.head = curr->nextTimer;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4a11      	ldr	r2, [pc, #68]	; (8001168 <timer_clear+0x94>)
 8001122:	6053      	str	r3, [r2, #4]
 8001124:	e003      	b.n	800112e <timer_clear+0x5a>
	}
	else {
		prev->nextTimer = curr->nextTimer;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	609a      	str	r2, [r3, #8]
	}
	if (curr->nextTimer != NULL) curr->nextTimer->duration += curr->duration;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <timer_clear+0x74>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	440a      	add	r2, r1
 8001146:	605a      	str	r2, [r3, #4]
	timer_unit_destruct(curr);
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff feb1 	bl	8000eb0 <timer_unit_destruct>
	timerList.size--;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <timer_clear+0x94>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	3b01      	subs	r3, #1
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <timer_clear+0x94>)
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	e000      	b.n	800115e <timer_clear+0x8a>
	if (curr == NULL) return;
 800115c:	bf00      	nop
}
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000130 	.word	0x20000130
 8001168:	200001c8 	.word	0x200001c8

0800116c <traffic_init>:
/*-------------------- init setting --------------------*/
//uint32_t	trafficDuration[3] = {5000, 3000, 2000};
uint32_t traffic_prevDur = 0,
         traffic_currDur = 0; //previous and current duration of traffic

void traffic_init() {
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	global_state = INIT_MODE;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <traffic_init+0x2c>)
 8001172:	220a      	movs	r2, #10
 8001174:	701a      	strb	r2, [r3, #0]
	auto_A_state = AUTO_INIT;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <traffic_init+0x30>)
 8001178:	2214      	movs	r2, #20
 800117a:	701a      	strb	r2, [r3, #0]
	auto_B_state = AUTO_INIT;
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <traffic_init+0x34>)
 800117e:	2214      	movs	r2, #20
 8001180:	701a      	strb	r2, [r3, #0]
	manual_state = MN_INIT;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <traffic_init+0x38>)
 8001184:	221e      	movs	r2, #30
 8001186:	701a      	strb	r2, [r3, #0]
	set_state = SET_INIT;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <traffic_init+0x3c>)
 800118a:	2228      	movs	r2, #40	; 0x28
 800118c:	701a      	strb	r2, [r3, #0]
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000118 	.word	0x20000118
 800119c:	20000119 	.word	0x20000119
 80011a0:	2000011a 	.word	0x2000011a
 80011a4:	2000011b 	.word	0x2000011b
 80011a8:	2000011c 	.word	0x2000011c

080011ac <traffic_send_duration>:

/*------------------- auto fsm -------------------------*/
void traffic_send_duration() {  //send duration to uart
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
	traffic_currDur = duration_get(DUR_TRAFFIC);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff f8ff 	bl	80003b4 <duration_get>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <traffic_send_duration+0x3c>)
 80011ba:	6013      	str	r3, [r2, #0]
	if (traffic_currDur && traffic_currDur != traffic_prevDur) {
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <traffic_send_duration+0x3c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00b      	beq.n	80011dc <traffic_send_duration+0x30>
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <traffic_send_duration+0x3c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <traffic_send_duration+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d005      	beq.n	80011dc <traffic_send_duration+0x30>
		uart_send_num("Traffic duration: ", traffic_currDur);
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <traffic_send_duration+0x3c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <traffic_send_duration+0x44>)
 80011d8:	f000 fb7c 	bl	80018d4 <uart_send_num>
	}
	traffic_prevDur = traffic_currDur;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <traffic_send_duration+0x3c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a02      	ldr	r2, [pc, #8]	; (80011ec <traffic_send_duration+0x40>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000013c 	.word	0x2000013c
 80011ec:	20000138 	.word	0x20000138
 80011f0:	080044c0 	.word	0x080044c0

080011f4 <traffic_auto_fsm_A>:

void traffic_auto_fsm_A() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	switch(auto_A_state) {
 80011f8:	4b41      	ldr	r3, [pc, #260]	; (8001300 <traffic_auto_fsm_A+0x10c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	3b14      	subs	r3, #20
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d874      	bhi.n	80012ec <traffic_auto_fsm_A+0xf8>
 8001202:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <traffic_auto_fsm_A+0x14>)
 8001204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001208:	08001219 	.word	0x08001219
 800120c:	08001239 	.word	0x08001239
 8001210:	08001277 	.word	0x08001277
 8001214:	080012af 	.word	0x080012af
	case AUTO_INIT:
		//change mode
		auto_A_state = AUTO_RED;
 8001218:	4b39      	ldr	r3, [pc, #228]	; (8001300 <traffic_auto_fsm_A+0x10c>)
 800121a:	2215      	movs	r2, #21
 800121c:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <traffic_auto_fsm_A+0x110>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4619      	mov	r1, r3
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff ff23 	bl	8001070 <timer_setDuration>
		duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 800122a:	4b36      	ldr	r3, [pc, #216]	; (8001304 <traffic_auto_fsm_A+0x110>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff f8a7 	bl	8000384 <duration_set>
		break;
 8001236:	e060      	b.n	80012fa <traffic_auto_fsm_A+0x106>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8001238:	2100      	movs	r1, #0
 800123a:	2005      	movs	r0, #5
 800123c:	f7ff f92a 	bl	8000494 <led_turn_on>
		traffic_send_duration();
 8001240:	f7ff ffb4 	bl	80011ac <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8001244:	2001      	movs	r0, #1
 8001246:	f7ff ff2d 	bl	80010a4 <timer_checkFlag>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d04f      	beq.n	80012f0 <traffic_auto_fsm_A+0xfc>
			auto_A_state = AUTO_GREEN;
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <traffic_auto_fsm_A+0x10c>)
 8001252:	2216      	movs	r2, #22
 8001254:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <traffic_auto_fsm_A+0x114>)
 8001258:	223d      	movs	r2, #61	; 0x3d
 800125a:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <traffic_auto_fsm_A+0x110>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4619      	mov	r1, r3
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff ff04 	bl	8001070 <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 8001268:	4b26      	ldr	r3, [pc, #152]	; (8001304 <traffic_auto_fsm_A+0x110>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4619      	mov	r1, r3
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff f888 	bl	8000384 <duration_set>
		}
		break;
 8001274:	e03c      	b.n	80012f0 <traffic_auto_fsm_A+0xfc>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8001276:	2101      	movs	r1, #1
 8001278:	2005      	movs	r0, #5
 800127a:	f7ff f90b 	bl	8000494 <led_turn_on>
		traffic_send_duration();
 800127e:	f7ff ff95 	bl	80011ac <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8001282:	2001      	movs	r0, #1
 8001284:	f7ff ff0e 	bl	80010a4 <timer_checkFlag>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d032      	beq.n	80012f4 <traffic_auto_fsm_A+0x100>
			auto_A_state = AUTO_YELLOW;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <traffic_auto_fsm_A+0x10c>)
 8001290:	2217      	movs	r2, #23
 8001292:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <traffic_auto_fsm_A+0x110>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	4619      	mov	r1, r3
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fee8 	bl	8001070 <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <traffic_auto_fsm_A+0x110>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4619      	mov	r1, r3
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff f86c 	bl	8000384 <duration_set>
		}
		break;
 80012ac:	e022      	b.n	80012f4 <traffic_auto_fsm_A+0x100>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 80012ae:	2102      	movs	r1, #2
 80012b0:	2005      	movs	r0, #5
 80012b2:	f7ff f8ef 	bl	8000494 <led_turn_on>
		traffic_send_duration();
 80012b6:	f7ff ff79 	bl	80011ac <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 80012ba:	2001      	movs	r0, #1
 80012bc:	f7ff fef2 	bl	80010a4 <timer_checkFlag>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d018      	beq.n	80012f8 <traffic_auto_fsm_A+0x104>
			auto_A_state = AUTO_RED;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <traffic_auto_fsm_A+0x10c>)
 80012c8:	2215      	movs	r2, #21
 80012ca:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 80012cc:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <traffic_auto_fsm_A+0x114>)
 80012ce:	223e      	movs	r2, #62	; 0x3e
 80012d0:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <traffic_auto_fsm_A+0x110>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4619      	mov	r1, r3
 80012d8:	2001      	movs	r0, #1
 80012da:	f7ff fec9 	bl	8001070 <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <traffic_auto_fsm_A+0x110>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff f84d 	bl	8000384 <duration_set>
		}
		break;
 80012ea:	e005      	b.n	80012f8 <traffic_auto_fsm_A+0x104>

	/////////////////////////////////////////////////////
	default:
		break;
 80012ec:	bf00      	nop
 80012ee:	e004      	b.n	80012fa <traffic_auto_fsm_A+0x106>
		break;
 80012f0:	bf00      	nop
 80012f2:	e002      	b.n	80012fa <traffic_auto_fsm_A+0x106>
		break;
 80012f4:	bf00      	nop
 80012f6:	e000      	b.n	80012fa <traffic_auto_fsm_A+0x106>
		break;
 80012f8:	bf00      	nop
	}
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000119 	.word	0x20000119
 8001304:	20000050 	.word	0x20000050
 8001308:	2000011d 	.word	0x2000011d

0800130c <traffic_auto_fsm_B>:

void traffic_auto_fsm_B() {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	switch(auto_B_state) {
 8001310:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <traffic_auto_fsm_B+0xc4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3b14      	subs	r3, #20
 8001316:	2b03      	cmp	r3, #3
 8001318:	d850      	bhi.n	80013bc <traffic_auto_fsm_B+0xb0>
 800131a:	a201      	add	r2, pc, #4	; (adr r2, 8001320 <traffic_auto_fsm_B+0x14>)
 800131c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001320:	08001331 	.word	0x08001331
 8001324:	08001345 	.word	0x08001345
 8001328:	0800136d 	.word	0x0800136d
 800132c:	08001395 	.word	0x08001395
	case AUTO_INIT:
		//change mode
		auto_B_state = AUTO_GREEN;
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <traffic_auto_fsm_B+0xc4>)
 8001332:	2216      	movs	r2, #22
 8001334:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <traffic_auto_fsm_B+0xc8>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	4619      	mov	r1, r3
 800133c:	2002      	movs	r0, #2
 800133e:	f7ff fe97 	bl	8001070 <timer_setDuration>
		break;
 8001342:	e042      	b.n	80013ca <traffic_auto_fsm_B+0xbe>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_2, LED_RED);
 8001344:	2100      	movs	r1, #0
 8001346:	2006      	movs	r0, #6
 8001348:	f7ff f8a4 	bl	8000494 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 800134c:	2002      	movs	r0, #2
 800134e:	f7ff fea9 	bl	80010a4 <timer_checkFlag>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d033      	beq.n	80013c0 <traffic_auto_fsm_B+0xb4>
			auto_B_state = AUTO_GREEN;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <traffic_auto_fsm_B+0xc4>)
 800135a:	2216      	movs	r2, #22
 800135c:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <traffic_auto_fsm_B+0xc8>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	4619      	mov	r1, r3
 8001364:	2002      	movs	r0, #2
 8001366:	f7ff fe83 	bl	8001070 <timer_setDuration>
		}
		break;
 800136a:	e029      	b.n	80013c0 <traffic_auto_fsm_B+0xb4>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_2, LED_GREEN);
 800136c:	2101      	movs	r1, #1
 800136e:	2006      	movs	r0, #6
 8001370:	f7ff f890 	bl	8000494 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8001374:	2002      	movs	r0, #2
 8001376:	f7ff fe95 	bl	80010a4 <timer_checkFlag>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d021      	beq.n	80013c4 <traffic_auto_fsm_B+0xb8>
			auto_B_state = AUTO_YELLOW;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <traffic_auto_fsm_B+0xc4>)
 8001382:	2217      	movs	r2, #23
 8001384:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <traffic_auto_fsm_B+0xc8>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	4619      	mov	r1, r3
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff fe6f 	bl	8001070 <timer_setDuration>
		}
		break;
 8001392:	e017      	b.n	80013c4 <traffic_auto_fsm_B+0xb8>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8001394:	2102      	movs	r1, #2
 8001396:	2006      	movs	r0, #6
 8001398:	f7ff f87c 	bl	8000494 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 800139c:	2002      	movs	r0, #2
 800139e:	f7ff fe81 	bl	80010a4 <timer_checkFlag>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00f      	beq.n	80013c8 <traffic_auto_fsm_B+0xbc>
			auto_B_state = AUTO_RED;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <traffic_auto_fsm_B+0xc4>)
 80013aa:	2215      	movs	r2, #21
 80013ac:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <traffic_auto_fsm_B+0xc8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4619      	mov	r1, r3
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff fe5b 	bl	8001070 <timer_setDuration>
		}
		break;
 80013ba:	e005      	b.n	80013c8 <traffic_auto_fsm_B+0xbc>

	/////////////////////////////////////////////////////
	default:
		break;
 80013bc:	bf00      	nop
 80013be:	e004      	b.n	80013ca <traffic_auto_fsm_B+0xbe>
		break;
 80013c0:	bf00      	nop
 80013c2:	e002      	b.n	80013ca <traffic_auto_fsm_B+0xbe>
		break;
 80013c4:	bf00      	nop
 80013c6:	e000      	b.n	80013ca <traffic_auto_fsm_B+0xbe>
		break;
 80013c8:	bf00      	nop
	}
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000011a 	.word	0x2000011a
 80013d4:	20000050 	.word	0x20000050

080013d8 <traffic_manual_fsm>:

/*----------------- manual fsm -------------------------*/
void traffic_manual_fsm() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	switch(manual_state) {
 80013dc:	4b33      	ldr	r3, [pc, #204]	; (80014ac <traffic_manual_fsm+0xd4>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	3b1e      	subs	r3, #30
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d856      	bhi.n	8001494 <traffic_manual_fsm+0xbc>
 80013e6:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <traffic_manual_fsm+0x14>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	08001401 	.word	0x08001401
 80013f0:	08001409 	.word	0x08001409
 80013f4:	0800142d 	.word	0x0800142d
 80013f8:	0800144f 	.word	0x0800144f
 80013fc:	08001473 	.word	0x08001473
	case MN_INIT:
		//change mode
		manual_state = MN_RED0;
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <traffic_manual_fsm+0xd4>)
 8001402:	221f      	movs	r2, #31
 8001404:	701a      	strb	r2, [r3, #0]
		break;
 8001406:	e04e      	b.n	80014a6 <traffic_manual_fsm+0xce>

	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - green
	case MN_RED0:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8001408:	2100      	movs	r1, #0
 800140a:	2005      	movs	r0, #5
 800140c:	f7ff f842 	bl	8000494 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8001410:	2101      	movs	r1, #1
 8001412:	2006      	movs	r0, #6
 8001414:	f7ff f83e 	bl	8000494 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8001418:	2001      	movs	r0, #1
 800141a:	f7fe ff85 	bl	8000328 <button_isPressed>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d039      	beq.n	8001498 <traffic_manual_fsm+0xc0>
			manual_state = MN_RED1;
 8001424:	4b21      	ldr	r3, [pc, #132]	; (80014ac <traffic_manual_fsm+0xd4>)
 8001426:	2220      	movs	r2, #32
 8001428:	701a      	strb	r2, [r3, #0]
		}
		break;
 800142a:	e035      	b.n	8001498 <traffic_manual_fsm+0xc0>
	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - yellow
	case MN_RED1:
		//TODO
//		led_turn_on(TRAFFIC_1, LED_RED);
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 800142c:	2102      	movs	r1, #2
 800142e:	2006      	movs	r0, #6
 8001430:	f7ff f830 	bl	8000494 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8001434:	2001      	movs	r0, #1
 8001436:	f7fe ff77 	bl	8000328 <button_isPressed>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d02d      	beq.n	800149c <traffic_manual_fsm+0xc4>
			manual_state = MN_GREEN;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <traffic_manual_fsm+0xd4>)
 8001442:	2221      	movs	r2, #33	; 0x21
 8001444:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <traffic_manual_fsm+0xd8>)
 8001448:	223d      	movs	r2, #61	; 0x3d
 800144a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800144c:	e026      	b.n	800149c <traffic_manual_fsm+0xc4>

	///////////////////////////////////////////////////////////
	// traffic A - green; traffic B - red
	case MN_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 800144e:	2101      	movs	r1, #1
 8001450:	2005      	movs	r0, #5
 8001452:	f7ff f81f 	bl	8000494 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8001456:	2100      	movs	r1, #0
 8001458:	2006      	movs	r0, #6
 800145a:	f7ff f81b 	bl	8000494 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 800145e:	2001      	movs	r0, #1
 8001460:	f7fe ff62 	bl	8000328 <button_isPressed>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d01a      	beq.n	80014a0 <traffic_manual_fsm+0xc8>
			manual_state = MN_YELLOW;
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <traffic_manual_fsm+0xd4>)
 800146c:	2222      	movs	r2, #34	; 0x22
 800146e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001470:	e016      	b.n	80014a0 <traffic_manual_fsm+0xc8>

	///////////////////////////////////////////////////////////
	// traffic A - yellow; traffic B - red
	case MN_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8001472:	2102      	movs	r1, #2
 8001474:	2005      	movs	r0, #5
 8001476:	f7ff f80d 	bl	8000494 <led_turn_on>
//		led_turn_on(TRAFFIC_2, LED_RED);

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 800147a:	2001      	movs	r0, #1
 800147c:	f7fe ff54 	bl	8000328 <button_isPressed>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00e      	beq.n	80014a4 <traffic_manual_fsm+0xcc>
			manual_state = MN_RED0;
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <traffic_manual_fsm+0xd4>)
 8001488:	221f      	movs	r2, #31
 800148a:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <traffic_manual_fsm+0xd8>)
 800148e:	223e      	movs	r2, #62	; 0x3e
 8001490:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001492:	e007      	b.n	80014a4 <traffic_manual_fsm+0xcc>

	///////////////////////////////////////////////////////////
	default:
		break;
 8001494:	bf00      	nop
 8001496:	e006      	b.n	80014a6 <traffic_manual_fsm+0xce>
		break;
 8001498:	bf00      	nop
 800149a:	e004      	b.n	80014a6 <traffic_manual_fsm+0xce>
		break;
 800149c:	bf00      	nop
 800149e:	e002      	b.n	80014a6 <traffic_manual_fsm+0xce>
		break;
 80014a0:	bf00      	nop
 80014a2:	e000      	b.n	80014a6 <traffic_manual_fsm+0xce>
		break;
 80014a4:	bf00      	nop
	}
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000011b 	.word	0x2000011b
 80014b0:	2000011d 	.word	0x2000011d

080014b4 <duration_inc>:

/*-------------------- set fsm -------------------------*/
void duration_inc(uint8_t led_type) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
	// increase specific duration by 1 unit
	trafficDuration[led_type] += DURATION_UNIT;
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4a10      	ldr	r2, [pc, #64]	; (8001504 <duration_inc+0x50>)
 80014c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80014cc:	490d      	ldr	r1, [pc, #52]	; (8001504 <duration_inc+0x50>)
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (trafficDuration[led_type] > DURATION_MAX) { //if duration over max, reset to DURATION_UNIT
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <duration_inc+0x50>)
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	f242 7210 	movw	r2, #10000	; 0x2710
 80014de:	4293      	cmp	r3, r2
 80014e0:	d90a      	bls.n	80014f8 <duration_inc+0x44>
		trafficDuration[led_type] -= DURATION_MAX;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <duration_inc+0x50>)
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80014f0:	3b10      	subs	r3, #16
 80014f2:	4904      	ldr	r1, [pc, #16]	; (8001504 <duration_inc+0x50>)
 80014f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000050 	.word	0x20000050

08001508 <traffic_set_fsm>:

void traffic_set_fsm() {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	switch(set_state) {
 800150c:	4b60      	ldr	r3, [pc, #384]	; (8001690 <traffic_set_fsm+0x188>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	3b28      	subs	r3, #40	; 0x28
 8001512:	2b03      	cmp	r3, #3
 8001514:	f200 80b2 	bhi.w	800167c <traffic_set_fsm+0x174>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <traffic_set_fsm+0x18>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001531 	.word	0x08001531
 8001524:	08001539 	.word	0x08001539
 8001528:	080015a5 	.word	0x080015a5
 800152c:	08001611 	.word	0x08001611
	case SET_INIT:
		set_state = SET_RED;
 8001530:	4b57      	ldr	r3, [pc, #348]	; (8001690 <traffic_set_fsm+0x188>)
 8001532:	2229      	movs	r2, #41	; 0x29
 8001534:	701a      	strb	r2, [r3, #0]
		break;
 8001536:	e0a8      	b.n	800168a <traffic_set_fsm+0x182>

	//////////////////////////////////////////////////////////////
	case SET_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8001538:	2100      	movs	r1, #0
 800153a:	2005      	movs	r0, #5
 800153c:	f7fe ffaa 	bl	8000494 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8001540:	2100      	movs	r1, #0
 8001542:	2006      	movs	r0, #6
 8001544:	f7fe ffa6 	bl	8000494 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8001548:	2002      	movs	r0, #2
 800154a:	f7fe feed 	bl	8000328 <button_isPressed>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d009      	beq.n	8001568 <traffic_set_fsm+0x60>
			duration_inc(LED_RED);
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff ffad 	bl	80014b4 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 800155a:	2003      	movs	r0, #3
 800155c:	f7ff fdba 	bl	80010d4 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8001560:	210a      	movs	r1, #10
 8001562:	2003      	movs	r0, #3
 8001564:	f7ff fd84 	bl	8001070 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8001568:	2002      	movs	r0, #2
 800156a:	f7fe fef7 	bl	800035c <button_isLongPressed>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d00d      	beq.n	8001590 <traffic_set_fsm+0x88>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8001574:	2003      	movs	r0, #3
 8001576:	f7ff fd95 	bl	80010a4 <timer_checkFlag>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <traffic_set_fsm+0x88>
				duration_inc(LED_RED);
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff ff97 	bl	80014b4 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8001586:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800158a:	2003      	movs	r0, #3
 800158c:	f7ff fd70 	bl	8001070 <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)) {
 8001590:	2001      	movs	r0, #1
 8001592:	f7fe fec9 	bl	8000328 <button_isPressed>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d071      	beq.n	8001680 <traffic_set_fsm+0x178>
			set_state = SET_GREEN;
 800159c:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <traffic_set_fsm+0x188>)
 800159e:	222a      	movs	r2, #42	; 0x2a
 80015a0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80015a2:	e06d      	b.n	8001680 <traffic_set_fsm+0x178>

	//////////////////////////////////////////////////////////////
	case SET_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 80015a4:	2101      	movs	r1, #1
 80015a6:	2005      	movs	r0, #5
 80015a8:	f7fe ff74 	bl	8000494 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 80015ac:	2101      	movs	r1, #1
 80015ae:	2006      	movs	r0, #6
 80015b0:	f7fe ff70 	bl	8000494 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7fe feb7 	bl	8000328 <button_isPressed>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <traffic_set_fsm+0xcc>
			duration_inc(LED_GREEN);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff ff77 	bl	80014b4 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 80015c6:	2003      	movs	r0, #3
 80015c8:	f7ff fd84 	bl	80010d4 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 80015cc:	210a      	movs	r1, #10
 80015ce:	2003      	movs	r0, #3
 80015d0:	f7ff fd4e 	bl	8001070 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 80015d4:	2002      	movs	r0, #2
 80015d6:	f7fe fec1 	bl	800035c <button_isLongPressed>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00d      	beq.n	80015fc <traffic_set_fsm+0xf4>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 80015e0:	2003      	movs	r0, #3
 80015e2:	f7ff fd5f 	bl	80010a4 <timer_checkFlag>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <traffic_set_fsm+0xf4>
				duration_inc(LED_GREEN);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f7ff ff61 	bl	80014b4 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 80015f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015f6:	2003      	movs	r0, #3
 80015f8:	f7ff fd3a 	bl	8001070 <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7fe fe93 	bl	8000328 <button_isPressed>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d03d      	beq.n	8001684 <traffic_set_fsm+0x17c>
			set_state = SET_YELLOW;
 8001608:	4b21      	ldr	r3, [pc, #132]	; (8001690 <traffic_set_fsm+0x188>)
 800160a:	222b      	movs	r2, #43	; 0x2b
 800160c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800160e:	e039      	b.n	8001684 <traffic_set_fsm+0x17c>

	//////////////////////////////////////////////////////////////
	case SET_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8001610:	2102      	movs	r1, #2
 8001612:	2005      	movs	r0, #5
 8001614:	f7fe ff3e 	bl	8000494 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8001618:	2102      	movs	r1, #2
 800161a:	2006      	movs	r0, #6
 800161c:	f7fe ff3a 	bl	8000494 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8001620:	2002      	movs	r0, #2
 8001622:	f7fe fe81 	bl	8000328 <button_isPressed>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d009      	beq.n	8001640 <traffic_set_fsm+0x138>
			duration_inc(LED_YELLOW);
 800162c:	2002      	movs	r0, #2
 800162e:	f7ff ff41 	bl	80014b4 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8001632:	2003      	movs	r0, #3
 8001634:	f7ff fd4e 	bl	80010d4 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8001638:	210a      	movs	r1, #10
 800163a:	2003      	movs	r0, #3
 800163c:	f7ff fd18 	bl	8001070 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8001640:	2002      	movs	r0, #2
 8001642:	f7fe fe8b 	bl	800035c <button_isLongPressed>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d00d      	beq.n	8001668 <traffic_set_fsm+0x160>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 800164c:	2003      	movs	r0, #3
 800164e:	f7ff fd29 	bl	80010a4 <timer_checkFlag>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <traffic_set_fsm+0x160>
				duration_inc(LED_YELLOW);
 8001658:	2002      	movs	r0, #2
 800165a:	f7ff ff2b 	bl	80014b4 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 800165e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001662:	2003      	movs	r0, #3
 8001664:	f7ff fd04 	bl	8001070 <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8001668:	2001      	movs	r0, #1
 800166a:	f7fe fe5d 	bl	8000328 <button_isPressed>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <traffic_set_fsm+0x180>
			set_state = SET_RED;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <traffic_set_fsm+0x188>)
 8001676:	2229      	movs	r2, #41	; 0x29
 8001678:	701a      	strb	r2, [r3, #0]
		}
		break;
 800167a:	e005      	b.n	8001688 <traffic_set_fsm+0x180>

	//////////////////////////////////////////////////////////////
	default:
		break;
 800167c:	bf00      	nop
 800167e:	e004      	b.n	800168a <traffic_set_fsm+0x182>
		break;
 8001680:	bf00      	nop
 8001682:	e002      	b.n	800168a <traffic_set_fsm+0x182>
		break;
 8001684:	bf00      	nop
 8001686:	e000      	b.n	800168a <traffic_set_fsm+0x182>
		break;
 8001688:	bf00      	nop
	}
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000011c 	.word	0x2000011c

08001694 <traffic_fsm>:

/*----------------- global fsm -------------------------*/
void traffic_fsm() {
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	switch(global_state) {
 8001698:	4b7a      	ldr	r3, [pc, #488]	; (8001884 <traffic_fsm+0x1f0>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	3b0a      	subs	r3, #10
 800169e:	2b03      	cmp	r3, #3
 80016a0:	f200 80e6 	bhi.w	8001870 <traffic_fsm+0x1dc>
 80016a4:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <traffic_fsm+0x18>)
 80016a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016aa:	bf00      	nop
 80016ac:	080016bd 	.word	0x080016bd
 80016b0:	080016c9 	.word	0x080016c9
 80016b4:	0800173b 	.word	0x0800173b
 80016b8:	0800175f 	.word	0x0800175f
	case INIT_MODE:
		led_clear_all();
 80016bc:	f7fe fede 	bl	800047c <led_clear_all>
		global_state = AUTO_MODE;
 80016c0:	4b70      	ldr	r3, [pc, #448]	; (8001884 <traffic_fsm+0x1f0>)
 80016c2:	220b      	movs	r2, #11
 80016c4:	701a      	strb	r2, [r3, #0]
		break;
 80016c6:	e0da      	b.n	800187e <traffic_fsm+0x1ea>

	//////////////////////////////////////////////////////
	case AUTO_MODE: //automatically control traffic light
		//TODO
		traffic_auto_fsm_A();
 80016c8:	f7ff fd94 	bl	80011f4 <traffic_auto_fsm_A>
		traffic_auto_fsm_B();
 80016cc:	f7ff fe1e 	bl	800130c <traffic_auto_fsm_B>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7fe fe29 	bl	8000328 <button_isPressed>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d02c      	beq.n	8001736 <traffic_fsm+0xa2>
			led_clear_all();
 80016dc:	f7fe fece 	bl	800047c <led_clear_all>
			global_state = MANUAL_MODE;
 80016e0:	4b68      	ldr	r3, [pc, #416]	; (8001884 <traffic_fsm+0x1f0>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	701a      	strb	r2, [r3, #0]
			duration_set(DUR_TRAFFIC, 0);
 80016e6:	2100      	movs	r1, #0
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7fe fe4b 	bl	8000384 <duration_set>
			switch (auto_A_state) { //manual mode with previous auto state
 80016ee:	4b66      	ldr	r3, [pc, #408]	; (8001888 <traffic_fsm+0x1f4>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b17      	cmp	r3, #23
 80016f4:	d01b      	beq.n	800172e <traffic_fsm+0x9a>
 80016f6:	2b17      	cmp	r3, #23
 80016f8:	f300 80bc 	bgt.w	8001874 <traffic_fsm+0x1e0>
 80016fc:	2b15      	cmp	r3, #21
 80016fe:	d002      	beq.n	8001706 <traffic_fsm+0x72>
 8001700:	2b16      	cmp	r3, #22
 8001702:	d010      	beq.n	8001726 <traffic_fsm+0x92>
			case AUTO_YELLOW: // traffic A = yellow
				manual_state = MN_YELLOW;
				break;
			}
		}
		break;
 8001704:	e0b6      	b.n	8001874 <traffic_fsm+0x1e0>
				switch (auto_B_state){
 8001706:	4b61      	ldr	r3, [pc, #388]	; (800188c <traffic_fsm+0x1f8>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b16      	cmp	r3, #22
 800170c:	d002      	beq.n	8001714 <traffic_fsm+0x80>
 800170e:	2b17      	cmp	r3, #23
 8001710:	d004      	beq.n	800171c <traffic_fsm+0x88>
				break;
 8001712:	e011      	b.n	8001738 <traffic_fsm+0xa4>
					manual_state = MN_RED0;
 8001714:	4b5e      	ldr	r3, [pc, #376]	; (8001890 <traffic_fsm+0x1fc>)
 8001716:	221f      	movs	r2, #31
 8001718:	701a      	strb	r2, [r3, #0]
					break;
 800171a:	e003      	b.n	8001724 <traffic_fsm+0x90>
					manual_state = MN_RED1;
 800171c:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <traffic_fsm+0x1fc>)
 800171e:	2220      	movs	r2, #32
 8001720:	701a      	strb	r2, [r3, #0]
					break;
 8001722:	bf00      	nop
				break;
 8001724:	e008      	b.n	8001738 <traffic_fsm+0xa4>
				manual_state = MN_GREEN;
 8001726:	4b5a      	ldr	r3, [pc, #360]	; (8001890 <traffic_fsm+0x1fc>)
 8001728:	2221      	movs	r2, #33	; 0x21
 800172a:	701a      	strb	r2, [r3, #0]
				break;
 800172c:	e004      	b.n	8001738 <traffic_fsm+0xa4>
				manual_state = MN_YELLOW;
 800172e:	4b58      	ldr	r3, [pc, #352]	; (8001890 <traffic_fsm+0x1fc>)
 8001730:	2222      	movs	r2, #34	; 0x22
 8001732:	701a      	strb	r2, [r3, #0]
				break;
 8001734:	e000      	b.n	8001738 <traffic_fsm+0xa4>
		}
 8001736:	bf00      	nop
		break;
 8001738:	e09c      	b.n	8001874 <traffic_fsm+0x1e0>

	////////////////////////////////////////////////////
	case MANUAL_MODE: // manually control traffic light
		//TODO
		traffic_manual_fsm();
 800173a:	f7ff fe4d 	bl	80013d8 <traffic_manual_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 800173e:	2000      	movs	r0, #0
 8001740:	f7fe fdf2 	bl	8000328 <button_isPressed>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 8096 	beq.w	8001878 <traffic_fsm+0x1e4>
			global_state = SET_MODE;
 800174c:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <traffic_fsm+0x1f0>)
 800174e:	220d      	movs	r2, #13
 8001750:	701a      	strb	r2, [r3, #0]
			set_state = SET_INIT;
 8001752:	4b50      	ldr	r3, [pc, #320]	; (8001894 <traffic_fsm+0x200>)
 8001754:	2228      	movs	r2, #40	; 0x28
 8001756:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8001758:	f7fe fe90 	bl	800047c <led_clear_all>
		}
		break;
 800175c:	e08c      	b.n	8001878 <traffic_fsm+0x1e4>

	//////////////////////////////////////////////////////
	case SET_MODE: //set duration for each led of traffic
		//TODO
		traffic_set_fsm();
 800175e:	f7ff fed3 	bl	8001508 <traffic_set_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8001762:	2000      	movs	r0, #0
 8001764:	f7fe fde0 	bl	8000328 <button_isPressed>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d07e      	beq.n	800186c <traffic_fsm+0x1d8>
			global_state = AUTO_MODE;
 800176e:	4b45      	ldr	r3, [pc, #276]	; (8001884 <traffic_fsm+0x1f0>)
 8001770:	220b      	movs	r2, #11
 8001772:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8001774:	f7fe fe82 	bl	800047c <led_clear_all>
			timer_clear(TIMER_AUTO_A); //clear timer, prepare for auto mode
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff fcab 	bl	80010d4 <timer_clear>
			timer_clear(TIMER_AUTO_B); //clear timer, prepare for auto mode
 800177e:	2002      	movs	r0, #2
 8001780:	f7ff fca8 	bl	80010d4 <timer_clear>
			switch(manual_state) { //auto mode with previous manual state
 8001784:	4b42      	ldr	r3, [pc, #264]	; (8001890 <traffic_fsm+0x1fc>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	3b1f      	subs	r3, #31
 800178a:	2b03      	cmp	r3, #3
 800178c:	d876      	bhi.n	800187c <traffic_fsm+0x1e8>
 800178e:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <traffic_fsm+0x100>)
 8001790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017d7 	.word	0x080017d7
 800179c:	08001809 	.word	0x08001809
 80017a0:	0800183b 	.word	0x0800183b
			///////////////////////////////////////////////////
			case MN_RED0: //traffic A: red; traffic B: green
				auto_A_state = AUTO_RED;
 80017a4:	4b38      	ldr	r3, [pc, #224]	; (8001888 <traffic_fsm+0x1f4>)
 80017a6:	2215      	movs	r2, #21
 80017a8:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 80017aa:	4b3b      	ldr	r3, [pc, #236]	; (8001898 <traffic_fsm+0x204>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7ff fc5d 	bl	8001070 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 80017b6:	4b38      	ldr	r3, [pc, #224]	; (8001898 <traffic_fsm+0x204>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4619      	mov	r1, r3
 80017bc:	2000      	movs	r0, #0
 80017be:	f7fe fde1 	bl	8000384 <duration_set>

				auto_B_state = AUTO_GREEN;
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <traffic_fsm+0x1f8>)
 80017c4:	2216      	movs	r2, #22
 80017c6:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 80017c8:	4b33      	ldr	r3, [pc, #204]	; (8001898 <traffic_fsm+0x204>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4619      	mov	r1, r3
 80017ce:	2002      	movs	r0, #2
 80017d0:	f7ff fc4e 	bl	8001070 <timer_setDuration>
				break;
 80017d4:	e04b      	b.n	800186e <traffic_fsm+0x1da>
			///////////////////////////////////////////////////
			case MN_RED1: //traffic A: red; traffic B: yellow
				auto_A_state = AUTO_RED;
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <traffic_fsm+0x1f4>)
 80017d8:	2215      	movs	r2, #21
 80017da:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <traffic_fsm+0x204>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4619      	mov	r1, r3
 80017e2:	2001      	movs	r0, #1
 80017e4:	f7ff fc44 	bl	8001070 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 80017e8:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <traffic_fsm+0x204>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4619      	mov	r1, r3
 80017ee:	2000      	movs	r0, #0
 80017f0:	f7fe fdc8 	bl	8000384 <duration_set>

				auto_B_state = AUTO_YELLOW;
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <traffic_fsm+0x1f8>)
 80017f6:	2217      	movs	r2, #23
 80017f8:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <traffic_fsm+0x204>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4619      	mov	r1, r3
 8001800:	2002      	movs	r0, #2
 8001802:	f7ff fc35 	bl	8001070 <timer_setDuration>
				break;
 8001806:	e032      	b.n	800186e <traffic_fsm+0x1da>

			///////////////////////////////////////////////////
			case MN_GREEN: //traffic A: green; traffic B: red
				auto_A_state = AUTO_GREEN;
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <traffic_fsm+0x1f4>)
 800180a:	2216      	movs	r2, #22
 800180c:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <traffic_fsm+0x204>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4619      	mov	r1, r3
 8001814:	2001      	movs	r0, #1
 8001816:	f7ff fc2b 	bl	8001070 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <traffic_fsm+0x204>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4619      	mov	r1, r3
 8001820:	2000      	movs	r0, #0
 8001822:	f7fe fdaf 	bl	8000384 <duration_set>

				auto_B_state = AUTO_RED;
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <traffic_fsm+0x1f8>)
 8001828:	2215      	movs	r2, #21
 800182a:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <traffic_fsm+0x204>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	2002      	movs	r0, #2
 8001834:	f7ff fc1c 	bl	8001070 <timer_setDuration>
				break;
 8001838:	e019      	b.n	800186e <traffic_fsm+0x1da>
			///////////////////////////////////////////////////
			case MN_YELLOW: //traffic A: yellow; traffic B: red
				auto_A_state = AUTO_YELLOW;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <traffic_fsm+0x1f4>)
 800183c:	2217      	movs	r2, #23
 800183e:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <traffic_fsm+0x204>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4619      	mov	r1, r3
 8001846:	2001      	movs	r0, #1
 8001848:	f7ff fc12 	bl	8001070 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <traffic_fsm+0x204>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4619      	mov	r1, r3
 8001852:	2000      	movs	r0, #0
 8001854:	f7fe fd96 	bl	8000384 <duration_set>

				auto_B_state = AUTO_RED;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <traffic_fsm+0x1f8>)
 800185a:	2215      	movs	r2, #21
 800185c:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <traffic_fsm+0x204>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	4619      	mov	r1, r3
 8001864:	2002      	movs	r0, #2
 8001866:	f7ff fc03 	bl	8001070 <timer_setDuration>
				break;
 800186a:	e000      	b.n	800186e <traffic_fsm+0x1da>
			}
		}
 800186c:	bf00      	nop
		break;
 800186e:	e005      	b.n	800187c <traffic_fsm+0x1e8>

	///////////////////////////////////////////////
	default:
		break;
 8001870:	bf00      	nop
 8001872:	e004      	b.n	800187e <traffic_fsm+0x1ea>
		break;
 8001874:	bf00      	nop
 8001876:	e002      	b.n	800187e <traffic_fsm+0x1ea>
		break;
 8001878:	bf00      	nop
 800187a:	e000      	b.n	800187e <traffic_fsm+0x1ea>
		break;
 800187c:	bf00      	nop
	}
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000118 	.word	0x20000118
 8001888:	20000119 	.word	0x20000119
 800188c:	2000011a 	.word	0x2000011a
 8001890:	2000011b 	.word	0x2000011b
 8001894:	2000011c 	.word	0x2000011c
 8001898:	20000050 	.word	0x20000050

0800189c <uart_init>:

#include "uart.h"

UART_HandleTypeDef huart2;

void uart_init() {
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	sprintf(tx_data, "HELLO!\r\n");
 80018a0:	4908      	ldr	r1, [pc, #32]	; (80018c4 <uart_init+0x28>)
 80018a2:	4809      	ldr	r0, [pc, #36]	; (80018c8 <uart_init+0x2c>)
 80018a4:	f002 fa70 	bl	8003d88 <siprintf>
	HAL_UART_Transmit(&huart2, &tx_data, sizeof(tx_data), 1000);
 80018a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ac:	2228      	movs	r2, #40	; 0x28
 80018ae:	4906      	ldr	r1, [pc, #24]	; (80018c8 <uart_init+0x2c>)
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <uart_init+0x30>)
 80018b2:	f001 fc86 	bl	80031c2 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80018b6:	2201      	movs	r2, #1
 80018b8:	4905      	ldr	r1, [pc, #20]	; (80018d0 <uart_init+0x34>)
 80018ba:	4804      	ldr	r0, [pc, #16]	; (80018cc <uart_init+0x30>)
 80018bc:	f001 fd13 	bl	80032e6 <HAL_UART_Receive_IT>
}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	080044d4 	.word	0x080044d4
 80018c8:	20000154 	.word	0x20000154
 80018cc:	200001d0 	.word	0x200001d0
 80018d0:	20000150 	.word	0x20000150

080018d4 <uart_send_num>:
	sprintf(tx_data, "%s\r\n", str);
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
}

void uart_send_num(char str[], uint32_t data) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
	sprintf(tx_data, "%s%d\r\n", str, data);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	490a      	ldr	r1, [pc, #40]	; (800190c <uart_send_num+0x38>)
 80018e4:	480a      	ldr	r0, [pc, #40]	; (8001910 <uart_send_num+0x3c>)
 80018e6:	f002 fa4f 	bl	8003d88 <siprintf>
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	2228      	movs	r2, #40	; 0x28
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <uart_send_num+0x3c>)
 80018f2:	4808      	ldr	r0, [pc, #32]	; (8001914 <uart_send_num+0x40>)
 80018f4:	f001 fc65 	bl	80031c2 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	4907      	ldr	r1, [pc, #28]	; (8001918 <uart_send_num+0x44>)
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <uart_send_num+0x40>)
 80018fe:	f001 fcf2 	bl	80032e6 <HAL_UART_Receive_IT>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	080044e8 	.word	0x080044e8
 8001910:	20000154 	.word	0x20000154
 8001914:	200001d0 	.word	0x200001d0
 8001918:	20000150 	.word	0x20000150

0800191c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800191e:	490d      	ldr	r1, [pc, #52]	; (8001954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001934:	4c0a      	ldr	r4, [pc, #40]	; (8001960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001942:	f7ff fa91 	bl	8000e68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f002 f92d 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800194a:	f7fe ff01 	bl	8000750 <main>
  bx lr
 800194e:	4770      	bx	lr
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001958:	08004554 	.word	0x08004554
  ldr r2, =_sbss
 800195c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001960:	20000228 	.word	0x20000228

08001964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_2_IRQHandler>
	...

08001968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_Init+0x28>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a07      	ldr	r2, [pc, #28]	; (8001990 <HAL_Init+0x28>)
 8001972:	f043 0310 	orr.w	r3, r3, #16
 8001976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f923 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197e:	200f      	movs	r0, #15
 8001980:	f000 f808 	bl	8001994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001984:	f7ff f956 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40022000 	.word	0x40022000

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_InitTick+0x54>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b12      	ldr	r3, [pc, #72]	; (80019ec <HAL_InitTick+0x58>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	4619      	mov	r1, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f000 f93b 	bl	8001c2e <HAL_SYSTICK_Config>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e00e      	b.n	80019e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d80a      	bhi.n	80019de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f000 f903 	bl	8001bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d4:	4a06      	ldr	r2, [pc, #24]	; (80019f0 <HAL_InitTick+0x5c>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2000005c 	.word	0x2000005c
 80019ec:	20000064 	.word	0x20000064
 80019f0:	20000060 	.word	0x20000060

080019f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_IncTick+0x1c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_IncTick+0x20>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	4a03      	ldr	r2, [pc, #12]	; (8001a14 <HAL_IncTick+0x20>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000064 	.word	0x20000064
 8001a14:	20000214 	.word	0x20000214

08001a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_GetTick+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000214 	.word	0x20000214

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db0b      	blt.n	8001aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 021f 	and.w	r2, r3, #31
 8001aa8:	4906      	ldr	r1, [pc, #24]	; (8001ac4 <__NVIC_EnableIRQ+0x34>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	095b      	lsrs	r3, r3, #5
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f7ff ff90 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff2d 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff42 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff90 	bl	8001b1c <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5f 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff35 	bl	8001a90 <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa2 	bl	8001b80 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d008      	beq.n	8001c6e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2204      	movs	r2, #4
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e020      	b.n	8001cb0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 020e 	bic.w	r2, r2, #14
 8001c7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d005      	beq.n	8001cde <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e051      	b.n	8001d82 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 020e 	bic.w	r2, r2, #14
 8001cec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0201 	bic.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <HAL_DMA_Abort_IT+0xd0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d029      	beq.n	8001d5c <HAL_DMA_Abort_IT+0xa0>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <HAL_DMA_Abort_IT+0xd4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d022      	beq.n	8001d58 <HAL_DMA_Abort_IT+0x9c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_DMA_Abort_IT+0xd8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d01a      	beq.n	8001d52 <HAL_DMA_Abort_IT+0x96>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_DMA_Abort_IT+0xdc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d012      	beq.n	8001d4c <HAL_DMA_Abort_IT+0x90>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <HAL_DMA_Abort_IT+0xe0>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00a      	beq.n	8001d46 <HAL_DMA_Abort_IT+0x8a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1a      	ldr	r2, [pc, #104]	; (8001da0 <HAL_DMA_Abort_IT+0xe4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d102      	bne.n	8001d40 <HAL_DMA_Abort_IT+0x84>
 8001d3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d3e:	e00e      	b.n	8001d5e <HAL_DMA_Abort_IT+0xa2>
 8001d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d44:	e00b      	b.n	8001d5e <HAL_DMA_Abort_IT+0xa2>
 8001d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d4a:	e008      	b.n	8001d5e <HAL_DMA_Abort_IT+0xa2>
 8001d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d50:	e005      	b.n	8001d5e <HAL_DMA_Abort_IT+0xa2>
 8001d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d56:	e002      	b.n	8001d5e <HAL_DMA_Abort_IT+0xa2>
 8001d58:	2310      	movs	r3, #16
 8001d5a:	e000      	b.n	8001d5e <HAL_DMA_Abort_IT+0xa2>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <HAL_DMA_Abort_IT+0xe8>)
 8001d60:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	4798      	blx	r3
    } 
  }
  return status;
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40020008 	.word	0x40020008
 8001d90:	4002001c 	.word	0x4002001c
 8001d94:	40020030 	.word	0x40020030
 8001d98:	40020044 	.word	0x40020044
 8001d9c:	40020058 	.word	0x40020058
 8001da0:	4002006c 	.word	0x4002006c
 8001da4:	40020000 	.word	0x40020000

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b08b      	sub	sp, #44	; 0x2c
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db2:	2300      	movs	r3, #0
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	e148      	b.n	800204e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	f040 8137 	bne.w	8002048 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4aa3      	ldr	r2, [pc, #652]	; (800206c <HAL_GPIO_Init+0x2c4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d05e      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001de4:	4aa1      	ldr	r2, [pc, #644]	; (800206c <HAL_GPIO_Init+0x2c4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d875      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001dea:	4aa1      	ldr	r2, [pc, #644]	; (8002070 <HAL_GPIO_Init+0x2c8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d058      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001df0:	4a9f      	ldr	r2, [pc, #636]	; (8002070 <HAL_GPIO_Init+0x2c8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d86f      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001df6:	4a9f      	ldr	r2, [pc, #636]	; (8002074 <HAL_GPIO_Init+0x2cc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d052      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001dfc:	4a9d      	ldr	r2, [pc, #628]	; (8002074 <HAL_GPIO_Init+0x2cc>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d869      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e02:	4a9d      	ldr	r2, [pc, #628]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d04c      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001e08:	4a9b      	ldr	r2, [pc, #620]	; (8002078 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d863      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e0e:	4a9b      	ldr	r2, [pc, #620]	; (800207c <HAL_GPIO_Init+0x2d4>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d046      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
 8001e14:	4a99      	ldr	r2, [pc, #612]	; (800207c <HAL_GPIO_Init+0x2d4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d85d      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d82a      	bhi.n	8001e74 <HAL_GPIO_Init+0xcc>
 8001e1e:	2b12      	cmp	r3, #18
 8001e20:	d859      	bhi.n	8001ed6 <HAL_GPIO_Init+0x12e>
 8001e22:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <HAL_GPIO_Init+0x80>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001ea3 	.word	0x08001ea3
 8001e2c:	08001e7d 	.word	0x08001e7d
 8001e30:	08001e8f 	.word	0x08001e8f
 8001e34:	08001ed1 	.word	0x08001ed1
 8001e38:	08001ed7 	.word	0x08001ed7
 8001e3c:	08001ed7 	.word	0x08001ed7
 8001e40:	08001ed7 	.word	0x08001ed7
 8001e44:	08001ed7 	.word	0x08001ed7
 8001e48:	08001ed7 	.word	0x08001ed7
 8001e4c:	08001ed7 	.word	0x08001ed7
 8001e50:	08001ed7 	.word	0x08001ed7
 8001e54:	08001ed7 	.word	0x08001ed7
 8001e58:	08001ed7 	.word	0x08001ed7
 8001e5c:	08001ed7 	.word	0x08001ed7
 8001e60:	08001ed7 	.word	0x08001ed7
 8001e64:	08001ed7 	.word	0x08001ed7
 8001e68:	08001ed7 	.word	0x08001ed7
 8001e6c:	08001e85 	.word	0x08001e85
 8001e70:	08001e99 	.word	0x08001e99
 8001e74:	4a82      	ldr	r2, [pc, #520]	; (8002080 <HAL_GPIO_Init+0x2d8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e7a:	e02c      	b.n	8001ed6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e029      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	623b      	str	r3, [r7, #32]
          break;
 8001e8c:	e024      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	3308      	adds	r3, #8
 8001e94:	623b      	str	r3, [r7, #32]
          break;
 8001e96:	e01f      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	330c      	adds	r3, #12
 8001e9e:	623b      	str	r3, [r7, #32]
          break;
 8001ea0:	e01a      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	623b      	str	r3, [r7, #32]
          break;
 8001eae:	e013      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d105      	bne.n	8001ec4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69fa      	ldr	r2, [r7, #28]
 8001ec0:	611a      	str	r2, [r3, #16]
          break;
 8001ec2:	e009      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69fa      	ldr	r2, [r7, #28]
 8001ecc:	615a      	str	r2, [r3, #20]
          break;
 8001ece:	e003      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x130>
          break;
 8001ed6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	2bff      	cmp	r3, #255	; 0xff
 8001edc:	d801      	bhi.n	8001ee2 <HAL_GPIO_Init+0x13a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	e001      	b.n	8001ee6 <HAL_GPIO_Init+0x13e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	2bff      	cmp	r3, #255	; 0xff
 8001eec:	d802      	bhi.n	8001ef4 <HAL_GPIO_Init+0x14c>
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	e002      	b.n	8001efa <HAL_GPIO_Init+0x152>
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	3b08      	subs	r3, #8
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	210f      	movs	r1, #15
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	fa01 f303 	lsl.w	r3, r1, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	6a39      	ldr	r1, [r7, #32]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	431a      	orrs	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8090 	beq.w	8002048 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f28:	4b56      	ldr	r3, [pc, #344]	; (8002084 <HAL_GPIO_Init+0x2dc>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a55      	ldr	r2, [pc, #340]	; (8002084 <HAL_GPIO_Init+0x2dc>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6193      	str	r3, [r2, #24]
 8001f34:	4b53      	ldr	r3, [pc, #332]	; (8002084 <HAL_GPIO_Init+0x2dc>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f40:	4a51      	ldr	r2, [pc, #324]	; (8002088 <HAL_GPIO_Init+0x2e0>)
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3302      	adds	r3, #2
 8001f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a49      	ldr	r2, [pc, #292]	; (800208c <HAL_GPIO_Init+0x2e4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00d      	beq.n	8001f88 <HAL_GPIO_Init+0x1e0>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a48      	ldr	r2, [pc, #288]	; (8002090 <HAL_GPIO_Init+0x2e8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d007      	beq.n	8001f84 <HAL_GPIO_Init+0x1dc>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a47      	ldr	r2, [pc, #284]	; (8002094 <HAL_GPIO_Init+0x2ec>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_GPIO_Init+0x1d8>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e004      	b.n	8001f8a <HAL_GPIO_Init+0x1e2>
 8001f80:	2303      	movs	r3, #3
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x1e2>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_GPIO_Init+0x1e2>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	4093      	lsls	r3, r2
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f9a:	493b      	ldr	r1, [pc, #236]	; (8002088 <HAL_GPIO_Init+0x2e0>)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fb4:	4b38      	ldr	r3, [pc, #224]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4937      	ldr	r1, [pc, #220]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fc2:	4b35      	ldr	r3, [pc, #212]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4933      	ldr	r1, [pc, #204]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	492d      	ldr	r1, [pc, #180]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	604b      	str	r3, [r1, #4]
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fea:	4b2b      	ldr	r3, [pc, #172]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	4929      	ldr	r1, [pc, #164]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4923      	ldr	r1, [pc, #140]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002012:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	491f      	ldr	r1, [pc, #124]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 800201c:	4013      	ands	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800202c:	4b1a      	ldr	r3, [pc, #104]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	4919      	ldr	r1, [pc, #100]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	60cb      	str	r3, [r1, #12]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800203a:	4b17      	ldr	r3, [pc, #92]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4915      	ldr	r1, [pc, #84]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8002044:	4013      	ands	r3, r2
 8002046:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	3301      	adds	r3, #1
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	f47f aeaf 	bne.w	8001dbc <HAL_GPIO_Init+0x14>
  }
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	372c      	adds	r7, #44	; 0x2c
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	10320000 	.word	0x10320000
 8002070:	10310000 	.word	0x10310000
 8002074:	10220000 	.word	0x10220000
 8002078:	10210000 	.word	0x10210000
 800207c:	10120000 	.word	0x10120000
 8002080:	10110000 	.word	0x10110000
 8002084:	40021000 	.word	0x40021000
 8002088:	40010000 	.word	0x40010000
 800208c:	40010800 	.word	0x40010800
 8002090:	40010c00 	.word	0x40010c00
 8002094:	40011000 	.word	0x40011000
 8002098:	40010400 	.word	0x40010400

0800209c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	887b      	ldrh	r3, [r7, #2]
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d002      	beq.n	80020ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
 80020b8:	e001      	b.n	80020be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	807b      	strh	r3, [r7, #2]
 80020d6:	4613      	mov	r3, r2
 80020d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020da:	787b      	ldrb	r3, [r7, #1]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e0:	887a      	ldrh	r2, [r7, #2]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020e6:	e003      	b.n	80020f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	041a      	lsls	r2, r3, #16
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	611a      	str	r2, [r3, #16]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800210c:	887a      	ldrh	r2, [r7, #2]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	041a      	lsls	r2, r3, #16
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43d9      	mvns	r1, r3
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	400b      	ands	r3, r1
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	611a      	str	r2, [r3, #16]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e26c      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b92      	ldr	r3, [pc, #584]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002158:	4b8f      	ldr	r3, [pc, #572]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
 8002164:	4b8c      	ldr	r3, [pc, #560]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b89      	ldr	r3, [pc, #548]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06c      	beq.n	8002258 <HAL_RCC_OscConfig+0x12c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d168      	bne.n	8002258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e246      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x76>
 8002194:	4b80      	ldr	r3, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a7f      	ldr	r2, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e02e      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7a      	ldr	r2, [pc, #488]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b78      	ldr	r3, [pc, #480]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0xbc>
 80021ce:	4b72      	ldr	r3, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a71      	ldr	r2, [pc, #452]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021e8:	4b6b      	ldr	r3, [pc, #428]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6a      	ldr	r2, [pc, #424]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a67      	ldr	r2, [pc, #412]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff fc06 	bl	8001a18 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff fc02 	bl	8001a18 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1fa      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xe4>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff fbf2 	bl	8001a18 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff fbee 	bl	8001a18 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1e6      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x10c>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
 800227e:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1ba      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4939      	ldr	r1, [pc, #228]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCC_OscConfig+0x270>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff fba7 	bl	8001a18 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff fba3 	bl	8001a18 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e19b      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4927      	ldr	r1, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x270>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff fb86 	bl	8001a18 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7ff fb82 	bl	8001a18 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e17a      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03a      	beq.n	80023b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7ff fb66 	bl	8001a18 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff fb62 	bl	8001a18 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e15a      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f000 fad8 	bl	8002924 <RCC_Delay>
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7ff fb4c 	bl	8001a18 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002382:	e00f      	b.n	80023a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7ff fb48 	bl	8001a18 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e140      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	42420000 	.word	0x42420000
 80023a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b9e      	ldr	r3, [pc, #632]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e9      	bne.n	8002384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a6 	beq.w	800250a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b97      	ldr	r3, [pc, #604]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b94      	ldr	r3, [pc, #592]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a93      	ldr	r2, [pc, #588]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b91      	ldr	r3, [pc, #580]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b8e      	ldr	r3, [pc, #568]	; (8002624 <HAL_RCC_OscConfig+0x4f8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b8b      	ldr	r3, [pc, #556]	; (8002624 <HAL_RCC_OscConfig+0x4f8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a8a      	ldr	r2, [pc, #552]	; (8002624 <HAL_RCC_OscConfig+0x4f8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7ff fb09 	bl	8001a18 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7ff fb05 	bl	8001a18 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e0fd      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b81      	ldr	r3, [pc, #516]	; (8002624 <HAL_RCC_OscConfig+0x4f8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x312>
 8002430:	4b7b      	ldr	r3, [pc, #492]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a7a      	ldr	r2, [pc, #488]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e02d      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x334>
 8002446:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a75      	ldr	r2, [pc, #468]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	4b73      	ldr	r3, [pc, #460]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a72      	ldr	r2, [pc, #456]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	e01c      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x356>
 8002468:	4b6d      	ldr	r3, [pc, #436]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a6c      	ldr	r2, [pc, #432]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	4b6a      	ldr	r3, [pc, #424]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a69      	ldr	r2, [pc, #420]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002482:	4b67      	ldr	r3, [pc, #412]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a66      	ldr	r2, [pc, #408]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	4b64      	ldr	r3, [pc, #400]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a63      	ldr	r2, [pc, #396]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7ff fab9 	bl	8001a18 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7ff fab5 	bl	8001a18 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0ab      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b57      	ldr	r3, [pc, #348]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x37e>
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7ff faa3 	bl	8001a18 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7ff fa9f 	bl	8001a18 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e095      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	4b4c      	ldr	r3, [pc, #304]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b48      	ldr	r3, [pc, #288]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a47      	ldr	r2, [pc, #284]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8081 	beq.w	8002616 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002514:	4b42      	ldr	r3, [pc, #264]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d061      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d146      	bne.n	80025b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <HAL_RCC_OscConfig+0x4fc>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7ff fa73 	bl	8001a18 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7ff fa6f 	bl	8001a18 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e067      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	4b35      	ldr	r3, [pc, #212]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255e:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	492d      	ldr	r1, [pc, #180]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002570:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a19      	ldr	r1, [r3, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	430b      	orrs	r3, r1
 8002582:	4927      	ldr	r1, [pc, #156]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <HAL_RCC_OscConfig+0x4fc>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7ff fa43 	bl	8001a18 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7ff fa3f 	bl	8001a18 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e037      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x46a>
 80025b4:	e02f      	b.n	8002616 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <HAL_RCC_OscConfig+0x4fc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff fa2c 	bl	8001a18 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7ff fa28 	bl	8001a18 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e020      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x498>
 80025e2:	e018      	b.n	8002616 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e013      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_OscConfig+0x4f4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	429a      	cmp	r2, r3
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	40007000 	.word	0x40007000
 8002628:	42420060 	.word	0x42420060

0800262c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0d0      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b67      	ldr	r3, [pc, #412]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	4965      	ldr	r1, [pc, #404]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b63      	ldr	r3, [pc, #396]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b8      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002688:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002692:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b50      	ldr	r3, [pc, #320]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	494d      	ldr	r1, [pc, #308]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d040      	beq.n	800274c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b47      	ldr	r3, [pc, #284]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d115      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e07f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b41      	ldr	r3, [pc, #260]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e073      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e06b      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4936      	ldr	r1, [pc, #216]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800271c:	f7ff f97c 	bl	8001a18 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7ff f978 	bl	8001a18 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e053      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b2d      	ldr	r3, [pc, #180]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b27      	ldr	r3, [pc, #156]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d210      	bcs.n	800277c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0207 	bic.w	r2, r3, #7
 8002762:	4922      	ldr	r1, [pc, #136]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e032      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4916      	ldr	r1, [pc, #88]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027a6:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	490e      	ldr	r1, [pc, #56]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ba:	f000 f821 	bl	8002800 <HAL_RCC_GetSysClockFreq>
 80027be:	4602      	mov	r2, r0
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	490a      	ldr	r1, [pc, #40]	; (80027f4 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	5ccb      	ldrb	r3, [r1, r3]
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a09      	ldr	r2, [pc, #36]	; (80027f8 <HAL_RCC_ClockConfig+0x1cc>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x1d0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f8da 	bl	8001994 <HAL_InitTick>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40021000 	.word	0x40021000
 80027f4:	08004500 	.word	0x08004500
 80027f8:	2000005c 	.word	0x2000005c
 80027fc:	20000060 	.word	0x20000060

08002800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002800:	b490      	push	{r4, r7}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002806:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002808:	1d3c      	adds	r4, r7, #4
 800280a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800280c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002810:	f240 2301 	movw	r3, #513	; 0x201
 8002814:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b04      	cmp	r3, #4
 8002838:	d002      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x40>
 800283a:	2b08      	cmp	r3, #8
 800283c:	d003      	beq.n	8002846 <HAL_RCC_GetSysClockFreq+0x46>
 800283e:	e02d      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002842:	623b      	str	r3, [r7, #32]
      break;
 8002844:	e02d      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	0c9b      	lsrs	r3, r3, #18
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002852:	4413      	add	r3, r2
 8002854:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002858:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002864:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	0c5b      	lsrs	r3, r3, #17
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002872:	4413      	add	r3, r2
 8002874:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002878:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800287e:	fb02 f203 	mul.w	r2, r2, r3
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	e004      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	623b      	str	r3, [r7, #32]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289e:	623b      	str	r3, [r7, #32]
      break;
 80028a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a2:	6a3b      	ldr	r3, [r7, #32]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc90      	pop	{r4, r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	080044f0 	.word	0x080044f0
 80028b4:	40021000 	.word	0x40021000
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	003d0900 	.word	0x003d0900

080028c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	2000005c 	.word	0x2000005c

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff2 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08004510 	.word	0x08004510

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffde 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0adb      	lsrs	r3, r3, #11
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	08004510 	.word	0x08004510

08002924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <RCC_Delay+0x34>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <RCC_Delay+0x38>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0a5b      	lsrs	r3, r3, #9
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002940:	bf00      	nop
  }
  while (Delay --);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f9      	bne.n	8002940 <RCC_Delay+0x1c>
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	2000005c 	.word	0x2000005c
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e041      	b.n	80029f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d106      	bne.n	800298c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe f986 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3304      	adds	r3, #4
 800299c:	4619      	mov	r1, r3
 800299e:	4610      	mov	r0, r2
 80029a0:	f000 fa6a 	bl	8002e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d001      	beq.n	8002a18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e035      	b.n	8002a84 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <HAL_TIM_Base_Start_IT+0x90>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x4e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a42:	d004      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x4e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a12      	ldr	r2, [pc, #72]	; (8002a94 <HAL_TIM_Base_Start_IT+0x94>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0307 	and.w	r3, r3, #7
 8002a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d010      	beq.n	8002a82 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a70:	e007      	b.n	8002a82 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400

08002a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0202 	mvn.w	r2, #2
 8002ac4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f9b1 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f9a4 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f9b3 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d122      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d11b      	bne.n	8002b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0204 	mvn.w	r2, #4
 8002b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f987 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
 8002b34:	e005      	b.n	8002b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f97a 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f989 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d122      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d11b      	bne.n	8002b9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0208 	mvn.w	r2, #8
 8002b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2204      	movs	r2, #4
 8002b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f95d 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
 8002b88:	e005      	b.n	8002b96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f950 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f95f 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d122      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b10      	cmp	r3, #16
 8002bb6:	d11b      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f06f 0210 	mvn.w	r2, #16
 8002bc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f933 	bl	8002e42 <HAL_TIM_IC_CaptureCallback>
 8002bdc:	e005      	b.n	8002bea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f926 	bl	8002e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f935 	bl	8002e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0201 	mvn.w	r2, #1
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fd fee0 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b80      	cmp	r3, #128	; 0x80
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fa67 	bl	8003116 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b40      	cmp	r3, #64	; 0x40
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b40      	cmp	r3, #64	; 0x40
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f8f9 	bl	8002e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0220 	mvn.w	r2, #32
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fa32 	bl	8003104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIM_ConfigClockSource+0x18>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0b3      	b.n	8002e28 <HAL_TIM_ConfigClockSource+0x180>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002cde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ce6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cf8:	d03e      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0xd0>
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	f200 8087 	bhi.w	8002e10 <HAL_TIM_ConfigClockSource+0x168>
 8002d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d06:	f000 8085 	beq.w	8002e14 <HAL_TIM_ConfigClockSource+0x16c>
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0e:	d87f      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x168>
 8002d10:	2b70      	cmp	r3, #112	; 0x70
 8002d12:	d01a      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0xa2>
 8002d14:	2b70      	cmp	r3, #112	; 0x70
 8002d16:	d87b      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x168>
 8002d18:	2b60      	cmp	r3, #96	; 0x60
 8002d1a:	d050      	beq.n	8002dbe <HAL_TIM_ConfigClockSource+0x116>
 8002d1c:	2b60      	cmp	r3, #96	; 0x60
 8002d1e:	d877      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x168>
 8002d20:	2b50      	cmp	r3, #80	; 0x50
 8002d22:	d03c      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0xf6>
 8002d24:	2b50      	cmp	r3, #80	; 0x50
 8002d26:	d873      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x168>
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d058      	beq.n	8002dde <HAL_TIM_ConfigClockSource+0x136>
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d86f      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x168>
 8002d30:	2b30      	cmp	r3, #48	; 0x30
 8002d32:	d064      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x156>
 8002d34:	2b30      	cmp	r3, #48	; 0x30
 8002d36:	d86b      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x168>
 8002d38:	2b20      	cmp	r3, #32
 8002d3a:	d060      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x156>
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d867      	bhi.n	8002e10 <HAL_TIM_ConfigClockSource+0x168>
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d05c      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x156>
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d05a      	beq.n	8002dfe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d48:	e062      	b.n	8002e10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6899      	ldr	r1, [r3, #8]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f000 f95c 	bl	8003016 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	609a      	str	r2, [r3, #8]
      break;
 8002d76:	e04e      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6818      	ldr	r0, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	6899      	ldr	r1, [r3, #8]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f000 f945 	bl	8003016 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d9a:	609a      	str	r2, [r3, #8]
      break;
 8002d9c:	e03b      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f000 f8bc 	bl	8002f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2150      	movs	r1, #80	; 0x50
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 f913 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002dbc:	e02b      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6859      	ldr	r1, [r3, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	f000 f8da 	bl	8002f84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2160      	movs	r1, #96	; 0x60
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f903 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002ddc:	e01b      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	6859      	ldr	r1, [r3, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f000 f89c 	bl	8002f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2140      	movs	r1, #64	; 0x40
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f8f3 	bl	8002fe2 <TIM_ITRx_SetConfig>
      break;
 8002dfc:	e00b      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f000 f8ea 	bl	8002fe2 <TIM_ITRx_SetConfig>
        break;
 8002e0e:	e002      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e10:	bf00      	nop
 8002e12:	e000      	b.n	8002e16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <TIM_Base_SetConfig+0xa8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <TIM_Base_SetConfig+0x28>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e96:	d003      	beq.n	8002ea0 <TIM_Base_SetConfig+0x28>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a22      	ldr	r2, [pc, #136]	; (8002f24 <TIM_Base_SetConfig+0xac>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d108      	bne.n	8002eb2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a1a      	ldr	r2, [pc, #104]	; (8002f20 <TIM_Base_SetConfig+0xa8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <TIM_Base_SetConfig+0x52>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec0:	d003      	beq.n	8002eca <TIM_Base_SetConfig+0x52>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <TIM_Base_SetConfig+0xac>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d108      	bne.n	8002edc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <TIM_Base_SetConfig+0xa8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d103      	bne.n	8002f10 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	615a      	str	r2, [r3, #20]
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	40000400 	.word	0x40000400

08002f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f023 0201 	bic.w	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f023 030a 	bic.w	r3, r3, #10
 8002f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	f023 0210 	bic.w	r2, r3, #16
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	031b      	lsls	r3, r3, #12
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	621a      	str	r2, [r3, #32]
}
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f043 0307 	orr.w	r3, r3, #7
 8003004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003016:	b480      	push	{r7}
 8003018:	b087      	sub	sp, #28
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
 8003022:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003030:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	431a      	orrs	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	4313      	orrs	r3, r2
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	609a      	str	r2, [r3, #8]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003068:	2302      	movs	r3, #2
 800306a:	e041      	b.n	80030f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a14      	ldr	r2, [pc, #80]	; (80030fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d009      	beq.n	80030c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b8:	d004      	beq.n	80030c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a10      	ldr	r2, [pc, #64]	; (8003100 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d10c      	bne.n	80030de <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40000400 	.word	0x40000400

08003104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003116:	b480      	push	{r7}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e03f      	b.n	80031ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d106      	bne.n	8003154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd fdc6 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	; 0x24
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800316a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fc85 	bl	8003a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08a      	sub	sp, #40	; 0x28
 80031c6:	af02      	add	r7, sp, #8
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d17c      	bne.n	80032dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_UART_Transmit+0x2c>
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e075      	b.n	80032de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Transmit+0x3e>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e06e      	b.n	80032de <HAL_UART_Transmit+0x11c>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2221      	movs	r2, #33	; 0x21
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003216:	f7fe fbff 	bl	8001a18 <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003230:	d108      	bne.n	8003244 <HAL_UART_Transmit+0x82>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d104      	bne.n	8003244 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e003      	b.n	800324c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003248:	2300      	movs	r3, #0
 800324a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003254:	e02a      	b.n	80032ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2200      	movs	r2, #0
 800325e:	2180      	movs	r1, #128	; 0x80
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fa38 	bl	80036d6 <UART_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e036      	b.n	80032de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	461a      	mov	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003284:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	3302      	adds	r3, #2
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	e007      	b.n	800329e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	3301      	adds	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1cf      	bne.n	8003256 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	2140      	movs	r1, #64	; 0x40
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fa08 	bl	80036d6 <UART_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e006      	b.n	80032de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3720      	adds	r7, #32
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b084      	sub	sp, #16
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	4613      	mov	r3, r2
 80032f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d11d      	bne.n	800333c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_UART_Receive_IT+0x26>
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e016      	b.n	800333e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_UART_Receive_IT+0x38>
 800331a:	2302      	movs	r3, #2
 800331c:	e00f      	b.n	800333e <HAL_UART_Receive_IT+0x58>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	461a      	mov	r2, r3
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fa19 	bl	800376a <UART_Start_Receive_IT>
 8003338:	4603      	mov	r3, r0
 800333a:	e000      	b.n	800333e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003368:	2300      	movs	r3, #0
 800336a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d008      	beq.n	800339a <HAL_UART_IRQHandler+0x52>
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fac9 	bl	800392a <UART_Receive_IT>
      return;
 8003398:	e17b      	b.n	8003692 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80b1 	beq.w	8003504 <HAL_UART_IRQHandler+0x1bc>
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <HAL_UART_IRQHandler+0x70>
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80a6 	beq.w	8003504 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_UART_IRQHandler+0x90>
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_UART_IRQHandler+0xb0>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0202 	orr.w	r2, r3, #2
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <HAL_UART_IRQHandler+0xd0>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f043 0204 	orr.w	r2, r3, #4
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00f      	beq.n	8003442 <HAL_UART_IRQHandler+0xfa>
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d104      	bne.n	8003436 <HAL_UART_IRQHandler+0xee>
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d005      	beq.n	8003442 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f043 0208 	orr.w	r2, r3, #8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 811e 	beq.w	8003688 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800344c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_UART_IRQHandler+0x11e>
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 fa62 	bl	800392a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d102      	bne.n	800348e <HAL_UART_IRQHandler+0x146>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d031      	beq.n	80034f2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9a4 	bl	80037dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d023      	beq.n	80034ea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695a      	ldr	r2, [r3, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d013      	beq.n	80034e2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	4a76      	ldr	r2, [pc, #472]	; (8003698 <HAL_UART_IRQHandler+0x350>)
 80034c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fbf8 	bl	8001cbc <HAL_DMA_Abort_IT>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d016      	beq.n	8003500 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034dc:	4610      	mov	r0, r2
 80034de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	e00e      	b.n	8003500 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f8e3 	bl	80036ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e8:	e00a      	b.n	8003500 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8df 	bl	80036ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f0:	e006      	b.n	8003500 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f8db 	bl	80036ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80034fe:	e0c3      	b.n	8003688 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003500:	bf00      	nop
    return;
 8003502:	e0c1      	b.n	8003688 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	2b01      	cmp	r3, #1
 800350a:	f040 80a1 	bne.w	8003650 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 809b 	beq.w	8003650 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	f003 0310 	and.w	r3, r3, #16
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8095 	beq.w	8003650 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d04e      	beq.n	80035e8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003554:	8a3b      	ldrh	r3, [r7, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 8098 	beq.w	800368c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003560:	8a3a      	ldrh	r2, [r7, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	f080 8092 	bcs.w	800368c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8a3a      	ldrh	r2, [r7, #16]
 800356c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b20      	cmp	r3, #32
 8003576:	d02b      	beq.n	80035d0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003586:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0210 	bic.w	r2, r2, #16
 80035c4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe fb3b 	bl	8001c46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4619      	mov	r1, r3
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f86d 	bl	80036c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80035e6:	e051      	b.n	800368c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d047      	beq.n	8003690 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003600:	8a7b      	ldrh	r3, [r7, #18]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d044      	beq.n	8003690 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003614:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695a      	ldr	r2, [r3, #20]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0210 	bic.w	r2, r2, #16
 8003642:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003644:	8a7b      	ldrh	r3, [r7, #18]
 8003646:	4619      	mov	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f839 	bl	80036c0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800364e:	e01f      	b.n	8003690 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d008      	beq.n	800366c <HAL_UART_IRQHandler+0x324>
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f8f9 	bl	800385c <UART_Transmit_IT>
    return;
 800366a:	e012      	b.n	8003692 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <HAL_UART_IRQHandler+0x34a>
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f93a 	bl	80038fa <UART_EndTransmit_IT>
    return;
 8003686:	e004      	b.n	8003692 <HAL_UART_IRQHandler+0x34a>
    return;
 8003688:	bf00      	nop
 800368a:	e002      	b.n	8003692 <HAL_UART_IRQHandler+0x34a>
      return;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <HAL_UART_IRQHandler+0x34a>
      return;
 8003690:	bf00      	nop
  }
}
 8003692:	3728      	adds	r7, #40	; 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	08003835 	.word	0x08003835

0800369c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr

080036d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e6:	e02c      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d028      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f6:	f7fe f98f 	bl	8001a18 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	429a      	cmp	r2, r3
 8003704:	d21d      	bcs.n	8003742 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003714:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e00f      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d0c3      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	4613      	mov	r3, r2
 8003776:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	88fa      	ldrh	r2, [r7, #6]
 8003782:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	88fa      	ldrh	r2, [r7, #6]
 8003788:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2222      	movs	r2, #34	; 0x22
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ae:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0220 	orr.w	r2, r2, #32
 80037ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0210 	bic.w	r2, r2, #16
 800381a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff ff2d 	bl	80036ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b21      	cmp	r3, #33	; 0x21
 800386e:	d13e      	bne.n	80038ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003878:	d114      	bne.n	80038a4 <UART_Transmit_IT+0x48>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d110      	bne.n	80038a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003896:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	1c9a      	adds	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	621a      	str	r2, [r3, #32]
 80038a2:	e008      	b.n	80038b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	1c59      	adds	r1, r3, #1
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6211      	str	r1, [r2, #32]
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29b      	uxth	r3, r3
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4619      	mov	r1, r3
 80038c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e000      	b.n	80038f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038ee:	2302      	movs	r3, #2
  }
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003910:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff febe 	bl	800369c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b086      	sub	sp, #24
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b22      	cmp	r3, #34	; 0x22
 800393c:	f040 8099 	bne.w	8003a72 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003948:	d117      	bne.n	800397a <UART_Receive_IT+0x50>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d113      	bne.n	800397a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	b29b      	uxth	r3, r3
 8003964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003968:	b29a      	uxth	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	1c9a      	adds	r2, r3, #2
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	629a      	str	r2, [r3, #40]	; 0x28
 8003978:	e026      	b.n	80039c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398c:	d007      	beq.n	800399e <UART_Receive_IT+0x74>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <UART_Receive_IT+0x82>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	e008      	b.n	80039be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4619      	mov	r1, r3
 80039d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d148      	bne.n	8003a6e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0220 	bic.w	r2, r2, #32
 80039ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d123      	bne.n	8003a64 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0210 	bic.w	r2, r2, #16
 8003a30:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d10a      	bne.n	8003a56 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a40:	2300      	movs	r3, #0
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff fe2f 	bl	80036c0 <HAL_UARTEx_RxEventCallback>
 8003a62:	e002      	b.n	8003a6a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fc fe61 	bl	800072c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e002      	b.n	8003a74 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a72:	2302      	movs	r3, #2
  }
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ab6:	f023 030c 	bic.w	r3, r3, #12
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <UART_SetConfig+0x114>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d103      	bne.n	8003aec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f7fe ff0a 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	e002      	b.n	8003af2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7fe fef2 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8003af0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	009a      	lsls	r2, r3, #2
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <UART_SetConfig+0x118>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	0119      	lsls	r1, r3, #4
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009a      	lsls	r2, r3, #2
 8003b1c:	441a      	add	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <UART_SetConfig+0x118>)
 8003b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2064      	movs	r0, #100	; 0x64
 8003b32:	fb00 f303 	mul.w	r3, r0, r3
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	3332      	adds	r3, #50	; 0x32
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <UART_SetConfig+0x118>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b48:	4419      	add	r1, r3
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009a      	lsls	r2, r3, #2
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <UART_SetConfig+0x118>)
 8003b62:	fba3 0302 	umull	r0, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2064      	movs	r0, #100	; 0x64
 8003b6a:	fb00 f303 	mul.w	r3, r0, r3
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	3332      	adds	r3, #50	; 0x32
 8003b74:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <UART_SetConfig+0x118>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	f003 020f 	and.w	r2, r3, #15
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	440a      	add	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40013800 	.word	0x40013800
 8003b94:	51eb851f 	.word	0x51eb851f

08003b98 <__errno>:
 8003b98:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <__errno+0x8>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000068 	.word	0x20000068

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	4d0c      	ldr	r5, [pc, #48]	; (8003bdc <__libc_init_array+0x38>)
 8003baa:	4c0d      	ldr	r4, [pc, #52]	; (8003be0 <__libc_init_array+0x3c>)
 8003bac:	1b64      	subs	r4, r4, r5
 8003bae:	10a4      	asrs	r4, r4, #2
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	f000 fc6c 	bl	8004490 <_init>
 8003bb8:	2600      	movs	r6, #0
 8003bba:	4d0a      	ldr	r5, [pc, #40]	; (8003be4 <__libc_init_array+0x40>)
 8003bbc:	4c0a      	ldr	r4, [pc, #40]	; (8003be8 <__libc_init_array+0x44>)
 8003bbe:	1b64      	subs	r4, r4, r5
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	0800454c 	.word	0x0800454c
 8003be0:	0800454c 	.word	0x0800454c
 8003be4:	0800454c 	.word	0x0800454c
 8003be8:	08004550 	.word	0x08004550

08003bec <malloc>:
 8003bec:	4b02      	ldr	r3, [pc, #8]	; (8003bf8 <malloc+0xc>)
 8003bee:	4601      	mov	r1, r0
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	f000 b85f 	b.w	8003cb4 <_malloc_r>
 8003bf6:	bf00      	nop
 8003bf8:	20000068 	.word	0x20000068

08003bfc <free>:
 8003bfc:	4b02      	ldr	r3, [pc, #8]	; (8003c08 <free+0xc>)
 8003bfe:	4601      	mov	r1, r0
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	f000 b80b 	b.w	8003c1c <_free_r>
 8003c06:	bf00      	nop
 8003c08:	20000068 	.word	0x20000068

08003c0c <memset>:
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	4402      	add	r2, r0
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d100      	bne.n	8003c16 <memset+0xa>
 8003c14:	4770      	bx	lr
 8003c16:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1a:	e7f9      	b.n	8003c10 <memset+0x4>

08003c1c <_free_r>:
 8003c1c:	b538      	push	{r3, r4, r5, lr}
 8003c1e:	4605      	mov	r5, r0
 8003c20:	2900      	cmp	r1, #0
 8003c22:	d043      	beq.n	8003cac <_free_r+0x90>
 8003c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c28:	1f0c      	subs	r4, r1, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bfb8      	it	lt
 8003c2e:	18e4      	addlt	r4, r4, r3
 8003c30:	f000 f8ca 	bl	8003dc8 <__malloc_lock>
 8003c34:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <_free_r+0x94>)
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	4610      	mov	r0, r2
 8003c3a:	b933      	cbnz	r3, 8003c4a <_free_r+0x2e>
 8003c3c:	6063      	str	r3, [r4, #4]
 8003c3e:	6014      	str	r4, [r2, #0]
 8003c40:	4628      	mov	r0, r5
 8003c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c46:	f000 b8c5 	b.w	8003dd4 <__malloc_unlock>
 8003c4a:	42a3      	cmp	r3, r4
 8003c4c:	d90a      	bls.n	8003c64 <_free_r+0x48>
 8003c4e:	6821      	ldr	r1, [r4, #0]
 8003c50:	1862      	adds	r2, r4, r1
 8003c52:	4293      	cmp	r3, r2
 8003c54:	bf01      	itttt	eq
 8003c56:	681a      	ldreq	r2, [r3, #0]
 8003c58:	685b      	ldreq	r3, [r3, #4]
 8003c5a:	1852      	addeq	r2, r2, r1
 8003c5c:	6022      	streq	r2, [r4, #0]
 8003c5e:	6063      	str	r3, [r4, #4]
 8003c60:	6004      	str	r4, [r0, #0]
 8003c62:	e7ed      	b.n	8003c40 <_free_r+0x24>
 8003c64:	461a      	mov	r2, r3
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	b10b      	cbz	r3, 8003c6e <_free_r+0x52>
 8003c6a:	42a3      	cmp	r3, r4
 8003c6c:	d9fa      	bls.n	8003c64 <_free_r+0x48>
 8003c6e:	6811      	ldr	r1, [r2, #0]
 8003c70:	1850      	adds	r0, r2, r1
 8003c72:	42a0      	cmp	r0, r4
 8003c74:	d10b      	bne.n	8003c8e <_free_r+0x72>
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	4401      	add	r1, r0
 8003c7a:	1850      	adds	r0, r2, r1
 8003c7c:	4283      	cmp	r3, r0
 8003c7e:	6011      	str	r1, [r2, #0]
 8003c80:	d1de      	bne.n	8003c40 <_free_r+0x24>
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4401      	add	r1, r0
 8003c88:	6011      	str	r1, [r2, #0]
 8003c8a:	6053      	str	r3, [r2, #4]
 8003c8c:	e7d8      	b.n	8003c40 <_free_r+0x24>
 8003c8e:	d902      	bls.n	8003c96 <_free_r+0x7a>
 8003c90:	230c      	movs	r3, #12
 8003c92:	602b      	str	r3, [r5, #0]
 8003c94:	e7d4      	b.n	8003c40 <_free_r+0x24>
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	1821      	adds	r1, r4, r0
 8003c9a:	428b      	cmp	r3, r1
 8003c9c:	bf01      	itttt	eq
 8003c9e:	6819      	ldreq	r1, [r3, #0]
 8003ca0:	685b      	ldreq	r3, [r3, #4]
 8003ca2:	1809      	addeq	r1, r1, r0
 8003ca4:	6021      	streq	r1, [r4, #0]
 8003ca6:	6063      	str	r3, [r4, #4]
 8003ca8:	6054      	str	r4, [r2, #4]
 8003caa:	e7c9      	b.n	8003c40 <_free_r+0x24>
 8003cac:	bd38      	pop	{r3, r4, r5, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000140 	.word	0x20000140

08003cb4 <_malloc_r>:
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cb6:	1ccd      	adds	r5, r1, #3
 8003cb8:	f025 0503 	bic.w	r5, r5, #3
 8003cbc:	3508      	adds	r5, #8
 8003cbe:	2d0c      	cmp	r5, #12
 8003cc0:	bf38      	it	cc
 8003cc2:	250c      	movcc	r5, #12
 8003cc4:	2d00      	cmp	r5, #0
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	db01      	blt.n	8003cce <_malloc_r+0x1a>
 8003cca:	42a9      	cmp	r1, r5
 8003ccc:	d903      	bls.n	8003cd6 <_malloc_r+0x22>
 8003cce:	230c      	movs	r3, #12
 8003cd0:	6033      	str	r3, [r6, #0]
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd6:	f000 f877 	bl	8003dc8 <__malloc_lock>
 8003cda:	4921      	ldr	r1, [pc, #132]	; (8003d60 <_malloc_r+0xac>)
 8003cdc:	680a      	ldr	r2, [r1, #0]
 8003cde:	4614      	mov	r4, r2
 8003ce0:	b99c      	cbnz	r4, 8003d0a <_malloc_r+0x56>
 8003ce2:	4f20      	ldr	r7, [pc, #128]	; (8003d64 <_malloc_r+0xb0>)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	b923      	cbnz	r3, 8003cf2 <_malloc_r+0x3e>
 8003ce8:	4621      	mov	r1, r4
 8003cea:	4630      	mov	r0, r6
 8003cec:	f000 f83c 	bl	8003d68 <_sbrk_r>
 8003cf0:	6038      	str	r0, [r7, #0]
 8003cf2:	4629      	mov	r1, r5
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f000 f837 	bl	8003d68 <_sbrk_r>
 8003cfa:	1c43      	adds	r3, r0, #1
 8003cfc:	d123      	bne.n	8003d46 <_malloc_r+0x92>
 8003cfe:	230c      	movs	r3, #12
 8003d00:	4630      	mov	r0, r6
 8003d02:	6033      	str	r3, [r6, #0]
 8003d04:	f000 f866 	bl	8003dd4 <__malloc_unlock>
 8003d08:	e7e3      	b.n	8003cd2 <_malloc_r+0x1e>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	1b5b      	subs	r3, r3, r5
 8003d0e:	d417      	bmi.n	8003d40 <_malloc_r+0x8c>
 8003d10:	2b0b      	cmp	r3, #11
 8003d12:	d903      	bls.n	8003d1c <_malloc_r+0x68>
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	441c      	add	r4, r3
 8003d18:	6025      	str	r5, [r4, #0]
 8003d1a:	e004      	b.n	8003d26 <_malloc_r+0x72>
 8003d1c:	6863      	ldr	r3, [r4, #4]
 8003d1e:	42a2      	cmp	r2, r4
 8003d20:	bf0c      	ite	eq
 8003d22:	600b      	streq	r3, [r1, #0]
 8003d24:	6053      	strne	r3, [r2, #4]
 8003d26:	4630      	mov	r0, r6
 8003d28:	f000 f854 	bl	8003dd4 <__malloc_unlock>
 8003d2c:	f104 000b 	add.w	r0, r4, #11
 8003d30:	1d23      	adds	r3, r4, #4
 8003d32:	f020 0007 	bic.w	r0, r0, #7
 8003d36:	1ac2      	subs	r2, r0, r3
 8003d38:	d0cc      	beq.n	8003cd4 <_malloc_r+0x20>
 8003d3a:	1a1b      	subs	r3, r3, r0
 8003d3c:	50a3      	str	r3, [r4, r2]
 8003d3e:	e7c9      	b.n	8003cd4 <_malloc_r+0x20>
 8003d40:	4622      	mov	r2, r4
 8003d42:	6864      	ldr	r4, [r4, #4]
 8003d44:	e7cc      	b.n	8003ce0 <_malloc_r+0x2c>
 8003d46:	1cc4      	adds	r4, r0, #3
 8003d48:	f024 0403 	bic.w	r4, r4, #3
 8003d4c:	42a0      	cmp	r0, r4
 8003d4e:	d0e3      	beq.n	8003d18 <_malloc_r+0x64>
 8003d50:	1a21      	subs	r1, r4, r0
 8003d52:	4630      	mov	r0, r6
 8003d54:	f000 f808 	bl	8003d68 <_sbrk_r>
 8003d58:	3001      	adds	r0, #1
 8003d5a:	d1dd      	bne.n	8003d18 <_malloc_r+0x64>
 8003d5c:	e7cf      	b.n	8003cfe <_malloc_r+0x4a>
 8003d5e:	bf00      	nop
 8003d60:	20000140 	.word	0x20000140
 8003d64:	20000144 	.word	0x20000144

08003d68 <_sbrk_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	4d05      	ldr	r5, [pc, #20]	; (8003d84 <_sbrk_r+0x1c>)
 8003d6e:	4604      	mov	r4, r0
 8003d70:	4608      	mov	r0, r1
 8003d72:	602b      	str	r3, [r5, #0]
 8003d74:	f7fd f842 	bl	8000dfc <_sbrk>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d102      	bne.n	8003d82 <_sbrk_r+0x1a>
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	b103      	cbz	r3, 8003d82 <_sbrk_r+0x1a>
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	bd38      	pop	{r3, r4, r5, pc}
 8003d84:	20000218 	.word	0x20000218

08003d88 <siprintf>:
 8003d88:	b40e      	push	{r1, r2, r3}
 8003d8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d8e:	b500      	push	{lr}
 8003d90:	b09c      	sub	sp, #112	; 0x70
 8003d92:	ab1d      	add	r3, sp, #116	; 0x74
 8003d94:	9002      	str	r0, [sp, #8]
 8003d96:	9006      	str	r0, [sp, #24]
 8003d98:	9107      	str	r1, [sp, #28]
 8003d9a:	9104      	str	r1, [sp, #16]
 8003d9c:	4808      	ldr	r0, [pc, #32]	; (8003dc0 <siprintf+0x38>)
 8003d9e:	4909      	ldr	r1, [pc, #36]	; (8003dc4 <siprintf+0x3c>)
 8003da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003da4:	9105      	str	r1, [sp, #20]
 8003da6:	6800      	ldr	r0, [r0, #0]
 8003da8:	a902      	add	r1, sp, #8
 8003daa:	9301      	str	r3, [sp, #4]
 8003dac:	f000 f874 	bl	8003e98 <_svfiprintf_r>
 8003db0:	2200      	movs	r2, #0
 8003db2:	9b02      	ldr	r3, [sp, #8]
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	b01c      	add	sp, #112	; 0x70
 8003db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dbc:	b003      	add	sp, #12
 8003dbe:	4770      	bx	lr
 8003dc0:	20000068 	.word	0x20000068
 8003dc4:	ffff0208 	.word	0xffff0208

08003dc8 <__malloc_lock>:
 8003dc8:	4801      	ldr	r0, [pc, #4]	; (8003dd0 <__malloc_lock+0x8>)
 8003dca:	f000 bafb 	b.w	80043c4 <__retarget_lock_acquire_recursive>
 8003dce:	bf00      	nop
 8003dd0:	20000220 	.word	0x20000220

08003dd4 <__malloc_unlock>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <__malloc_unlock+0x8>)
 8003dd6:	f000 baf6 	b.w	80043c6 <__retarget_lock_release_recursive>
 8003dda:	bf00      	nop
 8003ddc:	20000220 	.word	0x20000220

08003de0 <__ssputs_r>:
 8003de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003de4:	688e      	ldr	r6, [r1, #8]
 8003de6:	4682      	mov	sl, r0
 8003de8:	429e      	cmp	r6, r3
 8003dea:	460c      	mov	r4, r1
 8003dec:	4690      	mov	r8, r2
 8003dee:	461f      	mov	r7, r3
 8003df0:	d838      	bhi.n	8003e64 <__ssputs_r+0x84>
 8003df2:	898a      	ldrh	r2, [r1, #12]
 8003df4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003df8:	d032      	beq.n	8003e60 <__ssputs_r+0x80>
 8003dfa:	6825      	ldr	r5, [r4, #0]
 8003dfc:	6909      	ldr	r1, [r1, #16]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	eba5 0901 	sub.w	r9, r5, r1
 8003e04:	6965      	ldr	r5, [r4, #20]
 8003e06:	444b      	add	r3, r9
 8003e08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e10:	106d      	asrs	r5, r5, #1
 8003e12:	429d      	cmp	r5, r3
 8003e14:	bf38      	it	cc
 8003e16:	461d      	movcc	r5, r3
 8003e18:	0553      	lsls	r3, r2, #21
 8003e1a:	d531      	bpl.n	8003e80 <__ssputs_r+0xa0>
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	f7ff ff49 	bl	8003cb4 <_malloc_r>
 8003e22:	4606      	mov	r6, r0
 8003e24:	b950      	cbnz	r0, 8003e3c <__ssputs_r+0x5c>
 8003e26:	230c      	movs	r3, #12
 8003e28:	f04f 30ff 	mov.w	r0, #4294967295
 8003e2c:	f8ca 3000 	str.w	r3, [sl]
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e3c:	464a      	mov	r2, r9
 8003e3e:	6921      	ldr	r1, [r4, #16]
 8003e40:	f000 fad0 	bl	80043e4 <memcpy>
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4e:	81a3      	strh	r3, [r4, #12]
 8003e50:	6126      	str	r6, [r4, #16]
 8003e52:	444e      	add	r6, r9
 8003e54:	6026      	str	r6, [r4, #0]
 8003e56:	463e      	mov	r6, r7
 8003e58:	6165      	str	r5, [r4, #20]
 8003e5a:	eba5 0509 	sub.w	r5, r5, r9
 8003e5e:	60a5      	str	r5, [r4, #8]
 8003e60:	42be      	cmp	r6, r7
 8003e62:	d900      	bls.n	8003e66 <__ssputs_r+0x86>
 8003e64:	463e      	mov	r6, r7
 8003e66:	4632      	mov	r2, r6
 8003e68:	4641      	mov	r1, r8
 8003e6a:	6820      	ldr	r0, [r4, #0]
 8003e6c:	f000 fac8 	bl	8004400 <memmove>
 8003e70:	68a3      	ldr	r3, [r4, #8]
 8003e72:	6822      	ldr	r2, [r4, #0]
 8003e74:	1b9b      	subs	r3, r3, r6
 8003e76:	4432      	add	r2, r6
 8003e78:	2000      	movs	r0, #0
 8003e7a:	60a3      	str	r3, [r4, #8]
 8003e7c:	6022      	str	r2, [r4, #0]
 8003e7e:	e7db      	b.n	8003e38 <__ssputs_r+0x58>
 8003e80:	462a      	mov	r2, r5
 8003e82:	f000 fad7 	bl	8004434 <_realloc_r>
 8003e86:	4606      	mov	r6, r0
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d1e1      	bne.n	8003e50 <__ssputs_r+0x70>
 8003e8c:	4650      	mov	r0, sl
 8003e8e:	6921      	ldr	r1, [r4, #16]
 8003e90:	f7ff fec4 	bl	8003c1c <_free_r>
 8003e94:	e7c7      	b.n	8003e26 <__ssputs_r+0x46>
	...

08003e98 <_svfiprintf_r>:
 8003e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9c:	4698      	mov	r8, r3
 8003e9e:	898b      	ldrh	r3, [r1, #12]
 8003ea0:	4607      	mov	r7, r0
 8003ea2:	061b      	lsls	r3, r3, #24
 8003ea4:	460d      	mov	r5, r1
 8003ea6:	4614      	mov	r4, r2
 8003ea8:	b09d      	sub	sp, #116	; 0x74
 8003eaa:	d50e      	bpl.n	8003eca <_svfiprintf_r+0x32>
 8003eac:	690b      	ldr	r3, [r1, #16]
 8003eae:	b963      	cbnz	r3, 8003eca <_svfiprintf_r+0x32>
 8003eb0:	2140      	movs	r1, #64	; 0x40
 8003eb2:	f7ff feff 	bl	8003cb4 <_malloc_r>
 8003eb6:	6028      	str	r0, [r5, #0]
 8003eb8:	6128      	str	r0, [r5, #16]
 8003eba:	b920      	cbnz	r0, 8003ec6 <_svfiprintf_r+0x2e>
 8003ebc:	230c      	movs	r3, #12
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec4:	e0d1      	b.n	800406a <_svfiprintf_r+0x1d2>
 8003ec6:	2340      	movs	r3, #64	; 0x40
 8003ec8:	616b      	str	r3, [r5, #20]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ece:	2320      	movs	r3, #32
 8003ed0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ed4:	2330      	movs	r3, #48	; 0x30
 8003ed6:	f04f 0901 	mov.w	r9, #1
 8003eda:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ede:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004084 <_svfiprintf_r+0x1ec>
 8003ee2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ee6:	4623      	mov	r3, r4
 8003ee8:	469a      	mov	sl, r3
 8003eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eee:	b10a      	cbz	r2, 8003ef4 <_svfiprintf_r+0x5c>
 8003ef0:	2a25      	cmp	r2, #37	; 0x25
 8003ef2:	d1f9      	bne.n	8003ee8 <_svfiprintf_r+0x50>
 8003ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8003ef8:	d00b      	beq.n	8003f12 <_svfiprintf_r+0x7a>
 8003efa:	465b      	mov	r3, fp
 8003efc:	4622      	mov	r2, r4
 8003efe:	4629      	mov	r1, r5
 8003f00:	4638      	mov	r0, r7
 8003f02:	f7ff ff6d 	bl	8003de0 <__ssputs_r>
 8003f06:	3001      	adds	r0, #1
 8003f08:	f000 80aa 	beq.w	8004060 <_svfiprintf_r+0x1c8>
 8003f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f0e:	445a      	add	r2, fp
 8003f10:	9209      	str	r2, [sp, #36]	; 0x24
 8003f12:	f89a 3000 	ldrb.w	r3, [sl]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80a2 	beq.w	8004060 <_svfiprintf_r+0x1c8>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f26:	f10a 0a01 	add.w	sl, sl, #1
 8003f2a:	9304      	str	r3, [sp, #16]
 8003f2c:	9307      	str	r3, [sp, #28]
 8003f2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f32:	931a      	str	r3, [sp, #104]	; 0x68
 8003f34:	4654      	mov	r4, sl
 8003f36:	2205      	movs	r2, #5
 8003f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f3c:	4851      	ldr	r0, [pc, #324]	; (8004084 <_svfiprintf_r+0x1ec>)
 8003f3e:	f000 fa43 	bl	80043c8 <memchr>
 8003f42:	9a04      	ldr	r2, [sp, #16]
 8003f44:	b9d8      	cbnz	r0, 8003f7e <_svfiprintf_r+0xe6>
 8003f46:	06d0      	lsls	r0, r2, #27
 8003f48:	bf44      	itt	mi
 8003f4a:	2320      	movmi	r3, #32
 8003f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f50:	0711      	lsls	r1, r2, #28
 8003f52:	bf44      	itt	mi
 8003f54:	232b      	movmi	r3, #43	; 0x2b
 8003f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8003f60:	d015      	beq.n	8003f8e <_svfiprintf_r+0xf6>
 8003f62:	4654      	mov	r4, sl
 8003f64:	2000      	movs	r0, #0
 8003f66:	f04f 0c0a 	mov.w	ip, #10
 8003f6a:	9a07      	ldr	r2, [sp, #28]
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f72:	3b30      	subs	r3, #48	; 0x30
 8003f74:	2b09      	cmp	r3, #9
 8003f76:	d94e      	bls.n	8004016 <_svfiprintf_r+0x17e>
 8003f78:	b1b0      	cbz	r0, 8003fa8 <_svfiprintf_r+0x110>
 8003f7a:	9207      	str	r2, [sp, #28]
 8003f7c:	e014      	b.n	8003fa8 <_svfiprintf_r+0x110>
 8003f7e:	eba0 0308 	sub.w	r3, r0, r8
 8003f82:	fa09 f303 	lsl.w	r3, r9, r3
 8003f86:	4313      	orrs	r3, r2
 8003f88:	46a2      	mov	sl, r4
 8003f8a:	9304      	str	r3, [sp, #16]
 8003f8c:	e7d2      	b.n	8003f34 <_svfiprintf_r+0x9c>
 8003f8e:	9b03      	ldr	r3, [sp, #12]
 8003f90:	1d19      	adds	r1, r3, #4
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	9103      	str	r1, [sp, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bfbb      	ittet	lt
 8003f9a:	425b      	neglt	r3, r3
 8003f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8003fa0:	9307      	strge	r3, [sp, #28]
 8003fa2:	9307      	strlt	r3, [sp, #28]
 8003fa4:	bfb8      	it	lt
 8003fa6:	9204      	strlt	r2, [sp, #16]
 8003fa8:	7823      	ldrb	r3, [r4, #0]
 8003faa:	2b2e      	cmp	r3, #46	; 0x2e
 8003fac:	d10c      	bne.n	8003fc8 <_svfiprintf_r+0x130>
 8003fae:	7863      	ldrb	r3, [r4, #1]
 8003fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb2:	d135      	bne.n	8004020 <_svfiprintf_r+0x188>
 8003fb4:	9b03      	ldr	r3, [sp, #12]
 8003fb6:	3402      	adds	r4, #2
 8003fb8:	1d1a      	adds	r2, r3, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	9203      	str	r2, [sp, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bfb8      	it	lt
 8003fc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fc6:	9305      	str	r3, [sp, #20]
 8003fc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004094 <_svfiprintf_r+0x1fc>
 8003fcc:	2203      	movs	r2, #3
 8003fce:	4650      	mov	r0, sl
 8003fd0:	7821      	ldrb	r1, [r4, #0]
 8003fd2:	f000 f9f9 	bl	80043c8 <memchr>
 8003fd6:	b140      	cbz	r0, 8003fea <_svfiprintf_r+0x152>
 8003fd8:	2340      	movs	r3, #64	; 0x40
 8003fda:	eba0 000a 	sub.w	r0, r0, sl
 8003fde:	fa03 f000 	lsl.w	r0, r3, r0
 8003fe2:	9b04      	ldr	r3, [sp, #16]
 8003fe4:	3401      	adds	r4, #1
 8003fe6:	4303      	orrs	r3, r0
 8003fe8:	9304      	str	r3, [sp, #16]
 8003fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fee:	2206      	movs	r2, #6
 8003ff0:	4825      	ldr	r0, [pc, #148]	; (8004088 <_svfiprintf_r+0x1f0>)
 8003ff2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ff6:	f000 f9e7 	bl	80043c8 <memchr>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d038      	beq.n	8004070 <_svfiprintf_r+0x1d8>
 8003ffe:	4b23      	ldr	r3, [pc, #140]	; (800408c <_svfiprintf_r+0x1f4>)
 8004000:	bb1b      	cbnz	r3, 800404a <_svfiprintf_r+0x1b2>
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	3307      	adds	r3, #7
 8004006:	f023 0307 	bic.w	r3, r3, #7
 800400a:	3308      	adds	r3, #8
 800400c:	9303      	str	r3, [sp, #12]
 800400e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004010:	4433      	add	r3, r6
 8004012:	9309      	str	r3, [sp, #36]	; 0x24
 8004014:	e767      	b.n	8003ee6 <_svfiprintf_r+0x4e>
 8004016:	460c      	mov	r4, r1
 8004018:	2001      	movs	r0, #1
 800401a:	fb0c 3202 	mla	r2, ip, r2, r3
 800401e:	e7a5      	b.n	8003f6c <_svfiprintf_r+0xd4>
 8004020:	2300      	movs	r3, #0
 8004022:	f04f 0c0a 	mov.w	ip, #10
 8004026:	4619      	mov	r1, r3
 8004028:	3401      	adds	r4, #1
 800402a:	9305      	str	r3, [sp, #20]
 800402c:	4620      	mov	r0, r4
 800402e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004032:	3a30      	subs	r2, #48	; 0x30
 8004034:	2a09      	cmp	r2, #9
 8004036:	d903      	bls.n	8004040 <_svfiprintf_r+0x1a8>
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0c5      	beq.n	8003fc8 <_svfiprintf_r+0x130>
 800403c:	9105      	str	r1, [sp, #20]
 800403e:	e7c3      	b.n	8003fc8 <_svfiprintf_r+0x130>
 8004040:	4604      	mov	r4, r0
 8004042:	2301      	movs	r3, #1
 8004044:	fb0c 2101 	mla	r1, ip, r1, r2
 8004048:	e7f0      	b.n	800402c <_svfiprintf_r+0x194>
 800404a:	ab03      	add	r3, sp, #12
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	462a      	mov	r2, r5
 8004050:	4638      	mov	r0, r7
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <_svfiprintf_r+0x1f8>)
 8004054:	a904      	add	r1, sp, #16
 8004056:	f3af 8000 	nop.w
 800405a:	1c42      	adds	r2, r0, #1
 800405c:	4606      	mov	r6, r0
 800405e:	d1d6      	bne.n	800400e <_svfiprintf_r+0x176>
 8004060:	89ab      	ldrh	r3, [r5, #12]
 8004062:	065b      	lsls	r3, r3, #25
 8004064:	f53f af2c 	bmi.w	8003ec0 <_svfiprintf_r+0x28>
 8004068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800406a:	b01d      	add	sp, #116	; 0x74
 800406c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004070:	ab03      	add	r3, sp, #12
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	462a      	mov	r2, r5
 8004076:	4638      	mov	r0, r7
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <_svfiprintf_r+0x1f8>)
 800407a:	a904      	add	r1, sp, #16
 800407c:	f000 f87c 	bl	8004178 <_printf_i>
 8004080:	e7eb      	b.n	800405a <_svfiprintf_r+0x1c2>
 8004082:	bf00      	nop
 8004084:	08004518 	.word	0x08004518
 8004088:	08004522 	.word	0x08004522
 800408c:	00000000 	.word	0x00000000
 8004090:	08003de1 	.word	0x08003de1
 8004094:	0800451e 	.word	0x0800451e

08004098 <_printf_common>:
 8004098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800409c:	4616      	mov	r6, r2
 800409e:	4699      	mov	r9, r3
 80040a0:	688a      	ldr	r2, [r1, #8]
 80040a2:	690b      	ldr	r3, [r1, #16]
 80040a4:	4607      	mov	r7, r0
 80040a6:	4293      	cmp	r3, r2
 80040a8:	bfb8      	it	lt
 80040aa:	4613      	movlt	r3, r2
 80040ac:	6033      	str	r3, [r6, #0]
 80040ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040b2:	460c      	mov	r4, r1
 80040b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040b8:	b10a      	cbz	r2, 80040be <_printf_common+0x26>
 80040ba:	3301      	adds	r3, #1
 80040bc:	6033      	str	r3, [r6, #0]
 80040be:	6823      	ldr	r3, [r4, #0]
 80040c0:	0699      	lsls	r1, r3, #26
 80040c2:	bf42      	ittt	mi
 80040c4:	6833      	ldrmi	r3, [r6, #0]
 80040c6:	3302      	addmi	r3, #2
 80040c8:	6033      	strmi	r3, [r6, #0]
 80040ca:	6825      	ldr	r5, [r4, #0]
 80040cc:	f015 0506 	ands.w	r5, r5, #6
 80040d0:	d106      	bne.n	80040e0 <_printf_common+0x48>
 80040d2:	f104 0a19 	add.w	sl, r4, #25
 80040d6:	68e3      	ldr	r3, [r4, #12]
 80040d8:	6832      	ldr	r2, [r6, #0]
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	42ab      	cmp	r3, r5
 80040de:	dc28      	bgt.n	8004132 <_printf_common+0x9a>
 80040e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040e4:	1e13      	subs	r3, r2, #0
 80040e6:	6822      	ldr	r2, [r4, #0]
 80040e8:	bf18      	it	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	0692      	lsls	r2, r2, #26
 80040ee:	d42d      	bmi.n	800414c <_printf_common+0xb4>
 80040f0:	4649      	mov	r1, r9
 80040f2:	4638      	mov	r0, r7
 80040f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040f8:	47c0      	blx	r8
 80040fa:	3001      	adds	r0, #1
 80040fc:	d020      	beq.n	8004140 <_printf_common+0xa8>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	68e5      	ldr	r5, [r4, #12]
 8004102:	f003 0306 	and.w	r3, r3, #6
 8004106:	2b04      	cmp	r3, #4
 8004108:	bf18      	it	ne
 800410a:	2500      	movne	r5, #0
 800410c:	6832      	ldr	r2, [r6, #0]
 800410e:	f04f 0600 	mov.w	r6, #0
 8004112:	68a3      	ldr	r3, [r4, #8]
 8004114:	bf08      	it	eq
 8004116:	1aad      	subeq	r5, r5, r2
 8004118:	6922      	ldr	r2, [r4, #16]
 800411a:	bf08      	it	eq
 800411c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004120:	4293      	cmp	r3, r2
 8004122:	bfc4      	itt	gt
 8004124:	1a9b      	subgt	r3, r3, r2
 8004126:	18ed      	addgt	r5, r5, r3
 8004128:	341a      	adds	r4, #26
 800412a:	42b5      	cmp	r5, r6
 800412c:	d11a      	bne.n	8004164 <_printf_common+0xcc>
 800412e:	2000      	movs	r0, #0
 8004130:	e008      	b.n	8004144 <_printf_common+0xac>
 8004132:	2301      	movs	r3, #1
 8004134:	4652      	mov	r2, sl
 8004136:	4649      	mov	r1, r9
 8004138:	4638      	mov	r0, r7
 800413a:	47c0      	blx	r8
 800413c:	3001      	adds	r0, #1
 800413e:	d103      	bne.n	8004148 <_printf_common+0xb0>
 8004140:	f04f 30ff 	mov.w	r0, #4294967295
 8004144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004148:	3501      	adds	r5, #1
 800414a:	e7c4      	b.n	80040d6 <_printf_common+0x3e>
 800414c:	2030      	movs	r0, #48	; 0x30
 800414e:	18e1      	adds	r1, r4, r3
 8004150:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800415a:	4422      	add	r2, r4
 800415c:	3302      	adds	r3, #2
 800415e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004162:	e7c5      	b.n	80040f0 <_printf_common+0x58>
 8004164:	2301      	movs	r3, #1
 8004166:	4622      	mov	r2, r4
 8004168:	4649      	mov	r1, r9
 800416a:	4638      	mov	r0, r7
 800416c:	47c0      	blx	r8
 800416e:	3001      	adds	r0, #1
 8004170:	d0e6      	beq.n	8004140 <_printf_common+0xa8>
 8004172:	3601      	adds	r6, #1
 8004174:	e7d9      	b.n	800412a <_printf_common+0x92>
	...

08004178 <_printf_i>:
 8004178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800417c:	460c      	mov	r4, r1
 800417e:	7e27      	ldrb	r7, [r4, #24]
 8004180:	4691      	mov	r9, r2
 8004182:	2f78      	cmp	r7, #120	; 0x78
 8004184:	4680      	mov	r8, r0
 8004186:	469a      	mov	sl, r3
 8004188:	990c      	ldr	r1, [sp, #48]	; 0x30
 800418a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800418e:	d807      	bhi.n	80041a0 <_printf_i+0x28>
 8004190:	2f62      	cmp	r7, #98	; 0x62
 8004192:	d80a      	bhi.n	80041aa <_printf_i+0x32>
 8004194:	2f00      	cmp	r7, #0
 8004196:	f000 80d9 	beq.w	800434c <_printf_i+0x1d4>
 800419a:	2f58      	cmp	r7, #88	; 0x58
 800419c:	f000 80a4 	beq.w	80042e8 <_printf_i+0x170>
 80041a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041a8:	e03a      	b.n	8004220 <_printf_i+0xa8>
 80041aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ae:	2b15      	cmp	r3, #21
 80041b0:	d8f6      	bhi.n	80041a0 <_printf_i+0x28>
 80041b2:	a001      	add	r0, pc, #4	; (adr r0, 80041b8 <_printf_i+0x40>)
 80041b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041b8:	08004211 	.word	0x08004211
 80041bc:	08004225 	.word	0x08004225
 80041c0:	080041a1 	.word	0x080041a1
 80041c4:	080041a1 	.word	0x080041a1
 80041c8:	080041a1 	.word	0x080041a1
 80041cc:	080041a1 	.word	0x080041a1
 80041d0:	08004225 	.word	0x08004225
 80041d4:	080041a1 	.word	0x080041a1
 80041d8:	080041a1 	.word	0x080041a1
 80041dc:	080041a1 	.word	0x080041a1
 80041e0:	080041a1 	.word	0x080041a1
 80041e4:	08004333 	.word	0x08004333
 80041e8:	08004255 	.word	0x08004255
 80041ec:	08004315 	.word	0x08004315
 80041f0:	080041a1 	.word	0x080041a1
 80041f4:	080041a1 	.word	0x080041a1
 80041f8:	08004355 	.word	0x08004355
 80041fc:	080041a1 	.word	0x080041a1
 8004200:	08004255 	.word	0x08004255
 8004204:	080041a1 	.word	0x080041a1
 8004208:	080041a1 	.word	0x080041a1
 800420c:	0800431d 	.word	0x0800431d
 8004210:	680b      	ldr	r3, [r1, #0]
 8004212:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004216:	1d1a      	adds	r2, r3, #4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	600a      	str	r2, [r1, #0]
 800421c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004220:	2301      	movs	r3, #1
 8004222:	e0a4      	b.n	800436e <_printf_i+0x1f6>
 8004224:	6825      	ldr	r5, [r4, #0]
 8004226:	6808      	ldr	r0, [r1, #0]
 8004228:	062e      	lsls	r6, r5, #24
 800422a:	f100 0304 	add.w	r3, r0, #4
 800422e:	d50a      	bpl.n	8004246 <_printf_i+0xce>
 8004230:	6805      	ldr	r5, [r0, #0]
 8004232:	600b      	str	r3, [r1, #0]
 8004234:	2d00      	cmp	r5, #0
 8004236:	da03      	bge.n	8004240 <_printf_i+0xc8>
 8004238:	232d      	movs	r3, #45	; 0x2d
 800423a:	426d      	negs	r5, r5
 800423c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004240:	230a      	movs	r3, #10
 8004242:	485e      	ldr	r0, [pc, #376]	; (80043bc <_printf_i+0x244>)
 8004244:	e019      	b.n	800427a <_printf_i+0x102>
 8004246:	f015 0f40 	tst.w	r5, #64	; 0x40
 800424a:	6805      	ldr	r5, [r0, #0]
 800424c:	600b      	str	r3, [r1, #0]
 800424e:	bf18      	it	ne
 8004250:	b22d      	sxthne	r5, r5
 8004252:	e7ef      	b.n	8004234 <_printf_i+0xbc>
 8004254:	680b      	ldr	r3, [r1, #0]
 8004256:	6825      	ldr	r5, [r4, #0]
 8004258:	1d18      	adds	r0, r3, #4
 800425a:	6008      	str	r0, [r1, #0]
 800425c:	0628      	lsls	r0, r5, #24
 800425e:	d501      	bpl.n	8004264 <_printf_i+0xec>
 8004260:	681d      	ldr	r5, [r3, #0]
 8004262:	e002      	b.n	800426a <_printf_i+0xf2>
 8004264:	0669      	lsls	r1, r5, #25
 8004266:	d5fb      	bpl.n	8004260 <_printf_i+0xe8>
 8004268:	881d      	ldrh	r5, [r3, #0]
 800426a:	2f6f      	cmp	r7, #111	; 0x6f
 800426c:	bf0c      	ite	eq
 800426e:	2308      	moveq	r3, #8
 8004270:	230a      	movne	r3, #10
 8004272:	4852      	ldr	r0, [pc, #328]	; (80043bc <_printf_i+0x244>)
 8004274:	2100      	movs	r1, #0
 8004276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800427a:	6866      	ldr	r6, [r4, #4]
 800427c:	2e00      	cmp	r6, #0
 800427e:	bfa8      	it	ge
 8004280:	6821      	ldrge	r1, [r4, #0]
 8004282:	60a6      	str	r6, [r4, #8]
 8004284:	bfa4      	itt	ge
 8004286:	f021 0104 	bicge.w	r1, r1, #4
 800428a:	6021      	strge	r1, [r4, #0]
 800428c:	b90d      	cbnz	r5, 8004292 <_printf_i+0x11a>
 800428e:	2e00      	cmp	r6, #0
 8004290:	d04d      	beq.n	800432e <_printf_i+0x1b6>
 8004292:	4616      	mov	r6, r2
 8004294:	fbb5 f1f3 	udiv	r1, r5, r3
 8004298:	fb03 5711 	mls	r7, r3, r1, r5
 800429c:	5dc7      	ldrb	r7, [r0, r7]
 800429e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042a2:	462f      	mov	r7, r5
 80042a4:	42bb      	cmp	r3, r7
 80042a6:	460d      	mov	r5, r1
 80042a8:	d9f4      	bls.n	8004294 <_printf_i+0x11c>
 80042aa:	2b08      	cmp	r3, #8
 80042ac:	d10b      	bne.n	80042c6 <_printf_i+0x14e>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	07df      	lsls	r7, r3, #31
 80042b2:	d508      	bpl.n	80042c6 <_printf_i+0x14e>
 80042b4:	6923      	ldr	r3, [r4, #16]
 80042b6:	6861      	ldr	r1, [r4, #4]
 80042b8:	4299      	cmp	r1, r3
 80042ba:	bfde      	ittt	le
 80042bc:	2330      	movle	r3, #48	; 0x30
 80042be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042c6:	1b92      	subs	r2, r2, r6
 80042c8:	6122      	str	r2, [r4, #16]
 80042ca:	464b      	mov	r3, r9
 80042cc:	4621      	mov	r1, r4
 80042ce:	4640      	mov	r0, r8
 80042d0:	f8cd a000 	str.w	sl, [sp]
 80042d4:	aa03      	add	r2, sp, #12
 80042d6:	f7ff fedf 	bl	8004098 <_printf_common>
 80042da:	3001      	adds	r0, #1
 80042dc:	d14c      	bne.n	8004378 <_printf_i+0x200>
 80042de:	f04f 30ff 	mov.w	r0, #4294967295
 80042e2:	b004      	add	sp, #16
 80042e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e8:	4834      	ldr	r0, [pc, #208]	; (80043bc <_printf_i+0x244>)
 80042ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042ee:	680e      	ldr	r6, [r1, #0]
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80042f6:	061f      	lsls	r7, r3, #24
 80042f8:	600e      	str	r6, [r1, #0]
 80042fa:	d514      	bpl.n	8004326 <_printf_i+0x1ae>
 80042fc:	07d9      	lsls	r1, r3, #31
 80042fe:	bf44      	itt	mi
 8004300:	f043 0320 	orrmi.w	r3, r3, #32
 8004304:	6023      	strmi	r3, [r4, #0]
 8004306:	b91d      	cbnz	r5, 8004310 <_printf_i+0x198>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	f023 0320 	bic.w	r3, r3, #32
 800430e:	6023      	str	r3, [r4, #0]
 8004310:	2310      	movs	r3, #16
 8004312:	e7af      	b.n	8004274 <_printf_i+0xfc>
 8004314:	6823      	ldr	r3, [r4, #0]
 8004316:	f043 0320 	orr.w	r3, r3, #32
 800431a:	6023      	str	r3, [r4, #0]
 800431c:	2378      	movs	r3, #120	; 0x78
 800431e:	4828      	ldr	r0, [pc, #160]	; (80043c0 <_printf_i+0x248>)
 8004320:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004324:	e7e3      	b.n	80042ee <_printf_i+0x176>
 8004326:	065e      	lsls	r6, r3, #25
 8004328:	bf48      	it	mi
 800432a:	b2ad      	uxthmi	r5, r5
 800432c:	e7e6      	b.n	80042fc <_printf_i+0x184>
 800432e:	4616      	mov	r6, r2
 8004330:	e7bb      	b.n	80042aa <_printf_i+0x132>
 8004332:	680b      	ldr	r3, [r1, #0]
 8004334:	6826      	ldr	r6, [r4, #0]
 8004336:	1d1d      	adds	r5, r3, #4
 8004338:	6960      	ldr	r0, [r4, #20]
 800433a:	600d      	str	r5, [r1, #0]
 800433c:	0635      	lsls	r5, r6, #24
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	d501      	bpl.n	8004346 <_printf_i+0x1ce>
 8004342:	6018      	str	r0, [r3, #0]
 8004344:	e002      	b.n	800434c <_printf_i+0x1d4>
 8004346:	0671      	lsls	r1, r6, #25
 8004348:	d5fb      	bpl.n	8004342 <_printf_i+0x1ca>
 800434a:	8018      	strh	r0, [r3, #0]
 800434c:	2300      	movs	r3, #0
 800434e:	4616      	mov	r6, r2
 8004350:	6123      	str	r3, [r4, #16]
 8004352:	e7ba      	b.n	80042ca <_printf_i+0x152>
 8004354:	680b      	ldr	r3, [r1, #0]
 8004356:	1d1a      	adds	r2, r3, #4
 8004358:	600a      	str	r2, [r1, #0]
 800435a:	681e      	ldr	r6, [r3, #0]
 800435c:	2100      	movs	r1, #0
 800435e:	4630      	mov	r0, r6
 8004360:	6862      	ldr	r2, [r4, #4]
 8004362:	f000 f831 	bl	80043c8 <memchr>
 8004366:	b108      	cbz	r0, 800436c <_printf_i+0x1f4>
 8004368:	1b80      	subs	r0, r0, r6
 800436a:	6060      	str	r0, [r4, #4]
 800436c:	6863      	ldr	r3, [r4, #4]
 800436e:	6123      	str	r3, [r4, #16]
 8004370:	2300      	movs	r3, #0
 8004372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004376:	e7a8      	b.n	80042ca <_printf_i+0x152>
 8004378:	4632      	mov	r2, r6
 800437a:	4649      	mov	r1, r9
 800437c:	4640      	mov	r0, r8
 800437e:	6923      	ldr	r3, [r4, #16]
 8004380:	47d0      	blx	sl
 8004382:	3001      	adds	r0, #1
 8004384:	d0ab      	beq.n	80042de <_printf_i+0x166>
 8004386:	6823      	ldr	r3, [r4, #0]
 8004388:	079b      	lsls	r3, r3, #30
 800438a:	d413      	bmi.n	80043b4 <_printf_i+0x23c>
 800438c:	68e0      	ldr	r0, [r4, #12]
 800438e:	9b03      	ldr	r3, [sp, #12]
 8004390:	4298      	cmp	r0, r3
 8004392:	bfb8      	it	lt
 8004394:	4618      	movlt	r0, r3
 8004396:	e7a4      	b.n	80042e2 <_printf_i+0x16a>
 8004398:	2301      	movs	r3, #1
 800439a:	4632      	mov	r2, r6
 800439c:	4649      	mov	r1, r9
 800439e:	4640      	mov	r0, r8
 80043a0:	47d0      	blx	sl
 80043a2:	3001      	adds	r0, #1
 80043a4:	d09b      	beq.n	80042de <_printf_i+0x166>
 80043a6:	3501      	adds	r5, #1
 80043a8:	68e3      	ldr	r3, [r4, #12]
 80043aa:	9903      	ldr	r1, [sp, #12]
 80043ac:	1a5b      	subs	r3, r3, r1
 80043ae:	42ab      	cmp	r3, r5
 80043b0:	dcf2      	bgt.n	8004398 <_printf_i+0x220>
 80043b2:	e7eb      	b.n	800438c <_printf_i+0x214>
 80043b4:	2500      	movs	r5, #0
 80043b6:	f104 0619 	add.w	r6, r4, #25
 80043ba:	e7f5      	b.n	80043a8 <_printf_i+0x230>
 80043bc:	08004529 	.word	0x08004529
 80043c0:	0800453a 	.word	0x0800453a

080043c4 <__retarget_lock_acquire_recursive>:
 80043c4:	4770      	bx	lr

080043c6 <__retarget_lock_release_recursive>:
 80043c6:	4770      	bx	lr

080043c8 <memchr>:
 80043c8:	4603      	mov	r3, r0
 80043ca:	b510      	push	{r4, lr}
 80043cc:	b2c9      	uxtb	r1, r1
 80043ce:	4402      	add	r2, r0
 80043d0:	4293      	cmp	r3, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	d101      	bne.n	80043da <memchr+0x12>
 80043d6:	2000      	movs	r0, #0
 80043d8:	e003      	b.n	80043e2 <memchr+0x1a>
 80043da:	7804      	ldrb	r4, [r0, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	428c      	cmp	r4, r1
 80043e0:	d1f6      	bne.n	80043d0 <memchr+0x8>
 80043e2:	bd10      	pop	{r4, pc}

080043e4 <memcpy>:
 80043e4:	440a      	add	r2, r1
 80043e6:	4291      	cmp	r1, r2
 80043e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043ec:	d100      	bne.n	80043f0 <memcpy+0xc>
 80043ee:	4770      	bx	lr
 80043f0:	b510      	push	{r4, lr}
 80043f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043f6:	4291      	cmp	r1, r2
 80043f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043fc:	d1f9      	bne.n	80043f2 <memcpy+0xe>
 80043fe:	bd10      	pop	{r4, pc}

08004400 <memmove>:
 8004400:	4288      	cmp	r0, r1
 8004402:	b510      	push	{r4, lr}
 8004404:	eb01 0402 	add.w	r4, r1, r2
 8004408:	d902      	bls.n	8004410 <memmove+0x10>
 800440a:	4284      	cmp	r4, r0
 800440c:	4623      	mov	r3, r4
 800440e:	d807      	bhi.n	8004420 <memmove+0x20>
 8004410:	1e43      	subs	r3, r0, #1
 8004412:	42a1      	cmp	r1, r4
 8004414:	d008      	beq.n	8004428 <memmove+0x28>
 8004416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800441a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800441e:	e7f8      	b.n	8004412 <memmove+0x12>
 8004420:	4601      	mov	r1, r0
 8004422:	4402      	add	r2, r0
 8004424:	428a      	cmp	r2, r1
 8004426:	d100      	bne.n	800442a <memmove+0x2a>
 8004428:	bd10      	pop	{r4, pc}
 800442a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800442e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004432:	e7f7      	b.n	8004424 <memmove+0x24>

08004434 <_realloc_r>:
 8004434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004436:	4607      	mov	r7, r0
 8004438:	4614      	mov	r4, r2
 800443a:	460e      	mov	r6, r1
 800443c:	b921      	cbnz	r1, 8004448 <_realloc_r+0x14>
 800443e:	4611      	mov	r1, r2
 8004440:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004444:	f7ff bc36 	b.w	8003cb4 <_malloc_r>
 8004448:	b922      	cbnz	r2, 8004454 <_realloc_r+0x20>
 800444a:	f7ff fbe7 	bl	8003c1c <_free_r>
 800444e:	4625      	mov	r5, r4
 8004450:	4628      	mov	r0, r5
 8004452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004454:	f000 f814 	bl	8004480 <_malloc_usable_size_r>
 8004458:	42a0      	cmp	r0, r4
 800445a:	d20f      	bcs.n	800447c <_realloc_r+0x48>
 800445c:	4621      	mov	r1, r4
 800445e:	4638      	mov	r0, r7
 8004460:	f7ff fc28 	bl	8003cb4 <_malloc_r>
 8004464:	4605      	mov	r5, r0
 8004466:	2800      	cmp	r0, #0
 8004468:	d0f2      	beq.n	8004450 <_realloc_r+0x1c>
 800446a:	4631      	mov	r1, r6
 800446c:	4622      	mov	r2, r4
 800446e:	f7ff ffb9 	bl	80043e4 <memcpy>
 8004472:	4631      	mov	r1, r6
 8004474:	4638      	mov	r0, r7
 8004476:	f7ff fbd1 	bl	8003c1c <_free_r>
 800447a:	e7e9      	b.n	8004450 <_realloc_r+0x1c>
 800447c:	4635      	mov	r5, r6
 800447e:	e7e7      	b.n	8004450 <_realloc_r+0x1c>

08004480 <_malloc_usable_size_r>:
 8004480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004484:	1f18      	subs	r0, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	bfbc      	itt	lt
 800448a:	580b      	ldrlt	r3, [r1, r0]
 800448c:	18c0      	addlt	r0, r0, r3
 800448e:	4770      	bx	lr

08004490 <_init>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	bf00      	nop
 8004494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004496:	bc08      	pop	{r3}
 8004498:	469e      	mov	lr, r3
 800449a:	4770      	bx	lr

0800449c <_fini>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr
