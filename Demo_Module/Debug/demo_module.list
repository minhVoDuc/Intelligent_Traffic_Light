
demo_module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002888  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029b4  080029b4  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  080029b4  080029b4  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029b4  080029b4  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080029bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  200000cc  08002a88  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08002a88  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c38e  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204d  00000000  00000000  0002c483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  0002ef50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c98  00000000  00000000  0002f8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc01  00000000  00000000  00047558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008587b  00000000  00000000  00053159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d89d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b7c  00000000  00000000  000d8a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800297c 	.word	0x0800297c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	0800297c 	.word	0x0800297c

0800014c <button_reading>:

int TimeOutForKeyPress[MAX_BUTTON] = {LONG_DURATION};
int flagBtn[MAX_BUTTON] = {0};
int flagBtnLong[MAX_BUTTON] = {0};

void button_reading(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e096      	b.n	8000286 <button_reading+0x13a>
		KeyReg2[i] = KeyReg1[i];
 8000158:	4a4f      	ldr	r2, [pc, #316]	; (8000298 <button_reading+0x14c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	494e      	ldr	r1, [pc, #312]	; (800029c <button_reading+0x150>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000168:	4a4d      	ldr	r2, [pc, #308]	; (80002a0 <button_reading+0x154>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4949      	ldr	r1, [pc, #292]	; (8000298 <button_reading+0x14c>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch (i){ //check which button is being read now
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b02      	cmp	r3, #2
 800017c:	d01f      	beq.n	80001be <button_reading+0x72>
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b02      	cmp	r3, #2
 8000182:	dc27      	bgt.n	80001d4 <button_reading+0x88>
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d003      	beq.n	8000192 <button_reading+0x46>
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d00b      	beq.n	80001a8 <button_reading+0x5c>
			break;
//		case BTN_PD:
//			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, PD_BTN_Pin);
//			break;
		default:
			break;
 8000190:	e020      	b.n	80001d4 <button_reading+0x88>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_1_Pin);
 8000192:	2101      	movs	r1, #1
 8000194:	4843      	ldr	r0, [pc, #268]	; (80002a4 <button_reading+0x158>)
 8000196:	f001 faef 	bl	8001778 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	4619      	mov	r1, r3
 800019e:	4a40      	ldr	r2, [pc, #256]	; (80002a0 <button_reading+0x154>)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001a6:	e016      	b.n	80001d6 <button_reading+0x8a>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_2_Pin);
 80001a8:	2102      	movs	r1, #2
 80001aa:	483e      	ldr	r0, [pc, #248]	; (80002a4 <button_reading+0x158>)
 80001ac:	f001 fae4 	bl	8001778 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	4619      	mov	r1, r3
 80001b4:	4a3a      	ldr	r2, [pc, #232]	; (80002a0 <button_reading+0x154>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001bc:	e00b      	b.n	80001d6 <button_reading+0x8a>
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_3_Pin);
 80001be:	2104      	movs	r1, #4
 80001c0:	4838      	ldr	r0, [pc, #224]	; (80002a4 <button_reading+0x158>)
 80001c2:	f001 fad9 	bl	8001778 <HAL_GPIO_ReadPin>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4619      	mov	r1, r3
 80001ca:	4a35      	ldr	r2, [pc, #212]	; (80002a0 <button_reading+0x154>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80001d2:	e000      	b.n	80001d6 <button_reading+0x8a>
			break;
 80001d4:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001d6:	4a30      	ldr	r2, [pc, #192]	; (8000298 <button_reading+0x14c>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001de:	4930      	ldr	r1, [pc, #192]	; (80002a0 <button_reading+0x154>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d14a      	bne.n	8000280 <button_reading+0x134>
 80001ea:	4a2b      	ldr	r2, [pc, #172]	; (8000298 <button_reading+0x14c>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	492a      	ldr	r1, [pc, #168]	; (800029c <button_reading+0x150>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d140      	bne.n	8000280 <button_reading+0x134>
			if (KeyReg2[i] != KeyReg3[i]){
 80001fe:	4a27      	ldr	r2, [pc, #156]	; (800029c <button_reading+0x150>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4928      	ldr	r1, [pc, #160]	; (80002a8 <button_reading+0x15c>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d022      	beq.n	8000258 <button_reading+0x10c>
				KeyReg3[i] = KeyReg2[i];
 8000212:	4a22      	ldr	r2, [pc, #136]	; (800029c <button_reading+0x150>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4923      	ldr	r1, [pc, #140]	; (80002a8 <button_reading+0x15c>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == IS_PRESSED){
 8000222:	4a21      	ldr	r2, [pc, #132]	; (80002a8 <button_reading+0x15c>)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d109      	bne.n	8000242 <button_reading+0xf6>
					TimeOutForKeyPress[i] = LONG_DURATION;
 800022e:	4a1f      	ldr	r2, [pc, #124]	; (80002ac <button_reading+0x160>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f000 f83c 	bl	80002b8 <subKeyProcess>
 8000240:	e01e      	b.n	8000280 <button_reading+0x134>
				}
				else{
					flagBtnLong[i] = 0;
 8000242:	4a1b      	ldr	r2, [pc, #108]	; (80002b0 <button_reading+0x164>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2100      	movs	r1, #0
 8000248:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					Over1Sec[i] = 0;
 800024c:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <button_reading+0x168>)
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2100      	movs	r1, #0
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000256:	e013      	b.n	8000280 <button_reading+0x134>
				}
			} else {
				TimeOutForKeyPress[i] --;
 8000258:	4a14      	ldr	r2, [pc, #80]	; (80002ac <button_reading+0x160>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	4912      	ldr	r1, [pc, #72]	; (80002ac <button_reading+0x160>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800026a:	4a10      	ldr	r2, [pc, #64]	; (80002ac <button_reading+0x160>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d104      	bne.n	8000280 <button_reading+0x134>
					KeyReg3[i] = IS_RELEASED;
 8000276:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <button_reading+0x15c>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++){
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b03      	cmp	r3, #3
 800028a:	f77f af65 	ble.w	8000158 <button_reading+0xc>
				}
			}
		}
	}
}
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000010 	.word	0x20000010
 800029c:	20000020 	.word	0x20000020
 80002a0:	20000000 	.word	0x20000000
 80002a4:	40010800 	.word	0x40010800
 80002a8:	20000030 	.word	0x20000030
 80002ac:	20000040 	.word	0x20000040
 80002b0:	20000108 	.word	0x20000108
 80002b4:	200000e8 	.word	0x200000e8

080002b8 <subKeyProcess>:

void subKeyProcess(int index){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	flagBtn[index] = 1;
 80002c0:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <subKeyProcess+0x48>)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	2101      	movs	r1, #1
 80002c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (Over1Sec[index] == 0){
 80002ca:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <subKeyProcess+0x4c>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d105      	bne.n	80002e2 <subKeyProcess+0x2a>
		Over1Sec[index] = 1;
 80002d6:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <subKeyProcess+0x4c>)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2101      	movs	r1, #1
 80002dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else{
		flagBtnLong[index] = 1;
		flagBtn[index] = 0;
	}
}
 80002e0:	e009      	b.n	80002f6 <subKeyProcess+0x3e>
		flagBtnLong[index] = 1;
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <subKeyProcess+0x50>)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2101      	movs	r1, #1
 80002e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagBtn[index] = 0;
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <subKeyProcess+0x48>)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2100      	movs	r1, #0
 80002f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	200000f8 	.word	0x200000f8
 8000304:	200000e8 	.word	0x200000e8
 8000308:	20000108 	.word	0x20000108

0800030c <button_isPressed>:

int button_isPressed(int index){
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	if (flagBtn[index] == 1){
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <button_isPressed+0x30>)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d106      	bne.n	800032e <button_isPressed+0x22>
		flagBtn[index] = 0;
 8000320:	4a06      	ldr	r2, [pc, #24]	; (800033c <button_isPressed+0x30>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2100      	movs	r1, #0
 8000326:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800032a:	2301      	movs	r3, #1
 800032c:	e000      	b.n	8000330 <button_isPressed+0x24>
	}
	return 0;
 800032e:	2300      	movs	r3, #0
}
 8000330:	4618      	mov	r0, r3
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	200000f8 	.word	0x200000f8

08000340 <button_isLongPressed>:

int button_isLongPressed(int index){
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	return (flagBtnLong[index] == 1);
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <button_isLongPressed+0x24>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000350:	2b01      	cmp	r3, #1
 8000352:	bf0c      	ite	eq
 8000354:	2301      	moveq	r3, #1
 8000356:	2300      	movne	r3, #0
 8000358:	b2db      	uxtb	r3, r3
}
 800035a:	4618      	mov	r0, r3
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	20000108 	.word	0x20000108

08000368 <led_clear_all>:
	}
}
#endif

#ifdef PROTEUS
void led_clear_all() {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin|
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8000372:	4802      	ldr	r0, [pc, #8]	; (800037c <led_clear_all+0x14>)
 8000374:	f001 fa17 	bl	80017a6 <HAL_GPIO_WritePin>
			  	  	  	  	 RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin, GPIO_PIN_SET);
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	40010800 	.word	0x40010800

08000380 <led_turn_on>:

void led_turn_on(uint8_t led_index, uint8_t led_type) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	460a      	mov	r2, r1
 800038a:	71fb      	strb	r3, [r7, #7]
 800038c:	4613      	mov	r3, r2
 800038e:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	2b05      	cmp	r3, #5
 8000394:	d002      	beq.n	800039c <led_turn_on+0x1c>
 8000396:	2b06      	cmp	r3, #6
 8000398:	d01e      	beq.n	80003d8 <led_turn_on+0x58>
//			break;
//		}
//		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 800039a:	e040      	b.n	800041e <led_turn_on+0x9e>
		switch (led_type) {
 800039c:	79bb      	ldrb	r3, [r7, #6]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d012      	beq.n	80003c8 <led_turn_on+0x48>
 80003a2:	2b02      	cmp	r3, #2
 80003a4:	dc38      	bgt.n	8000418 <led_turn_on+0x98>
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d002      	beq.n	80003b0 <led_turn_on+0x30>
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d006      	beq.n	80003bc <led_turn_on+0x3c>
		break;
 80003ae:	e033      	b.n	8000418 <led_turn_on+0x98>
			HAL_GPIO_WritePin(GPIOA, RED_0_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2140      	movs	r1, #64	; 0x40
 80003b4:	481c      	ldr	r0, [pc, #112]	; (8000428 <led_turn_on+0xa8>)
 80003b6:	f001 f9f6 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 80003ba:	e00c      	b.n	80003d6 <led_turn_on+0x56>
			HAL_GPIO_WritePin(GPIOA, GREEN_0_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2180      	movs	r1, #128	; 0x80
 80003c0:	4819      	ldr	r0, [pc, #100]	; (8000428 <led_turn_on+0xa8>)
 80003c2:	f001 f9f0 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 80003c6:	e006      	b.n	80003d6 <led_turn_on+0x56>
			HAL_GPIO_WritePin(GPIOA, YELLOW_0_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ce:	4816      	ldr	r0, [pc, #88]	; (8000428 <led_turn_on+0xa8>)
 80003d0:	f001 f9e9 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 80003d4:	bf00      	nop
		break;
 80003d6:	e01f      	b.n	8000418 <led_turn_on+0x98>
		switch (led_type) {
 80003d8:	79bb      	ldrb	r3, [r7, #6]
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d014      	beq.n	8000408 <led_turn_on+0x88>
 80003de:	2b02      	cmp	r3, #2
 80003e0:	dc1c      	bgt.n	800041c <led_turn_on+0x9c>
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d002      	beq.n	80003ec <led_turn_on+0x6c>
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d007      	beq.n	80003fa <led_turn_on+0x7a>
		break;
 80003ea:	e017      	b.n	800041c <led_turn_on+0x9c>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f2:	480d      	ldr	r0, [pc, #52]	; (8000428 <led_turn_on+0xa8>)
 80003f4:	f001 f9d7 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 80003f8:	e00d      	b.n	8000416 <led_turn_on+0x96>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000400:	4809      	ldr	r0, [pc, #36]	; (8000428 <led_turn_on+0xa8>)
 8000402:	f001 f9d0 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 8000406:	e006      	b.n	8000416 <led_turn_on+0x96>
			HAL_GPIO_WritePin(GPIOA, YELLOW_1_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <led_turn_on+0xa8>)
 8000410:	f001 f9c9 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 8000414:	bf00      	nop
		break;
 8000416:	e001      	b.n	800041c <led_turn_on+0x9c>
		break;
 8000418:	bf00      	nop
 800041a:	e000      	b.n	800041e <led_turn_on+0x9e>
		break;
 800041c:	bf00      	nop
	}
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40010800 	.word	0x40010800

0800042c <led_turn_off>:

void led_turn_off(uint8_t led_index, uint8_t led_type) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	460a      	mov	r2, r1
 8000436:	71fb      	strb	r3, [r7, #7]
 8000438:	4613      	mov	r3, r2
 800043a:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	2b05      	cmp	r3, #5
 8000440:	d002      	beq.n	8000448 <led_turn_off+0x1c>
 8000442:	2b06      	cmp	r3, #6
 8000444:	d01e      	beq.n	8000484 <led_turn_off+0x58>
//			break;
//		}
//		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 8000446:	e040      	b.n	80004ca <led_turn_off+0x9e>
		switch (led_type) {
 8000448:	79bb      	ldrb	r3, [r7, #6]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d012      	beq.n	8000474 <led_turn_off+0x48>
 800044e:	2b02      	cmp	r3, #2
 8000450:	dc38      	bgt.n	80004c4 <led_turn_off+0x98>
 8000452:	2b00      	cmp	r3, #0
 8000454:	d002      	beq.n	800045c <led_turn_off+0x30>
 8000456:	2b01      	cmp	r3, #1
 8000458:	d006      	beq.n	8000468 <led_turn_off+0x3c>
		break;
 800045a:	e033      	b.n	80004c4 <led_turn_off+0x98>
			HAL_GPIO_WritePin(GPIOA, RED_0_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	2140      	movs	r1, #64	; 0x40
 8000460:	481c      	ldr	r0, [pc, #112]	; (80004d4 <led_turn_off+0xa8>)
 8000462:	f001 f9a0 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 8000466:	e00c      	b.n	8000482 <led_turn_off+0x56>
			HAL_GPIO_WritePin(GPIOA, GREEN_0_Pin, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	4819      	ldr	r0, [pc, #100]	; (80004d4 <led_turn_off+0xa8>)
 800046e:	f001 f99a 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 8000472:	e006      	b.n	8000482 <led_turn_off+0x56>
			HAL_GPIO_WritePin(GPIOA, YELLOW_0_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047a:	4816      	ldr	r0, [pc, #88]	; (80004d4 <led_turn_off+0xa8>)
 800047c:	f001 f993 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 8000480:	bf00      	nop
		break;
 8000482:	e01f      	b.n	80004c4 <led_turn_off+0x98>
		switch (led_type) {
 8000484:	79bb      	ldrb	r3, [r7, #6]
 8000486:	2b02      	cmp	r3, #2
 8000488:	d014      	beq.n	80004b4 <led_turn_off+0x88>
 800048a:	2b02      	cmp	r3, #2
 800048c:	dc1c      	bgt.n	80004c8 <led_turn_off+0x9c>
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <led_turn_off+0x6c>
 8000492:	2b01      	cmp	r3, #1
 8000494:	d007      	beq.n	80004a6 <led_turn_off+0x7a>
		break;
 8000496:	e017      	b.n	80004c8 <led_turn_off+0x9c>
			HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_SET);
 8000498:	2201      	movs	r2, #1
 800049a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800049e:	480d      	ldr	r0, [pc, #52]	; (80004d4 <led_turn_off+0xa8>)
 80004a0:	f001 f981 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 80004a4:	e00d      	b.n	80004c2 <led_turn_off+0x96>
			HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ac:	4809      	ldr	r0, [pc, #36]	; (80004d4 <led_turn_off+0xa8>)
 80004ae:	f001 f97a 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 80004b2:	e006      	b.n	80004c2 <led_turn_off+0x96>
			HAL_GPIO_WritePin(GPIOA, YELLOW_1_Pin, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <led_turn_off+0xa8>)
 80004bc:	f001 f973 	bl	80017a6 <HAL_GPIO_WritePin>
			break;
 80004c0:	bf00      	nop
		break;
 80004c2:	e001      	b.n	80004c8 <led_turn_off+0x9c>
		break;
 80004c4:	bf00      	nop
 80004c6:	e000      	b.n	80004ca <led_turn_off+0x9e>
		break;
 80004c8:	bf00      	nop
	}
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40010800 	.word	0x40010800

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fe62 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f816 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f89c 	bl	8000620 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004e8:	f000 f84e 	bl	8000588 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004ec:	4807      	ldr	r0, [pc, #28]	; (800050c <main+0x34>)
 80004ee:	f001 fdab 	bl	8002048 <HAL_TIM_Base_Start_IT>
  timer_init();
 80004f2:	f000 fa6b 	bl	80009cc <timer_init>
  traffic_init();
 80004f6:	f000 fb25 	bl	8000b44 <traffic_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  timer_setDuration(TIMER_TEST_0, 500);
 80004fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 faa2 	bl	8000a48 <timer_setDuration>
//	}
//	if (timer_checkFlag(TIMER_AUTO_B)) {
//		timer_setDuration(TIMER_AUTO_B, 2000);
//		HAL_GPIO_TogglePin(GPIOA, YELLOW_0_Pin);
//	}
	traffic_fsm();
 8000504:	f000 fda2 	bl	800104c <traffic_fsm>
 8000508:	e7fc      	b.n	8000504 <main+0x2c>
 800050a:	bf00      	nop
 800050c:	20000130 	.word	0x20000130

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b090      	sub	sp, #64	; 0x40
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0318 	add.w	r3, r7, #24
 800051a:	2228      	movs	r2, #40	; 0x28
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f002 f960 	bl	80027e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000532:	2302      	movs	r3, #2
 8000534:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000536:	2301      	movs	r3, #1
 8000538:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053a:	2310      	movs	r3, #16
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800053e:	2300      	movs	r3, #0
 8000540:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	4618      	mov	r0, r3
 8000548:	f001 f946 	bl	80017d8 <HAL_RCC_OscConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000552:	f000 f8b1 	bl	80006b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000556:	230f      	movs	r3, #15
 8000558:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fbb2 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800057a:	f000 f89d 	bl	80006b8 <Error_Handler>
  }
}
 800057e:	bf00      	nop
 8000580:	3740      	adds	r7, #64	; 0x40
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058e:	f107 0308 	add.w	r3, r7, #8
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059c:	463b      	mov	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <MX_TIM2_Init+0x94>)
 80005a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <MX_TIM2_Init+0x94>)
 80005ae:	2209      	movs	r2, #9
 80005b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_TIM2_Init+0x94>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999;
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_TIM2_Init+0x94>)
 80005ba:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80005be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <MX_TIM2_Init+0x94>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_TIM2_Init+0x94>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005cc:	4813      	ldr	r0, [pc, #76]	; (800061c <MX_TIM2_Init+0x94>)
 80005ce:	f001 fceb 	bl	8001fa8 <HAL_TIM_Base_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005d8:	f000 f86e 	bl	80006b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	4619      	mov	r1, r3
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <MX_TIM2_Init+0x94>)
 80005ea:	f001 fe81 	bl	80022f0 <HAL_TIM_ConfigClockSource>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005f4:	f000 f860 	bl	80006b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_TIM2_Init+0x94>)
 8000606:	f002 f849 	bl	800269c <HAL_TIMEx_MasterConfigSynchronization>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000610:	f000 f852 	bl	80006b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000130 	.word	0x20000130

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_GPIO_Init+0x78>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a17      	ldr	r2, [pc, #92]	; (8000698 <MX_GPIO_Init+0x78>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_GPIO_Init+0x78>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0304 	and.w	r3, r3, #4
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TEST_0_Pin|RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8000652:	4812      	ldr	r0, [pc, #72]	; (800069c <MX_GPIO_Init+0x7c>)
 8000654:	f001 f8a7 	bl	80017a6 <HAL_GPIO_WritePin>
                          |RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin;
 8000658:	2307      	movs	r3, #7
 800065a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	4619      	mov	r1, r3
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_GPIO_Init+0x7c>)
 800066c:	f000 ff0a 	bl	8001484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TEST_0_Pin RED_0_Pin GREEN_0_Pin YELLOW_0_Pin
                           RED_1_Pin GREEN_1_Pin YELLOW_1_Pin */
  GPIO_InitStruct.Pin = LED_TEST_0_Pin|RED_0_Pin|GREEN_0_Pin|YELLOW_0_Pin
 8000670:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
 8000674:	60bb      	str	r3, [r7, #8]
                          |RED_1_Pin|GREEN_1_Pin|YELLOW_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2302      	movs	r3, #2
 8000680:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	4619      	mov	r1, r3
 8000688:	4804      	ldr	r0, [pc, #16]	; (800069c <MX_GPIO_Init+0x7c>)
 800068a:	f000 fefb 	bl	8001484 <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000
 800069c:	40010800 	.word	0x40010800

080006a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	timer_run();
 80006a8:	f000 f99e 	bl	80009e8 <timer_run>
	button_reading();
 80006ac:	f7ff fd4e 	bl	800014c <button_reading>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>
	...

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_MspInit+0x5c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a14      	ldr	r2, [pc, #80]	; (8000720 <HAL_MspInit+0x5c>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_MspInit+0x5c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x5c>)
 80006e4:	69db      	ldr	r3, [r3, #28]
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x5c>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	61d3      	str	r3, [r2, #28]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x5c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <HAL_MspInit+0x60>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_MspInit+0x60>)
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40021000 	.word	0x40021000
 8000724:	40010000 	.word	0x40010000

08000728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000738:	d113      	bne.n	8000762 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_TIM_Base_MspInit+0x44>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <HAL_TIM_Base_MspInit+0x44>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_TIM_Base_MspInit+0x44>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	201c      	movs	r0, #28
 8000758:	f000 fe5d 	bl	8001416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800075c:	201c      	movs	r0, #28
 800075e:	f000 fe76 	bl	800144e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr

0800079a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b6:	f000 fd3b 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <TIM2_IRQHandler+0x10>)
 80007c6:	f001 fc8b 	bl	80020e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000130 	.word	0x20000130

080007d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007dc:	4a14      	ldr	r2, [pc, #80]	; (8000830 <_sbrk+0x5c>)
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <_sbrk+0x60>)
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d102      	bne.n	80007f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <_sbrk+0x64>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <_sbrk+0x68>)
 80007f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <_sbrk+0x64>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4413      	add	r3, r2
 80007fe:	693a      	ldr	r2, [r7, #16]
 8000800:	429a      	cmp	r2, r3
 8000802:	d207      	bcs.n	8000814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000804:	f001 ffb4 	bl	8002770 <__errno>
 8000808:	4603      	mov	r3, r0
 800080a:	220c      	movs	r2, #12
 800080c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080e:	f04f 33ff 	mov.w	r3, #4294967295
 8000812:	e009      	b.n	8000828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <_sbrk+0x64>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	4a05      	ldr	r2, [pc, #20]	; (8000838 <_sbrk+0x64>)
 8000824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000826:	68fb      	ldr	r3, [r7, #12]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20002800 	.word	0x20002800
 8000834:	00000400 	.word	0x00000400
 8000838:	20000120 	.word	0x20000120
 800083c:	20000198 	.word	0x20000198

08000840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <timer_unit_construct>:

struct timer_list timerList;
uint8_t	timerFlag[MAX_TIMER] = {0};

/*-------------- unit function -------------------*/
struct timer_unit* timer_unit_construct(uint8_t index, uint32_t duration) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	6039      	str	r1, [r7, #0]
 8000856:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = malloc(sizeof (struct timer_unit)); //dynamic allocating a timer unit
 8000858:	200c      	movs	r0, #12
 800085a:	f001 ffb3 	bl	80027c4 <malloc>
 800085e:	4603      	mov	r3, r0
 8000860:	60fb      	str	r3, [r7, #12]
	if (newUnit == NULL) {
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d101      	bne.n	800086c <timer_unit_construct+0x20>
		return NULL;
 8000868:	2300      	movs	r3, #0
 800086a:	e009      	b.n	8000880 <timer_unit_construct+0x34>
	}
	newUnit->index = index;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	701a      	strb	r2, [r3, #0]
	newUnit->duration = duration;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	605a      	str	r2, [r3, #4]
	newUnit->nextTimer = NULL;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
	return newUnit;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <timer_unit_destruct>:

void timer_unit_destruct(struct timer_unit *unit) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	free(unit);
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f001 ff9f 	bl	80027d4 <free>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <timer_list_add>:

/*-------------- list function -------------------*/
void timer_list_add(struct timer_unit *unit){
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	//list full
	if (timerList.size == MAX_TIMER) return;
 80008a8:	4b38      	ldr	r3, [pc, #224]	; (800098c <timer_list_add+0xec>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d068      	beq.n	8000982 <timer_list_add+0xe2>

	//list empty
	if (timerList.size == 0) {
 80008b0:	4b36      	ldr	r3, [pc, #216]	; (800098c <timer_list_add+0xec>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d109      	bne.n	80008cc <timer_list_add+0x2c>
		timerList.head = unit;
 80008b8:	4a34      	ldr	r2, [pc, #208]	; (800098c <timer_list_add+0xec>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6053      	str	r3, [r2, #4]
		timerList.size++;
 80008be:	4b33      	ldr	r3, [pc, #204]	; (800098c <timer_list_add+0xec>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4b31      	ldr	r3, [pc, #196]	; (800098c <timer_list_add+0xec>)
 80008c8:	701a      	strb	r2, [r3, #0]
		return;
 80008ca:	e05b      	b.n	8000984 <timer_list_add+0xe4>
	}

	//list has at least 1 item
	struct timer_unit *curr = timerList.head,
 80008cc:	4b2f      	ldr	r3, [pc, #188]	; (800098c <timer_list_add+0xec>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	617b      	str	r3, [r7, #20]
					  *prev = NULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
	uint32_t totalDuration = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
	while(curr != NULL) { //iterating the list
 80008da:	e00e      	b.n	80008fa <timer_list_add+0x5a>
		totalDuration += curr->duration;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4413      	add	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
		if (unit->duration < totalDuration) break;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d808      	bhi.n	8000902 <timer_list_add+0x62>
		prev = curr;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
		curr = curr->nextTimer;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	617b      	str	r3, [r7, #20]
	while(curr != NULL) { //iterating the list
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1ed      	bne.n	80008dc <timer_list_add+0x3c>
 8000900:	e000      	b.n	8000904 <timer_list_add+0x64>
		if (unit->duration < totalDuration) break;
 8000902:	bf00      	nop
	}
	if (prev == NULL) { //new unit is added before the head
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d113      	bne.n	8000932 <timer_list_add+0x92>
		unit->nextTimer = curr;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	609a      	str	r2, [r3, #8]
		curr->duration -= unit->duration;
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	1ad2      	subs	r2, r2, r3
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	605a      	str	r2, [r3, #4]
		timerList.head = unit;
 800091e:	4a1b      	ldr	r2, [pc, #108]	; (800098c <timer_list_add+0xec>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6053      	str	r3, [r2, #4]
		timerList.size++;
 8000924:	4b19      	ldr	r3, [pc, #100]	; (800098c <timer_list_add+0xec>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	3301      	adds	r3, #1
 800092a:	b2da      	uxtb	r2, r3
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <timer_list_add+0xec>)
 800092e:	701a      	strb	r2, [r3, #0]
		return;
 8000930:	e028      	b.n	8000984 <timer_list_add+0xe4>
	}
	prev->nextTimer = unit;
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	609a      	str	r2, [r3, #8]
	unit->nextTimer = curr;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	609a      	str	r2, [r3, #8]
	if (curr == NULL){
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d106      	bne.n	8000952 <timer_list_add+0xb2>
		unit->duration -= totalDuration;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1ad2      	subs	r2, r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	e010      	b.n	8000974 <timer_list_add+0xd4>
	}
	else{
		uint32_t tmp = unit->duration;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	60bb      	str	r3, [r7, #8]
		unit->duration -= (totalDuration - curr->duration);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	6859      	ldr	r1, [r3, #4]
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	1acb      	subs	r3, r1, r3
 8000964:	441a      	add	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	605a      	str	r2, [r3, #4]
		curr->duration = (totalDuration - tmp);
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1ad2      	subs	r2, r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	605a      	str	r2, [r3, #4]
	}
	timerList.size++;
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <timer_list_add+0xec>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <timer_list_add+0xec>)
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	e000      	b.n	8000984 <timer_list_add+0xe4>
	if (timerList.size == MAX_TIMER) return;
 8000982:	bf00      	nop
}
 8000984:	371c      	adds	r7, #28
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	20000178 	.word	0x20000178

08000990 <timer_list_pop>:

void timer_list_pop(){
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	//list empty
	if (timerList.size == 0) return;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <timer_list_pop+0x38>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d010      	beq.n	80009c0 <timer_list_pop+0x30>

	struct timer_unit *delUnit = timerList.head;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <timer_list_pop+0x38>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	607b      	str	r3, [r7, #4]
	timerList.head = delUnit->nextTimer;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	4a07      	ldr	r2, [pc, #28]	; (80009c8 <timer_list_pop+0x38>)
 80009aa:	6053      	str	r3, [r2, #4]
	timer_unit_destruct(delUnit);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff6b 	bl	8000888 <timer_unit_destruct>
	timerList.size--;
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <timer_list_pop+0x38>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <timer_list_pop+0x38>)
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e000      	b.n	80009c2 <timer_list_pop+0x32>
	if (timerList.size == 0) return;
 80009c0:	bf00      	nop
}
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000178 	.word	0x20000178

080009cc <timer_init>:

/*-------------- global function -------------------*/
void timer_init(){
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	timerList.head = NULL;
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <timer_init+0x18>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
	timerList.size = 0;
 80009d6:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <timer_init+0x18>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	20000178 	.word	0x20000178

080009e8 <timer_run>:

void timer_run(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	if (timerList.size == 0) return;
 80009ee:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <timer_run+0x58>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d020      	beq.n	8000a38 <timer_run+0x50>
	if (timerList.head->duration >= 0) {
		timerList.head->duration--;
 80009f6:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <timer_run+0x58>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	3a01      	subs	r2, #1
 80009fe:	605a      	str	r2, [r3, #4]
		if (timerList.head->duration <= 0) {
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <timer_run+0x58>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d117      	bne.n	8000a3a <timer_run+0x52>
			uint8_t index = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
			while(timerList.size && timerList.head->duration == 0) {
 8000a0e:	e009      	b.n	8000a24 <timer_run+0x3c>
				index = timerList.head->index;
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <timer_run+0x58>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
				timerFlag[index] = 1;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <timer_run+0x5c>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	54d1      	strb	r1, [r2, r3]
				timer_list_pop();
 8000a20:	f7ff ffb6 	bl	8000990 <timer_list_pop>
			while(timerList.size && timerList.head->duration == 0) {
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <timer_run+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d006      	beq.n	8000a3a <timer_run+0x52>
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <timer_run+0x58>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0ec      	beq.n	8000a10 <timer_run+0x28>
 8000a36:	e000      	b.n	8000a3a <timer_run+0x52>
	if (timerList.size == 0) return;
 8000a38:	bf00      	nop
			}
		}
	}
}
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000178 	.word	0x20000178
 8000a44:	20000124 	.word	0x20000124

08000a48 <timer_setDuration>:

void timer_setDuration(uint8_t index, uint32_t duration) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	6039      	str	r1, [r7, #0]
 8000a52:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = timer_unit_construct(index, duration/CYCLE);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <timer_setDuration+0x30>)
 8000a58:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5c:	08da      	lsrs	r2, r3, #3
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fef2 	bl	800084c <timer_unit_construct>
 8000a68:	60f8      	str	r0, [r7, #12]
	timer_list_add(newUnit);
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff ff18 	bl	80008a0 <timer_list_add>
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	cccccccd 	.word	0xcccccccd

08000a7c <timer_checkFlag>:

uint8_t	timer_checkFlag(uint8_t index) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	if (timerFlag[index] == 1) {
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <timer_checkFlag+0x2c>)
 8000a8a:	5cd3      	ldrb	r3, [r2, r3]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d105      	bne.n	8000a9c <timer_checkFlag+0x20>
		timerFlag[index] = 0;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <timer_checkFlag+0x2c>)
 8000a94:	2100      	movs	r1, #0
 8000a96:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <timer_checkFlag+0x22>
	}
	return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	20000124 	.word	0x20000124

08000aac <timer_clear>:

void timer_clear(uint8_t index) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
//	uint32_t totalDuration = 0;
	timerFlag[index] = 0;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a20      	ldr	r2, [pc, #128]	; (8000b3c <timer_clear+0x90>)
 8000aba:	2100      	movs	r1, #0
 8000abc:	54d1      	strb	r1, [r2, r3]
	struct timer_unit *curr = timerList.head,
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <timer_clear+0x94>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	60fb      	str	r3, [r7, #12]
			          *prev = NULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
	while (curr != NULL) {
 8000ac8:	e009      	b.n	8000ade <timer_clear+0x32>
		if (curr->index == index) break;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d008      	beq.n	8000ae6 <timer_clear+0x3a>

//		totalDuration += curr->duration;
		prev = curr;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	60bb      	str	r3, [r7, #8]
		curr = curr->nextTimer;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	60fb      	str	r3, [r7, #12]
	while (curr != NULL) {
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1f2      	bne.n	8000aca <timer_clear+0x1e>
 8000ae4:	e000      	b.n	8000ae8 <timer_clear+0x3c>
		if (curr->index == index) break;
 8000ae6:	bf00      	nop
	}

	if (curr == NULL) return;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d022      	beq.n	8000b34 <timer_clear+0x88>
	if (prev == NULL) { //item at the head of list
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d104      	bne.n	8000afe <timer_clear+0x52>
		timerList.head = curr->nextTimer;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <timer_clear+0x94>)
 8000afa:	6053      	str	r3, [r2, #4]
 8000afc:	e003      	b.n	8000b06 <timer_clear+0x5a>
	}
	else {
		prev->nextTimer = curr->nextTimer;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	609a      	str	r2, [r3, #8]
	}
	if (curr->nextTimer != NULL) curr->nextTimer->duration += curr->duration;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d008      	beq.n	8000b20 <timer_clear+0x74>
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	6859      	ldr	r1, [r3, #4]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	685a      	ldr	r2, [r3, #4]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	440a      	add	r2, r1
 8000b1e:	605a      	str	r2, [r3, #4]
	timer_unit_destruct(curr);
 8000b20:	68f8      	ldr	r0, [r7, #12]
 8000b22:	f7ff feb1 	bl	8000888 <timer_unit_destruct>
	timerList.size--;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <timer_clear+0x94>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <timer_clear+0x94>)
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	e000      	b.n	8000b36 <timer_clear+0x8a>
	if (curr == NULL) return;
 8000b34:	bf00      	nop
}
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000124 	.word	0x20000124
 8000b40:	20000178 	.word	0x20000178

08000b44 <traffic_init>:
#include "global.h"

/*-------------------- init setting --------------------*/
uint32_t	trafficDuration[3] = {2000, 1200, 800};

void traffic_init() {
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
	global_state = INIT_MODE;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <traffic_init+0x2c>)
 8000b4a:	220a      	movs	r2, #10
 8000b4c:	701a      	strb	r2, [r3, #0]
	auto_A_state = AUTO_INIT;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <traffic_init+0x30>)
 8000b50:	2214      	movs	r2, #20
 8000b52:	701a      	strb	r2, [r3, #0]
	auto_B_state = AUTO_INIT;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <traffic_init+0x34>)
 8000b56:	2214      	movs	r2, #20
 8000b58:	701a      	strb	r2, [r3, #0]
	manual_state = MN_INIT;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <traffic_init+0x38>)
 8000b5c:	221e      	movs	r2, #30
 8000b5e:	701a      	strb	r2, [r3, #0]
	set_state = SET_INIT;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <traffic_init+0x3c>)
 8000b62:	2228      	movs	r2, #40	; 0x28
 8000b64:	701a      	strb	r2, [r3, #0]
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000118 	.word	0x20000118
 8000b74:	20000119 	.word	0x20000119
 8000b78:	2000011a 	.word	0x2000011a
 8000b7c:	2000011b 	.word	0x2000011b
 8000b80:	2000011c 	.word	0x2000011c

08000b84 <traffic_auto_fsm_A>:

/*------------------- auto fsm -------------------------*/
void traffic_auto_fsm_A() {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
	switch(auto_A_state) {
 8000b88:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <traffic_auto_fsm_A+0xd0>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	3b14      	subs	r3, #20
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d85c      	bhi.n	8000c4c <traffic_auto_fsm_A+0xc8>
 8000b92:	a201      	add	r2, pc, #4	; (adr r2, 8000b98 <traffic_auto_fsm_A+0x14>)
 8000b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b98:	08000ba9 	.word	0x08000ba9
 8000b9c:	08000bbd 	.word	0x08000bbd
 8000ba0:	08000bed 	.word	0x08000bed
 8000ba4:	08000c1d 	.word	0x08000c1d
	case AUTO_INIT:
		auto_A_state = AUTO_RED;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <traffic_auto_fsm_A+0xd0>)
 8000baa:	2215      	movs	r2, #21
 8000bac:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <traffic_auto_fsm_A+0xd4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f7ff ff47 	bl	8000a48 <timer_setDuration>
		break;
 8000bba:	e048      	b.n	8000c4e <traffic_auto_fsm_A+0xca>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f7ff ff5d 	bl	8000a7c <timer_checkFlag>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d008      	beq.n	8000bda <traffic_auto_fsm_A+0x56>
			auto_A_state = AUTO_GREEN;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <traffic_auto_fsm_A+0xd0>)
 8000bca:	2216      	movs	r2, #22
 8000bcc:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <traffic_auto_fsm_A+0xd4>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f7ff ff37 	bl	8000a48 <timer_setDuration>
		}

		led_turn_on(TRAFFIC_1, LED_RED);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2005      	movs	r0, #5
 8000bde:	f7ff fbcf 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_1, LED_YELLOW);
 8000be2:	2102      	movs	r1, #2
 8000be4:	2005      	movs	r0, #5
 8000be6:	f7ff fc21 	bl	800042c <led_turn_off>
		break;
 8000bea:	e030      	b.n	8000c4e <traffic_auto_fsm_A+0xca>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000bec:	2001      	movs	r0, #1
 8000bee:	f7ff ff45 	bl	8000a7c <timer_checkFlag>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d008      	beq.n	8000c0a <traffic_auto_fsm_A+0x86>
			auto_A_state = AUTO_YELLOW;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <traffic_auto_fsm_A+0xd0>)
 8000bfa:	2217      	movs	r2, #23
 8000bfc:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <traffic_auto_fsm_A+0xd4>)
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	4619      	mov	r1, r3
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff ff1f 	bl	8000a48 <timer_setDuration>
		}

		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	2005      	movs	r0, #5
 8000c0e:	f7ff fbb7 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_1, LED_RED);
 8000c12:	2100      	movs	r1, #0
 8000c14:	2005      	movs	r0, #5
 8000c16:	f7ff fc09 	bl	800042c <led_turn_off>
		break;
 8000c1a:	e018      	b.n	8000c4e <traffic_auto_fsm_A+0xca>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f7ff ff2d 	bl	8000a7c <timer_checkFlag>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d008      	beq.n	8000c3a <traffic_auto_fsm_A+0xb6>
			auto_A_state = AUTO_RED;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <traffic_auto_fsm_A+0xd0>)
 8000c2a:	2215      	movs	r2, #21
 8000c2c:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <traffic_auto_fsm_A+0xd4>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4619      	mov	r1, r3
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff ff07 	bl	8000a48 <timer_setDuration>
		}

		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	2005      	movs	r0, #5
 8000c3e:	f7ff fb9f 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_1, LED_GREEN);
 8000c42:	2101      	movs	r1, #1
 8000c44:	2005      	movs	r0, #5
 8000c46:	f7ff fbf1 	bl	800042c <led_turn_off>
		break;
 8000c4a:	e000      	b.n	8000c4e <traffic_auto_fsm_A+0xca>

	/////////////////////////////////////////////////////
	default:
		break;
 8000c4c:	bf00      	nop
	}
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000119 	.word	0x20000119
 8000c58:	20000054 	.word	0x20000054

08000c5c <traffic_auto_fsm_B>:

void traffic_auto_fsm_B() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	switch(auto_B_state) {
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <traffic_auto_fsm_B+0xd0>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	3b14      	subs	r3, #20
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d85c      	bhi.n	8000d24 <traffic_auto_fsm_B+0xc8>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <traffic_auto_fsm_B+0x14>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000c81 	.word	0x08000c81
 8000c74:	08000c95 	.word	0x08000c95
 8000c78:	08000cc5 	.word	0x08000cc5
 8000c7c:	08000cf5 	.word	0x08000cf5
	case AUTO_INIT:
		auto_B_state = AUTO_GREEN;
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <traffic_auto_fsm_B+0xd0>)
 8000c82:	2216      	movs	r2, #22
 8000c84:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <traffic_auto_fsm_B+0xd4>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	2002      	movs	r0, #2
 8000c8e:	f7ff fedb 	bl	8000a48 <timer_setDuration>
		break;
 8000c92:	e048      	b.n	8000d26 <traffic_auto_fsm_B+0xca>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000c94:	2002      	movs	r0, #2
 8000c96:	f7ff fef1 	bl	8000a7c <timer_checkFlag>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d008      	beq.n	8000cb2 <traffic_auto_fsm_B+0x56>
			auto_B_state = AUTO_GREEN;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <traffic_auto_fsm_B+0xd0>)
 8000ca2:	2216      	movs	r2, #22
 8000ca4:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <traffic_auto_fsm_B+0xd4>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4619      	mov	r1, r3
 8000cac:	2002      	movs	r0, #2
 8000cae:	f7ff fecb 	bl	8000a48 <timer_setDuration>
		}

		led_turn_on(TRAFFIC_2, LED_RED);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2006      	movs	r0, #6
 8000cb6:	f7ff fb63 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_2, LED_YELLOW);
 8000cba:	2102      	movs	r1, #2
 8000cbc:	2006      	movs	r0, #6
 8000cbe:	f7ff fbb5 	bl	800042c <led_turn_off>
		break;
 8000cc2:	e030      	b.n	8000d26 <traffic_auto_fsm_B+0xca>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000cc4:	2002      	movs	r0, #2
 8000cc6:	f7ff fed9 	bl	8000a7c <timer_checkFlag>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d008      	beq.n	8000ce2 <traffic_auto_fsm_B+0x86>
			auto_B_state = AUTO_YELLOW;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <traffic_auto_fsm_B+0xd0>)
 8000cd2:	2217      	movs	r2, #23
 8000cd4:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <traffic_auto_fsm_B+0xd4>)
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f7ff feb3 	bl	8000a48 <timer_setDuration>
		}

		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	2006      	movs	r0, #6
 8000ce6:	f7ff fb4b 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_2, LED_RED);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2006      	movs	r0, #6
 8000cee:	f7ff fb9d 	bl	800042c <led_turn_off>
		break;
 8000cf2:	e018      	b.n	8000d26 <traffic_auto_fsm_B+0xca>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f7ff fec1 	bl	8000a7c <timer_checkFlag>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d008      	beq.n	8000d12 <traffic_auto_fsm_B+0xb6>
			auto_B_state = AUTO_RED;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <traffic_auto_fsm_B+0xd0>)
 8000d02:	2215      	movs	r2, #21
 8000d04:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <traffic_auto_fsm_B+0xd4>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	2002      	movs	r0, #2
 8000d0e:	f7ff fe9b 	bl	8000a48 <timer_setDuration>
		}

		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000d12:	2102      	movs	r1, #2
 8000d14:	2006      	movs	r0, #6
 8000d16:	f7ff fb33 	bl	8000380 <led_turn_on>
		led_turn_off(TRAFFIC_2, LED_GREEN);
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	2006      	movs	r0, #6
 8000d1e:	f7ff fb85 	bl	800042c <led_turn_off>
		break;
 8000d22:	e000      	b.n	8000d26 <traffic_auto_fsm_B+0xca>

	/////////////////////////////////////////////////////
	default:
		break;
 8000d24:	bf00      	nop
	}
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000011a 	.word	0x2000011a
 8000d30:	20000054 	.word	0x20000054

08000d34 <traffic_manual_fsm>:

/*----------------- manual fsm -------------------------*/
void traffic_manual_fsm() {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	switch(manual_state) {
 8000d38:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <traffic_manual_fsm+0xfc>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	3b1e      	subs	r3, #30
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d872      	bhi.n	8000e28 <traffic_manual_fsm+0xf4>
 8000d42:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <traffic_manual_fsm+0x14>)
 8000d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d48:	08000d5d 	.word	0x08000d5d
 8000d4c:	08000d69 	.word	0x08000d69
 8000d50:	08000d9d 	.word	0x08000d9d
 8000d54:	08000dc9 	.word	0x08000dc9
 8000d58:	08000dfd 	.word	0x08000dfd
	case MN_INIT:
		led_clear_all();
 8000d5c:	f7ff fb04 	bl	8000368 <led_clear_all>
		manual_state = MN_RED0;
 8000d60:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <traffic_manual_fsm+0xfc>)
 8000d62:	221f      	movs	r2, #31
 8000d64:	701a      	strb	r2, [r3, #0]
		break;
 8000d66:	e060      	b.n	8000e2a <traffic_manual_fsm+0xf6>

	///////////////////////////////////////////////////////////
	case MN_RED0:
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f7ff facf 	bl	800030c <button_isPressed>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d002      	beq.n	8000d7a <traffic_manual_fsm+0x46>
			manual_state = MN_RED1;
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <traffic_manual_fsm+0xfc>)
 8000d76:	2220      	movs	r2, #32
 8000d78:	701a      	strb	r2, [r3, #0]
		}

		led_turn_off(TRAFFIC_1, LED_YELLOW);
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	2005      	movs	r0, #5
 8000d7e:	f7ff fb55 	bl	800042c <led_turn_off>
		led_turn_off(TRAFFIC_2, LED_RED);
 8000d82:	2100      	movs	r1, #0
 8000d84:	2006      	movs	r0, #6
 8000d86:	f7ff fb51 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_RED);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2005      	movs	r0, #5
 8000d8e:	f7ff faf7 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000d92:	2101      	movs	r1, #1
 8000d94:	2006      	movs	r0, #6
 8000d96:	f7ff faf3 	bl	8000380 <led_turn_on>
		break;
 8000d9a:	e046      	b.n	8000e2a <traffic_manual_fsm+0xf6>

	///////////////////////////////////////////////////////////
	case MN_RED1:
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f7ff fab5 	bl	800030c <button_isPressed>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <traffic_manual_fsm+0x7a>
			manual_state = MN_GREEN;
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <traffic_manual_fsm+0xfc>)
 8000daa:	2221      	movs	r2, #33	; 0x21
 8000dac:	701a      	strb	r2, [r3, #0]
		}

		led_turn_off(TRAFFIC_2, LED_GREEN);
 8000dae:	2101      	movs	r1, #1
 8000db0:	2006      	movs	r0, #6
 8000db2:	f7ff fb3b 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_RED);
 8000db6:	2100      	movs	r1, #0
 8000db8:	2005      	movs	r0, #5
 8000dba:	f7ff fae1 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	2006      	movs	r0, #6
 8000dc2:	f7ff fadd 	bl	8000380 <led_turn_on>
		break;
 8000dc6:	e030      	b.n	8000e2a <traffic_manual_fsm+0xf6>

	///////////////////////////////////////////////////////////
	case MN_GREEN:
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff fa9f 	bl	800030c <button_isPressed>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <traffic_manual_fsm+0xa6>
			manual_state = MN_YELLOW;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <traffic_manual_fsm+0xfc>)
 8000dd6:	2222      	movs	r2, #34	; 0x22
 8000dd8:	701a      	strb	r2, [r3, #0]
		}

		led_turn_off(TRAFFIC_1, LED_RED);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2005      	movs	r0, #5
 8000dde:	f7ff fb25 	bl	800042c <led_turn_off>
		led_turn_off(TRAFFIC_2, LED_YELLOW);
 8000de2:	2102      	movs	r1, #2
 8000de4:	2006      	movs	r0, #6
 8000de6:	f7ff fb21 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000dea:	2101      	movs	r1, #1
 8000dec:	2005      	movs	r0, #5
 8000dee:	f7ff fac7 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000df2:	2100      	movs	r1, #0
 8000df4:	2006      	movs	r0, #6
 8000df6:	f7ff fac3 	bl	8000380 <led_turn_on>
		break;
 8000dfa:	e016      	b.n	8000e2a <traffic_manual_fsm+0xf6>

	///////////////////////////////////////////////////////////
	case MN_YELLOW:
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff fa85 	bl	800030c <button_isPressed>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <traffic_manual_fsm+0xda>
			manual_state = MN_RED0;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <traffic_manual_fsm+0xfc>)
 8000e0a:	221f      	movs	r2, #31
 8000e0c:	701a      	strb	r2, [r3, #0]
		}

		led_turn_off(TRAFFIC_1, LED_GREEN);
 8000e0e:	2101      	movs	r1, #1
 8000e10:	2005      	movs	r0, #5
 8000e12:	f7ff fb0b 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000e16:	2102      	movs	r1, #2
 8000e18:	2005      	movs	r0, #5
 8000e1a:	f7ff fab1 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2006      	movs	r0, #6
 8000e22:	f7ff faad 	bl	8000380 <led_turn_on>
		break;
 8000e26:	e000      	b.n	8000e2a <traffic_manual_fsm+0xf6>

	///////////////////////////////////////////////////////////
	default:
		break;
 8000e28:	bf00      	nop
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000011b 	.word	0x2000011b

08000e34 <duration_inc>:

/*-------------------- set fsm -------------------------*/
void duration_inc(uint8_t led_type) {
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	trafficDuration[led_type] += DURATION_UNIT;
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <duration_inc+0x50>)
 8000e42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000e4c:	490d      	ldr	r1, [pc, #52]	; (8000e84 <duration_inc+0x50>)
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (trafficDuration[led_type] > DURATION_MAX) { //if duration over max, reset to DURATION_UNIT
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <duration_inc+0x50>)
 8000e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e5a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d90a      	bls.n	8000e78 <duration_inc+0x44>
		trafficDuration[led_type] -= DURATION_MAX;
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <duration_inc+0x50>)
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	79fa      	ldrb	r2, [r7, #7]
 8000e6c:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000e70:	3b10      	subs	r3, #16
 8000e72:	4904      	ldr	r1, [pc, #16]	; (8000e84 <duration_inc+0x50>)
 8000e74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000054 	.word	0x20000054

08000e88 <traffic_set_fsm>:

void traffic_set_fsm() {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	switch(set_state) {
 8000e8c:	4b6e      	ldr	r3, [pc, #440]	; (8001048 <traffic_set_fsm+0x1c0>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3b28      	subs	r3, #40	; 0x28
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	f200 80ce 	bhi.w	8001034 <traffic_set_fsm+0x1ac>
 8000e98:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <traffic_set_fsm+0x18>)
 8000e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9e:	bf00      	nop
 8000ea0:	08000eb1 	.word	0x08000eb1
 8000ea4:	08000eb9 	.word	0x08000eb9
 8000ea8:	08000f39 	.word	0x08000f39
 8000eac:	08000fb7 	.word	0x08000fb7
	case SET_INIT:
		set_state = SET_RED;
 8000eb0:	4b65      	ldr	r3, [pc, #404]	; (8001048 <traffic_set_fsm+0x1c0>)
 8000eb2:	2229      	movs	r2, #41	; 0x29
 8000eb4:	701a      	strb	r2, [r3, #0]
		break;
 8000eb6:	e0c4      	b.n	8001042 <traffic_set_fsm+0x1ba>
	case SET_RED:
		//change led
		if (button_isPressed(BTN_2)) {
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fa27 	bl	800030c <button_isPressed>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <traffic_set_fsm+0x42>
			set_state = SET_GREEN;
 8000ec4:	4b60      	ldr	r3, [pc, #384]	; (8001048 <traffic_set_fsm+0x1c0>)
 8000ec6:	222a      	movs	r2, #42	; 0x2a
 8000ec8:	701a      	strb	r2, [r3, #0]
		}
		//TODO
		led_turn_off(TRAFFIC_1, LED_YELLOW);
 8000eca:	2102      	movs	r1, #2
 8000ecc:	2005      	movs	r0, #5
 8000ece:	f7ff faad 	bl	800042c <led_turn_off>
		led_turn_off(TRAFFIC_2, LED_YELLOW);
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	2006      	movs	r0, #6
 8000ed6:	f7ff faa9 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_RED);
 8000eda:	2100      	movs	r1, #0
 8000edc:	2005      	movs	r0, #5
 8000ede:	f7ff fa4f 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	2006      	movs	r0, #6
 8000ee6:	f7ff fa4b 	bl	8000380 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000eea:	2002      	movs	r0, #2
 8000eec:	f7ff fa0e 	bl	800030c <button_isPressed>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d006      	beq.n	8000f04 <traffic_set_fsm+0x7c>
			duration_inc(LED_RED);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff ff9c 	bl	8000e34 <duration_inc>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000efc:	210a      	movs	r1, #10
 8000efe:	2003      	movs	r0, #3
 8000f00:	f7ff fda2 	bl	8000a48 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fa1b 	bl	8000340 <button_isLongPressed>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00f      	beq.n	8000f30 <traffic_set_fsm+0xa8>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000f10:	2003      	movs	r0, #3
 8000f12:	f7ff fdb3 	bl	8000a7c <timer_checkFlag>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 808d 	beq.w	8001038 <traffic_set_fsm+0x1b0>
				duration_inc(LED_RED);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f7ff ff88 	bl	8000e34 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000f24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f7ff fd8d 	bl	8000a48 <timer_setDuration>
			}
		}
		else timer_clear(TIMER_SET_LONG);

		break;
 8000f2e:	e083      	b.n	8001038 <traffic_set_fsm+0x1b0>
		else timer_clear(TIMER_SET_LONG);
 8000f30:	2003      	movs	r0, #3
 8000f32:	f7ff fdbb 	bl	8000aac <timer_clear>
		break;
 8000f36:	e07f      	b.n	8001038 <traffic_set_fsm+0x1b0>
	case SET_GREEN:
		//change led
		if (button_isPressed(BTN_2)){
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff f9e7 	bl	800030c <button_isPressed>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <traffic_set_fsm+0xc2>
			set_state = SET_YELLOW;
 8000f44:	4b40      	ldr	r3, [pc, #256]	; (8001048 <traffic_set_fsm+0x1c0>)
 8000f46:	222b      	movs	r2, #43	; 0x2b
 8000f48:	701a      	strb	r2, [r3, #0]
		}

		//TODO
		led_turn_off(TRAFFIC_1, LED_RED);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2005      	movs	r0, #5
 8000f4e:	f7ff fa6d 	bl	800042c <led_turn_off>
		led_turn_off(TRAFFIC_2, LED_RED);
 8000f52:	2100      	movs	r1, #0
 8000f54:	2006      	movs	r0, #6
 8000f56:	f7ff fa69 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2005      	movs	r0, #5
 8000f5e:	f7ff fa0f 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000f62:	2101      	movs	r1, #1
 8000f64:	2006      	movs	r0, #6
 8000f66:	f7ff fa0b 	bl	8000380 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f7ff f9ce 	bl	800030c <button_isPressed>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <traffic_set_fsm+0xfc>
			duration_inc(LED_GREEN);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff ff5c 	bl	8000e34 <duration_inc>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000f7c:	210a      	movs	r1, #10
 8000f7e:	2003      	movs	r0, #3
 8000f80:	f7ff fd62 	bl	8000a48 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000f84:	2002      	movs	r0, #2
 8000f86:	f7ff f9db 	bl	8000340 <button_isLongPressed>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d00e      	beq.n	8000fae <traffic_set_fsm+0x126>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000f90:	2003      	movs	r0, #3
 8000f92:	f7ff fd73 	bl	8000a7c <timer_checkFlag>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d04f      	beq.n	800103c <traffic_set_fsm+0x1b4>
				duration_inc(LED_GREEN);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff ff49 	bl	8000e34 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000fa2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f7ff fd4e 	bl	8000a48 <timer_setDuration>
			}
		}
		else timer_clear(TIMER_SET_LONG);

		break;
 8000fac:	e046      	b.n	800103c <traffic_set_fsm+0x1b4>
		else timer_clear(TIMER_SET_LONG);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f7ff fd7c 	bl	8000aac <timer_clear>
		break;
 8000fb4:	e042      	b.n	800103c <traffic_set_fsm+0x1b4>
	case SET_YELLOW:
		//change led
		if (button_isPressed(BTN_2)){
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff f9a8 	bl	800030c <button_isPressed>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <traffic_set_fsm+0x140>
			set_state = SET_RED;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <traffic_set_fsm+0x1c0>)
 8000fc4:	2229      	movs	r2, #41	; 0x29
 8000fc6:	701a      	strb	r2, [r3, #0]
		}

		//TODO
		led_turn_off(TRAFFIC_1, LED_GREEN);
 8000fc8:	2101      	movs	r1, #1
 8000fca:	2005      	movs	r0, #5
 8000fcc:	f7ff fa2e 	bl	800042c <led_turn_off>
		led_turn_off(TRAFFIC_2, LED_GREEN);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	2006      	movs	r0, #6
 8000fd4:	f7ff fa2a 	bl	800042c <led_turn_off>
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000fd8:	2102      	movs	r1, #2
 8000fda:	2005      	movs	r0, #5
 8000fdc:	f7ff f9d0 	bl	8000380 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	2006      	movs	r0, #6
 8000fe4:	f7ff f9cc 	bl	8000380 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f7ff f98f 	bl	800030c <button_isPressed>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d006      	beq.n	8001002 <traffic_set_fsm+0x17a>
			duration_inc(LED_YELLOW);
 8000ff4:	2002      	movs	r0, #2
 8000ff6:	f7ff ff1d 	bl	8000e34 <duration_inc>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000ffa:	210a      	movs	r1, #10
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f7ff fd23 	bl	8000a48 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8001002:	2002      	movs	r0, #2
 8001004:	f7ff f99c 	bl	8000340 <button_isLongPressed>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d00e      	beq.n	800102c <traffic_set_fsm+0x1a4>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 800100e:	2003      	movs	r0, #3
 8001010:	f7ff fd34 	bl	8000a7c <timer_checkFlag>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d012      	beq.n	8001040 <traffic_set_fsm+0x1b8>
				duration_inc(LED_YELLOW);
 800101a:	2002      	movs	r0, #2
 800101c:	f7ff ff0a 	bl	8000e34 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8001020:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001024:	2003      	movs	r0, #3
 8001026:	f7ff fd0f 	bl	8000a48 <timer_setDuration>
			}
		}
		else timer_clear(TIMER_SET_LONG);

		break;
 800102a:	e009      	b.n	8001040 <traffic_set_fsm+0x1b8>
		else timer_clear(TIMER_SET_LONG);
 800102c:	2003      	movs	r0, #3
 800102e:	f7ff fd3d 	bl	8000aac <timer_clear>
		break;
 8001032:	e005      	b.n	8001040 <traffic_set_fsm+0x1b8>
	default:
		break;
 8001034:	bf00      	nop
 8001036:	e004      	b.n	8001042 <traffic_set_fsm+0x1ba>
		break;
 8001038:	bf00      	nop
 800103a:	e002      	b.n	8001042 <traffic_set_fsm+0x1ba>
		break;
 800103c:	bf00      	nop
 800103e:	e000      	b.n	8001042 <traffic_set_fsm+0x1ba>
		break;
 8001040:	bf00      	nop
	}
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000011c 	.word	0x2000011c

0800104c <traffic_fsm>:

/*----------------- global fsm -------------------------*/
void traffic_fsm() {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	switch(global_state) {
 8001050:	4b3c      	ldr	r3, [pc, #240]	; (8001144 <traffic_fsm+0xf8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	3b0a      	subs	r3, #10
 8001056:	2b03      	cmp	r3, #3
 8001058:	d872      	bhi.n	8001140 <traffic_fsm+0xf4>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <traffic_fsm+0x14>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	08001071 	.word	0x08001071
 8001064:	0800107d 	.word	0x0800107d
 8001068:	080010e7 	.word	0x080010e7
 800106c:	08001123 	.word	0x08001123
	case INIT_MODE:
		led_clear_all();
 8001070:	f7ff f97a 	bl	8000368 <led_clear_all>
		global_state = AUTO_MODE;
 8001074:	4b33      	ldr	r3, [pc, #204]	; (8001144 <traffic_fsm+0xf8>)
 8001076:	220b      	movs	r2, #11
 8001078:	701a      	strb	r2, [r3, #0]
		break;
 800107a:	e062      	b.n	8001142 <traffic_fsm+0xf6>

	///////////////////////////////////////////////
	case AUTO_MODE:
		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 800107c:	2000      	movs	r0, #0
 800107e:	f7ff f945 	bl	800030c <button_isPressed>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d029      	beq.n	80010dc <traffic_fsm+0x90>
			led_clear_all();
 8001088:	f7ff f96e 	bl	8000368 <led_clear_all>
			global_state = MANUAL_MODE;
 800108c:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <traffic_fsm+0xf8>)
 800108e:	220c      	movs	r2, #12
 8001090:	701a      	strb	r2, [r3, #0]
			switch (auto_A_state) { //manual mode with previous auto state
 8001092:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <traffic_fsm+0xfc>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b17      	cmp	r3, #23
 8001098:	d01a      	beq.n	80010d0 <traffic_fsm+0x84>
 800109a:	2b17      	cmp	r3, #23
 800109c:	dc1c      	bgt.n	80010d8 <traffic_fsm+0x8c>
 800109e:	2b15      	cmp	r3, #21
 80010a0:	d002      	beq.n	80010a8 <traffic_fsm+0x5c>
 80010a2:	2b16      	cmp	r3, #22
 80010a4:	d010      	beq.n	80010c8 <traffic_fsm+0x7c>
				break;
			case AUTO_YELLOW:
				manual_state = MN_YELLOW;
				break;
			default:
				break;
 80010a6:	e017      	b.n	80010d8 <traffic_fsm+0x8c>
				switch (auto_B_state){
 80010a8:	4b28      	ldr	r3, [pc, #160]	; (800114c <traffic_fsm+0x100>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b16      	cmp	r3, #22
 80010ae:	d002      	beq.n	80010b6 <traffic_fsm+0x6a>
 80010b0:	2b17      	cmp	r3, #23
 80010b2:	d004      	beq.n	80010be <traffic_fsm+0x72>
				break;
 80010b4:	e011      	b.n	80010da <traffic_fsm+0x8e>
					manual_state = MN_RED0;
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <traffic_fsm+0x104>)
 80010b8:	221f      	movs	r2, #31
 80010ba:	701a      	strb	r2, [r3, #0]
					break;
 80010bc:	e003      	b.n	80010c6 <traffic_fsm+0x7a>
					manual_state = MN_RED1;
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <traffic_fsm+0x104>)
 80010c0:	2220      	movs	r2, #32
 80010c2:	701a      	strb	r2, [r3, #0]
					break;
 80010c4:	bf00      	nop
				break;
 80010c6:	e008      	b.n	80010da <traffic_fsm+0x8e>
				manual_state = MN_GREEN;
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <traffic_fsm+0x104>)
 80010ca:	2221      	movs	r2, #33	; 0x21
 80010cc:	701a      	strb	r2, [r3, #0]
				break;
 80010ce:	e004      	b.n	80010da <traffic_fsm+0x8e>
				manual_state = MN_YELLOW;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <traffic_fsm+0x104>)
 80010d2:	2222      	movs	r2, #34	; 0x22
 80010d4:	701a      	strb	r2, [r3, #0]
				break;
 80010d6:	e000      	b.n	80010da <traffic_fsm+0x8e>
				break;
 80010d8:	bf00      	nop
			}
			return;
 80010da:	e032      	b.n	8001142 <traffic_fsm+0xf6>
		}

		//TODO
		traffic_auto_fsm_A();
 80010dc:	f7ff fd52 	bl	8000b84 <traffic_auto_fsm_A>
		traffic_auto_fsm_B();
 80010e0:	f7ff fdbc 	bl	8000c5c <traffic_auto_fsm_B>
		break;
 80010e4:	e02d      	b.n	8001142 <traffic_fsm+0xf6>

	///////////////////////////////////////////////
	case MANUAL_MODE:
		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 80010e6:	2000      	movs	r0, #0
 80010e8:	f7ff f910 	bl	800030c <button_isPressed>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d014      	beq.n	800111c <traffic_fsm+0xd0>
			global_state = SET_MODE;
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <traffic_fsm+0xf8>)
 80010f4:	220d      	movs	r2, #13
 80010f6:	701a      	strb	r2, [r3, #0]
			set_state = SET_INIT;
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <traffic_fsm+0x108>)
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	701a      	strb	r2, [r3, #0]
			auto_A_state = AUTO_INIT;
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <traffic_fsm+0xfc>)
 8001100:	2214      	movs	r2, #20
 8001102:	701a      	strb	r2, [r3, #0]
			auto_B_state = AUTO_INIT;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <traffic_fsm+0x100>)
 8001106:	2214      	movs	r2, #20
 8001108:	701a      	strb	r2, [r3, #0]
			timer_clear(TIMER_AUTO_A);
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff fcce 	bl	8000aac <timer_clear>
			timer_clear(TIMER_AUTO_B);
 8001110:	2002      	movs	r0, #2
 8001112:	f7ff fccb 	bl	8000aac <timer_clear>
			led_clear_all();
 8001116:	f7ff f927 	bl	8000368 <led_clear_all>
			return;
 800111a:	e012      	b.n	8001142 <traffic_fsm+0xf6>
		}

		//TODO
		traffic_manual_fsm();
 800111c:	f7ff fe0a 	bl	8000d34 <traffic_manual_fsm>
		break;
 8001120:	e00f      	b.n	8001142 <traffic_fsm+0xf6>

	///////////////////////////////////////////////
	case SET_MODE:
		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff f8f2 	bl	800030c <button_isPressed>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d005      	beq.n	800113a <traffic_fsm+0xee>
			global_state = AUTO_MODE;
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <traffic_fsm+0xf8>)
 8001130:	220b      	movs	r2, #11
 8001132:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8001134:	f7ff f918 	bl	8000368 <led_clear_all>
//				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
//				auto_B_state = AUTO_RED;
//				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
//				break;
//			}
			return;
 8001138:	e003      	b.n	8001142 <traffic_fsm+0xf6>
		}

		//TODO
		traffic_set_fsm();
 800113a:	f7ff fea5 	bl	8000e88 <traffic_set_fsm>
		break;
 800113e:	e000      	b.n	8001142 <traffic_fsm+0xf6>

	///////////////////////////////////////////////
	default:
		break;
 8001140:	bf00      	nop
	}
}
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000118 	.word	0x20000118
 8001148:	20000119 	.word	0x20000119
 800114c:	2000011a 	.word	0x2000011a
 8001150:	2000011b 	.word	0x2000011b
 8001154:	2000011c 	.word	0x2000011c

08001158 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	; (800118c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	; (8001190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	; (800119c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800117e:	f7ff fb5f 	bl	8000840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001182:	f001 fafb 	bl	800277c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001186:	f7ff f9a7 	bl	80004d8 <main>
  bx lr
 800118a:	4770      	bx	lr
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001194:	080029bc 	.word	0x080029bc
  ldr r2, =_sbss
 8001198:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 800119c:	20000194 	.word	0x20000194

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_Init+0x28>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <HAL_Init+0x28>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b4:	2003      	movs	r0, #3
 80011b6:	f000 f923 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ba:	200f      	movs	r0, #15
 80011bc:	f000 f808 	bl	80011d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c0:	f7ff fa80 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40022000 	.word	0x40022000

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_InitTick+0x54>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_InitTick+0x58>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 f93b 	bl	800146a <HAL_SYSTICK_Config>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00e      	b.n	800121c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d80a      	bhi.n	800121a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 f903 	bl	8001416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001210:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_InitTick+0x5c>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	e000      	b.n	800121c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000050 	.word	0x20000050
 8001228:	20000064 	.word	0x20000064
 800122c:	20000060 	.word	0x20000060

08001230 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <HAL_IncTick+0x1c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <HAL_IncTick+0x20>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4413      	add	r3, r2
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <HAL_IncTick+0x20>)
 8001242:	6013      	str	r3, [r2, #0]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	20000064 	.word	0x20000064
 8001250:	20000180 	.word	0x20000180

08001254 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b02      	ldr	r3, [pc, #8]	; (8001264 <HAL_GetTick+0x10>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000180 	.word	0x20000180

08001268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001284:	4013      	ands	r3, r2
 8001286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <__NVIC_SetPriorityGrouping+0x44>)
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	60d3      	str	r3, [r2, #12]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <__NVIC_GetPriorityGrouping+0x18>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	f003 0307 	and.w	r3, r3, #7
}
 80012be:	4618      	mov	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	db0b      	blt.n	80012f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	f003 021f 	and.w	r2, r3, #31
 80012e4:	4906      	ldr	r1, [pc, #24]	; (8001300 <__NVIC_EnableIRQ+0x34>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	095b      	lsrs	r3, r3, #5
 80012ec:	2001      	movs	r0, #1
 80012ee:	fa00 f202 	lsl.w	r2, r0, r2
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff90 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff2d 	bl	8001268 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff42 	bl	80012b0 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff90 	bl	8001358 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5f 	bl	8001304 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff35 	bl	80012cc <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ffa2 	bl	80013bc <SysTick_Config>
 8001478:	4603      	mov	r3, r0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001484:	b480      	push	{r7}
 8001486:	b08b      	sub	sp, #44	; 0x2c
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001496:	e148      	b.n	800172a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001498:	2201      	movs	r2, #1
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8137 	bne.w	8001724 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4aa3      	ldr	r2, [pc, #652]	; (8001748 <HAL_GPIO_Init+0x2c4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d05e      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014c0:	4aa1      	ldr	r2, [pc, #644]	; (8001748 <HAL_GPIO_Init+0x2c4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d875      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014c6:	4aa1      	ldr	r2, [pc, #644]	; (800174c <HAL_GPIO_Init+0x2c8>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d058      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014cc:	4a9f      	ldr	r2, [pc, #636]	; (800174c <HAL_GPIO_Init+0x2c8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d86f      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014d2:	4a9f      	ldr	r2, [pc, #636]	; (8001750 <HAL_GPIO_Init+0x2cc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d052      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014d8:	4a9d      	ldr	r2, [pc, #628]	; (8001750 <HAL_GPIO_Init+0x2cc>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d869      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014de:	4a9d      	ldr	r2, [pc, #628]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d04c      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014e4:	4a9b      	ldr	r2, [pc, #620]	; (8001754 <HAL_GPIO_Init+0x2d0>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d863      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014ea:	4a9b      	ldr	r2, [pc, #620]	; (8001758 <HAL_GPIO_Init+0x2d4>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d046      	beq.n	800157e <HAL_GPIO_Init+0xfa>
 80014f0:	4a99      	ldr	r2, [pc, #612]	; (8001758 <HAL_GPIO_Init+0x2d4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d85d      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014f6:	2b12      	cmp	r3, #18
 80014f8:	d82a      	bhi.n	8001550 <HAL_GPIO_Init+0xcc>
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	d859      	bhi.n	80015b2 <HAL_GPIO_Init+0x12e>
 80014fe:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <HAL_GPIO_Init+0x80>)
 8001500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001504:	0800157f 	.word	0x0800157f
 8001508:	08001559 	.word	0x08001559
 800150c:	0800156b 	.word	0x0800156b
 8001510:	080015ad 	.word	0x080015ad
 8001514:	080015b3 	.word	0x080015b3
 8001518:	080015b3 	.word	0x080015b3
 800151c:	080015b3 	.word	0x080015b3
 8001520:	080015b3 	.word	0x080015b3
 8001524:	080015b3 	.word	0x080015b3
 8001528:	080015b3 	.word	0x080015b3
 800152c:	080015b3 	.word	0x080015b3
 8001530:	080015b3 	.word	0x080015b3
 8001534:	080015b3 	.word	0x080015b3
 8001538:	080015b3 	.word	0x080015b3
 800153c:	080015b3 	.word	0x080015b3
 8001540:	080015b3 	.word	0x080015b3
 8001544:	080015b3 	.word	0x080015b3
 8001548:	08001561 	.word	0x08001561
 800154c:	08001575 	.word	0x08001575
 8001550:	4a82      	ldr	r2, [pc, #520]	; (800175c <HAL_GPIO_Init+0x2d8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001556:	e02c      	b.n	80015b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	623b      	str	r3, [r7, #32]
          break;
 800155e:	e029      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	3304      	adds	r3, #4
 8001566:	623b      	str	r3, [r7, #32]
          break;
 8001568:	e024      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	3308      	adds	r3, #8
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e01f      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	330c      	adds	r3, #12
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e01a      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001586:	2304      	movs	r3, #4
 8001588:	623b      	str	r3, [r7, #32]
          break;
 800158a:	e013      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001594:	2308      	movs	r3, #8
 8001596:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69fa      	ldr	r2, [r7, #28]
 800159c:	611a      	str	r2, [r3, #16]
          break;
 800159e:	e009      	b.n	80015b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a0:	2308      	movs	r3, #8
 80015a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	615a      	str	r2, [r3, #20]
          break;
 80015aa:	e003      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
          break;
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x130>
          break;
 80015b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2bff      	cmp	r3, #255	; 0xff
 80015b8:	d801      	bhi.n	80015be <HAL_GPIO_Init+0x13a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_Init+0x13e>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3304      	adds	r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2bff      	cmp	r3, #255	; 0xff
 80015c8:	d802      	bhi.n	80015d0 <HAL_GPIO_Init+0x14c>
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x152>
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	3b08      	subs	r3, #8
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	210f      	movs	r1, #15
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	6a39      	ldr	r1, [r7, #32]
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	431a      	orrs	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8090 	beq.w	8001724 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001604:	4b56      	ldr	r3, [pc, #344]	; (8001760 <HAL_GPIO_Init+0x2dc>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	4a55      	ldr	r2, [pc, #340]	; (8001760 <HAL_GPIO_Init+0x2dc>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_GPIO_Init+0x2dc>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800161c:	4a51      	ldr	r2, [pc, #324]	; (8001764 <HAL_GPIO_Init+0x2e0>)
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001628:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	220f      	movs	r2, #15
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a49      	ldr	r2, [pc, #292]	; (8001768 <HAL_GPIO_Init+0x2e4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00d      	beq.n	8001664 <HAL_GPIO_Init+0x1e0>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a48      	ldr	r2, [pc, #288]	; (800176c <HAL_GPIO_Init+0x2e8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d007      	beq.n	8001660 <HAL_GPIO_Init+0x1dc>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a47      	ldr	r2, [pc, #284]	; (8001770 <HAL_GPIO_Init+0x2ec>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_GPIO_Init+0x1d8>
 8001658:	2302      	movs	r3, #2
 800165a:	e004      	b.n	8001666 <HAL_GPIO_Init+0x1e2>
 800165c:	2303      	movs	r3, #3
 800165e:	e002      	b.n	8001666 <HAL_GPIO_Init+0x1e2>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <HAL_GPIO_Init+0x1e2>
 8001664:	2300      	movs	r3, #0
 8001666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001668:	f002 0203 	and.w	r2, r2, #3
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	4093      	lsls	r3, r2
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001676:	493b      	ldr	r1, [pc, #236]	; (8001764 <HAL_GPIO_Init+0x2e0>)
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001690:	4b38      	ldr	r3, [pc, #224]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4937      	ldr	r1, [pc, #220]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e006      	b.n	80016ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800169e:	4b35      	ldr	r3, [pc, #212]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4933      	ldr	r1, [pc, #204]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	492d      	ldr	r1, [pc, #180]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	4929      	ldr	r1, [pc, #164]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	4923      	ldr	r1, [pc, #140]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	491f      	ldr	r1, [pc, #124]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d006      	beq.n	8001716 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	4919      	ldr	r1, [pc, #100]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	60cb      	str	r3, [r1, #12]
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 8001718:	68da      	ldr	r2, [r3, #12]
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	43db      	mvns	r3, r3
 800171e:	4915      	ldr	r1, [pc, #84]	; (8001774 <HAL_GPIO_Init+0x2f0>)
 8001720:	4013      	ands	r3, r2
 8001722:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	3301      	adds	r3, #1
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	fa22 f303 	lsr.w	r3, r2, r3
 8001734:	2b00      	cmp	r3, #0
 8001736:	f47f aeaf 	bne.w	8001498 <HAL_GPIO_Init+0x14>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	372c      	adds	r7, #44	; 0x2c
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	10320000 	.word	0x10320000
 800174c:	10310000 	.word	0x10310000
 8001750:	10220000 	.word	0x10220000
 8001754:	10210000 	.word	0x10210000
 8001758:	10120000 	.word	0x10120000
 800175c:	10110000 	.word	0x10110000
 8001760:	40021000 	.word	0x40021000
 8001764:	40010000 	.word	0x40010000
 8001768:	40010800 	.word	0x40010800
 800176c:	40010c00 	.word	0x40010c00
 8001770:	40011000 	.word	0x40011000
 8001774:	40010400 	.word	0x40010400

08001778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e001      	b.n	800179a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]
 80017b2:	4613      	mov	r3, r2
 80017b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b6:	787b      	ldrb	r3, [r7, #1]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017bc:	887a      	ldrh	r2, [r7, #2]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017c2:	e003      	b.n	80017cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	041a      	lsls	r2, r3, #16
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	611a      	str	r2, [r3, #16]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e26c      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8087 	beq.w	8001906 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017f8:	4b92      	ldr	r3, [pc, #584]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b04      	cmp	r3, #4
 8001802:	d00c      	beq.n	800181e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001804:	4b8f      	ldr	r3, [pc, #572]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 030c 	and.w	r3, r3, #12
 800180c:	2b08      	cmp	r3, #8
 800180e:	d112      	bne.n	8001836 <HAL_RCC_OscConfig+0x5e>
 8001810:	4b8c      	ldr	r3, [pc, #560]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181c:	d10b      	bne.n	8001836 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181e:	4b89      	ldr	r3, [pc, #548]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d06c      	beq.n	8001904 <HAL_RCC_OscConfig+0x12c>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d168      	bne.n	8001904 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e246      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x76>
 8001840:	4b80      	ldr	r3, [pc, #512]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a7f      	ldr	r2, [pc, #508]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e02e      	b.n	80018ac <HAL_RCC_OscConfig+0xd4>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x98>
 8001856:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7a      	ldr	r2, [pc, #488]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 800185c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b78      	ldr	r3, [pc, #480]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a77      	ldr	r2, [pc, #476]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e01d      	b.n	80018ac <HAL_RCC_OscConfig+0xd4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001878:	d10c      	bne.n	8001894 <HAL_RCC_OscConfig+0xbc>
 800187a:	4b72      	ldr	r3, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a71      	ldr	r2, [pc, #452]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a6e      	ldr	r2, [pc, #440]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e00b      	b.n	80018ac <HAL_RCC_OscConfig+0xd4>
 8001894:	4b6b      	ldr	r3, [pc, #428]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a6a      	ldr	r2, [pc, #424]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 800189a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b68      	ldr	r3, [pc, #416]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a67      	ldr	r2, [pc, #412]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d013      	beq.n	80018dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fcce 	bl	8001254 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fcca 	bl	8001254 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e1fa      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b5d      	ldr	r3, [pc, #372]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0xe4>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fcba 	bl	8001254 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fcb6 	bl	8001254 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e1e6      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	4b53      	ldr	r3, [pc, #332]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x10c>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d063      	beq.n	80019da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001912:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 030c 	and.w	r3, r3, #12
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800191e:	4b49      	ldr	r3, [pc, #292]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b08      	cmp	r3, #8
 8001928:	d11c      	bne.n	8001964 <HAL_RCC_OscConfig+0x18c>
 800192a:	4b46      	ldr	r3, [pc, #280]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d116      	bne.n	8001964 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001936:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <HAL_RCC_OscConfig+0x176>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d001      	beq.n	800194e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e1ba      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4939      	ldr	r1, [pc, #228]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001962:	e03a      	b.n	80019da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d020      	beq.n	80019ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 800196e:	2201      	movs	r2, #1
 8001970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001972:	f7ff fc6f 	bl	8001254 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197a:	f7ff fc6b 	bl	8001254 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e19b      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001998:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4927      	ldr	r1, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]
 80019ac:	e015      	b.n	80019da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <HAL_RCC_OscConfig+0x270>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fc4e 	bl	8001254 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019bc:	f7ff fc4a 	bl	8001254 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e17a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d03a      	beq.n	8001a5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d019      	beq.n	8001a22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f4:	f7ff fc2e 	bl	8001254 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019fc:	f7ff fc2a 	bl	8001254 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e15a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f000 faa6 	bl	8001f6c <RCC_Delay>
 8001a20:	e01c      	b.n	8001a5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_RCC_OscConfig+0x274>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7ff fc14 	bl	8001254 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2e:	e00f      	b.n	8001a50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a30:	f7ff fc10 	bl	8001254 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d908      	bls.n	8001a50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e140      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	42420000 	.word	0x42420000
 8001a4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a50:	4b9e      	ldr	r3, [pc, #632]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1e9      	bne.n	8001a30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80a6 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6e:	4b97      	ldr	r3, [pc, #604]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10d      	bne.n	8001a96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a93      	ldr	r2, [pc, #588]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	61d3      	str	r3, [r2, #28]
 8001a86:	4b91      	ldr	r3, [pc, #580]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a92:	2301      	movs	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a96:	4b8e      	ldr	r3, [pc, #568]	; (8001cd0 <HAL_RCC_OscConfig+0x4f8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d118      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa2:	4b8b      	ldr	r3, [pc, #556]	; (8001cd0 <HAL_RCC_OscConfig+0x4f8>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a8a      	ldr	r2, [pc, #552]	; (8001cd0 <HAL_RCC_OscConfig+0x4f8>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aae:	f7ff fbd1 	bl	8001254 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7ff fbcd 	bl	8001254 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b64      	cmp	r3, #100	; 0x64
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e0fd      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	4b81      	ldr	r3, [pc, #516]	; (8001cd0 <HAL_RCC_OscConfig+0x4f8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x312>
 8001adc:	4b7b      	ldr	r3, [pc, #492]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a7a      	ldr	r2, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6213      	str	r3, [r2, #32]
 8001ae8:	e02d      	b.n	8001b46 <HAL_RCC_OscConfig+0x36e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x334>
 8001af2:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	4a75      	ldr	r2, [pc, #468]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	6213      	str	r3, [r2, #32]
 8001afe:	4b73      	ldr	r3, [pc, #460]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	4a72      	ldr	r2, [pc, #456]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b04:	f023 0304 	bic.w	r3, r3, #4
 8001b08:	6213      	str	r3, [r2, #32]
 8001b0a:	e01c      	b.n	8001b46 <HAL_RCC_OscConfig+0x36e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d10c      	bne.n	8001b2e <HAL_RCC_OscConfig+0x356>
 8001b14:	4b6d      	ldr	r3, [pc, #436]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a6c      	ldr	r2, [pc, #432]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6213      	str	r3, [r2, #32]
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	4a69      	ldr	r2, [pc, #420]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6213      	str	r3, [r2, #32]
 8001b2c:	e00b      	b.n	8001b46 <HAL_RCC_OscConfig+0x36e>
 8001b2e:	4b67      	ldr	r3, [pc, #412]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a66      	ldr	r2, [pc, #408]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	f023 0301 	bic.w	r3, r3, #1
 8001b38:	6213      	str	r3, [r2, #32]
 8001b3a:	4b64      	ldr	r3, [pc, #400]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a63      	ldr	r2, [pc, #396]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	f023 0304 	bic.w	r3, r3, #4
 8001b44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d015      	beq.n	8001b7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4e:	f7ff fb81 	bl	8001254 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7ff fb7d 	bl	8001254 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e0ab      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	4b57      	ldr	r3, [pc, #348]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ee      	beq.n	8001b56 <HAL_RCC_OscConfig+0x37e>
 8001b78:	e014      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fb6b 	bl	8001254 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff fb67 	bl	8001254 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e095      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	4b4c      	ldr	r3, [pc, #304]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1ee      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d105      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001baa:	4b48      	ldr	r3, [pc, #288]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	4a47      	ldr	r2, [pc, #284]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8081 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc0:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d061      	beq.n	8001c90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d146      	bne.n	8001c62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <HAL_RCC_OscConfig+0x4fc>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff fb3b 	bl	8001254 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff fb37 	bl	8001254 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e067      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f0      	bne.n	8001be2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c08:	d108      	bne.n	8001c1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	492d      	ldr	r1, [pc, #180]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a19      	ldr	r1, [r3, #32]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	4927      	ldr	r1, [pc, #156]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <HAL_RCC_OscConfig+0x4fc>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fb0b 	bl	8001254 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c42:	f7ff fb07 	bl	8001254 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e037      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x46a>
 8001c60:	e02f      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <HAL_RCC_OscConfig+0x4fc>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff faf4 	bl	8001254 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff faf0 	bl	8001254 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e020      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c82:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x498>
 8001c8e:	e018      	b.n	8001cc2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e013      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e000      	b.n	8001cc4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	42420060 	.word	0x42420060

08001cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0d0      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d910      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 0207 	bic.w	r2, r3, #7
 8001d02:	4965      	ldr	r1, [pc, #404]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b8      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4c:	4b53      	ldr	r3, [pc, #332]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a52      	ldr	r2, [pc, #328]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	494d      	ldr	r1, [pc, #308]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d040      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d115      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e073      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da6:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e06b      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4936      	ldr	r1, [pc, #216]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff fa44 	bl	8001254 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff fa40 	bl	8001254 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e053      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b2d      	ldr	r3, [pc, #180]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df8:	4b27      	ldr	r3, [pc, #156]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d210      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4922      	ldr	r1, [pc, #136]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e032      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4916      	ldr	r1, [pc, #88]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e66:	f000 f821 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	490a      	ldr	r1, [pc, #40]	; (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e78:	5ccb      	ldrb	r3, [r1, r3]
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8001e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f9a2 	bl	80011d0 <HAL_InitTick>

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	080029a4 	.word	0x080029a4
 8001ea4:	20000050 	.word	0x20000050
 8001ea8:	20000060 	.word	0x20000060

08001eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b490      	push	{r4, r7}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001eb4:	1d3c      	adds	r4, r7, #4
 8001eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ebc:	f240 2301 	movw	r3, #513	; 0x201
 8001ec0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d002      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x40>
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d003      	beq.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x46>
 8001eea:	e02d      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eee:	623b      	str	r3, [r7, #32]
      break;
 8001ef0:	e02d      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	0c9b      	lsrs	r3, r3, #18
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001efe:	4413      	add	r3, r2
 8001f00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d013      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0c5b      	lsrs	r3, r3, #17
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f1e:	4413      	add	r3, r2
 8001f20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f2a:	fb02 f203 	mul.w	r2, r2, r3
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
 8001f36:	e004      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	623b      	str	r3, [r7, #32]
      break;
 8001f46:	e002      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f4a:	623b      	str	r3, [r7, #32]
      break;
 8001f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3728      	adds	r7, #40	; 0x28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc90      	pop	{r4, r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	08002994 	.word	0x08002994
 8001f60:	40021000 	.word	0x40021000
 8001f64:	007a1200 	.word	0x007a1200
 8001f68:	003d0900 	.word	0x003d0900

08001f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <RCC_Delay+0x34>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <RCC_Delay+0x38>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0a5b      	lsrs	r3, r3, #9
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f88:	bf00      	nop
  }
  while (Delay --);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	60fa      	str	r2, [r7, #12]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f9      	bne.n	8001f88 <RCC_Delay+0x1c>
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000050 	.word	0x20000050
 8001fa4:	10624dd3 	.word	0x10624dd3

08001fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e041      	b.n	800203e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe fbaa 	bl	8000728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	f000 fa6a 	bl	80024c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d001      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e035      	b.n	80020cc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_TIM_Base_Start_IT+0x90>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d009      	beq.n	8002096 <HAL_TIM_Base_Start_IT+0x4e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208a:	d004      	beq.n	8002096 <HAL_TIM_Base_Start_IT+0x4e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a12      	ldr	r2, [pc, #72]	; (80020dc <HAL_TIM_Base_Start_IT+0x94>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d111      	bne.n	80020ba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b06      	cmp	r3, #6
 80020a6:	d010      	beq.n	80020ca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b8:	e007      	b.n	80020ca <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0201 	orr.w	r2, r2, #1
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40000400 	.word	0x40000400

080020e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d122      	bne.n	800213c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b02      	cmp	r3, #2
 8002102:	d11b      	bne.n	800213c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0202 	mvn.w	r2, #2
 800210c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f9b1 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f9a4 	bl	8002478 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f9b3 	bl	800249c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b04      	cmp	r3, #4
 8002148:	d122      	bne.n	8002190 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b04      	cmp	r3, #4
 8002156:	d11b      	bne.n	8002190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0204 	mvn.w	r2, #4
 8002160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2202      	movs	r2, #2
 8002166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f987 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 800217c:	e005      	b.n	800218a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f97a 	bl	8002478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f989 	bl	800249c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b08      	cmp	r3, #8
 800219c:	d122      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d11b      	bne.n	80021e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0208 	mvn.w	r2, #8
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2204      	movs	r2, #4
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f95d 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f950 	bl	8002478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f95f 	bl	800249c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d122      	bne.n	8002238 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d11b      	bne.n	8002238 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0210 	mvn.w	r2, #16
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2208      	movs	r2, #8
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f933 	bl	800248a <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f926 	bl	8002478 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f935 	bl	800249c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d10e      	bne.n	8002264 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d107      	bne.n	8002264 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0201 	mvn.w	r2, #1
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fa1e 	bl	80006a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226e:	2b80      	cmp	r3, #128	; 0x80
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227c:	2b80      	cmp	r3, #128	; 0x80
 800227e:	d107      	bne.n	8002290 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fa67 	bl	800275e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229a:	2b40      	cmp	r3, #64	; 0x40
 800229c:	d10e      	bne.n	80022bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d107      	bne.n	80022bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f8f9 	bl	80024ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0320 	and.w	r3, r3, #32
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	d10e      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d107      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0220 	mvn.w	r2, #32
 80022e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fa32 	bl	800274c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_TIM_ConfigClockSource+0x18>
 8002304:	2302      	movs	r3, #2
 8002306:	e0b3      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x180>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002326:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800232e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002340:	d03e      	beq.n	80023c0 <HAL_TIM_ConfigClockSource+0xd0>
 8002342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002346:	f200 8087 	bhi.w	8002458 <HAL_TIM_ConfigClockSource+0x168>
 800234a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234e:	f000 8085 	beq.w	800245c <HAL_TIM_ConfigClockSource+0x16c>
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002356:	d87f      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x168>
 8002358:	2b70      	cmp	r3, #112	; 0x70
 800235a:	d01a      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0xa2>
 800235c:	2b70      	cmp	r3, #112	; 0x70
 800235e:	d87b      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x168>
 8002360:	2b60      	cmp	r3, #96	; 0x60
 8002362:	d050      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0x116>
 8002364:	2b60      	cmp	r3, #96	; 0x60
 8002366:	d877      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x168>
 8002368:	2b50      	cmp	r3, #80	; 0x50
 800236a:	d03c      	beq.n	80023e6 <HAL_TIM_ConfigClockSource+0xf6>
 800236c:	2b50      	cmp	r3, #80	; 0x50
 800236e:	d873      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x168>
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d058      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0x136>
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d86f      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x168>
 8002378:	2b30      	cmp	r3, #48	; 0x30
 800237a:	d064      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x156>
 800237c:	2b30      	cmp	r3, #48	; 0x30
 800237e:	d86b      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x168>
 8002380:	2b20      	cmp	r3, #32
 8002382:	d060      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x156>
 8002384:	2b20      	cmp	r3, #32
 8002386:	d867      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x168>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d05c      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x156>
 800238c:	2b10      	cmp	r3, #16
 800238e:	d05a      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002390:	e062      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6899      	ldr	r1, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f000 f95c 	bl	800265e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	609a      	str	r2, [r3, #8]
      break;
 80023be:	e04e      	b.n	800245e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6899      	ldr	r1, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f000 f945 	bl	800265e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023e2:	609a      	str	r2, [r3, #8]
      break;
 80023e4:	e03b      	b.n	800245e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6859      	ldr	r1, [r3, #4]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f000 f8bc 	bl	8002570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2150      	movs	r1, #80	; 0x50
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f913 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 8002404:	e02b      	b.n	800245e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	461a      	mov	r2, r3
 8002414:	f000 f8da 	bl	80025cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2160      	movs	r1, #96	; 0x60
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f903 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 8002424:	e01b      	b.n	800245e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	461a      	mov	r2, r3
 8002434:	f000 f89c 	bl	8002570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2140      	movs	r1, #64	; 0x40
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f8f3 	bl	800262a <TIM_ITRx_SetConfig>
      break;
 8002444:	e00b      	b.n	800245e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	4610      	mov	r0, r2
 8002452:	f000 f8ea 	bl	800262a <TIM_ITRx_SetConfig>
        break;
 8002456:	e002      	b.n	800245e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002458:	bf00      	nop
 800245a:	e000      	b.n	800245e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800245c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a25      	ldr	r2, [pc, #148]	; (8002568 <TIM_Base_SetConfig+0xa8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <TIM_Base_SetConfig+0x28>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024de:	d003      	beq.n	80024e8 <TIM_Base_SetConfig+0x28>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a22      	ldr	r2, [pc, #136]	; (800256c <TIM_Base_SetConfig+0xac>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d108      	bne.n	80024fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <TIM_Base_SetConfig+0xa8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d007      	beq.n	8002512 <TIM_Base_SetConfig+0x52>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002508:	d003      	beq.n	8002512 <TIM_Base_SetConfig+0x52>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a17      	ldr	r2, [pc, #92]	; (800256c <TIM_Base_SetConfig+0xac>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d108      	bne.n	8002524 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a07      	ldr	r2, [pc, #28]	; (8002568 <TIM_Base_SetConfig+0xa8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d103      	bne.n	8002558 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	615a      	str	r2, [r3, #20]
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	40012c00 	.word	0x40012c00
 800256c:	40000400 	.word	0x40000400

08002570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f023 0201 	bic.w	r2, r3, #1
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f023 030a 	bic.w	r3, r3, #10
 80025ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	621a      	str	r2, [r3, #32]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	f023 0210 	bic.w	r2, r3, #16
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	031b      	lsls	r3, r3, #12
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002608:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	621a      	str	r2, [r3, #32]
}
 8002620:	bf00      	nop
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	f043 0307 	orr.w	r3, r3, #7
 800264c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	609a      	str	r2, [r3, #8]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800265e:	b480      	push	{r7}
 8002660:	b087      	sub	sp, #28
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	60b9      	str	r1, [r7, #8]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002678:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	021a      	lsls	r2, r3, #8
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	431a      	orrs	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	4313      	orrs	r3, r2
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4313      	orrs	r3, r2
 800268a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	609a      	str	r2, [r3, #8]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e041      	b.n	8002738 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a14      	ldr	r2, [pc, #80]	; (8002744 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d009      	beq.n	800270c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d004      	beq.n	800270c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a10      	ldr	r2, [pc, #64]	; (8002748 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d10c      	bne.n	8002726 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002712:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	4313      	orrs	r3, r2
 800271c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40000400 	.word	0x40000400

0800274c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <__errno>:
 8002770:	4b01      	ldr	r3, [pc, #4]	; (8002778 <__errno+0x8>)
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000068 	.word	0x20000068

0800277c <__libc_init_array>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	2600      	movs	r6, #0
 8002780:	4d0c      	ldr	r5, [pc, #48]	; (80027b4 <__libc_init_array+0x38>)
 8002782:	4c0d      	ldr	r4, [pc, #52]	; (80027b8 <__libc_init_array+0x3c>)
 8002784:	1b64      	subs	r4, r4, r5
 8002786:	10a4      	asrs	r4, r4, #2
 8002788:	42a6      	cmp	r6, r4
 800278a:	d109      	bne.n	80027a0 <__libc_init_array+0x24>
 800278c:	f000 f8f6 	bl	800297c <_init>
 8002790:	2600      	movs	r6, #0
 8002792:	4d0a      	ldr	r5, [pc, #40]	; (80027bc <__libc_init_array+0x40>)
 8002794:	4c0a      	ldr	r4, [pc, #40]	; (80027c0 <__libc_init_array+0x44>)
 8002796:	1b64      	subs	r4, r4, r5
 8002798:	10a4      	asrs	r4, r4, #2
 800279a:	42a6      	cmp	r6, r4
 800279c:	d105      	bne.n	80027aa <__libc_init_array+0x2e>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a4:	4798      	blx	r3
 80027a6:	3601      	adds	r6, #1
 80027a8:	e7ee      	b.n	8002788 <__libc_init_array+0xc>
 80027aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ae:	4798      	blx	r3
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7f2      	b.n	800279a <__libc_init_array+0x1e>
 80027b4:	080029b4 	.word	0x080029b4
 80027b8:	080029b4 	.word	0x080029b4
 80027bc:	080029b4 	.word	0x080029b4
 80027c0:	080029b8 	.word	0x080029b8

080027c4 <malloc>:
 80027c4:	4b02      	ldr	r3, [pc, #8]	; (80027d0 <malloc+0xc>)
 80027c6:	4601      	mov	r1, r0
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	f000 b85f 	b.w	800288c <_malloc_r>
 80027ce:	bf00      	nop
 80027d0:	20000068 	.word	0x20000068

080027d4 <free>:
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <free+0xc>)
 80027d6:	4601      	mov	r1, r0
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	f000 b80b 	b.w	80027f4 <_free_r>
 80027de:	bf00      	nop
 80027e0:	20000068 	.word	0x20000068

080027e4 <memset>:
 80027e4:	4603      	mov	r3, r0
 80027e6:	4402      	add	r2, r0
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d100      	bne.n	80027ee <memset+0xa>
 80027ec:	4770      	bx	lr
 80027ee:	f803 1b01 	strb.w	r1, [r3], #1
 80027f2:	e7f9      	b.n	80027e8 <memset+0x4>

080027f4 <_free_r>:
 80027f4:	b538      	push	{r3, r4, r5, lr}
 80027f6:	4605      	mov	r5, r0
 80027f8:	2900      	cmp	r1, #0
 80027fa:	d043      	beq.n	8002884 <_free_r+0x90>
 80027fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002800:	1f0c      	subs	r4, r1, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	bfb8      	it	lt
 8002806:	18e4      	addlt	r4, r4, r3
 8002808:	f000 f8aa 	bl	8002960 <__malloc_lock>
 800280c:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <_free_r+0x94>)
 800280e:	6813      	ldr	r3, [r2, #0]
 8002810:	4610      	mov	r0, r2
 8002812:	b933      	cbnz	r3, 8002822 <_free_r+0x2e>
 8002814:	6063      	str	r3, [r4, #4]
 8002816:	6014      	str	r4, [r2, #0]
 8002818:	4628      	mov	r0, r5
 800281a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800281e:	f000 b8a5 	b.w	800296c <__malloc_unlock>
 8002822:	42a3      	cmp	r3, r4
 8002824:	d90a      	bls.n	800283c <_free_r+0x48>
 8002826:	6821      	ldr	r1, [r4, #0]
 8002828:	1862      	adds	r2, r4, r1
 800282a:	4293      	cmp	r3, r2
 800282c:	bf01      	itttt	eq
 800282e:	681a      	ldreq	r2, [r3, #0]
 8002830:	685b      	ldreq	r3, [r3, #4]
 8002832:	1852      	addeq	r2, r2, r1
 8002834:	6022      	streq	r2, [r4, #0]
 8002836:	6063      	str	r3, [r4, #4]
 8002838:	6004      	str	r4, [r0, #0]
 800283a:	e7ed      	b.n	8002818 <_free_r+0x24>
 800283c:	461a      	mov	r2, r3
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	b10b      	cbz	r3, 8002846 <_free_r+0x52>
 8002842:	42a3      	cmp	r3, r4
 8002844:	d9fa      	bls.n	800283c <_free_r+0x48>
 8002846:	6811      	ldr	r1, [r2, #0]
 8002848:	1850      	adds	r0, r2, r1
 800284a:	42a0      	cmp	r0, r4
 800284c:	d10b      	bne.n	8002866 <_free_r+0x72>
 800284e:	6820      	ldr	r0, [r4, #0]
 8002850:	4401      	add	r1, r0
 8002852:	1850      	adds	r0, r2, r1
 8002854:	4283      	cmp	r3, r0
 8002856:	6011      	str	r1, [r2, #0]
 8002858:	d1de      	bne.n	8002818 <_free_r+0x24>
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4401      	add	r1, r0
 8002860:	6011      	str	r1, [r2, #0]
 8002862:	6053      	str	r3, [r2, #4]
 8002864:	e7d8      	b.n	8002818 <_free_r+0x24>
 8002866:	d902      	bls.n	800286e <_free_r+0x7a>
 8002868:	230c      	movs	r3, #12
 800286a:	602b      	str	r3, [r5, #0]
 800286c:	e7d4      	b.n	8002818 <_free_r+0x24>
 800286e:	6820      	ldr	r0, [r4, #0]
 8002870:	1821      	adds	r1, r4, r0
 8002872:	428b      	cmp	r3, r1
 8002874:	bf01      	itttt	eq
 8002876:	6819      	ldreq	r1, [r3, #0]
 8002878:	685b      	ldreq	r3, [r3, #4]
 800287a:	1809      	addeq	r1, r1, r0
 800287c:	6021      	streq	r1, [r4, #0]
 800287e:	6063      	str	r3, [r4, #4]
 8002880:	6054      	str	r4, [r2, #4]
 8002882:	e7c9      	b.n	8002818 <_free_r+0x24>
 8002884:	bd38      	pop	{r3, r4, r5, pc}
 8002886:	bf00      	nop
 8002888:	20000128 	.word	0x20000128

0800288c <_malloc_r>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	1ccd      	adds	r5, r1, #3
 8002890:	f025 0503 	bic.w	r5, r5, #3
 8002894:	3508      	adds	r5, #8
 8002896:	2d0c      	cmp	r5, #12
 8002898:	bf38      	it	cc
 800289a:	250c      	movcc	r5, #12
 800289c:	2d00      	cmp	r5, #0
 800289e:	4606      	mov	r6, r0
 80028a0:	db01      	blt.n	80028a6 <_malloc_r+0x1a>
 80028a2:	42a9      	cmp	r1, r5
 80028a4:	d903      	bls.n	80028ae <_malloc_r+0x22>
 80028a6:	230c      	movs	r3, #12
 80028a8:	6033      	str	r3, [r6, #0]
 80028aa:	2000      	movs	r0, #0
 80028ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ae:	f000 f857 	bl	8002960 <__malloc_lock>
 80028b2:	4921      	ldr	r1, [pc, #132]	; (8002938 <_malloc_r+0xac>)
 80028b4:	680a      	ldr	r2, [r1, #0]
 80028b6:	4614      	mov	r4, r2
 80028b8:	b99c      	cbnz	r4, 80028e2 <_malloc_r+0x56>
 80028ba:	4f20      	ldr	r7, [pc, #128]	; (800293c <_malloc_r+0xb0>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	b923      	cbnz	r3, 80028ca <_malloc_r+0x3e>
 80028c0:	4621      	mov	r1, r4
 80028c2:	4630      	mov	r0, r6
 80028c4:	f000 f83c 	bl	8002940 <_sbrk_r>
 80028c8:	6038      	str	r0, [r7, #0]
 80028ca:	4629      	mov	r1, r5
 80028cc:	4630      	mov	r0, r6
 80028ce:	f000 f837 	bl	8002940 <_sbrk_r>
 80028d2:	1c43      	adds	r3, r0, #1
 80028d4:	d123      	bne.n	800291e <_malloc_r+0x92>
 80028d6:	230c      	movs	r3, #12
 80028d8:	4630      	mov	r0, r6
 80028da:	6033      	str	r3, [r6, #0]
 80028dc:	f000 f846 	bl	800296c <__malloc_unlock>
 80028e0:	e7e3      	b.n	80028aa <_malloc_r+0x1e>
 80028e2:	6823      	ldr	r3, [r4, #0]
 80028e4:	1b5b      	subs	r3, r3, r5
 80028e6:	d417      	bmi.n	8002918 <_malloc_r+0x8c>
 80028e8:	2b0b      	cmp	r3, #11
 80028ea:	d903      	bls.n	80028f4 <_malloc_r+0x68>
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	441c      	add	r4, r3
 80028f0:	6025      	str	r5, [r4, #0]
 80028f2:	e004      	b.n	80028fe <_malloc_r+0x72>
 80028f4:	6863      	ldr	r3, [r4, #4]
 80028f6:	42a2      	cmp	r2, r4
 80028f8:	bf0c      	ite	eq
 80028fa:	600b      	streq	r3, [r1, #0]
 80028fc:	6053      	strne	r3, [r2, #4]
 80028fe:	4630      	mov	r0, r6
 8002900:	f000 f834 	bl	800296c <__malloc_unlock>
 8002904:	f104 000b 	add.w	r0, r4, #11
 8002908:	1d23      	adds	r3, r4, #4
 800290a:	f020 0007 	bic.w	r0, r0, #7
 800290e:	1ac2      	subs	r2, r0, r3
 8002910:	d0cc      	beq.n	80028ac <_malloc_r+0x20>
 8002912:	1a1b      	subs	r3, r3, r0
 8002914:	50a3      	str	r3, [r4, r2]
 8002916:	e7c9      	b.n	80028ac <_malloc_r+0x20>
 8002918:	4622      	mov	r2, r4
 800291a:	6864      	ldr	r4, [r4, #4]
 800291c:	e7cc      	b.n	80028b8 <_malloc_r+0x2c>
 800291e:	1cc4      	adds	r4, r0, #3
 8002920:	f024 0403 	bic.w	r4, r4, #3
 8002924:	42a0      	cmp	r0, r4
 8002926:	d0e3      	beq.n	80028f0 <_malloc_r+0x64>
 8002928:	1a21      	subs	r1, r4, r0
 800292a:	4630      	mov	r0, r6
 800292c:	f000 f808 	bl	8002940 <_sbrk_r>
 8002930:	3001      	adds	r0, #1
 8002932:	d1dd      	bne.n	80028f0 <_malloc_r+0x64>
 8002934:	e7cf      	b.n	80028d6 <_malloc_r+0x4a>
 8002936:	bf00      	nop
 8002938:	20000128 	.word	0x20000128
 800293c:	2000012c 	.word	0x2000012c

08002940 <_sbrk_r>:
 8002940:	b538      	push	{r3, r4, r5, lr}
 8002942:	2300      	movs	r3, #0
 8002944:	4d05      	ldr	r5, [pc, #20]	; (800295c <_sbrk_r+0x1c>)
 8002946:	4604      	mov	r4, r0
 8002948:	4608      	mov	r0, r1
 800294a:	602b      	str	r3, [r5, #0]
 800294c:	f7fd ff42 	bl	80007d4 <_sbrk>
 8002950:	1c43      	adds	r3, r0, #1
 8002952:	d102      	bne.n	800295a <_sbrk_r+0x1a>
 8002954:	682b      	ldr	r3, [r5, #0]
 8002956:	b103      	cbz	r3, 800295a <_sbrk_r+0x1a>
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	bd38      	pop	{r3, r4, r5, pc}
 800295c:	20000184 	.word	0x20000184

08002960 <__malloc_lock>:
 8002960:	4801      	ldr	r0, [pc, #4]	; (8002968 <__malloc_lock+0x8>)
 8002962:	f000 b809 	b.w	8002978 <__retarget_lock_acquire_recursive>
 8002966:	bf00      	nop
 8002968:	2000018c 	.word	0x2000018c

0800296c <__malloc_unlock>:
 800296c:	4801      	ldr	r0, [pc, #4]	; (8002974 <__malloc_unlock+0x8>)
 800296e:	f000 b804 	b.w	800297a <__retarget_lock_release_recursive>
 8002972:	bf00      	nop
 8002974:	2000018c 	.word	0x2000018c

08002978 <__retarget_lock_acquire_recursive>:
 8002978:	4770      	bx	lr

0800297a <__retarget_lock_release_recursive>:
 800297a:	4770      	bx	lr

0800297c <_init>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr

08002988 <_fini>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	bf00      	nop
 800298c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298e:	bc08      	pop	{r3}
 8002990:	469e      	mov	lr, r3
 8002992:	4770      	bx	lr
