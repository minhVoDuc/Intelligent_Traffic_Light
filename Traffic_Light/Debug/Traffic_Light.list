
Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043a4  080043a4  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  080043a4  080043a4  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043a4  080043a4  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043a4  080043a4  000143a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080043ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200000cc  08004478  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004478  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014549  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d3f  00000000  00000000  0003463e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00037380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00038128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c6b  00000000  00000000  00038da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107fb  00000000  00000000  00052a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b421  00000000  00000000  0006320e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee62f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a4c  00000000  00000000  000ee684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	080042e8 	.word	0x080042e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	080042e8 	.word	0x080042e8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 fc3e 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f816 	bl	8000184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f926 	bl	80003a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f8fa 	bl	8000354 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000160:	f000 f852 	bl	8000208 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 f89c 	bl	80002a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x34>)
 800016a:	f002 fbe1 	bl	8002930 <HAL_TIM_Base_Start_IT>
  timer_init();
 800016e:	f001 fb29 	bl	80017c4 <timer_init>
  traffic_init();
 8000172:	f000 fc1f 	bl	80009b4 <traffic_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  traffic_fsm();
 8000176:	f000 feb1 	bl	8000edc <traffic_fsm>
	  pedestrian_fsm();
 800017a:	f000 fbc7 	bl	800090c <pedestrian_fsm>
	  traffic_fsm();
 800017e:	e7fa      	b.n	8000176 <main+0x2a>
 8000180:	20000154 	.word	0x20000154

08000184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b090      	sub	sp, #64	; 0x40
 8000188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	f107 0318 	add.w	r3, r7, #24
 800018e:	2228      	movs	r2, #40	; 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f003 fc66 	bl	8003a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]
 80001a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a6:	2302      	movs	r3, #2
 80001a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001aa:	2301      	movs	r3, #1
 80001ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ae:	2310      	movs	r3, #16
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b2:	2302      	movs	r3, #2
 80001b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b6:	2300      	movs	r3, #0
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0318 	add.w	r3, r7, #24
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 ff49 	bl	800205c <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001d0:	f000 f998 	bl	8000504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d8:	2302      	movs	r3, #2
 80001da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2102      	movs	r1, #2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 f9b4 	bl	800255c <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001fa:	f000 f983 	bl	8000504 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	; 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800020e:	f107 0308 	add.w	r3, r7, #8
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <MX_TIM2_Init+0x94>)
 8000226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800022a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800022c:	4b1b      	ldr	r3, [pc, #108]	; (800029c <MX_TIM2_Init+0x94>)
 800022e:	223f      	movs	r2, #63	; 0x3f
 8000230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <MX_TIM2_Init+0x94>)
 8000234:	2200      	movs	r2, #0
 8000236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_TIM2_Init+0x94>)
 800023a:	f242 720f 	movw	r2, #9999	; 0x270f
 800023e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <MX_TIM2_Init+0x94>)
 8000242:	2200      	movs	r2, #0
 8000244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <MX_TIM2_Init+0x94>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800024c:	4813      	ldr	r0, [pc, #76]	; (800029c <MX_TIM2_Init+0x94>)
 800024e:	f002 fb1f 	bl	8002890 <HAL_TIM_Base_Init>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000258:	f000 f954 	bl	8000504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800025c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000262:	f107 0308 	add.w	r3, r7, #8
 8000266:	4619      	mov	r1, r3
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <MX_TIM2_Init+0x94>)
 800026a:	f002 fdc9 	bl	8002e00 <HAL_TIM_ConfigClockSource>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000274:	f000 f946 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000278:	2300      	movs	r3, #0
 800027a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_TIM2_Init+0x94>)
 8000286:	f003 f923 	bl	80034d0 <HAL_TIMEx_MasterConfigSynchronization>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000290:	f000 f938 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	3718      	adds	r7, #24
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000154 	.word	0x20000154

080002a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a6:	f107 0320 	add.w	r3, r7, #32
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]
 80002be:	615a      	str	r2, [r3, #20]
 80002c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002c2:	4b22      	ldr	r3, [pc, #136]	; (800034c <MX_TIM3_Init+0xac>)
 80002c4:	4a22      	ldr	r2, [pc, #136]	; (8000350 <MX_TIM3_Init+0xb0>)
 80002c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80002c8:	4b20      	ldr	r3, [pc, #128]	; (800034c <MX_TIM3_Init+0xac>)
 80002ca:	223f      	movs	r2, #63	; 0x3f
 80002cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <MX_TIM3_Init+0xac>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80002d4:	4b1d      	ldr	r3, [pc, #116]	; (800034c <MX_TIM3_Init+0xac>)
 80002d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_TIM3_Init+0xac>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	; (800034c <MX_TIM3_Init+0xac>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80002e8:	4818      	ldr	r0, [pc, #96]	; (800034c <MX_TIM3_Init+0xac>)
 80002ea:	f002 fb73 	bl	80029d4 <HAL_TIM_PWM_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80002f4:	f000 f906 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f8:	2300      	movs	r3, #0
 80002fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000300:	f107 0320 	add.w	r3, r7, #32
 8000304:	4619      	mov	r1, r3
 8000306:	4811      	ldr	r0, [pc, #68]	; (800034c <MX_TIM3_Init+0xac>)
 8000308:	f003 f8e2 	bl	80034d0 <HAL_TIMEx_MasterConfigSynchronization>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000312:	f000 f8f7 	bl	8000504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000316:	2360      	movs	r3, #96	; 0x60
 8000318:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	4619      	mov	r1, r3
 800032c:	4807      	ldr	r0, [pc, #28]	; (800034c <MX_TIM3_Init+0xac>)
 800032e:	f002 fca9 	bl	8002c84 <HAL_TIM_PWM_ConfigChannel>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000338:	f000 f8e4 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800033c:	4803      	ldr	r0, [pc, #12]	; (800034c <MX_TIM3_Init+0xac>)
 800033e:	f000 f95b 	bl	80005f8 <HAL_TIM_MspPostInit>

}
 8000342:	bf00      	nop
 8000344:	3728      	adds	r7, #40	; 0x28
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200001c8 	.word	0x200001c8
 8000350:	40000400 	.word	0x40000400

08000354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800035a:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <MX_USART2_UART_Init+0x50>)
 800035c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800037a:	220c      	movs	r2, #12
 800037c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800038c:	f003 f910 	bl	80035b0 <HAL_UART_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000396:	f000 f8b5 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000218 	.word	0x20000218
 80003a4:	40004400 	.word	0x40004400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003bc:	4b45      	ldr	r3, [pc, #276]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a44      	ldr	r2, [pc, #272]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b42      	ldr	r3, [pc, #264]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d4:	4b3f      	ldr	r3, [pc, #252]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a3e      	ldr	r2, [pc, #248]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b3c      	ldr	r3, [pc, #240]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b39      	ldr	r3, [pc, #228]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a38      	ldr	r2, [pc, #224]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000404:	4b33      	ldr	r3, [pc, #204]	; (80004d4 <MX_GPIO_Init+0x12c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a32      	ldr	r2, [pc, #200]	; (80004d4 <MX_GPIO_Init+0x12c>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b30      	ldr	r3, [pc, #192]	; (80004d4 <MX_GPIO_Init+0x12c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0308 	and.w	r3, r3, #8
 8000418:	603b      	str	r3, [r7, #0]
 800041a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000422:	482d      	ldr	r0, [pc, #180]	; (80004d8 <MX_GPIO_Init+0x130>)
 8000424:	f001 fddf 	bl	8001fe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800042e:	482b      	ldr	r0, [pc, #172]	; (80004dc <MX_GPIO_Init+0x134>)
 8000430:	f001 fdd9 	bl	8001fe6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_GPIO_Init+0x138>)
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	4619      	mov	r1, r3
 8000448:	4826      	ldr	r0, [pc, #152]	; (80004e4 <MX_GPIO_Init+0x13c>)
 800044a:	f001 fc31 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_BTN_Pin BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = PD_BTN_Pin|BTN_1_Pin|BTN_2_Pin;
 800044e:	2313      	movs	r3, #19
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000456:	2301      	movs	r3, #1
 8000458:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	481d      	ldr	r0, [pc, #116]	; (80004d8 <MX_GPIO_Init+0x130>)
 8000462:	f001 fc25 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PD_LED_1_Pin TR_LED_A_0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin;
 8000466:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800046a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	2302      	movs	r3, #2
 8000476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4816      	ldr	r0, [pc, #88]	; (80004d8 <MX_GPIO_Init+0x130>)
 8000480:	f001 fc16 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin;
 8000484:	2301      	movs	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048c:	2301      	movs	r3, #1
 800048e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_3_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4811      	ldr	r0, [pc, #68]	; (80004dc <MX_GPIO_Init+0x134>)
 8000498:	f001 fc0a 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_LED_0_Pin TR_LED_A_1_Pin TR_LED_B_1_Pin TR_LED_B_0_Pin */
  GPIO_InitStruct.Pin = PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin;
 800049c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4619      	mov	r1, r3
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <MX_GPIO_Init+0x134>)
 80004b6:	f001 fbfb 	bl	8001cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	2028      	movs	r0, #40	; 0x28
 80004c0:	f001 fbbf 	bl	8001c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004c4:	2028      	movs	r0, #40	; 0x28
 80004c6:	f001 fbd8 	bl	8001c7a <HAL_NVIC_EnableIRQ>

}
 80004ca:	bf00      	nop
 80004cc:	3720      	adds	r7, #32
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010800 	.word	0x40010800
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	10110000 	.word	0x10110000
 80004e4:	40011000 	.word	0x40011000

080004e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	timer_run();
 80004f0:	f001 f976 	bl	80017e0 <timer_run>
	button_reading();
 80004f4:	f000 fe06 	bl	8001104 <button_reading>
	duration_run();
 80004f8:	f000 ff6e 	bl	80013d8 <duration_run>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_MspInit+0x5c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x5c>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_MspInit+0x60>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_MspInit+0x60>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	40010000 	.word	0x40010000

08000574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000584:	d113      	bne.n	80005ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	201c      	movs	r0, #28
 80005a4:	f001 fb4d 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005a8:	201c      	movs	r0, #28
 80005aa:	f001 fb66 	bl	8001c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <HAL_TIM_PWM_MspInit+0x34>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d10b      	bne.n	80005e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_TIM_PWM_MspInit+0x38>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <HAL_TIM_PWM_MspInit+0x38>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_TIM_PWM_MspInit+0x38>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40000400 	.word	0x40000400
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <HAL_TIM_MspPostInit+0x58>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d117      	bne.n	8000648 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_TIM_MspPostInit+0x5c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <HAL_TIM_MspPostInit+0x5c>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_TIM_MspPostInit+0x5c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PD_BUZZER_Pin;
 8000630:	2340      	movs	r3, #64	; 0x40
 8000632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PD_BUZZER_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_TIM_MspPostInit+0x60>)
 8000644:	f001 fb34 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40000400 	.word	0x40000400
 8000654:	40021000 	.word	0x40021000
 8000658:	40010800 	.word	0x40010800

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <HAL_UART_MspInit+0x70>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d123      	bne.n	80006c4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_UART_MspInit+0x74>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <HAL_UART_MspInit+0x74>)
 8000682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000686:	61d3      	str	r3, [r2, #28]
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_UART_MspInit+0x74>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_UART_MspInit+0x74>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <HAL_UART_MspInit+0x74>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <HAL_UART_MspInit+0x74>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80006ac:	230c      	movs	r3, #12
 80006ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <HAL_UART_MspInit+0x78>)
 80006c0:	f001 faf6 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40004400 	.word	0x40004400
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071e:	f001 f99d 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <TIM2_IRQHandler+0x10>)
 800072e:	f002 f9a0 	bl	8002a72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000154 	.word	0x20000154

0800073c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000740:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000744:	f001 fc68 	bl	8002018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <_sbrk+0x5c>)
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <_sbrk+0x60>)
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <_sbrk+0x64>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <_sbrk+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	429a      	cmp	r2, r3
 800077a:	d207      	bcs.n	800078c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800077c:	f003 f938 	bl	80039f0 <__errno>
 8000780:	4603      	mov	r3, r0
 8000782:	220c      	movs	r2, #12
 8000784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	e009      	b.n	80007a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <_sbrk+0x64>)
 800079c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20005000 	.word	0x20005000
 80007ac:	00000400 	.word	0x00000400
 80007b0:	200000e8 	.word	0x200000e8
 80007b4:	20000270 	.word	0x20000270

080007b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <pedestrian_send_duration>:
void pedestrian_init() {
	pd_state = PD_INIT;
	pd_active_state = PD_A_INIT;
}

void pedestrian_send_duration() { //send duration to uart
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	pedestrian_currDur = duration_get(DUR_PEDESTRIAN);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 fdcf 	bl	800136c <duration_get>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007d2:	6013      	str	r3, [r2, #0]
	if (pedestrian_currDur != pedestrian_prevDur) {
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <pedestrian_send_duration+0x38>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d005      	beq.n	80007ec <pedestrian_send_duration+0x28>
		uart_send_num("Pedestrian duration: ", pedestrian_currDur);
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <pedestrian_send_duration+0x3c>)
 80007e8:	f001 f8a8 	bl	800193c <uart_send_num>
	}
	pedestrian_prevDur = pedestrian_currDur;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a02      	ldr	r2, [pc, #8]	; (80007fc <pedestrian_send_duration+0x38>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000f4 	.word	0x200000f4
 80007fc:	200000f0 	.word	0x200000f0
 8000800:	08004300 	.word	0x08004300

08000804 <pedestrian_active_fsm>:

void pedestrian_active_fsm() {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	pd_duration = global_get_totalDuration(); //get total duration
 8000808:	f000 fc6c 	bl	80010e4 <global_get_totalDuration>
 800080c:	4603      	mov	r3, r0
 800080e:	4a3b      	ldr	r2, [pc, #236]	; (80008fc <pedestrian_active_fsm+0xf8>)
 8000810:	6013      	str	r3, [r2, #0]
	if (timer_checkFlag(TIMER_BLINK)) { //check timer for blink led
 8000812:	2005      	movs	r0, #5
 8000814:	f001 f82e 	bl	8001874 <timer_checkFlag>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00f      	beq.n	800083e <pedestrian_active_fsm+0x3a>
		timer_setDuration(TIMER_BLINK, PD_DUR_BLINK);
 800081e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000822:	2005      	movs	r0, #5
 8000824:	f001 f80c 	bl	8001840 <timer_setDuration>
		if (pd_led_state == PD_LED_OFF) pd_led_state = PD_LED_ON;
 8000828:	4b35      	ldr	r3, [pc, #212]	; (8000900 <pedestrian_active_fsm+0xfc>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b48      	cmp	r3, #72	; 0x48
 800082e:	d103      	bne.n	8000838 <pedestrian_active_fsm+0x34>
 8000830:	4b33      	ldr	r3, [pc, #204]	; (8000900 <pedestrian_active_fsm+0xfc>)
 8000832:	2247      	movs	r2, #71	; 0x47
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e002      	b.n	800083e <pedestrian_active_fsm+0x3a>
		else pd_led_state = PD_LED_OFF;
 8000838:	4b31      	ldr	r3, [pc, #196]	; (8000900 <pedestrian_active_fsm+0xfc>)
 800083a:	2248      	movs	r2, #72	; 0x48
 800083c:	701a      	strb	r2, [r3, #0]
	}

	switch (pd_active_state) {
 800083e:	4b31      	ldr	r3, [pc, #196]	; (8000904 <pedestrian_active_fsm+0x100>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b3e      	cmp	r3, #62	; 0x3e
 8000844:	d02e      	beq.n	80008a4 <pedestrian_active_fsm+0xa0>
 8000846:	2b3e      	cmp	r3, #62	; 0x3e
 8000848:	dc50      	bgt.n	80008ec <pedestrian_active_fsm+0xe8>
 800084a:	2b3c      	cmp	r3, #60	; 0x3c
 800084c:	d002      	beq.n	8000854 <pedestrian_active_fsm+0x50>
 800084e:	2b3d      	cmp	r3, #61	; 0x3d
 8000850:	d004      	beq.n	800085c <pedestrian_active_fsm+0x58>
		//change mode
		break;

	///////////////////////////////////////////
	default:
		break;
 8000852:	e04b      	b.n	80008ec <pedestrian_active_fsm+0xe8>
		pd_active_state = PD_A_RED;
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <pedestrian_active_fsm+0x100>)
 8000856:	223d      	movs	r2, #61	; 0x3d
 8000858:	701a      	strb	r2, [r3, #0]
		break;
 800085a:	e04c      	b.n	80008f6 <pedestrian_active_fsm+0xf2>
		pedestrian_send_duration();
 800085c:	f7ff ffb2 	bl	80007c4 <pedestrian_send_duration>
		if (pedestrian_currDur > 3) led_turn_on(PEDESTRIAN, LED_RED); //turn led red on when duration over 3 second
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <pedestrian_active_fsm+0x104>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d904      	bls.n	8000872 <pedestrian_active_fsm+0x6e>
 8000868:	2100      	movs	r1, #0
 800086a:	2007      	movs	r0, #7
 800086c:	f000 fde6 	bl	800143c <led_turn_on>
 8000870:	e002      	b.n	8000878 <pedestrian_active_fsm+0x74>
		else led_pedestrian_blinky(LED_RED); //otherwise, blink led red
 8000872:	2000      	movs	r0, #0
 8000874:	f000 fece 	bl	8001614 <led_pedestrian_blinky>
		if (button_isPressed(BTN_PD)) { //reset duration for pedestrian led
 8000878:	2003      	movs	r0, #3
 800087a:	f000 fd31 	bl	80012e0 <button_isPressed>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d035      	beq.n	80008f0 <pedestrian_active_fsm+0xec>
			timer_clear(TIMER_PD);
 8000884:	2003      	movs	r0, #3
 8000886:	f001 f80d 	bl	80018a4 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <pedestrian_active_fsm+0xf8>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	2003      	movs	r0, #3
 8000892:	f000 ffd5 	bl	8001840 <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <pedestrian_active_fsm+0xf8>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4619      	mov	r1, r3
 800089c:	2001      	movs	r0, #1
 800089e:	f000 fd4d 	bl	800133c <duration_set>
		break;
 80008a2:	e025      	b.n	80008f0 <pedestrian_active_fsm+0xec>
		pedestrian_send_duration();
 80008a4:	f7ff ff8e 	bl	80007c4 <pedestrian_send_duration>
		if (pedestrian_currDur > 3) led_turn_on(PEDESTRIAN, LED_GREEN); //turn led green on when duration over 3 second
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <pedestrian_active_fsm+0x104>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b03      	cmp	r3, #3
 80008ae:	d904      	bls.n	80008ba <pedestrian_active_fsm+0xb6>
 80008b0:	2101      	movs	r1, #1
 80008b2:	2007      	movs	r0, #7
 80008b4:	f000 fdc2 	bl	800143c <led_turn_on>
 80008b8:	e002      	b.n	80008c0 <pedestrian_active_fsm+0xbc>
		else led_pedestrian_blinky(LED_GREEN); //otherwise, blink led green
 80008ba:	2001      	movs	r0, #1
 80008bc:	f000 feaa 	bl	8001614 <led_pedestrian_blinky>
		if (button_isPressed(BTN_PD)) { //reset duration for pedestrian led
 80008c0:	2003      	movs	r0, #3
 80008c2:	f000 fd0d 	bl	80012e0 <button_isPressed>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d013      	beq.n	80008f4 <pedestrian_active_fsm+0xf0>
			timer_clear(TIMER_PD);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 ffe9 	bl	80018a4 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <pedestrian_active_fsm+0xf8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 ffb1 	bl	8001840 <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <pedestrian_active_fsm+0xf8>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	2001      	movs	r0, #1
 80008e6:	f000 fd29 	bl	800133c <duration_set>
		break;
 80008ea:	e003      	b.n	80008f4 <pedestrian_active_fsm+0xf0>
		break;
 80008ec:	bf00      	nop
 80008ee:	e002      	b.n	80008f6 <pedestrian_active_fsm+0xf2>
		break;
 80008f0:	bf00      	nop
 80008f2:	e000      	b.n	80008f6 <pedestrian_active_fsm+0xf2>
		break;
 80008f4:	bf00      	nop
	}
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000ec 	.word	0x200000ec
 8000900:	20000106 	.word	0x20000106
 8000904:	20000105 	.word	0x20000105
 8000908:	200000f4 	.word	0x200000f4

0800090c <pedestrian_fsm>:

void pedestrian_fsm() {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	//check state of pd_state
	switch (pd_state) {
 8000910:	4b26      	ldr	r3, [pc, #152]	; (80009ac <pedestrian_fsm+0xa0>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	2b34      	cmp	r3, #52	; 0x34
 8000916:	d036      	beq.n	8000986 <pedestrian_fsm+0x7a>
 8000918:	2b34      	cmp	r3, #52	; 0x34
 800091a:	dc40      	bgt.n	800099e <pedestrian_fsm+0x92>
 800091c:	2b32      	cmp	r3, #50	; 0x32
 800091e:	d002      	beq.n	8000926 <pedestrian_fsm+0x1a>
 8000920:	2b33      	cmp	r3, #51	; 0x33
 8000922:	d007      	beq.n	8000934 <pedestrian_fsm+0x28>
		break;

	//////////////////////////////////////////////////////

	default:
		break;
 8000924:	e03b      	b.n	800099e <pedestrian_fsm+0x92>
		led_turn_off(PEDESTRIAN);
 8000926:	2007      	movs	r0, #7
 8000928:	f000 fe38 	bl	800159c <led_turn_off>
		pd_state = PD_IDLE;
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <pedestrian_fsm+0xa0>)
 800092e:	2233      	movs	r2, #51	; 0x33
 8000930:	701a      	strb	r2, [r3, #0]
		break;
 8000932:	e039      	b.n	80009a8 <pedestrian_fsm+0x9c>
		led_turn_off(PEDESTRIAN);
 8000934:	2007      	movs	r0, #7
 8000936:	f000 fe31 	bl	800159c <led_turn_off>
		if (button_isPressed(BTN_PD)) {
 800093a:	2003      	movs	r0, #3
 800093c:	f000 fcd0 	bl	80012e0 <button_isPressed>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d02d      	beq.n	80009a2 <pedestrian_fsm+0x96>
			pd_state = PD_ACTIVE;
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <pedestrian_fsm+0xa0>)
 8000948:	2234      	movs	r2, #52	; 0x34
 800094a:	701a      	strb	r2, [r3, #0]
			pd_duration = global_get_totalDuration(); //get total duration for a cycle of traffic
 800094c:	f000 fbca 	bl	80010e4 <global_get_totalDuration>
 8000950:	4603      	mov	r3, r0
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <pedestrian_fsm+0xa4>)
 8000954:	6013      	str	r3, [r2, #0]
			timer_clear(TIMER_PD); //clear timer for pedestrian (if yes)
 8000956:	2003      	movs	r0, #3
 8000958:	f000 ffa4 	bl	80018a4 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration); //set new timer for pedestrian
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <pedestrian_fsm+0xa4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	2003      	movs	r0, #3
 8000964:	f000 ff6c 	bl	8001840 <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);//set duration for counter
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <pedestrian_fsm+0xa4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	2001      	movs	r0, #1
 8000970:	f000 fce4 	bl	800133c <duration_set>
			timer_clear(TIMER_BLINK);
 8000974:	2005      	movs	r0, #5
 8000976:	f000 ff95 	bl	80018a4 <timer_clear>
			timer_setDuration(TIMER_BLINK, PD_DUR_BLINK); //set timer for blinking led for the last 3 second
 800097a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800097e:	2005      	movs	r0, #5
 8000980:	f000 ff5e 	bl	8001840 <timer_setDuration>
		break;
 8000984:	e00d      	b.n	80009a2 <pedestrian_fsm+0x96>
		pedestrian_active_fsm();
 8000986:	f7ff ff3d 	bl	8000804 <pedestrian_active_fsm>
		if (timer_checkFlag(TIMER_PD)) {
 800098a:	2003      	movs	r0, #3
 800098c:	f000 ff72 	bl	8001874 <timer_checkFlag>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d007      	beq.n	80009a6 <pedestrian_fsm+0x9a>
			pd_state = PD_IDLE;
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <pedestrian_fsm+0xa0>)
 8000998:	2233      	movs	r2, #51	; 0x33
 800099a:	701a      	strb	r2, [r3, #0]
		break;
 800099c:	e003      	b.n	80009a6 <pedestrian_fsm+0x9a>
		break;
 800099e:	bf00      	nop
 80009a0:	e002      	b.n	80009a8 <pedestrian_fsm+0x9c>
		break;
 80009a2:	bf00      	nop
 80009a4:	e000      	b.n	80009a8 <pedestrian_fsm+0x9c>
		break;
 80009a6:	bf00      	nop
	}
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200001c4 	.word	0x200001c4
 80009b0:	200000ec 	.word	0x200000ec

080009b4 <traffic_init>:
/*-------------------- init setting --------------------*/
//uint32_t	trafficDuration[3] = {5000, 3000, 2000};
uint32_t traffic_prevDur = 0,
         traffic_currDur = 0; //previous and current duration of traffic

void traffic_init() {
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	global_state = INIT_MODE;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <traffic_init+0x2c>)
 80009ba:	220a      	movs	r2, #10
 80009bc:	701a      	strb	r2, [r3, #0]
	auto_A_state = AUTO_INIT;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <traffic_init+0x30>)
 80009c0:	2214      	movs	r2, #20
 80009c2:	701a      	strb	r2, [r3, #0]
	auto_B_state = AUTO_INIT;
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <traffic_init+0x34>)
 80009c6:	2214      	movs	r2, #20
 80009c8:	701a      	strb	r2, [r3, #0]
	manual_state = MN_INIT;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <traffic_init+0x38>)
 80009cc:	221e      	movs	r2, #30
 80009ce:	701a      	strb	r2, [r3, #0]
	set_state = SET_INIT;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <traffic_init+0x3c>)
 80009d2:	2228      	movs	r2, #40	; 0x28
 80009d4:	701a      	strb	r2, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000100 	.word	0x20000100
 80009e4:	20000101 	.word	0x20000101
 80009e8:	20000102 	.word	0x20000102
 80009ec:	20000103 	.word	0x20000103
 80009f0:	20000104 	.word	0x20000104

080009f4 <traffic_send_duration>:

/*------------------- auto fsm -------------------------*/
void traffic_send_duration() {  //send duration to uart
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	traffic_currDur = duration_get(DUR_TRAFFIC);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fcb7 	bl	800136c <duration_get>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <traffic_send_duration+0x3c>)
 8000a02:	6013      	str	r3, [r2, #0]
	if (traffic_currDur && traffic_currDur != traffic_prevDur) {
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <traffic_send_duration+0x3c>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d00b      	beq.n	8000a24 <traffic_send_duration+0x30>
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <traffic_send_duration+0x3c>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <traffic_send_duration+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d005      	beq.n	8000a24 <traffic_send_duration+0x30>
		uart_send_num("Traffic duration: ", traffic_currDur);
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <traffic_send_duration+0x3c>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <traffic_send_duration+0x44>)
 8000a20:	f000 ff8c 	bl	800193c <uart_send_num>
	}
	traffic_prevDur = traffic_currDur;
 8000a24:	4b02      	ldr	r3, [pc, #8]	; (8000a30 <traffic_send_duration+0x3c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a02      	ldr	r2, [pc, #8]	; (8000a34 <traffic_send_duration+0x40>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000fc 	.word	0x200000fc
 8000a34:	200000f8 	.word	0x200000f8
 8000a38:	08004318 	.word	0x08004318

08000a3c <traffic_auto_fsm_A>:

void traffic_auto_fsm_A() {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	switch(auto_A_state) {
 8000a40:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <traffic_auto_fsm_A+0x10c>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	3b14      	subs	r3, #20
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d874      	bhi.n	8000b34 <traffic_auto_fsm_A+0xf8>
 8000a4a:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <traffic_auto_fsm_A+0x14>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000a81 	.word	0x08000a81
 8000a58:	08000abf 	.word	0x08000abf
 8000a5c:	08000af7 	.word	0x08000af7
	case AUTO_INIT:
		//change mode
		auto_A_state = AUTO_RED;
 8000a60:	4b39      	ldr	r3, [pc, #228]	; (8000b48 <traffic_auto_fsm_A+0x10c>)
 8000a62:	2215      	movs	r2, #21
 8000a64:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <traffic_auto_fsm_A+0x110>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f000 fee7 	bl	8001840 <timer_setDuration>
		duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000a72:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <traffic_auto_fsm_A+0x110>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4619      	mov	r1, r3
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 fc5f 	bl	800133c <duration_set>
		break;
 8000a7e:	e060      	b.n	8000b42 <traffic_auto_fsm_A+0x106>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000a80:	2100      	movs	r1, #0
 8000a82:	2005      	movs	r0, #5
 8000a84:	f000 fcda 	bl	800143c <led_turn_on>
		traffic_send_duration();
 8000a88:	f7ff ffb4 	bl	80009f4 <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f000 fef1 	bl	8001874 <timer_checkFlag>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d04f      	beq.n	8000b38 <traffic_auto_fsm_A+0xfc>
			auto_A_state = AUTO_GREEN;
 8000a98:	4b2b      	ldr	r3, [pc, #172]	; (8000b48 <traffic_auto_fsm_A+0x10c>)
 8000a9a:	2216      	movs	r2, #22
 8000a9c:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8000a9e:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <traffic_auto_fsm_A+0x114>)
 8000aa0:	223d      	movs	r2, #61	; 0x3d
 8000aa2:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000aa4:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <traffic_auto_fsm_A+0x110>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 fec8 	bl	8001840 <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <traffic_auto_fsm_A+0x110>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 fc40 	bl	800133c <duration_set>
		}
		break;
 8000abc:	e03c      	b.n	8000b38 <traffic_auto_fsm_A+0xfc>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000abe:	2101      	movs	r1, #1
 8000ac0:	2005      	movs	r0, #5
 8000ac2:	f000 fcbb 	bl	800143c <led_turn_on>
		traffic_send_duration();
 8000ac6:	f7ff ff95 	bl	80009f4 <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 fed2 	bl	8001874 <timer_checkFlag>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d032      	beq.n	8000b3c <traffic_auto_fsm_A+0x100>
			auto_A_state = AUTO_YELLOW;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <traffic_auto_fsm_A+0x10c>)
 8000ad8:	2217      	movs	r2, #23
 8000ada:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <traffic_auto_fsm_A+0x110>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 feac 	bl	8001840 <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <traffic_auto_fsm_A+0x110>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	4619      	mov	r1, r3
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 fc24 	bl	800133c <duration_set>
		}
		break;
 8000af4:	e022      	b.n	8000b3c <traffic_auto_fsm_A+0x100>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000af6:	2102      	movs	r1, #2
 8000af8:	2005      	movs	r0, #5
 8000afa:	f000 fc9f 	bl	800143c <led_turn_on>
		traffic_send_duration();
 8000afe:	f7ff ff79 	bl	80009f4 <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 feb6 	bl	8001874 <timer_checkFlag>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d018      	beq.n	8000b40 <traffic_auto_fsm_A+0x104>
			auto_A_state = AUTO_RED;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <traffic_auto_fsm_A+0x10c>)
 8000b10:	2215      	movs	r2, #21
 8000b12:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <traffic_auto_fsm_A+0x114>)
 8000b16:	223e      	movs	r2, #62	; 0x3e
 8000b18:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <traffic_auto_fsm_A+0x110>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 fe8d 	bl	8001840 <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <traffic_auto_fsm_A+0x110>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f000 fc05 	bl	800133c <duration_set>
		}
		break;
 8000b32:	e005      	b.n	8000b40 <traffic_auto_fsm_A+0x104>

	/////////////////////////////////////////////////////
	default:
		break;
 8000b34:	bf00      	nop
 8000b36:	e004      	b.n	8000b42 <traffic_auto_fsm_A+0x106>
		break;
 8000b38:	bf00      	nop
 8000b3a:	e002      	b.n	8000b42 <traffic_auto_fsm_A+0x106>
		break;
 8000b3c:	bf00      	nop
 8000b3e:	e000      	b.n	8000b42 <traffic_auto_fsm_A+0x106>
		break;
 8000b40:	bf00      	nop
	}
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000101 	.word	0x20000101
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	20000105 	.word	0x20000105

08000b54 <traffic_auto_fsm_B>:

void traffic_auto_fsm_B() {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	switch(auto_B_state) {
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <traffic_auto_fsm_B+0xc4>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	3b14      	subs	r3, #20
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	d850      	bhi.n	8000c04 <traffic_auto_fsm_B+0xb0>
 8000b62:	a201      	add	r2, pc, #4	; (adr r2, 8000b68 <traffic_auto_fsm_B+0x14>)
 8000b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b68:	08000b79 	.word	0x08000b79
 8000b6c:	08000b8d 	.word	0x08000b8d
 8000b70:	08000bb5 	.word	0x08000bb5
 8000b74:	08000bdd 	.word	0x08000bdd
	case AUTO_INIT:
		//change mode
		auto_B_state = AUTO_GREEN;
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <traffic_auto_fsm_B+0xc4>)
 8000b7a:	2216      	movs	r2, #22
 8000b7c:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000b7e:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <traffic_auto_fsm_B+0xc8>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	4619      	mov	r1, r3
 8000b84:	2001      	movs	r0, #1
 8000b86:	f000 fe5b 	bl	8001840 <timer_setDuration>
		break;
 8000b8a:	e042      	b.n	8000c12 <traffic_auto_fsm_B+0xbe>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_2, LED_RED);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2006      	movs	r0, #6
 8000b90:	f000 fc54 	bl	800143c <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000b94:	2001      	movs	r0, #1
 8000b96:	f000 fe6d 	bl	8001874 <timer_checkFlag>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d033      	beq.n	8000c08 <traffic_auto_fsm_B+0xb4>
			auto_B_state = AUTO_GREEN;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <traffic_auto_fsm_B+0xc4>)
 8000ba2:	2216      	movs	r2, #22
 8000ba4:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000ba6:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <traffic_auto_fsm_B+0xc8>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	4619      	mov	r1, r3
 8000bac:	2001      	movs	r0, #1
 8000bae:	f000 fe47 	bl	8001840 <timer_setDuration>
		}
		break;
 8000bb2:	e029      	b.n	8000c08 <traffic_auto_fsm_B+0xb4>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	2006      	movs	r0, #6
 8000bb8:	f000 fc40 	bl	800143c <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f000 fe59 	bl	8001874 <timer_checkFlag>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d021      	beq.n	8000c0c <traffic_auto_fsm_B+0xb8>
			auto_B_state = AUTO_YELLOW;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <traffic_auto_fsm_B+0xc4>)
 8000bca:	2217      	movs	r2, #23
 8000bcc:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <traffic_auto_fsm_B+0xc8>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 fe33 	bl	8001840 <timer_setDuration>
		}
		break;
 8000bda:	e017      	b.n	8000c0c <traffic_auto_fsm_B+0xb8>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000bdc:	2102      	movs	r1, #2
 8000bde:	2006      	movs	r0, #6
 8000be0:	f000 fc2c 	bl	800143c <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000be4:	2001      	movs	r0, #1
 8000be6:	f000 fe45 	bl	8001874 <timer_checkFlag>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00f      	beq.n	8000c10 <traffic_auto_fsm_B+0xbc>
			auto_B_state = AUTO_RED;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <traffic_auto_fsm_B+0xc4>)
 8000bf2:	2215      	movs	r2, #21
 8000bf4:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <traffic_auto_fsm_B+0xc8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 fe1f 	bl	8001840 <timer_setDuration>
		}
		break;
 8000c02:	e005      	b.n	8000c10 <traffic_auto_fsm_B+0xbc>

	/////////////////////////////////////////////////////
	default:
		break;
 8000c04:	bf00      	nop
 8000c06:	e004      	b.n	8000c12 <traffic_auto_fsm_B+0xbe>
		break;
 8000c08:	bf00      	nop
 8000c0a:	e002      	b.n	8000c12 <traffic_auto_fsm_B+0xbe>
		break;
 8000c0c:	bf00      	nop
 8000c0e:	e000      	b.n	8000c12 <traffic_auto_fsm_B+0xbe>
		break;
 8000c10:	bf00      	nop
	}
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000102 	.word	0x20000102
 8000c1c:	20000004 	.word	0x20000004

08000c20 <traffic_manual_fsm>:

/*----------------- manual fsm -------------------------*/
void traffic_manual_fsm() {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	switch(manual_state) {
 8000c24:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <traffic_manual_fsm+0xd4>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	3b1e      	subs	r3, #30
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	d856      	bhi.n	8000cdc <traffic_manual_fsm+0xbc>
 8000c2e:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <traffic_manual_fsm+0x14>)
 8000c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c34:	08000c49 	.word	0x08000c49
 8000c38:	08000c51 	.word	0x08000c51
 8000c3c:	08000c75 	.word	0x08000c75
 8000c40:	08000c97 	.word	0x08000c97
 8000c44:	08000cbb 	.word	0x08000cbb
	case MN_INIT:
		//change mode
		manual_state = MN_RED0;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <traffic_manual_fsm+0xd4>)
 8000c4a:	221f      	movs	r2, #31
 8000c4c:	701a      	strb	r2, [r3, #0]
		break;
 8000c4e:	e04e      	b.n	8000cee <traffic_manual_fsm+0xce>

	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - green
	case MN_RED0:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000c50:	2100      	movs	r1, #0
 8000c52:	2005      	movs	r0, #5
 8000c54:	f000 fbf2 	bl	800143c <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000c58:	2101      	movs	r1, #1
 8000c5a:	2006      	movs	r0, #6
 8000c5c:	f000 fbee 	bl	800143c <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000c60:	2001      	movs	r0, #1
 8000c62:	f000 fb3d 	bl	80012e0 <button_isPressed>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d039      	beq.n	8000ce0 <traffic_manual_fsm+0xc0>
			manual_state = MN_RED1;
 8000c6c:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <traffic_manual_fsm+0xd4>)
 8000c6e:	2220      	movs	r2, #32
 8000c70:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c72:	e035      	b.n	8000ce0 <traffic_manual_fsm+0xc0>
	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - yellow
	case MN_RED1:
		//TODO
//		led_turn_on(TRAFFIC_1, LED_RED);
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000c74:	2102      	movs	r1, #2
 8000c76:	2006      	movs	r0, #6
 8000c78:	f000 fbe0 	bl	800143c <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f000 fb2f 	bl	80012e0 <button_isPressed>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d02d      	beq.n	8000ce4 <traffic_manual_fsm+0xc4>
			manual_state = MN_GREEN;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <traffic_manual_fsm+0xd4>)
 8000c8a:	2221      	movs	r2, #33	; 0x21
 8000c8c:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <traffic_manual_fsm+0xd8>)
 8000c90:	223d      	movs	r2, #61	; 0x3d
 8000c92:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c94:	e026      	b.n	8000ce4 <traffic_manual_fsm+0xc4>

	///////////////////////////////////////////////////////////
	// traffic A - green; traffic B - red
	case MN_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000c96:	2101      	movs	r1, #1
 8000c98:	2005      	movs	r0, #5
 8000c9a:	f000 fbcf 	bl	800143c <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f000 fbcb 	bl	800143c <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f000 fb1a 	bl	80012e0 <button_isPressed>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d01a      	beq.n	8000ce8 <traffic_manual_fsm+0xc8>
			manual_state = MN_YELLOW;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <traffic_manual_fsm+0xd4>)
 8000cb4:	2222      	movs	r2, #34	; 0x22
 8000cb6:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cb8:	e016      	b.n	8000ce8 <traffic_manual_fsm+0xc8>

	///////////////////////////////////////////////////////////
	// traffic A - yellow; traffic B - red
	case MN_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000cba:	2102      	movs	r1, #2
 8000cbc:	2005      	movs	r0, #5
 8000cbe:	f000 fbbd 	bl	800143c <led_turn_on>
//		led_turn_on(TRAFFIC_2, LED_RED);

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 fb0c 	bl	80012e0 <button_isPressed>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00e      	beq.n	8000cec <traffic_manual_fsm+0xcc>
			manual_state = MN_RED0;
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <traffic_manual_fsm+0xd4>)
 8000cd0:	221f      	movs	r2, #31
 8000cd2:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <traffic_manual_fsm+0xd8>)
 8000cd6:	223e      	movs	r2, #62	; 0x3e
 8000cd8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cda:	e007      	b.n	8000cec <traffic_manual_fsm+0xcc>

	///////////////////////////////////////////////////////////
	default:
		break;
 8000cdc:	bf00      	nop
 8000cde:	e006      	b.n	8000cee <traffic_manual_fsm+0xce>
		break;
 8000ce0:	bf00      	nop
 8000ce2:	e004      	b.n	8000cee <traffic_manual_fsm+0xce>
		break;
 8000ce4:	bf00      	nop
 8000ce6:	e002      	b.n	8000cee <traffic_manual_fsm+0xce>
		break;
 8000ce8:	bf00      	nop
 8000cea:	e000      	b.n	8000cee <traffic_manual_fsm+0xce>
		break;
 8000cec:	bf00      	nop
	}
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000103 	.word	0x20000103
 8000cf8:	20000105 	.word	0x20000105

08000cfc <duration_inc>:

/*-------------------- set fsm -------------------------*/
void duration_inc(uint8_t led_type) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	// increase specific duration by 1 unit
	trafficDuration[led_type] += DURATION_UNIT;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <duration_inc+0x50>)
 8000d0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000d14:	490d      	ldr	r1, [pc, #52]	; (8000d4c <duration_inc+0x50>)
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (trafficDuration[led_type] > DURATION_MAX) { //if duration over max, reset to DURATION_UNIT
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <duration_inc+0x50>)
 8000d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d90a      	bls.n	8000d40 <duration_inc+0x44>
		trafficDuration[led_type] -= DURATION_MAX;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <duration_inc+0x50>)
 8000d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000d38:	3b10      	subs	r3, #16
 8000d3a:	4904      	ldr	r1, [pc, #16]	; (8000d4c <duration_inc+0x50>)
 8000d3c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bc80      	pop	{r7}
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000004 	.word	0x20000004

08000d50 <traffic_set_fsm>:

void traffic_set_fsm() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	switch(set_state) {
 8000d54:	4b60      	ldr	r3, [pc, #384]	; (8000ed8 <traffic_set_fsm+0x188>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3b28      	subs	r3, #40	; 0x28
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	f200 80b2 	bhi.w	8000ec4 <traffic_set_fsm+0x174>
 8000d60:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <traffic_set_fsm+0x18>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000d79 	.word	0x08000d79
 8000d6c:	08000d81 	.word	0x08000d81
 8000d70:	08000ded 	.word	0x08000ded
 8000d74:	08000e59 	.word	0x08000e59
	case SET_INIT:
		set_state = SET_RED;
 8000d78:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <traffic_set_fsm+0x188>)
 8000d7a:	2229      	movs	r2, #41	; 0x29
 8000d7c:	701a      	strb	r2, [r3, #0]
		break;
 8000d7e:	e0a8      	b.n	8000ed2 <traffic_set_fsm+0x182>

	//////////////////////////////////////////////////////////////
	case SET_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000d80:	2100      	movs	r1, #0
 8000d82:	2005      	movs	r0, #5
 8000d84:	f000 fb5a 	bl	800143c <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f000 fb56 	bl	800143c <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000d90:	2002      	movs	r0, #2
 8000d92:	f000 faa5 	bl	80012e0 <button_isPressed>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d009      	beq.n	8000db0 <traffic_set_fsm+0x60>
			duration_inc(LED_RED);
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff ffad 	bl	8000cfc <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000da2:	2002      	movs	r0, #2
 8000da4:	f000 fd7e 	bl	80018a4 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000da8:	210a      	movs	r1, #10
 8000daa:	2002      	movs	r0, #2
 8000dac:	f000 fd48 	bl	8001840 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000db0:	2002      	movs	r0, #2
 8000db2:	f000 faaf 	bl	8001314 <button_isLongPressed>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00d      	beq.n	8000dd8 <traffic_set_fsm+0x88>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f000 fd59 	bl	8001874 <timer_checkFlag>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d007      	beq.n	8000dd8 <traffic_set_fsm+0x88>
				duration_inc(LED_RED);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f7ff ff97 	bl	8000cfc <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000dce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f000 fd34 	bl	8001840 <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)) {
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 fa81 	bl	80012e0 <button_isPressed>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d071      	beq.n	8000ec8 <traffic_set_fsm+0x178>
			set_state = SET_GREEN;
 8000de4:	4b3c      	ldr	r3, [pc, #240]	; (8000ed8 <traffic_set_fsm+0x188>)
 8000de6:	222a      	movs	r2, #42	; 0x2a
 8000de8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000dea:	e06d      	b.n	8000ec8 <traffic_set_fsm+0x178>

	//////////////////////////////////////////////////////////////
	case SET_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000dec:	2101      	movs	r1, #1
 8000dee:	2005      	movs	r0, #5
 8000df0:	f000 fb24 	bl	800143c <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000df4:	2101      	movs	r1, #1
 8000df6:	2006      	movs	r0, #6
 8000df8:	f000 fb20 	bl	800143c <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000dfc:	2002      	movs	r0, #2
 8000dfe:	f000 fa6f 	bl	80012e0 <button_isPressed>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d009      	beq.n	8000e1c <traffic_set_fsm+0xcc>
			duration_inc(LED_GREEN);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff ff77 	bl	8000cfc <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f000 fd48 	bl	80018a4 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000e14:	210a      	movs	r1, #10
 8000e16:	2002      	movs	r0, #2
 8000e18:	f000 fd12 	bl	8001840 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f000 fa79 	bl	8001314 <button_isLongPressed>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00d      	beq.n	8000e44 <traffic_set_fsm+0xf4>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f000 fd23 	bl	8001874 <timer_checkFlag>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d007      	beq.n	8000e44 <traffic_set_fsm+0xf4>
				duration_inc(LED_GREEN);
 8000e34:	2001      	movs	r0, #1
 8000e36:	f7ff ff61 	bl	8000cfc <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000e3a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f000 fcfe 	bl	8001840 <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8000e44:	2001      	movs	r0, #1
 8000e46:	f000 fa4b 	bl	80012e0 <button_isPressed>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d03d      	beq.n	8000ecc <traffic_set_fsm+0x17c>
			set_state = SET_YELLOW;
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <traffic_set_fsm+0x188>)
 8000e52:	222b      	movs	r2, #43	; 0x2b
 8000e54:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000e56:	e039      	b.n	8000ecc <traffic_set_fsm+0x17c>

	//////////////////////////////////////////////////////////////
	case SET_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000e58:	2102      	movs	r1, #2
 8000e5a:	2005      	movs	r0, #5
 8000e5c:	f000 faee 	bl	800143c <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000e60:	2102      	movs	r1, #2
 8000e62:	2006      	movs	r0, #6
 8000e64:	f000 faea 	bl	800143c <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f000 fa39 	bl	80012e0 <button_isPressed>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d009      	beq.n	8000e88 <traffic_set_fsm+0x138>
			duration_inc(LED_YELLOW);
 8000e74:	2002      	movs	r0, #2
 8000e76:	f7ff ff41 	bl	8000cfc <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f000 fd12 	bl	80018a4 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000e80:	210a      	movs	r1, #10
 8000e82:	2002      	movs	r0, #2
 8000e84:	f000 fcdc 	bl	8001840 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f000 fa43 	bl	8001314 <button_isLongPressed>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00d      	beq.n	8000eb0 <traffic_set_fsm+0x160>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000e94:	2002      	movs	r0, #2
 8000e96:	f000 fced 	bl	8001874 <timer_checkFlag>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d007      	beq.n	8000eb0 <traffic_set_fsm+0x160>
				duration_inc(LED_YELLOW);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f7ff ff2b 	bl	8000cfc <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000ea6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f000 fcc8 	bl	8001840 <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 fa15 	bl	80012e0 <button_isPressed>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d009      	beq.n	8000ed0 <traffic_set_fsm+0x180>
			set_state = SET_RED;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <traffic_set_fsm+0x188>)
 8000ebe:	2229      	movs	r2, #41	; 0x29
 8000ec0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000ec2:	e005      	b.n	8000ed0 <traffic_set_fsm+0x180>

	//////////////////////////////////////////////////////////////
	default:
		break;
 8000ec4:	bf00      	nop
 8000ec6:	e004      	b.n	8000ed2 <traffic_set_fsm+0x182>
		break;
 8000ec8:	bf00      	nop
 8000eca:	e002      	b.n	8000ed2 <traffic_set_fsm+0x182>
		break;
 8000ecc:	bf00      	nop
 8000ece:	e000      	b.n	8000ed2 <traffic_set_fsm+0x182>
		break;
 8000ed0:	bf00      	nop
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000104 	.word	0x20000104

08000edc <traffic_fsm>:

/*----------------- global fsm -------------------------*/
void traffic_fsm() {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	switch(global_state) {
 8000ee0:	4b7a      	ldr	r3, [pc, #488]	; (80010cc <traffic_fsm+0x1f0>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3b0a      	subs	r3, #10
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	f200 80e6 	bhi.w	80010b8 <traffic_fsm+0x1dc>
 8000eec:	a201      	add	r2, pc, #4	; (adr r2, 8000ef4 <traffic_fsm+0x18>)
 8000eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef2:	bf00      	nop
 8000ef4:	08000f05 	.word	0x08000f05
 8000ef8:	08000f11 	.word	0x08000f11
 8000efc:	08000f83 	.word	0x08000f83
 8000f00:	08000fa7 	.word	0x08000fa7
	case INIT_MODE:
		led_clear_all();
 8000f04:	f000 fa86 	bl	8001414 <led_clear_all>
		global_state = AUTO_MODE;
 8000f08:	4b70      	ldr	r3, [pc, #448]	; (80010cc <traffic_fsm+0x1f0>)
 8000f0a:	220b      	movs	r2, #11
 8000f0c:	701a      	strb	r2, [r3, #0]
		break;
 8000f0e:	e0da      	b.n	80010c6 <traffic_fsm+0x1ea>

	//////////////////////////////////////////////////////
	case AUTO_MODE: //automatically control traffic light
		//TODO
		traffic_auto_fsm_A();
 8000f10:	f7ff fd94 	bl	8000a3c <traffic_auto_fsm_A>
		traffic_auto_fsm_B();
 8000f14:	f7ff fe1e 	bl	8000b54 <traffic_auto_fsm_B>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 f9e1 	bl	80012e0 <button_isPressed>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d02c      	beq.n	8000f7e <traffic_fsm+0xa2>
			led_clear_all();
 8000f24:	f000 fa76 	bl	8001414 <led_clear_all>
			global_state = MANUAL_MODE;
 8000f28:	4b68      	ldr	r3, [pc, #416]	; (80010cc <traffic_fsm+0x1f0>)
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	701a      	strb	r2, [r3, #0]
			duration_set(DUR_TRAFFIC, 0);
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 fa03 	bl	800133c <duration_set>
			switch (auto_A_state) { //manual mode with previous auto state
 8000f36:	4b66      	ldr	r3, [pc, #408]	; (80010d0 <traffic_fsm+0x1f4>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b17      	cmp	r3, #23
 8000f3c:	d01b      	beq.n	8000f76 <traffic_fsm+0x9a>
 8000f3e:	2b17      	cmp	r3, #23
 8000f40:	f300 80bc 	bgt.w	80010bc <traffic_fsm+0x1e0>
 8000f44:	2b15      	cmp	r3, #21
 8000f46:	d002      	beq.n	8000f4e <traffic_fsm+0x72>
 8000f48:	2b16      	cmp	r3, #22
 8000f4a:	d010      	beq.n	8000f6e <traffic_fsm+0x92>
			case AUTO_YELLOW: // traffic A = yellow
				manual_state = MN_YELLOW;
				break;
			}
		}
		break;
 8000f4c:	e0b6      	b.n	80010bc <traffic_fsm+0x1e0>
				switch (auto_B_state){
 8000f4e:	4b61      	ldr	r3, [pc, #388]	; (80010d4 <traffic_fsm+0x1f8>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b16      	cmp	r3, #22
 8000f54:	d002      	beq.n	8000f5c <traffic_fsm+0x80>
 8000f56:	2b17      	cmp	r3, #23
 8000f58:	d004      	beq.n	8000f64 <traffic_fsm+0x88>
				break;
 8000f5a:	e011      	b.n	8000f80 <traffic_fsm+0xa4>
					manual_state = MN_RED0;
 8000f5c:	4b5e      	ldr	r3, [pc, #376]	; (80010d8 <traffic_fsm+0x1fc>)
 8000f5e:	221f      	movs	r2, #31
 8000f60:	701a      	strb	r2, [r3, #0]
					break;
 8000f62:	e003      	b.n	8000f6c <traffic_fsm+0x90>
					manual_state = MN_RED1;
 8000f64:	4b5c      	ldr	r3, [pc, #368]	; (80010d8 <traffic_fsm+0x1fc>)
 8000f66:	2220      	movs	r2, #32
 8000f68:	701a      	strb	r2, [r3, #0]
					break;
 8000f6a:	bf00      	nop
				break;
 8000f6c:	e008      	b.n	8000f80 <traffic_fsm+0xa4>
				manual_state = MN_GREEN;
 8000f6e:	4b5a      	ldr	r3, [pc, #360]	; (80010d8 <traffic_fsm+0x1fc>)
 8000f70:	2221      	movs	r2, #33	; 0x21
 8000f72:	701a      	strb	r2, [r3, #0]
				break;
 8000f74:	e004      	b.n	8000f80 <traffic_fsm+0xa4>
				manual_state = MN_YELLOW;
 8000f76:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <traffic_fsm+0x1fc>)
 8000f78:	2222      	movs	r2, #34	; 0x22
 8000f7a:	701a      	strb	r2, [r3, #0]
				break;
 8000f7c:	e000      	b.n	8000f80 <traffic_fsm+0xa4>
		}
 8000f7e:	bf00      	nop
		break;
 8000f80:	e09c      	b.n	80010bc <traffic_fsm+0x1e0>

	////////////////////////////////////////////////////
	case MANUAL_MODE: // manually control traffic light
		//TODO
		traffic_manual_fsm();
 8000f82:	f7ff fe4d 	bl	8000c20 <traffic_manual_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f9aa 	bl	80012e0 <button_isPressed>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 8096 	beq.w	80010c0 <traffic_fsm+0x1e4>
			global_state = SET_MODE;
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <traffic_fsm+0x1f0>)
 8000f96:	220d      	movs	r2, #13
 8000f98:	701a      	strb	r2, [r3, #0]
			set_state = SET_INIT;
 8000f9a:	4b50      	ldr	r3, [pc, #320]	; (80010dc <traffic_fsm+0x200>)
 8000f9c:	2228      	movs	r2, #40	; 0x28
 8000f9e:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8000fa0:	f000 fa38 	bl	8001414 <led_clear_all>
		}
		break;
 8000fa4:	e08c      	b.n	80010c0 <traffic_fsm+0x1e4>

	//////////////////////////////////////////////////////
	case SET_MODE: //set duration for each led of traffic
		//TODO
		traffic_set_fsm();
 8000fa6:	f7ff fed3 	bl	8000d50 <traffic_set_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f998 	bl	80012e0 <button_isPressed>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d07e      	beq.n	80010b4 <traffic_fsm+0x1d8>
			global_state = AUTO_MODE;
 8000fb6:	4b45      	ldr	r3, [pc, #276]	; (80010cc <traffic_fsm+0x1f0>)
 8000fb8:	220b      	movs	r2, #11
 8000fba:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8000fbc:	f000 fa2a 	bl	8001414 <led_clear_all>
			timer_clear(TIMER_AUTO_A); //clear timer, prepare for auto mode
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fc6f 	bl	80018a4 <timer_clear>
			timer_clear(TIMER_AUTO_B); //clear timer, prepare for auto mode
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f000 fc6c 	bl	80018a4 <timer_clear>
			switch(manual_state) { //auto mode with previous manual state
 8000fcc:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <traffic_fsm+0x1fc>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	3b1f      	subs	r3, #31
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d876      	bhi.n	80010c4 <traffic_fsm+0x1e8>
 8000fd6:	a201      	add	r2, pc, #4	; (adr r2, 8000fdc <traffic_fsm+0x100>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000fed 	.word	0x08000fed
 8000fe0:	0800101f 	.word	0x0800101f
 8000fe4:	08001051 	.word	0x08001051
 8000fe8:	08001083 	.word	0x08001083
			///////////////////////////////////////////////////
			case MN_RED0: //traffic A: red; traffic B: green
				auto_A_state = AUTO_RED;
 8000fec:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <traffic_fsm+0x1f4>)
 8000fee:	2215      	movs	r2, #21
 8000ff0:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <traffic_fsm+0x204>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 fc21 	bl	8001840 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <traffic_fsm+0x204>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f999 	bl	800133c <duration_set>

				auto_B_state = AUTO_GREEN;
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <traffic_fsm+0x1f8>)
 800100c:	2216      	movs	r2, #22
 800100e:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8001010:	4b33      	ldr	r3, [pc, #204]	; (80010e0 <traffic_fsm+0x204>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	4619      	mov	r1, r3
 8001016:	2001      	movs	r0, #1
 8001018:	f000 fc12 	bl	8001840 <timer_setDuration>
				break;
 800101c:	e04b      	b.n	80010b6 <traffic_fsm+0x1da>
			///////////////////////////////////////////////////
			case MN_RED1: //traffic A: red; traffic B: yellow
				auto_A_state = AUTO_RED;
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <traffic_fsm+0x1f4>)
 8001020:	2215      	movs	r2, #21
 8001022:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8001024:	4b2e      	ldr	r3, [pc, #184]	; (80010e0 <traffic_fsm+0x204>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4619      	mov	r1, r3
 800102a:	2000      	movs	r0, #0
 800102c:	f000 fc08 	bl	8001840 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <traffic_fsm+0x204>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4619      	mov	r1, r3
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f980 	bl	800133c <duration_set>

				auto_B_state = AUTO_YELLOW;
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <traffic_fsm+0x1f8>)
 800103e:	2217      	movs	r2, #23
 8001040:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <traffic_fsm+0x204>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4619      	mov	r1, r3
 8001048:	2001      	movs	r0, #1
 800104a:	f000 fbf9 	bl	8001840 <timer_setDuration>
				break;
 800104e:	e032      	b.n	80010b6 <traffic_fsm+0x1da>

			///////////////////////////////////////////////////
			case MN_GREEN: //traffic A: green; traffic B: red
				auto_A_state = AUTO_GREEN;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <traffic_fsm+0x1f4>)
 8001052:	2216      	movs	r2, #22
 8001054:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <traffic_fsm+0x204>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4619      	mov	r1, r3
 800105c:	2000      	movs	r0, #0
 800105e:	f000 fbef 	bl	8001840 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <traffic_fsm+0x204>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4619      	mov	r1, r3
 8001068:	2000      	movs	r0, #0
 800106a:	f000 f967 	bl	800133c <duration_set>

				auto_B_state = AUTO_RED;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <traffic_fsm+0x1f8>)
 8001070:	2215      	movs	r2, #21
 8001072:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <traffic_fsm+0x204>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	2001      	movs	r0, #1
 800107c:	f000 fbe0 	bl	8001840 <timer_setDuration>
				break;
 8001080:	e019      	b.n	80010b6 <traffic_fsm+0x1da>
			///////////////////////////////////////////////////
			case MN_YELLOW: //traffic A: yellow; traffic B: red
				auto_A_state = AUTO_YELLOW;
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <traffic_fsm+0x1f4>)
 8001084:	2217      	movs	r2, #23
 8001086:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <traffic_fsm+0x204>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	4619      	mov	r1, r3
 800108e:	2000      	movs	r0, #0
 8001090:	f000 fbd6 	bl	8001840 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <traffic_fsm+0x204>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	4619      	mov	r1, r3
 800109a:	2000      	movs	r0, #0
 800109c:	f000 f94e 	bl	800133c <duration_set>

				auto_B_state = AUTO_RED;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <traffic_fsm+0x1f8>)
 80010a2:	2215      	movs	r2, #21
 80010a4:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <traffic_fsm+0x204>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	4619      	mov	r1, r3
 80010ac:	2001      	movs	r0, #1
 80010ae:	f000 fbc7 	bl	8001840 <timer_setDuration>
				break;
 80010b2:	e000      	b.n	80010b6 <traffic_fsm+0x1da>
			}
		}
 80010b4:	bf00      	nop
		break;
 80010b6:	e005      	b.n	80010c4 <traffic_fsm+0x1e8>

	///////////////////////////////////////////////
	default:
		break;
 80010b8:	bf00      	nop
 80010ba:	e004      	b.n	80010c6 <traffic_fsm+0x1ea>
		break;
 80010bc:	bf00      	nop
 80010be:	e002      	b.n	80010c6 <traffic_fsm+0x1ea>
		break;
 80010c0:	bf00      	nop
 80010c2:	e000      	b.n	80010c6 <traffic_fsm+0x1ea>
		break;
 80010c4:	bf00      	nop
	}
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000100 	.word	0x20000100
 80010d0:	20000101 	.word	0x20000101
 80010d4:	20000102 	.word	0x20000102
 80010d8:	20000103 	.word	0x20000103
 80010dc:	20000104 	.word	0x20000104
 80010e0:	20000004 	.word	0x20000004

080010e4 <global_get_totalDuration>:
uint8_t pd_led_state = 0;

//function for duration
uint32_t trafficDuration[3] = {5000, 3000, 2000};

uint32_t global_get_totalDuration() {
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	return trafficDuration[0] + trafficDuration[1] + trafficDuration[2];
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <global_get_totalDuration+0x1c>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <global_get_totalDuration+0x1c>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	441a      	add	r2, r3
 80010f2:	4b03      	ldr	r3, [pc, #12]	; (8001100 <global_get_totalDuration+0x1c>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	4413      	add	r3, r2
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000004 	.word	0x20000004

08001104 <button_reading>:

int TimeOutForKeyPress[MAX_BUTTON] = {LONG_DURATION};
int flagBtn[MAX_BUTTON] = {0};
int flagBtnLong[MAX_BUTTON] = {0};

void button_reading(void){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++){
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	e0a2      	b.n	8001256 <button_reading+0x152>
		KeyReg2[i] = KeyReg1[i];
 8001110:	4a55      	ldr	r2, [pc, #340]	; (8001268 <button_reading+0x164>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001118:	4954      	ldr	r1, [pc, #336]	; (800126c <button_reading+0x168>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8001120:	4a53      	ldr	r2, [pc, #332]	; (8001270 <button_reading+0x16c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001128:	494f      	ldr	r1, [pc, #316]	; (8001268 <button_reading+0x164>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d836      	bhi.n	80011a4 <button_reading+0xa0>
 8001136:	a201      	add	r2, pc, #4	; (adr r2, 800113c <button_reading+0x38>)
 8001138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113c:	0800114d 	.word	0x0800114d
 8001140:	08001163 	.word	0x08001163
 8001144:	08001179 	.word	0x08001179
 8001148:	0800118f 	.word	0x0800118f
		switch (i){ //check which button is being read now
		case BTN_1:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_1_Pin);
 800114c:	2102      	movs	r1, #2
 800114e:	4849      	ldr	r0, [pc, #292]	; (8001274 <button_reading+0x170>)
 8001150:	f000 ff32 	bl	8001fb8 <HAL_GPIO_ReadPin>
 8001154:	4603      	mov	r3, r0
 8001156:	4619      	mov	r1, r3
 8001158:	4a45      	ldr	r2, [pc, #276]	; (8001270 <button_reading+0x16c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8001160:	e021      	b.n	80011a6 <button_reading+0xa2>
		case BTN_2:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_2_Pin);
 8001162:	2110      	movs	r1, #16
 8001164:	4843      	ldr	r0, [pc, #268]	; (8001274 <button_reading+0x170>)
 8001166:	f000 ff27 	bl	8001fb8 <HAL_GPIO_ReadPin>
 800116a:	4603      	mov	r3, r0
 800116c:	4619      	mov	r1, r3
 800116e:	4a40      	ldr	r2, [pc, #256]	; (8001270 <button_reading+0x16c>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8001176:	e016      	b.n	80011a6 <button_reading+0xa2>
		case BTN_3:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, BTN_3_Pin);
 8001178:	2101      	movs	r1, #1
 800117a:	483f      	ldr	r0, [pc, #252]	; (8001278 <button_reading+0x174>)
 800117c:	f000 ff1c 	bl	8001fb8 <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	4619      	mov	r1, r3
 8001184:	4a3a      	ldr	r2, [pc, #232]	; (8001270 <button_reading+0x16c>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800118c:	e00b      	b.n	80011a6 <button_reading+0xa2>
		case BTN_PD:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, PD_BTN_Pin);
 800118e:	2101      	movs	r1, #1
 8001190:	4838      	ldr	r0, [pc, #224]	; (8001274 <button_reading+0x170>)
 8001192:	f000 ff11 	bl	8001fb8 <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
 8001198:	4619      	mov	r1, r3
 800119a:	4a35      	ldr	r2, [pc, #212]	; (8001270 <button_reading+0x16c>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80011a2:	e000      	b.n	80011a6 <button_reading+0xa2>
		default:
			break;
 80011a4:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80011a6:	4a30      	ldr	r2, [pc, #192]	; (8001268 <button_reading+0x164>)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ae:	4930      	ldr	r1, [pc, #192]	; (8001270 <button_reading+0x16c>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d14a      	bne.n	8001250 <button_reading+0x14c>
 80011ba:	4a2b      	ldr	r2, [pc, #172]	; (8001268 <button_reading+0x164>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011c2:	492a      	ldr	r1, [pc, #168]	; (800126c <button_reading+0x168>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d140      	bne.n	8001250 <button_reading+0x14c>
			if (KeyReg2[i] != KeyReg3[i]){
 80011ce:	4a27      	ldr	r2, [pc, #156]	; (800126c <button_reading+0x168>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011d6:	4929      	ldr	r1, [pc, #164]	; (800127c <button_reading+0x178>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d022      	beq.n	8001228 <button_reading+0x124>
				KeyReg3[i] = KeyReg2[i];
 80011e2:	4a22      	ldr	r2, [pc, #136]	; (800126c <button_reading+0x168>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ea:	4924      	ldr	r1, [pc, #144]	; (800127c <button_reading+0x178>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == IS_PRESSED){
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <button_reading+0x178>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <button_reading+0x10e>
					TimeOutForKeyPress[i] = LONG_DURATION;
 80011fe:	4a20      	ldr	r2, [pc, #128]	; (8001280 <button_reading+0x17c>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f83e 	bl	800128c <subKeyProcess>
 8001210:	e01e      	b.n	8001250 <button_reading+0x14c>
				}
				else{
					flagBtnLong[i] = 0;
 8001212:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <button_reading+0x180>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2100      	movs	r1, #0
 8001218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					Over1Sec[i] = 0;
 800121c:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <button_reading+0x184>)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2100      	movs	r1, #0
 8001222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001226:	e013      	b.n	8001250 <button_reading+0x14c>
				}
			} else {
				TimeOutForKeyPress[i] --;
 8001228:	4a15      	ldr	r2, [pc, #84]	; (8001280 <button_reading+0x17c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	4913      	ldr	r1, [pc, #76]	; (8001280 <button_reading+0x17c>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800123a:	4a11      	ldr	r2, [pc, #68]	; (8001280 <button_reading+0x17c>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d104      	bne.n	8001250 <button_reading+0x14c>
					KeyReg3[i] = IS_RELEASED;
 8001246:	4a0d      	ldr	r2, [pc, #52]	; (800127c <button_reading+0x178>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2101      	movs	r1, #1
 800124c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3301      	adds	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b03      	cmp	r3, #3
 800125a:	f77f af59 	ble.w	8001110 <button_reading+0xc>
				}
			}
		}
	}
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000020 	.word	0x20000020
 800126c:	20000030 	.word	0x20000030
 8001270:	20000010 	.word	0x20000010
 8001274:	40010800 	.word	0x40010800
 8001278:	40010c00 	.word	0x40010c00
 800127c:	20000040 	.word	0x20000040
 8001280:	20000050 	.word	0x20000050
 8001284:	20000128 	.word	0x20000128
 8001288:	20000108 	.word	0x20000108

0800128c <subKeyProcess>:

void subKeyProcess(int index){
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	flagBtn[index] = 1;
 8001294:	4a0f      	ldr	r2, [pc, #60]	; (80012d4 <subKeyProcess+0x48>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2101      	movs	r1, #1
 800129a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (Over1Sec[index] == 0){
 800129e:	4a0e      	ldr	r2, [pc, #56]	; (80012d8 <subKeyProcess+0x4c>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d105      	bne.n	80012b6 <subKeyProcess+0x2a>
		Over1Sec[index] = 1;
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <subKeyProcess+0x4c>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2101      	movs	r1, #1
 80012b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else{
		flagBtnLong[index] = 1;
		flagBtn[index] = 0;
	}
}
 80012b4:	e009      	b.n	80012ca <subKeyProcess+0x3e>
		flagBtnLong[index] = 1;
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <subKeyProcess+0x50>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2101      	movs	r1, #1
 80012bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagBtn[index] = 0;
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <subKeyProcess+0x48>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2100      	movs	r1, #0
 80012c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	20000118 	.word	0x20000118
 80012d8:	20000108 	.word	0x20000108
 80012dc:	20000128 	.word	0x20000128

080012e0 <button_isPressed>:

int button_isPressed(int index){
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	if (flagBtn[index] == 1){
 80012e8:	4a09      	ldr	r2, [pc, #36]	; (8001310 <button_isPressed+0x30>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d106      	bne.n	8001302 <button_isPressed+0x22>
		flagBtn[index] = 0;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <button_isPressed+0x30>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2100      	movs	r1, #0
 80012fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <button_isPressed+0x24>
	}
	return 0;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000118 	.word	0x20000118

08001314 <button_isLongPressed>:

int button_isLongPressed(int index){
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	return (flagBtnLong[index] == 1);
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <button_isLongPressed+0x24>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	2b01      	cmp	r3, #1
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	20000128 	.word	0x20000128

0800133c <duration_set>:

void duration_init() {
	timer_setDuration(TIMER_DUR, 10);
	durationList[0] = durationList[1] = 0; //0s
}
void duration_set(uint8_t index, uint32_t duration_ms) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
	durationList[index] = duration_ms / DUR_CYCLE; //unit of time: milisecond
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	4905      	ldr	r1, [pc, #20]	; (8001364 <duration_set+0x28>)
 800134e:	fba1 1202 	umull	r1, r2, r1, r2
 8001352:	08d2      	lsrs	r2, r2, #3
 8001354:	4904      	ldr	r1, [pc, #16]	; (8001368 <duration_set+0x2c>)
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	cccccccd 	.word	0xcccccccd
 8001368:	20000148 	.word	0x20000148

0800136c <duration_get>:

uint32_t duration_get(uint8_t index) { //return value of duration in second (not in milisecond)
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
	uint32_t extra_duration = ((durationList[index] * DUR_CYCLE) % (DUR_UNIT)) ? 1 : 0;
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <duration_get+0x64>)
 800137a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	461a      	mov	r2, r3
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <duration_get+0x68>)
 800138a:	fba3 1302 	umull	r1, r3, r3, r2
 800138e:	099b      	lsrs	r3, r3, #6
 8001390:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001394:	fb01 f303 	mul.w	r3, r1, r3
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	bf14      	ite	ne
 800139e:	2301      	movne	r3, #1
 80013a0:	2300      	moveq	r3, #0
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	60fb      	str	r3, [r7, #12]
	return (durationList[index] * DUR_CYCLE / DUR_UNIT) + extra_duration;
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <duration_get+0x64>)
 80013aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <duration_get+0x68>)
 80013ba:	fba3 2302 	umull	r2, r3, r3, r2
 80013be:	099a      	lsrs	r2, r3, #6
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000148 	.word	0x20000148
 80013d4:	10624dd3 	.word	0x10624dd3

080013d8 <duration_run>:

void duration_run() { //use timer interupt to auto increase
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	durationList[0] = (durationList[0] == 0) ? 0 : durationList[0] - 1;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <duration_run+0x38>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <duration_run+0x14>
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <duration_run+0x38>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	e000      	b.n	80013ee <duration_run+0x16>
 80013ec:	2300      	movs	r3, #0
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <duration_run+0x38>)
 80013f0:	6013      	str	r3, [r2, #0]
	durationList[1] = (durationList[1] == 0) ? 0 : durationList[1] - 1;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <duration_run+0x38>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <duration_run+0x2a>
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <duration_run+0x38>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	e000      	b.n	8001404 <duration_run+0x2c>
 8001402:	2300      	movs	r3, #0
 8001404:	4a02      	ldr	r2, [pc, #8]	; (8001410 <duration_run+0x38>)
 8001406:	6053      	str	r3, [r2, #4]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	20000148 	.word	0x20000148

08001414 <led_clear_all>:
#include "main.h"
#include "u_global.h"

#ifdef BOARD
//clear all led
void led_clear_all() { //00
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <led_clear_all+0x20>)
 8001420:	f000 fde1 	bl	8001fe6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800142a:	4803      	ldr	r0, [pc, #12]	; (8001438 <led_clear_all+0x24>)
 800142c:	f000 fddb 	bl	8001fe6 <HAL_GPIO_WritePin>
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00

0800143c <led_turn_on>:

//turn specific led with specific color
void led_turn_on(uint8_t led_index, uint8_t led_type) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	460a      	mov	r2, r1
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	4613      	mov	r3, r2
 800144a:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b07      	cmp	r3, #7
 8001450:	d063      	beq.n	800151a <led_turn_on+0xde>
 8001452:	2b07      	cmp	r3, #7
 8001454:	f300 8093 	bgt.w	800157e <led_turn_on+0x142>
 8001458:	2b05      	cmp	r3, #5
 800145a:	d002      	beq.n	8001462 <led_turn_on+0x26>
 800145c:	2b06      	cmp	r3, #6
 800145e:	d030      	beq.n	80014c2 <led_turn_on+0x86>
			break;
		}
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 8001460:	e08d      	b.n	800157e <led_turn_on+0x142>
		switch (led_type) {
 8001462:	79bb      	ldrb	r3, [r7, #6]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d01f      	beq.n	80014a8 <led_turn_on+0x6c>
 8001468:	2b02      	cmp	r3, #2
 800146a:	f300 808a 	bgt.w	8001582 <led_turn_on+0x146>
 800146e:	2b00      	cmp	r3, #0
 8001470:	d002      	beq.n	8001478 <led_turn_on+0x3c>
 8001472:	2b01      	cmp	r3, #1
 8001474:	d00c      	beq.n	8001490 <led_turn_on+0x54>
		break;
 8001476:	e084      	b.n	8001582 <led_turn_on+0x146>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800147e:	4845      	ldr	r0, [pc, #276]	; (8001594 <led_turn_on+0x158>)
 8001480:	f000 fdb1 	bl	8001fe6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_RESET);
 8001484:	2200      	movs	r2, #0
 8001486:	2108      	movs	r1, #8
 8001488:	4843      	ldr	r0, [pc, #268]	; (8001598 <led_turn_on+0x15c>)
 800148a:	f000 fdac 	bl	8001fe6 <HAL_GPIO_WritePin>
			break;
 800148e:	e017      	b.n	80014c0 <led_turn_on+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001496:	483f      	ldr	r0, [pc, #252]	; (8001594 <led_turn_on+0x158>)
 8001498:	f000 fda5 	bl	8001fe6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2108      	movs	r1, #8
 80014a0:	483d      	ldr	r0, [pc, #244]	; (8001598 <led_turn_on+0x15c>)
 80014a2:	f000 fda0 	bl	8001fe6 <HAL_GPIO_WritePin>
			break;
 80014a6:	e00b      	b.n	80014c0 <led_turn_on+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	4839      	ldr	r0, [pc, #228]	; (8001594 <led_turn_on+0x158>)
 80014b0:	f000 fd99 	bl	8001fe6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	2108      	movs	r1, #8
 80014b8:	4837      	ldr	r0, [pc, #220]	; (8001598 <led_turn_on+0x15c>)
 80014ba:	f000 fd94 	bl	8001fe6 <HAL_GPIO_WritePin>
			break;
 80014be:	bf00      	nop
		break;
 80014c0:	e05f      	b.n	8001582 <led_turn_on+0x146>
		switch (led_type) {
 80014c2:	79bb      	ldrb	r3, [r7, #6]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d01c      	beq.n	8001502 <led_turn_on+0xc6>
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	dc5c      	bgt.n	8001586 <led_turn_on+0x14a>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <led_turn_on+0x9a>
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d00b      	beq.n	80014ec <led_turn_on+0xb0>
		break;
 80014d4:	e057      	b.n	8001586 <led_turn_on+0x14a>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_SET);
 80014d6:	2201      	movs	r2, #1
 80014d8:	2120      	movs	r1, #32
 80014da:	482f      	ldr	r0, [pc, #188]	; (8001598 <led_turn_on+0x15c>)
 80014dc:	f000 fd83 	bl	8001fe6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2110      	movs	r1, #16
 80014e4:	482c      	ldr	r0, [pc, #176]	; (8001598 <led_turn_on+0x15c>)
 80014e6:	f000 fd7e 	bl	8001fe6 <HAL_GPIO_WritePin>
			break;
 80014ea:	e015      	b.n	8001518 <led_turn_on+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2120      	movs	r1, #32
 80014f0:	4829      	ldr	r0, [pc, #164]	; (8001598 <led_turn_on+0x15c>)
 80014f2:	f000 fd78 	bl	8001fe6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2110      	movs	r1, #16
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <led_turn_on+0x15c>)
 80014fc:	f000 fd73 	bl	8001fe6 <HAL_GPIO_WritePin>
			break;
 8001500:	e00a      	b.n	8001518 <led_turn_on+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_SET);
 8001502:	2201      	movs	r2, #1
 8001504:	2120      	movs	r1, #32
 8001506:	4824      	ldr	r0, [pc, #144]	; (8001598 <led_turn_on+0x15c>)
 8001508:	f000 fd6d 	bl	8001fe6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	2110      	movs	r1, #16
 8001510:	4821      	ldr	r0, [pc, #132]	; (8001598 <led_turn_on+0x15c>)
 8001512:	f000 fd68 	bl	8001fe6 <HAL_GPIO_WritePin>
			break;
 8001516:	bf00      	nop
		break;
 8001518:	e035      	b.n	8001586 <led_turn_on+0x14a>
		switch (led_type) {
 800151a:	79bb      	ldrb	r3, [r7, #6]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d020      	beq.n	8001562 <led_turn_on+0x126>
 8001520:	2b02      	cmp	r3, #2
 8001522:	dc32      	bgt.n	800158a <led_turn_on+0x14e>
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <led_turn_on+0xf2>
 8001528:	2b01      	cmp	r3, #1
 800152a:	d00d      	beq.n	8001548 <led_turn_on+0x10c>
		break;
 800152c:	e02d      	b.n	800158a <led_turn_on+0x14e>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001534:	4818      	ldr	r0, [pc, #96]	; (8001598 <led_turn_on+0x15c>)
 8001536:	f000 fd56 	bl	8001fe6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001540:	4814      	ldr	r0, [pc, #80]	; (8001594 <led_turn_on+0x158>)
 8001542:	f000 fd50 	bl	8001fe6 <HAL_GPIO_WritePin>
			break;
 8001546:	e019      	b.n	800157c <led_turn_on+0x140>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4812      	ldr	r0, [pc, #72]	; (8001598 <led_turn_on+0x15c>)
 8001550:	f000 fd49 	bl	8001fe6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155a:	480e      	ldr	r0, [pc, #56]	; (8001594 <led_turn_on+0x158>)
 800155c:	f000 fd43 	bl	8001fe6 <HAL_GPIO_WritePin>
			break;
 8001560:	e00c      	b.n	800157c <led_turn_on+0x140>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <led_turn_on+0x15c>)
 800156a:	f000 fd3c 	bl	8001fe6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <led_turn_on+0x158>)
 8001576:	f000 fd36 	bl	8001fe6 <HAL_GPIO_WritePin>
			break;
 800157a:	bf00      	nop
		break;
 800157c:	e005      	b.n	800158a <led_turn_on+0x14e>
		break;
 800157e:	bf00      	nop
 8001580:	e004      	b.n	800158c <led_turn_on+0x150>
		break;
 8001582:	bf00      	nop
 8001584:	e002      	b.n	800158c <led_turn_on+0x150>
		break;
 8001586:	bf00      	nop
 8001588:	e000      	b.n	800158c <led_turn_on+0x150>
		break;
 800158a:	bf00      	nop
	}
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40010800 	.word	0x40010800
 8001598:	40010c00 	.word	0x40010c00

0800159c <led_turn_off>:

//turn of specific led
void led_turn_off(uint8_t led_index) { // 00
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	switch (led_index) {
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	2b07      	cmp	r3, #7
 80015aa:	d01d      	beq.n	80015e8 <led_turn_off+0x4c>
 80015ac:	2b07      	cmp	r3, #7
 80015ae:	dc28      	bgt.n	8001602 <led_turn_off+0x66>
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d002      	beq.n	80015ba <led_turn_off+0x1e>
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	d00c      	beq.n	80015d2 <led_turn_off+0x36>
		HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 80015b8:	e023      	b.n	8001602 <led_turn_off+0x66>
		HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c0:	4812      	ldr	r0, [pc, #72]	; (800160c <led_turn_off+0x70>)
 80015c2:	f000 fd10 	bl	8001fe6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2108      	movs	r1, #8
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <led_turn_off+0x74>)
 80015cc:	f000 fd0b 	bl	8001fe6 <HAL_GPIO_WritePin>
		break;
 80015d0:	e018      	b.n	8001604 <led_turn_off+0x68>
		HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2120      	movs	r1, #32
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <led_turn_off+0x74>)
 80015d8:	f000 fd05 	bl	8001fe6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	2110      	movs	r1, #16
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <led_turn_off+0x74>)
 80015e2:	f000 fd00 	bl	8001fe6 <HAL_GPIO_WritePin>
		break;
 80015e6:	e00d      	b.n	8001604 <led_turn_off+0x68>
		HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ee:	4808      	ldr	r0, [pc, #32]	; (8001610 <led_turn_off+0x74>)
 80015f0:	f000 fcf9 	bl	8001fe6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fa:	4804      	ldr	r0, [pc, #16]	; (800160c <led_turn_off+0x70>)
 80015fc:	f000 fcf3 	bl	8001fe6 <HAL_GPIO_WritePin>
		break;
 8001600:	e000      	b.n	8001604 <led_turn_off+0x68>
		break;
 8001602:	bf00      	nop
	}
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40010800 	.word	0x40010800
 8001610:	40010c00 	.word	0x40010c00

08001614 <led_pedestrian_blinky>:

//blink led pedestrian
void led_pedestrian_blinky(uint8_t led_type) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	if (pd_led_state == PD_LED_ON) led_turn_on(PEDESTRIAN, led_type);
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <led_pedestrian_blinky+0x2c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b47      	cmp	r3, #71	; 0x47
 8001624:	d105      	bne.n	8001632 <led_pedestrian_blinky+0x1e>
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4619      	mov	r1, r3
 800162a:	2007      	movs	r0, #7
 800162c:	f7ff ff06 	bl	800143c <led_turn_on>
	else led_turn_off(PEDESTRIAN);
}
 8001630:	e002      	b.n	8001638 <led_pedestrian_blinky+0x24>
	else led_turn_off(PEDESTRIAN);
 8001632:	2007      	movs	r0, #7
 8001634:	f7ff ffb2 	bl	800159c <led_turn_off>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000106 	.word	0x20000106

08001644 <timer_unit_construct>:

struct timer_list timerList;
uint8_t	timerFlag[MAX_TIMER] = {0};

/*-------------- unit function -------------------*/
struct timer_unit* timer_unit_construct(uint8_t index, uint32_t duration) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = malloc(sizeof (struct timer_unit)); //dynamic allocating a timer unit
 8001650:	200c      	movs	r0, #12
 8001652:	f002 f9f7 	bl	8003a44 <malloc>
 8001656:	4603      	mov	r3, r0
 8001658:	60fb      	str	r3, [r7, #12]
	if (newUnit == NULL) {
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <timer_unit_construct+0x20>
		return NULL;
 8001660:	2300      	movs	r3, #0
 8001662:	e009      	b.n	8001678 <timer_unit_construct+0x34>
	}
	newUnit->index = index;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	701a      	strb	r2, [r3, #0]
	newUnit->duration = duration;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	605a      	str	r2, [r3, #4]
	newUnit->nextTimer = NULL;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
	return newUnit;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <timer_unit_destruct>:

void timer_unit_destruct(struct timer_unit *unit) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	free(unit);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f002 f9e3 	bl	8003a54 <free>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <timer_list_add>:

/*-------------- list function -------------------*/
void timer_list_add(struct timer_unit *unit){
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
	//list full
	if (timerList.size == MAX_TIMER) return;
 80016a0:	4b38      	ldr	r3, [pc, #224]	; (8001784 <timer_list_add+0xec>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d068      	beq.n	800177a <timer_list_add+0xe2>

	//list empty
	if (timerList.size == 0) {
 80016a8:	4b36      	ldr	r3, [pc, #216]	; (8001784 <timer_list_add+0xec>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <timer_list_add+0x2c>
		timerList.head = unit;
 80016b0:	4a34      	ldr	r2, [pc, #208]	; (8001784 <timer_list_add+0xec>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6053      	str	r3, [r2, #4]
		timerList.size++;
 80016b6:	4b33      	ldr	r3, [pc, #204]	; (8001784 <timer_list_add+0xec>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	3301      	adds	r3, #1
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b31      	ldr	r3, [pc, #196]	; (8001784 <timer_list_add+0xec>)
 80016c0:	701a      	strb	r2, [r3, #0]
		return;
 80016c2:	e05b      	b.n	800177c <timer_list_add+0xe4>
	}

	//list has at least 1 item
	struct timer_unit *curr = timerList.head,
 80016c4:	4b2f      	ldr	r3, [pc, #188]	; (8001784 <timer_list_add+0xec>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	617b      	str	r3, [r7, #20]
					  *prev = NULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
	uint32_t totalDuration = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
	while(curr != NULL) { //iterating the list
 80016d2:	e00e      	b.n	80016f2 <timer_list_add+0x5a>
		totalDuration += curr->duration;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
		if (unit->duration < totalDuration) break;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d808      	bhi.n	80016fa <timer_list_add+0x62>
		prev = curr;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
		curr = curr->nextTimer;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	617b      	str	r3, [r7, #20]
	while(curr != NULL) { //iterating the list
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ed      	bne.n	80016d4 <timer_list_add+0x3c>
 80016f8:	e000      	b.n	80016fc <timer_list_add+0x64>
		if (unit->duration < totalDuration) break;
 80016fa:	bf00      	nop
	}
	if (prev == NULL) { //new unit is added before the head
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d113      	bne.n	800172a <timer_list_add+0x92>
		unit->nextTimer = curr;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	609a      	str	r2, [r3, #8]
		curr->duration -= unit->duration;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	1ad2      	subs	r2, r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	605a      	str	r2, [r3, #4]
		timerList.head = unit;
 8001716:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <timer_list_add+0xec>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6053      	str	r3, [r2, #4]
		timerList.size++;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <timer_list_add+0xec>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	3301      	adds	r3, #1
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <timer_list_add+0xec>)
 8001726:	701a      	strb	r2, [r3, #0]
		return;
 8001728:	e028      	b.n	800177c <timer_list_add+0xe4>
	}
	prev->nextTimer = unit;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	609a      	str	r2, [r3, #8]
	unit->nextTimer = curr;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	609a      	str	r2, [r3, #8]
	if (curr == NULL){
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d106      	bne.n	800174a <timer_list_add+0xb2>
		unit->duration -= totalDuration;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad2      	subs	r2, r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	e010      	b.n	800176c <timer_list_add+0xd4>
	}
	else{
		uint32_t tmp = unit->duration;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	60bb      	str	r3, [r7, #8]
		unit->duration -= (totalDuration - curr->duration);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1acb      	subs	r3, r1, r3
 800175c:	441a      	add	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	605a      	str	r2, [r3, #4]
		curr->duration = (totalDuration - tmp);
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad2      	subs	r2, r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	605a      	str	r2, [r3, #4]
	}
	timerList.size++;
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <timer_list_add+0xec>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <timer_list_add+0xec>)
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e000      	b.n	800177c <timer_list_add+0xe4>
	if (timerList.size == MAX_TIMER) return;
 800177a:	bf00      	nop
}
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	20000210 	.word	0x20000210

08001788 <timer_list_pop>:

void timer_list_pop(){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	 //list empty
	if (timerList.size == 0) return;
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <timer_list_pop+0x38>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d010      	beq.n	80017b8 <timer_list_pop+0x30>

	struct timer_unit *delUnit = timerList.head;
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <timer_list_pop+0x38>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	607b      	str	r3, [r7, #4]
	timerList.head = delUnit->nextTimer;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <timer_list_pop+0x38>)
 80017a2:	6053      	str	r3, [r2, #4]
	timer_unit_destruct(delUnit);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff6b 	bl	8001680 <timer_unit_destruct>
	timerList.size--;
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <timer_list_pop+0x38>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <timer_list_pop+0x38>)
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e000      	b.n	80017ba <timer_list_pop+0x32>
	if (timerList.size == 0) return;
 80017b8:	bf00      	nop
}
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000210 	.word	0x20000210

080017c4 <timer_init>:

/*-------------- global function -------------------*/
void timer_init(){
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	timerList.head = NULL;
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <timer_init+0x18>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
	timerList.size = 0;
 80017ce:	4b03      	ldr	r3, [pc, #12]	; (80017dc <timer_init+0x18>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	20000210 	.word	0x20000210

080017e0 <timer_run>:

void timer_run(){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
	if (timerList.size == 0) return;
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <timer_run+0x58>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d020      	beq.n	8001830 <timer_run+0x50>
	if (timerList.head->duration >= 0) {
		timerList.head->duration--;
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <timer_run+0x58>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	3a01      	subs	r2, #1
 80017f6:	605a      	str	r2, [r3, #4]
		if (timerList.head->duration <= 0) {
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <timer_run+0x58>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d117      	bne.n	8001832 <timer_run+0x52>
			uint8_t index = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	71fb      	strb	r3, [r7, #7]
			while(timerList.size && timerList.head->duration == 0) {
 8001806:	e009      	b.n	800181c <timer_run+0x3c>
				index = timerList.head->index;
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <timer_run+0x58>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
				timerFlag[index] = 1;
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <timer_run+0x5c>)
 8001814:	2101      	movs	r1, #1
 8001816:	54d1      	strb	r1, [r2, r3]
				timer_list_pop();
 8001818:	f7ff ffb6 	bl	8001788 <timer_list_pop>
			while(timerList.size && timerList.head->duration == 0) {
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <timer_run+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <timer_run+0x52>
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <timer_run+0x58>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0ec      	beq.n	8001808 <timer_run+0x28>
 800182e:	e000      	b.n	8001832 <timer_run+0x52>
	if (timerList.size == 0) return;
 8001830:	bf00      	nop
			}
		}
	}
}
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000210 	.word	0x20000210
 800183c:	20000138 	.word	0x20000138

08001840 <timer_setDuration>:

void timer_setDuration(uint8_t index, uint32_t duration) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = timer_unit_construct(index, duration/CYCLE);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <timer_setDuration+0x30>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4611      	mov	r1, r2
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fef2 	bl	8001644 <timer_unit_construct>
 8001860:	60f8      	str	r0, [r7, #12]
	timer_list_add(newUnit);
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f7ff ff18 	bl	8001698 <timer_list_add>
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	cccccccd 	.word	0xcccccccd

08001874 <timer_checkFlag>:

uint8_t	timer_checkFlag(uint8_t index) {
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
	if (timerFlag[index] == 1) {
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4a07      	ldr	r2, [pc, #28]	; (80018a0 <timer_checkFlag+0x2c>)
 8001882:	5cd3      	ldrb	r3, [r2, r3]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <timer_checkFlag+0x20>
		timerFlag[index] = 0;
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <timer_checkFlag+0x2c>)
 800188c:	2100      	movs	r1, #0
 800188e:	54d1      	strb	r1, [r2, r3]
		return 1;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <timer_checkFlag+0x22>
	}
	return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000138 	.word	0x20000138

080018a4 <timer_clear>:

void timer_clear(uint8_t index) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
//	uint32_t totalDuration = 0;
	timerFlag[index] = 0;
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4a20      	ldr	r2, [pc, #128]	; (8001934 <timer_clear+0x90>)
 80018b2:	2100      	movs	r1, #0
 80018b4:	54d1      	strb	r1, [r2, r3]
	struct timer_unit *curr = timerList.head,
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <timer_clear+0x94>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	60fb      	str	r3, [r7, #12]
			          *prev = NULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
	while (curr != NULL) {
 80018c0:	e009      	b.n	80018d6 <timer_clear+0x32>
		if (curr->index == index) break;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	79fa      	ldrb	r2, [r7, #7]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d008      	beq.n	80018de <timer_clear+0x3a>

//		totalDuration += curr->duration;
		prev = curr;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	60bb      	str	r3, [r7, #8]
		curr = curr->nextTimer;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	60fb      	str	r3, [r7, #12]
	while (curr != NULL) {
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f2      	bne.n	80018c2 <timer_clear+0x1e>
 80018dc:	e000      	b.n	80018e0 <timer_clear+0x3c>
		if (curr->index == index) break;
 80018de:	bf00      	nop
	}

	if (curr == NULL) return;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d022      	beq.n	800192c <timer_clear+0x88>
	if (prev == NULL) { //item at the head of list
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d104      	bne.n	80018f6 <timer_clear+0x52>
		timerList.head = curr->nextTimer;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a11      	ldr	r2, [pc, #68]	; (8001938 <timer_clear+0x94>)
 80018f2:	6053      	str	r3, [r2, #4]
 80018f4:	e003      	b.n	80018fe <timer_clear+0x5a>
	}
	else {
		prev->nextTimer = curr->nextTimer;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	609a      	str	r2, [r3, #8]
	}
	if (curr->nextTimer != NULL) curr->nextTimer->duration += curr->duration;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <timer_clear+0x74>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	440a      	add	r2, r1
 8001916:	605a      	str	r2, [r3, #4]
	timer_unit_destruct(curr);
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f7ff feb1 	bl	8001680 <timer_unit_destruct>
	timerList.size--;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <timer_clear+0x94>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <timer_clear+0x94>)
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e000      	b.n	800192e <timer_clear+0x8a>
	if (curr == NULL) return;
 800192c:	bf00      	nop
}
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000138 	.word	0x20000138
 8001938:	20000210 	.word	0x20000210

0800193c <uart_send_num>:
	sprintf(tx_data, "%s\r\n", str);
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
}

void uart_send_num(char str[], uint32_t data) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	sprintf(tx_data, "%s%ld\r\n", str, data);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	490a      	ldr	r1, [pc, #40]	; (8001974 <uart_send_num+0x38>)
 800194c:	480a      	ldr	r0, [pc, #40]	; (8001978 <uart_send_num+0x3c>)
 800194e:	f002 f947 	bl	8003be0 <siprintf>
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
 8001952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001956:	2228      	movs	r2, #40	; 0x28
 8001958:	4907      	ldr	r1, [pc, #28]	; (8001978 <uart_send_num+0x3c>)
 800195a:	4808      	ldr	r0, [pc, #32]	; (800197c <uart_send_num+0x40>)
 800195c:	f001 fe75 	bl	800364a <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001960:	2201      	movs	r2, #1
 8001962:	4907      	ldr	r1, [pc, #28]	; (8001980 <uart_send_num+0x44>)
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <uart_send_num+0x40>)
 8001966:	f001 ff02 	bl	800376e <HAL_UART_Receive_IT>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	08004340 	.word	0x08004340
 8001978:	2000019c 	.word	0x2000019c
 800197c:	20000218 	.word	0x20000218
 8001980:	20000150 	.word	0x20000150

08001984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001984:	480c      	ldr	r0, [pc, #48]	; (80019b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001986:	490d      	ldr	r1, [pc, #52]	; (80019bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800198c:	e002      	b.n	8001994 <LoopCopyDataInit>

0800198e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001992:	3304      	adds	r3, #4

08001994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001998:	d3f9      	bcc.n	800198e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800199a:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800199c:	4c0a      	ldr	r4, [pc, #40]	; (80019c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a0:	e001      	b.n	80019a6 <LoopFillZerobss>

080019a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a4:	3204      	adds	r2, #4

080019a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a8:	d3fb      	bcc.n	80019a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019aa:	f7fe ff05 	bl	80007b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f002 f825 	bl	80039fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b2:	f7fe fbcb 	bl	800014c <main>
  bx lr
 80019b6:	4770      	bx	lr
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80019c0:	080043ac 	.word	0x080043ac
  ldr r2, =_sbss
 80019c4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80019c8:	20000270 	.word	0x20000270

080019cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC1_2_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x28>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x28>)
 80019da:	f043 0310 	orr.w	r3, r3, #16
 80019de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f923 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7fe fd90 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f93b 	bl	8001c96 <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f903 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000064 	.word	0x20000064
 8001a58:	20000060 	.word	0x20000060

08001a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_IncTick+0x1c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_IncTick+0x20>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a03      	ldr	r2, [pc, #12]	; (8001a7c <HAL_IncTick+0x20>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000064 	.word	0x20000064
 8001a7c:	2000025c 	.word	0x2000025c

08001a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <HAL_GetTick+0x10>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	2000025c 	.word	0x2000025c

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4906      	ldr	r1, [pc, #24]	; (8001b2c <__NVIC_EnableIRQ+0x34>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff90 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff2d 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff42 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff90 	bl	8001b84 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5f 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff35 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffa2 	bl	8001be8 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b08b      	sub	sp, #44	; 0x2c
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc2:	e169      	b.n	8001f98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	f040 8158 	bne.w	8001f92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4a9a      	ldr	r2, [pc, #616]	; (8001f50 <HAL_GPIO_Init+0x2a0>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d05e      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001cec:	4a98      	ldr	r2, [pc, #608]	; (8001f50 <HAL_GPIO_Init+0x2a0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d875      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001cf2:	4a98      	ldr	r2, [pc, #608]	; (8001f54 <HAL_GPIO_Init+0x2a4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d058      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001cf8:	4a96      	ldr	r2, [pc, #600]	; (8001f54 <HAL_GPIO_Init+0x2a4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d86f      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001cfe:	4a96      	ldr	r2, [pc, #600]	; (8001f58 <HAL_GPIO_Init+0x2a8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d052      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d04:	4a94      	ldr	r2, [pc, #592]	; (8001f58 <HAL_GPIO_Init+0x2a8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d869      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d0a:	4a94      	ldr	r2, [pc, #592]	; (8001f5c <HAL_GPIO_Init+0x2ac>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d04c      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d10:	4a92      	ldr	r2, [pc, #584]	; (8001f5c <HAL_GPIO_Init+0x2ac>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d863      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d16:	4a92      	ldr	r2, [pc, #584]	; (8001f60 <HAL_GPIO_Init+0x2b0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d046      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
 8001d1c:	4a90      	ldr	r2, [pc, #576]	; (8001f60 <HAL_GPIO_Init+0x2b0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d85d      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d22:	2b12      	cmp	r3, #18
 8001d24:	d82a      	bhi.n	8001d7c <HAL_GPIO_Init+0xcc>
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d859      	bhi.n	8001dde <HAL_GPIO_Init+0x12e>
 8001d2a:	a201      	add	r2, pc, #4	; (adr r2, 8001d30 <HAL_GPIO_Init+0x80>)
 8001d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d30:	08001dab 	.word	0x08001dab
 8001d34:	08001d85 	.word	0x08001d85
 8001d38:	08001d97 	.word	0x08001d97
 8001d3c:	08001dd9 	.word	0x08001dd9
 8001d40:	08001ddf 	.word	0x08001ddf
 8001d44:	08001ddf 	.word	0x08001ddf
 8001d48:	08001ddf 	.word	0x08001ddf
 8001d4c:	08001ddf 	.word	0x08001ddf
 8001d50:	08001ddf 	.word	0x08001ddf
 8001d54:	08001ddf 	.word	0x08001ddf
 8001d58:	08001ddf 	.word	0x08001ddf
 8001d5c:	08001ddf 	.word	0x08001ddf
 8001d60:	08001ddf 	.word	0x08001ddf
 8001d64:	08001ddf 	.word	0x08001ddf
 8001d68:	08001ddf 	.word	0x08001ddf
 8001d6c:	08001ddf 	.word	0x08001ddf
 8001d70:	08001ddf 	.word	0x08001ddf
 8001d74:	08001d8d 	.word	0x08001d8d
 8001d78:	08001da1 	.word	0x08001da1
 8001d7c:	4a79      	ldr	r2, [pc, #484]	; (8001f64 <HAL_GPIO_Init+0x2b4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d013      	beq.n	8001daa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d82:	e02c      	b.n	8001dde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	623b      	str	r3, [r7, #32]
          break;
 8001d8a:	e029      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	3304      	adds	r3, #4
 8001d92:	623b      	str	r3, [r7, #32]
          break;
 8001d94:	e024      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	3308      	adds	r3, #8
 8001d9c:	623b      	str	r3, [r7, #32]
          break;
 8001d9e:	e01f      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	330c      	adds	r3, #12
 8001da6:	623b      	str	r3, [r7, #32]
          break;
 8001da8:	e01a      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db2:	2304      	movs	r3, #4
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e013      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d105      	bne.n	8001dcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	611a      	str	r2, [r3, #16]
          break;
 8001dca:	e009      	b.n	8001de0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dcc:	2308      	movs	r3, #8
 8001dce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	615a      	str	r2, [r3, #20]
          break;
 8001dd6:	e003      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
          break;
 8001ddc:	e000      	b.n	8001de0 <HAL_GPIO_Init+0x130>
          break;
 8001dde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2bff      	cmp	r3, #255	; 0xff
 8001de4:	d801      	bhi.n	8001dea <HAL_GPIO_Init+0x13a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	e001      	b.n	8001dee <HAL_GPIO_Init+0x13e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2bff      	cmp	r3, #255	; 0xff
 8001df4:	d802      	bhi.n	8001dfc <HAL_GPIO_Init+0x14c>
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	e002      	b.n	8001e02 <HAL_GPIO_Init+0x152>
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	3b08      	subs	r3, #8
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	210f      	movs	r1, #15
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	6a39      	ldr	r1, [r7, #32]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80b1 	beq.w	8001f92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e30:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a4c      	ldr	r2, [pc, #304]	; (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6193      	str	r3, [r2, #24]
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <HAL_GPIO_Init+0x2b8>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e48:	4a48      	ldr	r2, [pc, #288]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a40      	ldr	r2, [pc, #256]	; (8001f70 <HAL_GPIO_Init+0x2c0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <HAL_GPIO_Init+0x1ec>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3f      	ldr	r2, [pc, #252]	; (8001f74 <HAL_GPIO_Init+0x2c4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00d      	beq.n	8001e98 <HAL_GPIO_Init+0x1e8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a3e      	ldr	r2, [pc, #248]	; (8001f78 <HAL_GPIO_Init+0x2c8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <HAL_GPIO_Init+0x1e4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a3d      	ldr	r2, [pc, #244]	; (8001f7c <HAL_GPIO_Init+0x2cc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_GPIO_Init+0x1e0>
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e006      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e90:	2304      	movs	r3, #4
 8001e92:	e004      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e002      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <HAL_GPIO_Init+0x1ee>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea0:	f002 0203 	and.w	r2, r2, #3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4093      	lsls	r3, r2
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eae:	492f      	ldr	r1, [pc, #188]	; (8001f6c <HAL_GPIO_Init+0x2bc>)
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	089b      	lsrs	r3, r3, #2
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	492c      	ldr	r1, [pc, #176]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
 8001ed4:	e006      	b.n	8001ee4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	4928      	ldr	r1, [pc, #160]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d006      	beq.n	8001efe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef0:	4b23      	ldr	r3, [pc, #140]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	4922      	ldr	r1, [pc, #136]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001efe:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	491e      	ldr	r1, [pc, #120]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d006      	beq.n	8001f26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f18:	4b19      	ldr	r3, [pc, #100]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	4918      	ldr	r1, [pc, #96]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
 8001f24:	e006      	b.n	8001f34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f26:	4b16      	ldr	r3, [pc, #88]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	4914      	ldr	r1, [pc, #80]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d021      	beq.n	8001f84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	490e      	ldr	r1, [pc, #56]	; (8001f80 <HAL_GPIO_Init+0x2d0>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60cb      	str	r3, [r1, #12]
 8001f4c:	e021      	b.n	8001f92 <HAL_GPIO_Init+0x2e2>
 8001f4e:	bf00      	nop
 8001f50:	10320000 	.word	0x10320000
 8001f54:	10310000 	.word	0x10310000
 8001f58:	10220000 	.word	0x10220000
 8001f5c:	10210000 	.word	0x10210000
 8001f60:	10120000 	.word	0x10120000
 8001f64:	10110000 	.word	0x10110000
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	40010800 	.word	0x40010800
 8001f74:	40010c00 	.word	0x40010c00
 8001f78:	40011000 	.word	0x40011000
 8001f7c:	40011400 	.word	0x40011400
 8001f80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	4909      	ldr	r1, [pc, #36]	; (8001fb4 <HAL_GPIO_Init+0x304>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	3301      	adds	r3, #1
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f47f ae8e 	bne.w	8001cc4 <HAL_GPIO_Init+0x14>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	372c      	adds	r7, #44	; 0x2c
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40010400 	.word	0x40010400

08001fb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
 8001fd4:	e001      	b.n	8001fda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	807b      	strh	r3, [r7, #2]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff6:	787b      	ldrb	r3, [r7, #1]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffc:	887a      	ldrh	r2, [r7, #2]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002002:	e003      	b.n	800200c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	041a      	lsls	r2, r3, #16
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	611a      	str	r2, [r3, #16]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
	...

08002018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002024:	695a      	ldr	r2, [r3, #20]
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d006      	beq.n	800203c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800202e:	4a05      	ldr	r2, [pc, #20]	; (8002044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f806 	bl	8002048 <HAL_GPIO_EXTI_Callback>
  }
}
 800203c:	bf00      	nop
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40010400 	.word	0x40010400

08002048 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e26c      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8087 	beq.w	800218a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800207c:	4b92      	ldr	r3, [pc, #584]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b04      	cmp	r3, #4
 8002086:	d00c      	beq.n	80020a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002088:	4b8f      	ldr	r3, [pc, #572]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d112      	bne.n	80020ba <HAL_RCC_OscConfig+0x5e>
 8002094:	4b8c      	ldr	r3, [pc, #560]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a0:	d10b      	bne.n	80020ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a2:	4b89      	ldr	r3, [pc, #548]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06c      	beq.n	8002188 <HAL_RCC_OscConfig+0x12c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d168      	bne.n	8002188 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e246      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x76>
 80020c4:	4b80      	ldr	r3, [pc, #512]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a7f      	ldr	r2, [pc, #508]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e02e      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x98>
 80020da:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7a      	ldr	r2, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a77      	ldr	r2, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0xbc>
 80020fe:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a71      	ldr	r2, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b6f      	ldr	r3, [pc, #444]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6e      	ldr	r2, [pc, #440]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xd4>
 8002118:	4b6b      	ldr	r3, [pc, #428]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6a      	ldr	r2, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a67      	ldr	r2, [pc, #412]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff fca2 	bl	8001a80 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff fc9e 	bl	8001a80 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1fa      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xe4>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fc8e 	bl	8001a80 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff fc8a 	bl	8001a80 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1e6      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b53      	ldr	r3, [pc, #332]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x10c>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d063      	beq.n	800225e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002196:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021a2:	4b49      	ldr	r3, [pc, #292]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x18c>
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x176>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1ba      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4939      	ldr	r1, [pc, #228]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e03a      	b.n	800225e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7ff fc43 	bl	8001a80 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021fe:	f7ff fc3f 	bl	8001a80 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e19b      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	695b      	ldr	r3, [r3, #20]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4927      	ldr	r1, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <HAL_RCC_OscConfig+0x270>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff fc22 	bl	8001a80 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff fc1e 	bl	8001a80 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e17a      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03a      	beq.n	80022e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d019      	beq.n	80022a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_RCC_OscConfig+0x274>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7ff fc02 	bl	8001a80 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff fbfe 	bl	8001a80 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e15a      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_RCC_OscConfig+0x26c>)
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800229e:	2001      	movs	r0, #1
 80022a0:	f000 fad8 	bl	8002854 <RCC_Delay>
 80022a4:	e01c      	b.n	80022e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_RCC_OscConfig+0x274>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7ff fbe8 	bl	8001a80 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b2:	e00f      	b.n	80022d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff fbe4 	bl	8001a80 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d908      	bls.n	80022d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e140      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	42420000 	.word	0x42420000
 80022d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d4:	4b9e      	ldr	r3, [pc, #632]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1e9      	bne.n	80022b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a6 	beq.w	800243a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f2:	4b97      	ldr	r3, [pc, #604]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10d      	bne.n	800231a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022fe:	4b94      	ldr	r3, [pc, #592]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4a93      	ldr	r2, [pc, #588]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	61d3      	str	r3, [r2, #28]
 800230a:	4b91      	ldr	r3, [pc, #580]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002316:	2301      	movs	r3, #1
 8002318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231a:	4b8e      	ldr	r3, [pc, #568]	; (8002554 <HAL_RCC_OscConfig+0x4f8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d118      	bne.n	8002358 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002326:	4b8b      	ldr	r3, [pc, #556]	; (8002554 <HAL_RCC_OscConfig+0x4f8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a8a      	ldr	r2, [pc, #552]	; (8002554 <HAL_RCC_OscConfig+0x4f8>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002332:	f7ff fba5 	bl	8001a80 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233a:	f7ff fba1 	bl	8001a80 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e0fd      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_OscConfig+0x4f8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x312>
 8002360:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	4a7a      	ldr	r2, [pc, #488]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6213      	str	r3, [r2, #32]
 800236c:	e02d      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10c      	bne.n	8002390 <HAL_RCC_OscConfig+0x334>
 8002376:	4b76      	ldr	r3, [pc, #472]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a75      	ldr	r2, [pc, #468]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	4b73      	ldr	r3, [pc, #460]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	4a72      	ldr	r2, [pc, #456]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	f023 0304 	bic.w	r3, r3, #4
 800238c:	6213      	str	r3, [r2, #32]
 800238e:	e01c      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2b05      	cmp	r3, #5
 8002396:	d10c      	bne.n	80023b2 <HAL_RCC_OscConfig+0x356>
 8002398:	4b6d      	ldr	r3, [pc, #436]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a6c      	ldr	r2, [pc, #432]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	4b6a      	ldr	r3, [pc, #424]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4a69      	ldr	r2, [pc, #420]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	6213      	str	r3, [r2, #32]
 80023b0:	e00b      	b.n	80023ca <HAL_RCC_OscConfig+0x36e>
 80023b2:	4b67      	ldr	r3, [pc, #412]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a66      	ldr	r2, [pc, #408]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a63      	ldr	r2, [pc, #396]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d015      	beq.n	80023fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7ff fb55 	bl	8001a80 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	e00a      	b.n	80023f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7ff fb51 	bl	8001a80 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0ab      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	4b57      	ldr	r3, [pc, #348]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0ee      	beq.n	80023da <HAL_RCC_OscConfig+0x37e>
 80023fc:	e014      	b.n	8002428 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023fe:	f7ff fb3f 	bl	8001a80 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	e00a      	b.n	800241c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7ff fb3b 	bl	8001a80 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e095      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800241c:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d1ee      	bne.n	8002406 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b48      	ldr	r3, [pc, #288]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4a47      	ldr	r2, [pc, #284]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 8081 	beq.w	8002546 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002444:	4b42      	ldr	r3, [pc, #264]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d061      	beq.n	8002514 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b02      	cmp	r3, #2
 8002456:	d146      	bne.n	80024e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <HAL_RCC_OscConfig+0x4fc>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7ff fb0f 	bl	8001a80 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7ff fb0b 	bl	8001a80 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e067      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002478:	4b35      	ldr	r3, [pc, #212]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	492d      	ldr	r1, [pc, #180]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a19      	ldr	r1, [r3, #32]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	430b      	orrs	r3, r1
 80024b2:	4927      	ldr	r1, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	4b27      	ldr	r3, [pc, #156]	; (8002558 <HAL_RCC_OscConfig+0x4fc>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7ff fadf 	bl	8001a80 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c6:	f7ff fadb 	bl	8001a80 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e037      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0f0      	beq.n	80024c6 <HAL_RCC_OscConfig+0x46a>
 80024e4:	e02f      	b.n	8002546 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <HAL_RCC_OscConfig+0x4fc>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fac8 	bl	8001a80 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f4:	f7ff fac4 	bl	8001a80 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e020      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x498>
 8002512:	e018      	b.n	8002546 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e013      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_OscConfig+0x4f4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	429a      	cmp	r2, r3
 8002532:	d106      	bne.n	8002542 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	40007000 	.word	0x40007000
 8002558:	42420060 	.word	0x42420060

0800255c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0d0      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002570:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d910      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b67      	ldr	r3, [pc, #412]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0207 	bic.w	r2, r3, #7
 8002586:	4965      	ldr	r1, [pc, #404]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b63      	ldr	r3, [pc, #396]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0b8      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b8:	4b59      	ldr	r3, [pc, #356]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a58      	ldr	r2, [pc, #352]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025d0:	4b53      	ldr	r3, [pc, #332]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a52      	ldr	r2, [pc, #328]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	494d      	ldr	r1, [pc, #308]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d040      	beq.n	800267c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b47      	ldr	r3, [pc, #284]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d115      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e07f      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d107      	bne.n	800262a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261a:	4b41      	ldr	r3, [pc, #260]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e073      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06b      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263a:	4b39      	ldr	r3, [pc, #228]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f023 0203 	bic.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4936      	ldr	r1, [pc, #216]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800264c:	f7ff fa18 	bl	8001a80 <HAL_GetTick>
 8002650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	e00a      	b.n	800266a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7ff fa14 	bl	8001a80 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e053      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 020c 	and.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d1eb      	bne.n	8002654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d210      	bcs.n	80026ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 0207 	bic.w	r2, r3, #7
 8002692:	4922      	ldr	r1, [pc, #136]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	4313      	orrs	r3, r2
 8002698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800269a:	4b20      	ldr	r3, [pc, #128]	; (800271c <HAL_RCC_ClockConfig+0x1c0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d001      	beq.n	80026ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e032      	b.n	8002712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b8:	4b19      	ldr	r3, [pc, #100]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4916      	ldr	r1, [pc, #88]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d009      	beq.n	80026ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026d6:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	490e      	ldr	r1, [pc, #56]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ea:	f000 f821 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80026ee:	4602      	mov	r2, r0
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	490a      	ldr	r1, [pc, #40]	; (8002724 <HAL_RCC_ClockConfig+0x1c8>)
 80026fc:	5ccb      	ldrb	r3, [r1, r3]
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x1cc>)
 8002704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <HAL_RCC_ClockConfig+0x1d0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff f976 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40022000 	.word	0x40022000
 8002720:	40021000 	.word	0x40021000
 8002724:	08004358 	.word	0x08004358
 8002728:	20000000 	.word	0x20000000
 800272c:	20000060 	.word	0x20000060

08002730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	b490      	push	{r4, r7}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002736:	4b2a      	ldr	r3, [pc, #168]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002738:	1d3c      	adds	r4, r7, #4
 800273a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800273c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002740:	f240 2301 	movw	r3, #513	; 0x201
 8002744:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	2300      	movs	r3, #0
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800275a:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b04      	cmp	r3, #4
 8002768:	d002      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x40>
 800276a:	2b08      	cmp	r3, #8
 800276c:	d003      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x46>
 800276e:	e02d      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002772:	623b      	str	r3, [r7, #32]
      break;
 8002774:	e02d      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	0c9b      	lsrs	r3, r3, #18
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002782:	4413      	add	r3, r2
 8002784:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002788:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d013      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0c5b      	lsrs	r3, r3, #17
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027a2:	4413      	add	r3, r2
 80027a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	4a0e      	ldr	r2, [pc, #56]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ae:	fb02 f203 	mul.w	r2, r2, r3
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ba:	e004      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	4a0b      	ldr	r2, [pc, #44]	; (80027ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	623b      	str	r3, [r7, #32]
      break;
 80027ca:	e002      	b.n	80027d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ce:	623b      	str	r3, [r7, #32]
      break;
 80027d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027d2:	6a3b      	ldr	r3, [r7, #32]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3728      	adds	r7, #40	; 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc90      	pop	{r4, r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	08004348 	.word	0x08004348
 80027e4:	40021000 	.word	0x40021000
 80027e8:	007a1200 	.word	0x007a1200
 80027ec:	003d0900 	.word	0x003d0900

080027f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f4:	4b02      	ldr	r3, [pc, #8]	; (8002800 <HAL_RCC_GetHCLKFreq+0x10>)
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	20000000 	.word	0x20000000

08002804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002808:	f7ff fff2 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 800280c:	4602      	mov	r2, r0
 800280e:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	4903      	ldr	r1, [pc, #12]	; (8002828 <HAL_RCC_GetPCLK1Freq+0x24>)
 800281a:	5ccb      	ldrb	r3, [r1, r3]
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	08004368 	.word	0x08004368

0800282c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002830:	f7ff ffde 	bl	80027f0 <HAL_RCC_GetHCLKFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	0adb      	lsrs	r3, r3, #11
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	4903      	ldr	r1, [pc, #12]	; (8002850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002848:	4618      	mov	r0, r3
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	08004368 	.word	0x08004368

08002854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <RCC_Delay+0x34>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <RCC_Delay+0x38>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	0a5b      	lsrs	r3, r3, #9
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002870:	bf00      	nop
  }
  while (Delay --);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1e5a      	subs	r2, r3, #1
 8002876:	60fa      	str	r2, [r7, #12]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f9      	bne.n	8002870 <RCC_Delay+0x1c>
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000000 	.word	0x20000000
 800288c:	10624dd3 	.word	0x10624dd3

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e041      	b.n	8002926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fd fe5c 	bl	8000574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f000 fb7e 	bl	8002fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b01      	cmp	r3, #1
 8002942:	d001      	beq.n	8002948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e03a      	b.n	80029be <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <HAL_TIM_Base_Start_IT+0x98>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00e      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x58>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002972:	d009      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x58>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <HAL_TIM_Base_Start_IT+0x9c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d004      	beq.n	8002988 <HAL_TIM_Base_Start_IT+0x58>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d111      	bne.n	80029ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b06      	cmp	r3, #6
 8002998:	d010      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	e007      	b.n	80029bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	40012c00 	.word	0x40012c00
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800

080029d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e041      	b.n	8002a6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fd fdde 	bl	80005bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f000 fadc 	bl	8002fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d122      	bne.n	8002ace <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d11b      	bne.n	8002ace <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f06f 0202 	mvn.w	r2, #2
 8002a9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fa70 	bl	8002f9a <HAL_TIM_IC_CaptureCallback>
 8002aba:	e005      	b.n	8002ac8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fa63 	bl	8002f88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa72 	bl	8002fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d122      	bne.n	8002b22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d11b      	bne.n	8002b22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f06f 0204 	mvn.w	r2, #4
 8002af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fa46 	bl	8002f9a <HAL_TIM_IC_CaptureCallback>
 8002b0e:	e005      	b.n	8002b1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fa39 	bl	8002f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa48 	bl	8002fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d122      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11b      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f06f 0208 	mvn.w	r2, #8
 8002b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fa1c 	bl	8002f9a <HAL_TIM_IC_CaptureCallback>
 8002b62:	e005      	b.n	8002b70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fa0f 	bl	8002f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 fa1e 	bl	8002fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d122      	bne.n	8002bca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d11b      	bne.n	8002bca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0210 	mvn.w	r2, #16
 8002b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2208      	movs	r2, #8
 8002ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f9f2 	bl	8002f9a <HAL_TIM_IC_CaptureCallback>
 8002bb6:	e005      	b.n	8002bc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f9e5 	bl	8002f88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9f4 	bl	8002fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d10e      	bne.n	8002bf6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d107      	bne.n	8002bf6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f06f 0201 	mvn.w	r2, #1
 8002bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fd fc79 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d10e      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b80      	cmp	r3, #128	; 0x80
 8002c10:	d107      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fcbe 	bl	800359e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d10e      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f9b8 	bl	8002fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d10e      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d107      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f06f 0220 	mvn.w	r2, #32
 8002c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fc89 	bl	800358c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0ac      	b.n	8002df8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	f200 809f 	bhi.w	8002dec <HAL_TIM_PWM_ConfigChannel+0x168>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002ce9 	.word	0x08002ce9
 8002cb8:	08002ded 	.word	0x08002ded
 8002cbc:	08002ded 	.word	0x08002ded
 8002cc0:	08002ded 	.word	0x08002ded
 8002cc4:	08002d29 	.word	0x08002d29
 8002cc8:	08002ded 	.word	0x08002ded
 8002ccc:	08002ded 	.word	0x08002ded
 8002cd0:	08002ded 	.word	0x08002ded
 8002cd4:	08002d6b 	.word	0x08002d6b
 8002cd8:	08002ded 	.word	0x08002ded
 8002cdc:	08002ded 	.word	0x08002ded
 8002ce0:	08002ded 	.word	0x08002ded
 8002ce4:	08002dab 	.word	0x08002dab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f9d0 	bl	8003094 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0208 	orr.w	r2, r2, #8
 8002d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0204 	bic.w	r2, r2, #4
 8002d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6999      	ldr	r1, [r3, #24]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	619a      	str	r2, [r3, #24]
      break;
 8002d26:	e062      	b.n	8002dee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fa16 	bl	8003160 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6999      	ldr	r1, [r3, #24]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	021a      	lsls	r2, r3, #8
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	619a      	str	r2, [r3, #24]
      break;
 8002d68:	e041      	b.n	8002dee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68b9      	ldr	r1, [r7, #8]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fa5f 	bl	8003234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69da      	ldr	r2, [r3, #28]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0208 	orr.w	r2, r2, #8
 8002d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0204 	bic.w	r2, r2, #4
 8002d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	69d9      	ldr	r1, [r3, #28]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	61da      	str	r2, [r3, #28]
      break;
 8002da8:	e021      	b.n	8002dee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 faa9 	bl	8003308 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	69da      	ldr	r2, [r3, #28]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69d9      	ldr	r1, [r3, #28]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	021a      	lsls	r2, r3, #8
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	61da      	str	r2, [r3, #28]
      break;
 8002dea:	e000      	b.n	8002dee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002dec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_TIM_ConfigClockSource+0x18>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0b3      	b.n	8002f80 <HAL_TIM_ConfigClockSource+0x180>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e50:	d03e      	beq.n	8002ed0 <HAL_TIM_ConfigClockSource+0xd0>
 8002e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e56:	f200 8087 	bhi.w	8002f68 <HAL_TIM_ConfigClockSource+0x168>
 8002e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5e:	f000 8085 	beq.w	8002f6c <HAL_TIM_ConfigClockSource+0x16c>
 8002e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e66:	d87f      	bhi.n	8002f68 <HAL_TIM_ConfigClockSource+0x168>
 8002e68:	2b70      	cmp	r3, #112	; 0x70
 8002e6a:	d01a      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0xa2>
 8002e6c:	2b70      	cmp	r3, #112	; 0x70
 8002e6e:	d87b      	bhi.n	8002f68 <HAL_TIM_ConfigClockSource+0x168>
 8002e70:	2b60      	cmp	r3, #96	; 0x60
 8002e72:	d050      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0x116>
 8002e74:	2b60      	cmp	r3, #96	; 0x60
 8002e76:	d877      	bhi.n	8002f68 <HAL_TIM_ConfigClockSource+0x168>
 8002e78:	2b50      	cmp	r3, #80	; 0x50
 8002e7a:	d03c      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0xf6>
 8002e7c:	2b50      	cmp	r3, #80	; 0x50
 8002e7e:	d873      	bhi.n	8002f68 <HAL_TIM_ConfigClockSource+0x168>
 8002e80:	2b40      	cmp	r3, #64	; 0x40
 8002e82:	d058      	beq.n	8002f36 <HAL_TIM_ConfigClockSource+0x136>
 8002e84:	2b40      	cmp	r3, #64	; 0x40
 8002e86:	d86f      	bhi.n	8002f68 <HAL_TIM_ConfigClockSource+0x168>
 8002e88:	2b30      	cmp	r3, #48	; 0x30
 8002e8a:	d064      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x156>
 8002e8c:	2b30      	cmp	r3, #48	; 0x30
 8002e8e:	d86b      	bhi.n	8002f68 <HAL_TIM_ConfigClockSource+0x168>
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d060      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x156>
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d867      	bhi.n	8002f68 <HAL_TIM_ConfigClockSource+0x168>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d05c      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x156>
 8002e9c:	2b10      	cmp	r3, #16
 8002e9e:	d05a      	beq.n	8002f56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ea0:	e062      	b.n	8002f68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6899      	ldr	r1, [r3, #8]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f000 faee 	bl	8003492 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ec4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	609a      	str	r2, [r3, #8]
      break;
 8002ece:	e04e      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	6899      	ldr	r1, [r3, #8]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f000 fad7 	bl	8003492 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ef2:	609a      	str	r2, [r3, #8]
      break;
 8002ef4:	e03b      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	461a      	mov	r2, r3
 8002f04:	f000 fa4e 	bl	80033a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2150      	movs	r1, #80	; 0x50
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 faa5 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 8002f14:	e02b      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f000 fa6c 	bl	8003400 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2160      	movs	r1, #96	; 0x60
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fa95 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 8002f34:	e01b      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f000 fa2e 	bl	80033a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2140      	movs	r1, #64	; 0x40
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fa85 	bl	800345e <TIM_ITRx_SetConfig>
      break;
 8002f54:	e00b      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4610      	mov	r0, r2
 8002f62:	f000 fa7c 	bl	800345e <TIM_ITRx_SetConfig>
        break;
 8002f66:	e002      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f68:	bf00      	nop
 8002f6a:	e000      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002f6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a29      	ldr	r2, [pc, #164]	; (8003088 <TIM_Base_SetConfig+0xb8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00b      	beq.n	8003000 <TIM_Base_SetConfig+0x30>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fee:	d007      	beq.n	8003000 <TIM_Base_SetConfig+0x30>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a26      	ldr	r2, [pc, #152]	; (800308c <TIM_Base_SetConfig+0xbc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_Base_SetConfig+0x30>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a25      	ldr	r2, [pc, #148]	; (8003090 <TIM_Base_SetConfig+0xc0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d108      	bne.n	8003012 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <TIM_Base_SetConfig+0xb8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00b      	beq.n	8003032 <TIM_Base_SetConfig+0x62>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003020:	d007      	beq.n	8003032 <TIM_Base_SetConfig+0x62>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a19      	ldr	r2, [pc, #100]	; (800308c <TIM_Base_SetConfig+0xbc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d003      	beq.n	8003032 <TIM_Base_SetConfig+0x62>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a18      	ldr	r2, [pc, #96]	; (8003090 <TIM_Base_SetConfig+0xc0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d108      	bne.n	8003044 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4313      	orrs	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a07      	ldr	r2, [pc, #28]	; (8003088 <TIM_Base_SetConfig+0xb8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d103      	bne.n	8003078 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	615a      	str	r2, [r3, #20]
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800

08003094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0201 	bic.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 0302 	bic.w	r3, r3, #2
 80030dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a1c      	ldr	r2, [pc, #112]	; (800315c <TIM_OC1_SetConfig+0xc8>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d10c      	bne.n	800310a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f023 0308 	bic.w	r3, r3, #8
 80030f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	4313      	orrs	r3, r2
 8003100:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f023 0304 	bic.w	r3, r3, #4
 8003108:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <TIM_OC1_SetConfig+0xc8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d111      	bne.n	8003136 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	621a      	str	r2, [r3, #32]
}
 8003150:	bf00      	nop
 8003152:	371c      	adds	r7, #28
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40012c00 	.word	0x40012c00

08003160 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f023 0210 	bic.w	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800318e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f023 0320 	bic.w	r3, r3, #32
 80031aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <TIM_OC2_SetConfig+0xd0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10d      	bne.n	80031dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a14      	ldr	r2, [pc, #80]	; (8003230 <TIM_OC2_SetConfig+0xd0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d113      	bne.n	800320c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr
 8003230:	40012c00 	.word	0x40012c00

08003234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0303 	bic.w	r3, r3, #3
 800326a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800327c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	4313      	orrs	r3, r2
 8003288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a1d      	ldr	r2, [pc, #116]	; (8003304 <TIM_OC3_SetConfig+0xd0>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d10d      	bne.n	80032ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a14      	ldr	r2, [pc, #80]	; (8003304 <TIM_OC3_SetConfig+0xd0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d113      	bne.n	80032de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	697a      	ldr	r2, [r7, #20]
 80032f6:	621a      	str	r2, [r3, #32]
}
 80032f8:	bf00      	nop
 80032fa:	371c      	adds	r7, #28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40012c00 	.word	0x40012c00

08003308 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4313      	orrs	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003352:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	031b      	lsls	r3, r3, #12
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <TIM_OC4_SetConfig+0x98>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d109      	bne.n	800337c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800336e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	019b      	lsls	r3, r3, #6
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	40012c00 	.word	0x40012c00

080033a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0201 	bic.w	r2, r3, #1
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f023 030a 	bic.w	r3, r3, #10
 80033e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	621a      	str	r2, [r3, #32]
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr

08003400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f023 0210 	bic.w	r2, r3, #16
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800342a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	031b      	lsls	r3, r3, #12
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800343c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	621a      	str	r2, [r3, #32]
}
 8003454:	bf00      	nop
 8003456:	371c      	adds	r7, #28
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr

0800345e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	f043 0307 	orr.w	r3, r3, #7
 8003480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	609a      	str	r2, [r3, #8]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003492:	b480      	push	{r7}
 8003494:	b087      	sub	sp, #28
 8003496:	af00      	add	r7, sp, #0
 8003498:	60f8      	str	r0, [r7, #12]
 800349a:	60b9      	str	r1, [r7, #8]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	021a      	lsls	r2, r3, #8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	609a      	str	r2, [r3, #8]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e046      	b.n	8003576 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a16      	ldr	r2, [pc, #88]	; (8003580 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00e      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003534:	d009      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a10      	ldr	r2, [pc, #64]	; (8003588 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10c      	bne.n	8003564 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	4313      	orrs	r3, r2
 800355a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40012c00 	.word	0x40012c00
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800

0800358c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e03f      	b.n	8003642 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7fd f840 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2224      	movs	r2, #36	; 0x24
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f96d 	bl	80038d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b08a      	sub	sp, #40	; 0x28
 800364e:	af02      	add	r7, sp, #8
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b20      	cmp	r3, #32
 8003668:	d17c      	bne.n	8003764 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_UART_Transmit+0x2c>
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e075      	b.n	8003766 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_UART_Transmit+0x3e>
 8003684:	2302      	movs	r3, #2
 8003686:	e06e      	b.n	8003766 <HAL_UART_Transmit+0x11c>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2200      	movs	r2, #0
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2221      	movs	r2, #33	; 0x21
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800369e:	f7fe f9ef 	bl	8001a80 <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	88fa      	ldrh	r2, [r7, #6]
 80036a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	88fa      	ldrh	r2, [r7, #6]
 80036ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b8:	d108      	bne.n	80036cc <HAL_UART_Transmit+0x82>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d104      	bne.n	80036cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	e003      	b.n	80036d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036dc:	e02a      	b.n	8003734 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2200      	movs	r2, #0
 80036e6:	2180      	movs	r1, #128	; 0x80
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 f870 	bl	80037ce <UART_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e036      	b.n	8003766 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10b      	bne.n	8003716 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800370c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	3302      	adds	r3, #2
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	e007      	b.n	8003726 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	3301      	adds	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b01      	subs	r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1cf      	bne.n	80036de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2200      	movs	r2, #0
 8003746:	2140      	movs	r1, #64	; 0x40
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f840 	bl	80037ce <UART_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e006      	b.n	8003766 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	e000      	b.n	8003766 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003764:	2302      	movs	r3, #2
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	60f8      	str	r0, [r7, #12]
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	4613      	mov	r3, r2
 800377a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b20      	cmp	r3, #32
 8003786:	d11d      	bne.n	80037c4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_UART_Receive_IT+0x26>
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e016      	b.n	80037c6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Receive_IT+0x38>
 80037a2:	2302      	movs	r3, #2
 80037a4:	e00f      	b.n	80037c6 <HAL_UART_Receive_IT+0x58>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80037b4:	88fb      	ldrh	r3, [r7, #6]
 80037b6:	461a      	mov	r2, r3
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f851 	bl	8003862 <UART_Start_Receive_IT>
 80037c0:	4603      	mov	r3, r0
 80037c2:	e000      	b.n	80037c6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80037c4:	2302      	movs	r3, #2
  }
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037de:	e02c      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d028      	beq.n	800383a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <UART_WaitOnFlagUntilTimeout+0x30>
 80037ee:	f7fe f947 	bl	8001a80 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d21d      	bcs.n	800383a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800380c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e00f      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	4013      	ands	r3, r2
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	bf0c      	ite	eq
 800384a:	2301      	moveq	r3, #1
 800384c:	2300      	movne	r3, #0
 800384e:	b2db      	uxtb	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	429a      	cmp	r2, r3
 8003856:	d0c3      	beq.n	80037e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	60f8      	str	r0, [r7, #12]
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2222      	movs	r2, #34	; 0x22
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0220 	orr.w	r2, r2, #32
 80038c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800390e:	f023 030c 	bic.w	r3, r3, #12
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	430b      	orrs	r3, r1
 800391a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2c      	ldr	r2, [pc, #176]	; (80039e8 <UART_SetConfig+0x114>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d103      	bne.n	8003944 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800393c:	f7fe ff76 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	e002      	b.n	800394a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003944:	f7fe ff5e 	bl	8002804 <HAL_RCC_GetPCLK1Freq>
 8003948:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009a      	lsls	r2, r3, #2
 8003954:	441a      	add	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	4a22      	ldr	r2, [pc, #136]	; (80039ec <UART_SetConfig+0x118>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	0119      	lsls	r1, r3, #4
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009a      	lsls	r2, r3, #2
 8003974:	441a      	add	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <UART_SetConfig+0x118>)
 8003982:	fba3 0302 	umull	r0, r3, r3, r2
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2064      	movs	r0, #100	; 0x64
 800398a:	fb00 f303 	mul.w	r3, r0, r3
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	3332      	adds	r3, #50	; 0x32
 8003994:	4a15      	ldr	r2, [pc, #84]	; (80039ec <UART_SetConfig+0x118>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	095b      	lsrs	r3, r3, #5
 800399c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a0:	4419      	add	r1, r3
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009a      	lsls	r2, r3, #2
 80039ac:	441a      	add	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <UART_SetConfig+0x118>)
 80039ba:	fba3 0302 	umull	r0, r3, r3, r2
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2064      	movs	r0, #100	; 0x64
 80039c2:	fb00 f303 	mul.w	r3, r0, r3
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	3332      	adds	r3, #50	; 0x32
 80039cc:	4a07      	ldr	r2, [pc, #28]	; (80039ec <UART_SetConfig+0x118>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	f003 020f 	and.w	r2, r3, #15
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	440a      	add	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40013800 	.word	0x40013800
 80039ec:	51eb851f 	.word	0x51eb851f

080039f0 <__errno>:
 80039f0:	4b01      	ldr	r3, [pc, #4]	; (80039f8 <__errno+0x8>)
 80039f2:	6818      	ldr	r0, [r3, #0]
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	20000068 	.word	0x20000068

080039fc <__libc_init_array>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	2600      	movs	r6, #0
 8003a00:	4d0c      	ldr	r5, [pc, #48]	; (8003a34 <__libc_init_array+0x38>)
 8003a02:	4c0d      	ldr	r4, [pc, #52]	; (8003a38 <__libc_init_array+0x3c>)
 8003a04:	1b64      	subs	r4, r4, r5
 8003a06:	10a4      	asrs	r4, r4, #2
 8003a08:	42a6      	cmp	r6, r4
 8003a0a:	d109      	bne.n	8003a20 <__libc_init_array+0x24>
 8003a0c:	f000 fc6c 	bl	80042e8 <_init>
 8003a10:	2600      	movs	r6, #0
 8003a12:	4d0a      	ldr	r5, [pc, #40]	; (8003a3c <__libc_init_array+0x40>)
 8003a14:	4c0a      	ldr	r4, [pc, #40]	; (8003a40 <__libc_init_array+0x44>)
 8003a16:	1b64      	subs	r4, r4, r5
 8003a18:	10a4      	asrs	r4, r4, #2
 8003a1a:	42a6      	cmp	r6, r4
 8003a1c:	d105      	bne.n	8003a2a <__libc_init_array+0x2e>
 8003a1e:	bd70      	pop	{r4, r5, r6, pc}
 8003a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a24:	4798      	blx	r3
 8003a26:	3601      	adds	r6, #1
 8003a28:	e7ee      	b.n	8003a08 <__libc_init_array+0xc>
 8003a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a2e:	4798      	blx	r3
 8003a30:	3601      	adds	r6, #1
 8003a32:	e7f2      	b.n	8003a1a <__libc_init_array+0x1e>
 8003a34:	080043a4 	.word	0x080043a4
 8003a38:	080043a4 	.word	0x080043a4
 8003a3c:	080043a4 	.word	0x080043a4
 8003a40:	080043a8 	.word	0x080043a8

08003a44 <malloc>:
 8003a44:	4b02      	ldr	r3, [pc, #8]	; (8003a50 <malloc+0xc>)
 8003a46:	4601      	mov	r1, r0
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f000 b85f 	b.w	8003b0c <_malloc_r>
 8003a4e:	bf00      	nop
 8003a50:	20000068 	.word	0x20000068

08003a54 <free>:
 8003a54:	4b02      	ldr	r3, [pc, #8]	; (8003a60 <free+0xc>)
 8003a56:	4601      	mov	r1, r0
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	f000 b80b 	b.w	8003a74 <_free_r>
 8003a5e:	bf00      	nop
 8003a60:	20000068 	.word	0x20000068

08003a64 <memset>:
 8003a64:	4603      	mov	r3, r0
 8003a66:	4402      	add	r2, r0
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <memset+0xa>
 8003a6c:	4770      	bx	lr
 8003a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a72:	e7f9      	b.n	8003a68 <memset+0x4>

08003a74 <_free_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	4605      	mov	r5, r0
 8003a78:	2900      	cmp	r1, #0
 8003a7a:	d043      	beq.n	8003b04 <_free_r+0x90>
 8003a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a80:	1f0c      	subs	r4, r1, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bfb8      	it	lt
 8003a86:	18e4      	addlt	r4, r4, r3
 8003a88:	f000 f8ca 	bl	8003c20 <__malloc_lock>
 8003a8c:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <_free_r+0x94>)
 8003a8e:	6813      	ldr	r3, [r2, #0]
 8003a90:	4610      	mov	r0, r2
 8003a92:	b933      	cbnz	r3, 8003aa2 <_free_r+0x2e>
 8003a94:	6063      	str	r3, [r4, #4]
 8003a96:	6014      	str	r4, [r2, #0]
 8003a98:	4628      	mov	r0, r5
 8003a9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a9e:	f000 b8c5 	b.w	8003c2c <__malloc_unlock>
 8003aa2:	42a3      	cmp	r3, r4
 8003aa4:	d90a      	bls.n	8003abc <_free_r+0x48>
 8003aa6:	6821      	ldr	r1, [r4, #0]
 8003aa8:	1862      	adds	r2, r4, r1
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	bf01      	itttt	eq
 8003aae:	681a      	ldreq	r2, [r3, #0]
 8003ab0:	685b      	ldreq	r3, [r3, #4]
 8003ab2:	1852      	addeq	r2, r2, r1
 8003ab4:	6022      	streq	r2, [r4, #0]
 8003ab6:	6063      	str	r3, [r4, #4]
 8003ab8:	6004      	str	r4, [r0, #0]
 8003aba:	e7ed      	b.n	8003a98 <_free_r+0x24>
 8003abc:	461a      	mov	r2, r3
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	b10b      	cbz	r3, 8003ac6 <_free_r+0x52>
 8003ac2:	42a3      	cmp	r3, r4
 8003ac4:	d9fa      	bls.n	8003abc <_free_r+0x48>
 8003ac6:	6811      	ldr	r1, [r2, #0]
 8003ac8:	1850      	adds	r0, r2, r1
 8003aca:	42a0      	cmp	r0, r4
 8003acc:	d10b      	bne.n	8003ae6 <_free_r+0x72>
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	4401      	add	r1, r0
 8003ad2:	1850      	adds	r0, r2, r1
 8003ad4:	4283      	cmp	r3, r0
 8003ad6:	6011      	str	r1, [r2, #0]
 8003ad8:	d1de      	bne.n	8003a98 <_free_r+0x24>
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4401      	add	r1, r0
 8003ae0:	6011      	str	r1, [r2, #0]
 8003ae2:	6053      	str	r3, [r2, #4]
 8003ae4:	e7d8      	b.n	8003a98 <_free_r+0x24>
 8003ae6:	d902      	bls.n	8003aee <_free_r+0x7a>
 8003ae8:	230c      	movs	r3, #12
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	e7d4      	b.n	8003a98 <_free_r+0x24>
 8003aee:	6820      	ldr	r0, [r4, #0]
 8003af0:	1821      	adds	r1, r4, r0
 8003af2:	428b      	cmp	r3, r1
 8003af4:	bf01      	itttt	eq
 8003af6:	6819      	ldreq	r1, [r3, #0]
 8003af8:	685b      	ldreq	r3, [r3, #4]
 8003afa:	1809      	addeq	r1, r1, r0
 8003afc:	6021      	streq	r1, [r4, #0]
 8003afe:	6063      	str	r3, [r4, #4]
 8003b00:	6054      	str	r4, [r2, #4]
 8003b02:	e7c9      	b.n	8003a98 <_free_r+0x24>
 8003b04:	bd38      	pop	{r3, r4, r5, pc}
 8003b06:	bf00      	nop
 8003b08:	20000140 	.word	0x20000140

08003b0c <_malloc_r>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	1ccd      	adds	r5, r1, #3
 8003b10:	f025 0503 	bic.w	r5, r5, #3
 8003b14:	3508      	adds	r5, #8
 8003b16:	2d0c      	cmp	r5, #12
 8003b18:	bf38      	it	cc
 8003b1a:	250c      	movcc	r5, #12
 8003b1c:	2d00      	cmp	r5, #0
 8003b1e:	4606      	mov	r6, r0
 8003b20:	db01      	blt.n	8003b26 <_malloc_r+0x1a>
 8003b22:	42a9      	cmp	r1, r5
 8003b24:	d903      	bls.n	8003b2e <_malloc_r+0x22>
 8003b26:	230c      	movs	r3, #12
 8003b28:	6033      	str	r3, [r6, #0]
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b2e:	f000 f877 	bl	8003c20 <__malloc_lock>
 8003b32:	4921      	ldr	r1, [pc, #132]	; (8003bb8 <_malloc_r+0xac>)
 8003b34:	680a      	ldr	r2, [r1, #0]
 8003b36:	4614      	mov	r4, r2
 8003b38:	b99c      	cbnz	r4, 8003b62 <_malloc_r+0x56>
 8003b3a:	4f20      	ldr	r7, [pc, #128]	; (8003bbc <_malloc_r+0xb0>)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	b923      	cbnz	r3, 8003b4a <_malloc_r+0x3e>
 8003b40:	4621      	mov	r1, r4
 8003b42:	4630      	mov	r0, r6
 8003b44:	f000 f83c 	bl	8003bc0 <_sbrk_r>
 8003b48:	6038      	str	r0, [r7, #0]
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	4630      	mov	r0, r6
 8003b4e:	f000 f837 	bl	8003bc0 <_sbrk_r>
 8003b52:	1c43      	adds	r3, r0, #1
 8003b54:	d123      	bne.n	8003b9e <_malloc_r+0x92>
 8003b56:	230c      	movs	r3, #12
 8003b58:	4630      	mov	r0, r6
 8003b5a:	6033      	str	r3, [r6, #0]
 8003b5c:	f000 f866 	bl	8003c2c <__malloc_unlock>
 8003b60:	e7e3      	b.n	8003b2a <_malloc_r+0x1e>
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	1b5b      	subs	r3, r3, r5
 8003b66:	d417      	bmi.n	8003b98 <_malloc_r+0x8c>
 8003b68:	2b0b      	cmp	r3, #11
 8003b6a:	d903      	bls.n	8003b74 <_malloc_r+0x68>
 8003b6c:	6023      	str	r3, [r4, #0]
 8003b6e:	441c      	add	r4, r3
 8003b70:	6025      	str	r5, [r4, #0]
 8003b72:	e004      	b.n	8003b7e <_malloc_r+0x72>
 8003b74:	6863      	ldr	r3, [r4, #4]
 8003b76:	42a2      	cmp	r2, r4
 8003b78:	bf0c      	ite	eq
 8003b7a:	600b      	streq	r3, [r1, #0]
 8003b7c:	6053      	strne	r3, [r2, #4]
 8003b7e:	4630      	mov	r0, r6
 8003b80:	f000 f854 	bl	8003c2c <__malloc_unlock>
 8003b84:	f104 000b 	add.w	r0, r4, #11
 8003b88:	1d23      	adds	r3, r4, #4
 8003b8a:	f020 0007 	bic.w	r0, r0, #7
 8003b8e:	1ac2      	subs	r2, r0, r3
 8003b90:	d0cc      	beq.n	8003b2c <_malloc_r+0x20>
 8003b92:	1a1b      	subs	r3, r3, r0
 8003b94:	50a3      	str	r3, [r4, r2]
 8003b96:	e7c9      	b.n	8003b2c <_malloc_r+0x20>
 8003b98:	4622      	mov	r2, r4
 8003b9a:	6864      	ldr	r4, [r4, #4]
 8003b9c:	e7cc      	b.n	8003b38 <_malloc_r+0x2c>
 8003b9e:	1cc4      	adds	r4, r0, #3
 8003ba0:	f024 0403 	bic.w	r4, r4, #3
 8003ba4:	42a0      	cmp	r0, r4
 8003ba6:	d0e3      	beq.n	8003b70 <_malloc_r+0x64>
 8003ba8:	1a21      	subs	r1, r4, r0
 8003baa:	4630      	mov	r0, r6
 8003bac:	f000 f808 	bl	8003bc0 <_sbrk_r>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d1dd      	bne.n	8003b70 <_malloc_r+0x64>
 8003bb4:	e7cf      	b.n	8003b56 <_malloc_r+0x4a>
 8003bb6:	bf00      	nop
 8003bb8:	20000140 	.word	0x20000140
 8003bbc:	20000144 	.word	0x20000144

08003bc0 <_sbrk_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	4d05      	ldr	r5, [pc, #20]	; (8003bdc <_sbrk_r+0x1c>)
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	4608      	mov	r0, r1
 8003bca:	602b      	str	r3, [r5, #0]
 8003bcc:	f7fc fdbe 	bl	800074c <_sbrk>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d102      	bne.n	8003bda <_sbrk_r+0x1a>
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	b103      	cbz	r3, 8003bda <_sbrk_r+0x1a>
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	bd38      	pop	{r3, r4, r5, pc}
 8003bdc:	20000260 	.word	0x20000260

08003be0 <siprintf>:
 8003be0:	b40e      	push	{r1, r2, r3}
 8003be2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003be6:	b500      	push	{lr}
 8003be8:	b09c      	sub	sp, #112	; 0x70
 8003bea:	ab1d      	add	r3, sp, #116	; 0x74
 8003bec:	9002      	str	r0, [sp, #8]
 8003bee:	9006      	str	r0, [sp, #24]
 8003bf0:	9107      	str	r1, [sp, #28]
 8003bf2:	9104      	str	r1, [sp, #16]
 8003bf4:	4808      	ldr	r0, [pc, #32]	; (8003c18 <siprintf+0x38>)
 8003bf6:	4909      	ldr	r1, [pc, #36]	; (8003c1c <siprintf+0x3c>)
 8003bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bfc:	9105      	str	r1, [sp, #20]
 8003bfe:	6800      	ldr	r0, [r0, #0]
 8003c00:	a902      	add	r1, sp, #8
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	f000 f874 	bl	8003cf0 <_svfiprintf_r>
 8003c08:	2200      	movs	r2, #0
 8003c0a:	9b02      	ldr	r3, [sp, #8]
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	b01c      	add	sp, #112	; 0x70
 8003c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c14:	b003      	add	sp, #12
 8003c16:	4770      	bx	lr
 8003c18:	20000068 	.word	0x20000068
 8003c1c:	ffff0208 	.word	0xffff0208

08003c20 <__malloc_lock>:
 8003c20:	4801      	ldr	r0, [pc, #4]	; (8003c28 <__malloc_lock+0x8>)
 8003c22:	f000 bafb 	b.w	800421c <__retarget_lock_acquire_recursive>
 8003c26:	bf00      	nop
 8003c28:	20000268 	.word	0x20000268

08003c2c <__malloc_unlock>:
 8003c2c:	4801      	ldr	r0, [pc, #4]	; (8003c34 <__malloc_unlock+0x8>)
 8003c2e:	f000 baf6 	b.w	800421e <__retarget_lock_release_recursive>
 8003c32:	bf00      	nop
 8003c34:	20000268 	.word	0x20000268

08003c38 <__ssputs_r>:
 8003c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c3c:	688e      	ldr	r6, [r1, #8]
 8003c3e:	4682      	mov	sl, r0
 8003c40:	429e      	cmp	r6, r3
 8003c42:	460c      	mov	r4, r1
 8003c44:	4690      	mov	r8, r2
 8003c46:	461f      	mov	r7, r3
 8003c48:	d838      	bhi.n	8003cbc <__ssputs_r+0x84>
 8003c4a:	898a      	ldrh	r2, [r1, #12]
 8003c4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c50:	d032      	beq.n	8003cb8 <__ssputs_r+0x80>
 8003c52:	6825      	ldr	r5, [r4, #0]
 8003c54:	6909      	ldr	r1, [r1, #16]
 8003c56:	3301      	adds	r3, #1
 8003c58:	eba5 0901 	sub.w	r9, r5, r1
 8003c5c:	6965      	ldr	r5, [r4, #20]
 8003c5e:	444b      	add	r3, r9
 8003c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c68:	106d      	asrs	r5, r5, #1
 8003c6a:	429d      	cmp	r5, r3
 8003c6c:	bf38      	it	cc
 8003c6e:	461d      	movcc	r5, r3
 8003c70:	0553      	lsls	r3, r2, #21
 8003c72:	d531      	bpl.n	8003cd8 <__ssputs_r+0xa0>
 8003c74:	4629      	mov	r1, r5
 8003c76:	f7ff ff49 	bl	8003b0c <_malloc_r>
 8003c7a:	4606      	mov	r6, r0
 8003c7c:	b950      	cbnz	r0, 8003c94 <__ssputs_r+0x5c>
 8003c7e:	230c      	movs	r3, #12
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295
 8003c84:	f8ca 3000 	str.w	r3, [sl]
 8003c88:	89a3      	ldrh	r3, [r4, #12]
 8003c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c94:	464a      	mov	r2, r9
 8003c96:	6921      	ldr	r1, [r4, #16]
 8003c98:	f000 fad0 	bl	800423c <memcpy>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	6126      	str	r6, [r4, #16]
 8003caa:	444e      	add	r6, r9
 8003cac:	6026      	str	r6, [r4, #0]
 8003cae:	463e      	mov	r6, r7
 8003cb0:	6165      	str	r5, [r4, #20]
 8003cb2:	eba5 0509 	sub.w	r5, r5, r9
 8003cb6:	60a5      	str	r5, [r4, #8]
 8003cb8:	42be      	cmp	r6, r7
 8003cba:	d900      	bls.n	8003cbe <__ssputs_r+0x86>
 8003cbc:	463e      	mov	r6, r7
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	4641      	mov	r1, r8
 8003cc2:	6820      	ldr	r0, [r4, #0]
 8003cc4:	f000 fac8 	bl	8004258 <memmove>
 8003cc8:	68a3      	ldr	r3, [r4, #8]
 8003cca:	6822      	ldr	r2, [r4, #0]
 8003ccc:	1b9b      	subs	r3, r3, r6
 8003cce:	4432      	add	r2, r6
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	60a3      	str	r3, [r4, #8]
 8003cd4:	6022      	str	r2, [r4, #0]
 8003cd6:	e7db      	b.n	8003c90 <__ssputs_r+0x58>
 8003cd8:	462a      	mov	r2, r5
 8003cda:	f000 fad7 	bl	800428c <_realloc_r>
 8003cde:	4606      	mov	r6, r0
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d1e1      	bne.n	8003ca8 <__ssputs_r+0x70>
 8003ce4:	4650      	mov	r0, sl
 8003ce6:	6921      	ldr	r1, [r4, #16]
 8003ce8:	f7ff fec4 	bl	8003a74 <_free_r>
 8003cec:	e7c7      	b.n	8003c7e <__ssputs_r+0x46>
	...

08003cf0 <_svfiprintf_r>:
 8003cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf4:	4698      	mov	r8, r3
 8003cf6:	898b      	ldrh	r3, [r1, #12]
 8003cf8:	4607      	mov	r7, r0
 8003cfa:	061b      	lsls	r3, r3, #24
 8003cfc:	460d      	mov	r5, r1
 8003cfe:	4614      	mov	r4, r2
 8003d00:	b09d      	sub	sp, #116	; 0x74
 8003d02:	d50e      	bpl.n	8003d22 <_svfiprintf_r+0x32>
 8003d04:	690b      	ldr	r3, [r1, #16]
 8003d06:	b963      	cbnz	r3, 8003d22 <_svfiprintf_r+0x32>
 8003d08:	2140      	movs	r1, #64	; 0x40
 8003d0a:	f7ff feff 	bl	8003b0c <_malloc_r>
 8003d0e:	6028      	str	r0, [r5, #0]
 8003d10:	6128      	str	r0, [r5, #16]
 8003d12:	b920      	cbnz	r0, 8003d1e <_svfiprintf_r+0x2e>
 8003d14:	230c      	movs	r3, #12
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	e0d1      	b.n	8003ec2 <_svfiprintf_r+0x1d2>
 8003d1e:	2340      	movs	r3, #64	; 0x40
 8003d20:	616b      	str	r3, [r5, #20]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9309      	str	r3, [sp, #36]	; 0x24
 8003d26:	2320      	movs	r3, #32
 8003d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d2c:	2330      	movs	r3, #48	; 0x30
 8003d2e:	f04f 0901 	mov.w	r9, #1
 8003d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003edc <_svfiprintf_r+0x1ec>
 8003d3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d3e:	4623      	mov	r3, r4
 8003d40:	469a      	mov	sl, r3
 8003d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d46:	b10a      	cbz	r2, 8003d4c <_svfiprintf_r+0x5c>
 8003d48:	2a25      	cmp	r2, #37	; 0x25
 8003d4a:	d1f9      	bne.n	8003d40 <_svfiprintf_r+0x50>
 8003d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d50:	d00b      	beq.n	8003d6a <_svfiprintf_r+0x7a>
 8003d52:	465b      	mov	r3, fp
 8003d54:	4622      	mov	r2, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	4638      	mov	r0, r7
 8003d5a:	f7ff ff6d 	bl	8003c38 <__ssputs_r>
 8003d5e:	3001      	adds	r0, #1
 8003d60:	f000 80aa 	beq.w	8003eb8 <_svfiprintf_r+0x1c8>
 8003d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d66:	445a      	add	r2, fp
 8003d68:	9209      	str	r2, [sp, #36]	; 0x24
 8003d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80a2 	beq.w	8003eb8 <_svfiprintf_r+0x1c8>
 8003d74:	2300      	movs	r3, #0
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7e:	f10a 0a01 	add.w	sl, sl, #1
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	9307      	str	r3, [sp, #28]
 8003d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8003d8c:	4654      	mov	r4, sl
 8003d8e:	2205      	movs	r2, #5
 8003d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d94:	4851      	ldr	r0, [pc, #324]	; (8003edc <_svfiprintf_r+0x1ec>)
 8003d96:	f000 fa43 	bl	8004220 <memchr>
 8003d9a:	9a04      	ldr	r2, [sp, #16]
 8003d9c:	b9d8      	cbnz	r0, 8003dd6 <_svfiprintf_r+0xe6>
 8003d9e:	06d0      	lsls	r0, r2, #27
 8003da0:	bf44      	itt	mi
 8003da2:	2320      	movmi	r3, #32
 8003da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da8:	0711      	lsls	r1, r2, #28
 8003daa:	bf44      	itt	mi
 8003dac:	232b      	movmi	r3, #43	; 0x2b
 8003dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db2:	f89a 3000 	ldrb.w	r3, [sl]
 8003db6:	2b2a      	cmp	r3, #42	; 0x2a
 8003db8:	d015      	beq.n	8003de6 <_svfiprintf_r+0xf6>
 8003dba:	4654      	mov	r4, sl
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f04f 0c0a 	mov.w	ip, #10
 8003dc2:	9a07      	ldr	r2, [sp, #28]
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dca:	3b30      	subs	r3, #48	; 0x30
 8003dcc:	2b09      	cmp	r3, #9
 8003dce:	d94e      	bls.n	8003e6e <_svfiprintf_r+0x17e>
 8003dd0:	b1b0      	cbz	r0, 8003e00 <_svfiprintf_r+0x110>
 8003dd2:	9207      	str	r2, [sp, #28]
 8003dd4:	e014      	b.n	8003e00 <_svfiprintf_r+0x110>
 8003dd6:	eba0 0308 	sub.w	r3, r0, r8
 8003dda:	fa09 f303 	lsl.w	r3, r9, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	46a2      	mov	sl, r4
 8003de2:	9304      	str	r3, [sp, #16]
 8003de4:	e7d2      	b.n	8003d8c <_svfiprintf_r+0x9c>
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	1d19      	adds	r1, r3, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	9103      	str	r1, [sp, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bfbb      	ittet	lt
 8003df2:	425b      	neglt	r3, r3
 8003df4:	f042 0202 	orrlt.w	r2, r2, #2
 8003df8:	9307      	strge	r3, [sp, #28]
 8003dfa:	9307      	strlt	r3, [sp, #28]
 8003dfc:	bfb8      	it	lt
 8003dfe:	9204      	strlt	r2, [sp, #16]
 8003e00:	7823      	ldrb	r3, [r4, #0]
 8003e02:	2b2e      	cmp	r3, #46	; 0x2e
 8003e04:	d10c      	bne.n	8003e20 <_svfiprintf_r+0x130>
 8003e06:	7863      	ldrb	r3, [r4, #1]
 8003e08:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0a:	d135      	bne.n	8003e78 <_svfiprintf_r+0x188>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	3402      	adds	r4, #2
 8003e10:	1d1a      	adds	r2, r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	9203      	str	r2, [sp, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bfb8      	it	lt
 8003e1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e1e:	9305      	str	r3, [sp, #20]
 8003e20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003eec <_svfiprintf_r+0x1fc>
 8003e24:	2203      	movs	r2, #3
 8003e26:	4650      	mov	r0, sl
 8003e28:	7821      	ldrb	r1, [r4, #0]
 8003e2a:	f000 f9f9 	bl	8004220 <memchr>
 8003e2e:	b140      	cbz	r0, 8003e42 <_svfiprintf_r+0x152>
 8003e30:	2340      	movs	r3, #64	; 0x40
 8003e32:	eba0 000a 	sub.w	r0, r0, sl
 8003e36:	fa03 f000 	lsl.w	r0, r3, r0
 8003e3a:	9b04      	ldr	r3, [sp, #16]
 8003e3c:	3401      	adds	r4, #1
 8003e3e:	4303      	orrs	r3, r0
 8003e40:	9304      	str	r3, [sp, #16]
 8003e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e46:	2206      	movs	r2, #6
 8003e48:	4825      	ldr	r0, [pc, #148]	; (8003ee0 <_svfiprintf_r+0x1f0>)
 8003e4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e4e:	f000 f9e7 	bl	8004220 <memchr>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d038      	beq.n	8003ec8 <_svfiprintf_r+0x1d8>
 8003e56:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <_svfiprintf_r+0x1f4>)
 8003e58:	bb1b      	cbnz	r3, 8003ea2 <_svfiprintf_r+0x1b2>
 8003e5a:	9b03      	ldr	r3, [sp, #12]
 8003e5c:	3307      	adds	r3, #7
 8003e5e:	f023 0307 	bic.w	r3, r3, #7
 8003e62:	3308      	adds	r3, #8
 8003e64:	9303      	str	r3, [sp, #12]
 8003e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e68:	4433      	add	r3, r6
 8003e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e6c:	e767      	b.n	8003d3e <_svfiprintf_r+0x4e>
 8003e6e:	460c      	mov	r4, r1
 8003e70:	2001      	movs	r0, #1
 8003e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e76:	e7a5      	b.n	8003dc4 <_svfiprintf_r+0xd4>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f04f 0c0a 	mov.w	ip, #10
 8003e7e:	4619      	mov	r1, r3
 8003e80:	3401      	adds	r4, #1
 8003e82:	9305      	str	r3, [sp, #20]
 8003e84:	4620      	mov	r0, r4
 8003e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e8a:	3a30      	subs	r2, #48	; 0x30
 8003e8c:	2a09      	cmp	r2, #9
 8003e8e:	d903      	bls.n	8003e98 <_svfiprintf_r+0x1a8>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0c5      	beq.n	8003e20 <_svfiprintf_r+0x130>
 8003e94:	9105      	str	r1, [sp, #20]
 8003e96:	e7c3      	b.n	8003e20 <_svfiprintf_r+0x130>
 8003e98:	4604      	mov	r4, r0
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ea0:	e7f0      	b.n	8003e84 <_svfiprintf_r+0x194>
 8003ea2:	ab03      	add	r3, sp, #12
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	462a      	mov	r2, r5
 8003ea8:	4638      	mov	r0, r7
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <_svfiprintf_r+0x1f8>)
 8003eac:	a904      	add	r1, sp, #16
 8003eae:	f3af 8000 	nop.w
 8003eb2:	1c42      	adds	r2, r0, #1
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	d1d6      	bne.n	8003e66 <_svfiprintf_r+0x176>
 8003eb8:	89ab      	ldrh	r3, [r5, #12]
 8003eba:	065b      	lsls	r3, r3, #25
 8003ebc:	f53f af2c 	bmi.w	8003d18 <_svfiprintf_r+0x28>
 8003ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ec2:	b01d      	add	sp, #116	; 0x74
 8003ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec8:	ab03      	add	r3, sp, #12
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	462a      	mov	r2, r5
 8003ece:	4638      	mov	r0, r7
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <_svfiprintf_r+0x1f8>)
 8003ed2:	a904      	add	r1, sp, #16
 8003ed4:	f000 f87c 	bl	8003fd0 <_printf_i>
 8003ed8:	e7eb      	b.n	8003eb2 <_svfiprintf_r+0x1c2>
 8003eda:	bf00      	nop
 8003edc:	08004370 	.word	0x08004370
 8003ee0:	0800437a 	.word	0x0800437a
 8003ee4:	00000000 	.word	0x00000000
 8003ee8:	08003c39 	.word	0x08003c39
 8003eec:	08004376 	.word	0x08004376

08003ef0 <_printf_common>:
 8003ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	4616      	mov	r6, r2
 8003ef6:	4699      	mov	r9, r3
 8003ef8:	688a      	ldr	r2, [r1, #8]
 8003efa:	690b      	ldr	r3, [r1, #16]
 8003efc:	4607      	mov	r7, r0
 8003efe:	4293      	cmp	r3, r2
 8003f00:	bfb8      	it	lt
 8003f02:	4613      	movlt	r3, r2
 8003f04:	6033      	str	r3, [r6, #0]
 8003f06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f10:	b10a      	cbz	r2, 8003f16 <_printf_common+0x26>
 8003f12:	3301      	adds	r3, #1
 8003f14:	6033      	str	r3, [r6, #0]
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	0699      	lsls	r1, r3, #26
 8003f1a:	bf42      	ittt	mi
 8003f1c:	6833      	ldrmi	r3, [r6, #0]
 8003f1e:	3302      	addmi	r3, #2
 8003f20:	6033      	strmi	r3, [r6, #0]
 8003f22:	6825      	ldr	r5, [r4, #0]
 8003f24:	f015 0506 	ands.w	r5, r5, #6
 8003f28:	d106      	bne.n	8003f38 <_printf_common+0x48>
 8003f2a:	f104 0a19 	add.w	sl, r4, #25
 8003f2e:	68e3      	ldr	r3, [r4, #12]
 8003f30:	6832      	ldr	r2, [r6, #0]
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	42ab      	cmp	r3, r5
 8003f36:	dc28      	bgt.n	8003f8a <_printf_common+0x9a>
 8003f38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f3c:	1e13      	subs	r3, r2, #0
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	bf18      	it	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	0692      	lsls	r2, r2, #26
 8003f46:	d42d      	bmi.n	8003fa4 <_printf_common+0xb4>
 8003f48:	4649      	mov	r1, r9
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f50:	47c0      	blx	r8
 8003f52:	3001      	adds	r0, #1
 8003f54:	d020      	beq.n	8003f98 <_printf_common+0xa8>
 8003f56:	6823      	ldr	r3, [r4, #0]
 8003f58:	68e5      	ldr	r5, [r4, #12]
 8003f5a:	f003 0306 	and.w	r3, r3, #6
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	bf18      	it	ne
 8003f62:	2500      	movne	r5, #0
 8003f64:	6832      	ldr	r2, [r6, #0]
 8003f66:	f04f 0600 	mov.w	r6, #0
 8003f6a:	68a3      	ldr	r3, [r4, #8]
 8003f6c:	bf08      	it	eq
 8003f6e:	1aad      	subeq	r5, r5, r2
 8003f70:	6922      	ldr	r2, [r4, #16]
 8003f72:	bf08      	it	eq
 8003f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	bfc4      	itt	gt
 8003f7c:	1a9b      	subgt	r3, r3, r2
 8003f7e:	18ed      	addgt	r5, r5, r3
 8003f80:	341a      	adds	r4, #26
 8003f82:	42b5      	cmp	r5, r6
 8003f84:	d11a      	bne.n	8003fbc <_printf_common+0xcc>
 8003f86:	2000      	movs	r0, #0
 8003f88:	e008      	b.n	8003f9c <_printf_common+0xac>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4652      	mov	r2, sl
 8003f8e:	4649      	mov	r1, r9
 8003f90:	4638      	mov	r0, r7
 8003f92:	47c0      	blx	r8
 8003f94:	3001      	adds	r0, #1
 8003f96:	d103      	bne.n	8003fa0 <_printf_common+0xb0>
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa0:	3501      	adds	r5, #1
 8003fa2:	e7c4      	b.n	8003f2e <_printf_common+0x3e>
 8003fa4:	2030      	movs	r0, #48	; 0x30
 8003fa6:	18e1      	adds	r1, r4, r3
 8003fa8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb2:	4422      	add	r2, r4
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fba:	e7c5      	b.n	8003f48 <_printf_common+0x58>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	47c0      	blx	r8
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d0e6      	beq.n	8003f98 <_printf_common+0xa8>
 8003fca:	3601      	adds	r6, #1
 8003fcc:	e7d9      	b.n	8003f82 <_printf_common+0x92>
	...

08003fd0 <_printf_i>:
 8003fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	7e27      	ldrb	r7, [r4, #24]
 8003fd8:	4691      	mov	r9, r2
 8003fda:	2f78      	cmp	r7, #120	; 0x78
 8003fdc:	4680      	mov	r8, r0
 8003fde:	469a      	mov	sl, r3
 8003fe0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fe6:	d807      	bhi.n	8003ff8 <_printf_i+0x28>
 8003fe8:	2f62      	cmp	r7, #98	; 0x62
 8003fea:	d80a      	bhi.n	8004002 <_printf_i+0x32>
 8003fec:	2f00      	cmp	r7, #0
 8003fee:	f000 80d9 	beq.w	80041a4 <_printf_i+0x1d4>
 8003ff2:	2f58      	cmp	r7, #88	; 0x58
 8003ff4:	f000 80a4 	beq.w	8004140 <_printf_i+0x170>
 8003ff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004000:	e03a      	b.n	8004078 <_printf_i+0xa8>
 8004002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004006:	2b15      	cmp	r3, #21
 8004008:	d8f6      	bhi.n	8003ff8 <_printf_i+0x28>
 800400a:	a001      	add	r0, pc, #4	; (adr r0, 8004010 <_printf_i+0x40>)
 800400c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004010:	08004069 	.word	0x08004069
 8004014:	0800407d 	.word	0x0800407d
 8004018:	08003ff9 	.word	0x08003ff9
 800401c:	08003ff9 	.word	0x08003ff9
 8004020:	08003ff9 	.word	0x08003ff9
 8004024:	08003ff9 	.word	0x08003ff9
 8004028:	0800407d 	.word	0x0800407d
 800402c:	08003ff9 	.word	0x08003ff9
 8004030:	08003ff9 	.word	0x08003ff9
 8004034:	08003ff9 	.word	0x08003ff9
 8004038:	08003ff9 	.word	0x08003ff9
 800403c:	0800418b 	.word	0x0800418b
 8004040:	080040ad 	.word	0x080040ad
 8004044:	0800416d 	.word	0x0800416d
 8004048:	08003ff9 	.word	0x08003ff9
 800404c:	08003ff9 	.word	0x08003ff9
 8004050:	080041ad 	.word	0x080041ad
 8004054:	08003ff9 	.word	0x08003ff9
 8004058:	080040ad 	.word	0x080040ad
 800405c:	08003ff9 	.word	0x08003ff9
 8004060:	08003ff9 	.word	0x08003ff9
 8004064:	08004175 	.word	0x08004175
 8004068:	680b      	ldr	r3, [r1, #0]
 800406a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800406e:	1d1a      	adds	r2, r3, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	600a      	str	r2, [r1, #0]
 8004074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004078:	2301      	movs	r3, #1
 800407a:	e0a4      	b.n	80041c6 <_printf_i+0x1f6>
 800407c:	6825      	ldr	r5, [r4, #0]
 800407e:	6808      	ldr	r0, [r1, #0]
 8004080:	062e      	lsls	r6, r5, #24
 8004082:	f100 0304 	add.w	r3, r0, #4
 8004086:	d50a      	bpl.n	800409e <_printf_i+0xce>
 8004088:	6805      	ldr	r5, [r0, #0]
 800408a:	600b      	str	r3, [r1, #0]
 800408c:	2d00      	cmp	r5, #0
 800408e:	da03      	bge.n	8004098 <_printf_i+0xc8>
 8004090:	232d      	movs	r3, #45	; 0x2d
 8004092:	426d      	negs	r5, r5
 8004094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004098:	230a      	movs	r3, #10
 800409a:	485e      	ldr	r0, [pc, #376]	; (8004214 <_printf_i+0x244>)
 800409c:	e019      	b.n	80040d2 <_printf_i+0x102>
 800409e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80040a2:	6805      	ldr	r5, [r0, #0]
 80040a4:	600b      	str	r3, [r1, #0]
 80040a6:	bf18      	it	ne
 80040a8:	b22d      	sxthne	r5, r5
 80040aa:	e7ef      	b.n	800408c <_printf_i+0xbc>
 80040ac:	680b      	ldr	r3, [r1, #0]
 80040ae:	6825      	ldr	r5, [r4, #0]
 80040b0:	1d18      	adds	r0, r3, #4
 80040b2:	6008      	str	r0, [r1, #0]
 80040b4:	0628      	lsls	r0, r5, #24
 80040b6:	d501      	bpl.n	80040bc <_printf_i+0xec>
 80040b8:	681d      	ldr	r5, [r3, #0]
 80040ba:	e002      	b.n	80040c2 <_printf_i+0xf2>
 80040bc:	0669      	lsls	r1, r5, #25
 80040be:	d5fb      	bpl.n	80040b8 <_printf_i+0xe8>
 80040c0:	881d      	ldrh	r5, [r3, #0]
 80040c2:	2f6f      	cmp	r7, #111	; 0x6f
 80040c4:	bf0c      	ite	eq
 80040c6:	2308      	moveq	r3, #8
 80040c8:	230a      	movne	r3, #10
 80040ca:	4852      	ldr	r0, [pc, #328]	; (8004214 <_printf_i+0x244>)
 80040cc:	2100      	movs	r1, #0
 80040ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040d2:	6866      	ldr	r6, [r4, #4]
 80040d4:	2e00      	cmp	r6, #0
 80040d6:	bfa8      	it	ge
 80040d8:	6821      	ldrge	r1, [r4, #0]
 80040da:	60a6      	str	r6, [r4, #8]
 80040dc:	bfa4      	itt	ge
 80040de:	f021 0104 	bicge.w	r1, r1, #4
 80040e2:	6021      	strge	r1, [r4, #0]
 80040e4:	b90d      	cbnz	r5, 80040ea <_printf_i+0x11a>
 80040e6:	2e00      	cmp	r6, #0
 80040e8:	d04d      	beq.n	8004186 <_printf_i+0x1b6>
 80040ea:	4616      	mov	r6, r2
 80040ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80040f0:	fb03 5711 	mls	r7, r3, r1, r5
 80040f4:	5dc7      	ldrb	r7, [r0, r7]
 80040f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040fa:	462f      	mov	r7, r5
 80040fc:	42bb      	cmp	r3, r7
 80040fe:	460d      	mov	r5, r1
 8004100:	d9f4      	bls.n	80040ec <_printf_i+0x11c>
 8004102:	2b08      	cmp	r3, #8
 8004104:	d10b      	bne.n	800411e <_printf_i+0x14e>
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	07df      	lsls	r7, r3, #31
 800410a:	d508      	bpl.n	800411e <_printf_i+0x14e>
 800410c:	6923      	ldr	r3, [r4, #16]
 800410e:	6861      	ldr	r1, [r4, #4]
 8004110:	4299      	cmp	r1, r3
 8004112:	bfde      	ittt	le
 8004114:	2330      	movle	r3, #48	; 0x30
 8004116:	f806 3c01 	strble.w	r3, [r6, #-1]
 800411a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800411e:	1b92      	subs	r2, r2, r6
 8004120:	6122      	str	r2, [r4, #16]
 8004122:	464b      	mov	r3, r9
 8004124:	4621      	mov	r1, r4
 8004126:	4640      	mov	r0, r8
 8004128:	f8cd a000 	str.w	sl, [sp]
 800412c:	aa03      	add	r2, sp, #12
 800412e:	f7ff fedf 	bl	8003ef0 <_printf_common>
 8004132:	3001      	adds	r0, #1
 8004134:	d14c      	bne.n	80041d0 <_printf_i+0x200>
 8004136:	f04f 30ff 	mov.w	r0, #4294967295
 800413a:	b004      	add	sp, #16
 800413c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004140:	4834      	ldr	r0, [pc, #208]	; (8004214 <_printf_i+0x244>)
 8004142:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004146:	680e      	ldr	r6, [r1, #0]
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	f856 5b04 	ldr.w	r5, [r6], #4
 800414e:	061f      	lsls	r7, r3, #24
 8004150:	600e      	str	r6, [r1, #0]
 8004152:	d514      	bpl.n	800417e <_printf_i+0x1ae>
 8004154:	07d9      	lsls	r1, r3, #31
 8004156:	bf44      	itt	mi
 8004158:	f043 0320 	orrmi.w	r3, r3, #32
 800415c:	6023      	strmi	r3, [r4, #0]
 800415e:	b91d      	cbnz	r5, 8004168 <_printf_i+0x198>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f023 0320 	bic.w	r3, r3, #32
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	2310      	movs	r3, #16
 800416a:	e7af      	b.n	80040cc <_printf_i+0xfc>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	f043 0320 	orr.w	r3, r3, #32
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	2378      	movs	r3, #120	; 0x78
 8004176:	4828      	ldr	r0, [pc, #160]	; (8004218 <_printf_i+0x248>)
 8004178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800417c:	e7e3      	b.n	8004146 <_printf_i+0x176>
 800417e:	065e      	lsls	r6, r3, #25
 8004180:	bf48      	it	mi
 8004182:	b2ad      	uxthmi	r5, r5
 8004184:	e7e6      	b.n	8004154 <_printf_i+0x184>
 8004186:	4616      	mov	r6, r2
 8004188:	e7bb      	b.n	8004102 <_printf_i+0x132>
 800418a:	680b      	ldr	r3, [r1, #0]
 800418c:	6826      	ldr	r6, [r4, #0]
 800418e:	1d1d      	adds	r5, r3, #4
 8004190:	6960      	ldr	r0, [r4, #20]
 8004192:	600d      	str	r5, [r1, #0]
 8004194:	0635      	lsls	r5, r6, #24
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	d501      	bpl.n	800419e <_printf_i+0x1ce>
 800419a:	6018      	str	r0, [r3, #0]
 800419c:	e002      	b.n	80041a4 <_printf_i+0x1d4>
 800419e:	0671      	lsls	r1, r6, #25
 80041a0:	d5fb      	bpl.n	800419a <_printf_i+0x1ca>
 80041a2:	8018      	strh	r0, [r3, #0]
 80041a4:	2300      	movs	r3, #0
 80041a6:	4616      	mov	r6, r2
 80041a8:	6123      	str	r3, [r4, #16]
 80041aa:	e7ba      	b.n	8004122 <_printf_i+0x152>
 80041ac:	680b      	ldr	r3, [r1, #0]
 80041ae:	1d1a      	adds	r2, r3, #4
 80041b0:	600a      	str	r2, [r1, #0]
 80041b2:	681e      	ldr	r6, [r3, #0]
 80041b4:	2100      	movs	r1, #0
 80041b6:	4630      	mov	r0, r6
 80041b8:	6862      	ldr	r2, [r4, #4]
 80041ba:	f000 f831 	bl	8004220 <memchr>
 80041be:	b108      	cbz	r0, 80041c4 <_printf_i+0x1f4>
 80041c0:	1b80      	subs	r0, r0, r6
 80041c2:	6060      	str	r0, [r4, #4]
 80041c4:	6863      	ldr	r3, [r4, #4]
 80041c6:	6123      	str	r3, [r4, #16]
 80041c8:	2300      	movs	r3, #0
 80041ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ce:	e7a8      	b.n	8004122 <_printf_i+0x152>
 80041d0:	4632      	mov	r2, r6
 80041d2:	4649      	mov	r1, r9
 80041d4:	4640      	mov	r0, r8
 80041d6:	6923      	ldr	r3, [r4, #16]
 80041d8:	47d0      	blx	sl
 80041da:	3001      	adds	r0, #1
 80041dc:	d0ab      	beq.n	8004136 <_printf_i+0x166>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	079b      	lsls	r3, r3, #30
 80041e2:	d413      	bmi.n	800420c <_printf_i+0x23c>
 80041e4:	68e0      	ldr	r0, [r4, #12]
 80041e6:	9b03      	ldr	r3, [sp, #12]
 80041e8:	4298      	cmp	r0, r3
 80041ea:	bfb8      	it	lt
 80041ec:	4618      	movlt	r0, r3
 80041ee:	e7a4      	b.n	800413a <_printf_i+0x16a>
 80041f0:	2301      	movs	r3, #1
 80041f2:	4632      	mov	r2, r6
 80041f4:	4649      	mov	r1, r9
 80041f6:	4640      	mov	r0, r8
 80041f8:	47d0      	blx	sl
 80041fa:	3001      	adds	r0, #1
 80041fc:	d09b      	beq.n	8004136 <_printf_i+0x166>
 80041fe:	3501      	adds	r5, #1
 8004200:	68e3      	ldr	r3, [r4, #12]
 8004202:	9903      	ldr	r1, [sp, #12]
 8004204:	1a5b      	subs	r3, r3, r1
 8004206:	42ab      	cmp	r3, r5
 8004208:	dcf2      	bgt.n	80041f0 <_printf_i+0x220>
 800420a:	e7eb      	b.n	80041e4 <_printf_i+0x214>
 800420c:	2500      	movs	r5, #0
 800420e:	f104 0619 	add.w	r6, r4, #25
 8004212:	e7f5      	b.n	8004200 <_printf_i+0x230>
 8004214:	08004381 	.word	0x08004381
 8004218:	08004392 	.word	0x08004392

0800421c <__retarget_lock_acquire_recursive>:
 800421c:	4770      	bx	lr

0800421e <__retarget_lock_release_recursive>:
 800421e:	4770      	bx	lr

08004220 <memchr>:
 8004220:	4603      	mov	r3, r0
 8004222:	b510      	push	{r4, lr}
 8004224:	b2c9      	uxtb	r1, r1
 8004226:	4402      	add	r2, r0
 8004228:	4293      	cmp	r3, r2
 800422a:	4618      	mov	r0, r3
 800422c:	d101      	bne.n	8004232 <memchr+0x12>
 800422e:	2000      	movs	r0, #0
 8004230:	e003      	b.n	800423a <memchr+0x1a>
 8004232:	7804      	ldrb	r4, [r0, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	428c      	cmp	r4, r1
 8004238:	d1f6      	bne.n	8004228 <memchr+0x8>
 800423a:	bd10      	pop	{r4, pc}

0800423c <memcpy>:
 800423c:	440a      	add	r2, r1
 800423e:	4291      	cmp	r1, r2
 8004240:	f100 33ff 	add.w	r3, r0, #4294967295
 8004244:	d100      	bne.n	8004248 <memcpy+0xc>
 8004246:	4770      	bx	lr
 8004248:	b510      	push	{r4, lr}
 800424a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800424e:	4291      	cmp	r1, r2
 8004250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004254:	d1f9      	bne.n	800424a <memcpy+0xe>
 8004256:	bd10      	pop	{r4, pc}

08004258 <memmove>:
 8004258:	4288      	cmp	r0, r1
 800425a:	b510      	push	{r4, lr}
 800425c:	eb01 0402 	add.w	r4, r1, r2
 8004260:	d902      	bls.n	8004268 <memmove+0x10>
 8004262:	4284      	cmp	r4, r0
 8004264:	4623      	mov	r3, r4
 8004266:	d807      	bhi.n	8004278 <memmove+0x20>
 8004268:	1e43      	subs	r3, r0, #1
 800426a:	42a1      	cmp	r1, r4
 800426c:	d008      	beq.n	8004280 <memmove+0x28>
 800426e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004276:	e7f8      	b.n	800426a <memmove+0x12>
 8004278:	4601      	mov	r1, r0
 800427a:	4402      	add	r2, r0
 800427c:	428a      	cmp	r2, r1
 800427e:	d100      	bne.n	8004282 <memmove+0x2a>
 8004280:	bd10      	pop	{r4, pc}
 8004282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800428a:	e7f7      	b.n	800427c <memmove+0x24>

0800428c <_realloc_r>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	4607      	mov	r7, r0
 8004290:	4614      	mov	r4, r2
 8004292:	460e      	mov	r6, r1
 8004294:	b921      	cbnz	r1, 80042a0 <_realloc_r+0x14>
 8004296:	4611      	mov	r1, r2
 8004298:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800429c:	f7ff bc36 	b.w	8003b0c <_malloc_r>
 80042a0:	b922      	cbnz	r2, 80042ac <_realloc_r+0x20>
 80042a2:	f7ff fbe7 	bl	8003a74 <_free_r>
 80042a6:	4625      	mov	r5, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042ac:	f000 f814 	bl	80042d8 <_malloc_usable_size_r>
 80042b0:	42a0      	cmp	r0, r4
 80042b2:	d20f      	bcs.n	80042d4 <_realloc_r+0x48>
 80042b4:	4621      	mov	r1, r4
 80042b6:	4638      	mov	r0, r7
 80042b8:	f7ff fc28 	bl	8003b0c <_malloc_r>
 80042bc:	4605      	mov	r5, r0
 80042be:	2800      	cmp	r0, #0
 80042c0:	d0f2      	beq.n	80042a8 <_realloc_r+0x1c>
 80042c2:	4631      	mov	r1, r6
 80042c4:	4622      	mov	r2, r4
 80042c6:	f7ff ffb9 	bl	800423c <memcpy>
 80042ca:	4631      	mov	r1, r6
 80042cc:	4638      	mov	r0, r7
 80042ce:	f7ff fbd1 	bl	8003a74 <_free_r>
 80042d2:	e7e9      	b.n	80042a8 <_realloc_r+0x1c>
 80042d4:	4635      	mov	r5, r6
 80042d6:	e7e7      	b.n	80042a8 <_realloc_r+0x1c>

080042d8 <_malloc_usable_size_r>:
 80042d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042dc:	1f18      	subs	r0, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bfbc      	itt	lt
 80042e2:	580b      	ldrlt	r3, [r1, r0]
 80042e4:	18c0      	addlt	r0, r0, r3
 80042e6:	4770      	bx	lr

080042e8 <_init>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	bf00      	nop
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr

080042f4 <_fini>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr
