
Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003518  08003518  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08003518  08003518  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003518  08003518  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08003520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200000cc  080035ec  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080035ec  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3bb  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002383  00000000  00000000  0002e4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00030838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00031500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001806c  00000000  00000000  000320e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da11  00000000  00000000  0004a14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a21f  00000000  00000000  00057b5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1d7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d8  00000000  00000000  000e1dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	080034d8 	.word	0x080034d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	080034d8 	.word	0x080034d8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 f9f0 	bl	8001534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f814 	bl	8000180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f924 	bl	80003a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f8f8 	bl	8000350 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000160:	f000 f850 	bl	8000204 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 f89a 	bl	800029c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000168:	4804      	ldr	r0, [pc, #16]	; (800017c <main+0x30>)
 800016a:	f002 f993 	bl	8002494 <HAL_TIM_Base_Start_IT>
  timer_init();
 800016e:	f001 f8ff 	bl	8001370 <timer_init>
  traffic_init();
 8000172:	f000 fb23 	bl	80007bc <traffic_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  traffic_fsm();
 8000176:	f000 fd73 	bl	8000c60 <traffic_fsm>
 800017a:	e7fc      	b.n	8000176 <main+0x2a>
 800017c:	20000178 	.word	0x20000178

08000180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b090      	sub	sp, #64	; 0x40
 8000184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000186:	f107 0318 	add.w	r3, r7, #24
 800018a:	2228      	movs	r2, #40	; 0x28
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f003 f8d6 	bl	8003340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a2:	2302      	movs	r3, #2
 80001a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a6:	2301      	movs	r3, #1
 80001a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001aa:	2310      	movs	r3, #16
 80001ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ae:	2302      	movs	r3, #2
 80001b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b2:	2300      	movs	r3, #0
 80001b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001bc:	f107 0318 	add.w	r3, r7, #24
 80001c0:	4618      	mov	r0, r3
 80001c2:	f001 fcfd 	bl	8001bc0 <HAL_RCC_OscConfig>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001cc:	f000 f996 	bl	80004fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d0:	230f      	movs	r3, #15
 80001d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d4:	2302      	movs	r3, #2
 80001d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	2102      	movs	r1, #2
 80001ea:	4618      	mov	r0, r3
 80001ec:	f001 ff68 	bl	80020c0 <HAL_RCC_ClockConfig>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f6:	f000 f981 	bl	80004fc <Error_Handler>
  }
}
 80001fa:	bf00      	nop
 80001fc:	3740      	adds	r7, #64	; 0x40
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
	...

08000204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b086      	sub	sp, #24
 8000208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800020a:	f107 0308 	add.w	r3, r7, #8
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000218:	463b      	mov	r3, r7
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000220:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <MX_TIM2_Init+0x94>)
 8000222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000226:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8000228:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <MX_TIM2_Init+0x94>)
 800022a:	223f      	movs	r2, #63	; 0x3f
 800022c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800022e:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <MX_TIM2_Init+0x94>)
 8000230:	2200      	movs	r2, #0
 8000232:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <MX_TIM2_Init+0x94>)
 8000236:	f242 720f 	movw	r2, #9999	; 0x270f
 800023a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800023c:	4b16      	ldr	r3, [pc, #88]	; (8000298 <MX_TIM2_Init+0x94>)
 800023e:	2200      	movs	r2, #0
 8000240:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000242:	4b15      	ldr	r3, [pc, #84]	; (8000298 <MX_TIM2_Init+0x94>)
 8000244:	2200      	movs	r2, #0
 8000246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000248:	4813      	ldr	r0, [pc, #76]	; (8000298 <MX_TIM2_Init+0x94>)
 800024a:	f002 f8d3 	bl	80023f4 <HAL_TIM_Base_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000254:	f000 f952 	bl	80004fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800025c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800025e:	f107 0308 	add.w	r3, r7, #8
 8000262:	4619      	mov	r1, r3
 8000264:	480c      	ldr	r0, [pc, #48]	; (8000298 <MX_TIM2_Init+0x94>)
 8000266:	f002 fb7d 	bl	8002964 <HAL_TIM_ConfigClockSource>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000270:	f000 f944 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000274:	2300      	movs	r3, #0
 8000276:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000278:	2300      	movs	r3, #0
 800027a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800027c:	463b      	mov	r3, r7
 800027e:	4619      	mov	r1, r3
 8000280:	4805      	ldr	r0, [pc, #20]	; (8000298 <MX_TIM2_Init+0x94>)
 8000282:	f002 fed7 	bl	8003034 <HAL_TIMEx_MasterConfigSynchronization>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800028c:	f000 f936 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	3718      	adds	r7, #24
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000178 	.word	0x20000178

0800029c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08a      	sub	sp, #40	; 0x28
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a2:	f107 0320 	add.w	r3, r7, #32
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]
 80002ba:	615a      	str	r2, [r3, #20]
 80002bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002be:	4b22      	ldr	r3, [pc, #136]	; (8000348 <MX_TIM3_Init+0xac>)
 80002c0:	4a22      	ldr	r2, [pc, #136]	; (800034c <MX_TIM3_Init+0xb0>)
 80002c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80002c4:	4b20      	ldr	r3, [pc, #128]	; (8000348 <MX_TIM3_Init+0xac>)
 80002c6:	223f      	movs	r2, #63	; 0x3f
 80002c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ca:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <MX_TIM3_Init+0xac>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80002d0:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <MX_TIM3_Init+0xac>)
 80002d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <MX_TIM3_Init+0xac>)
 80002da:	2200      	movs	r2, #0
 80002dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <MX_TIM3_Init+0xac>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80002e4:	4818      	ldr	r0, [pc, #96]	; (8000348 <MX_TIM3_Init+0xac>)
 80002e6:	f002 f927 	bl	8002538 <HAL_TIM_PWM_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80002f0:	f000 f904 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f4:	2300      	movs	r3, #0
 80002f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80002fc:	f107 0320 	add.w	r3, r7, #32
 8000300:	4619      	mov	r1, r3
 8000302:	4811      	ldr	r0, [pc, #68]	; (8000348 <MX_TIM3_Init+0xac>)
 8000304:	f002 fe96 	bl	8003034 <HAL_TIMEx_MasterConfigSynchronization>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800030e:	f000 f8f5 	bl	80004fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000312:	2360      	movs	r3, #96	; 0x60
 8000314:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800031a:	2300      	movs	r3, #0
 800031c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	4619      	mov	r1, r3
 8000328:	4807      	ldr	r0, [pc, #28]	; (8000348 <MX_TIM3_Init+0xac>)
 800032a:	f002 fa5d 	bl	80027e8 <HAL_TIM_PWM_ConfigChannel>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000334:	f000 f8e2 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000338:	4803      	ldr	r0, [pc, #12]	; (8000348 <MX_TIM3_Init+0xac>)
 800033a:	f000 f959 	bl	80005f0 <HAL_TIM_MspPostInit>

}
 800033e:	bf00      	nop
 8000340:	3728      	adds	r7, #40	; 0x28
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	20000130 	.word	0x20000130
 800034c:	40000400 	.word	0x40000400

08000350 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000356:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <MX_USART2_UART_Init+0x50>)
 8000358:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800035a:	4b10      	ldr	r3, [pc, #64]	; (800039c <MX_USART2_UART_Init+0x4c>)
 800035c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000360:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000368:	4b0c      	ldr	r3, [pc, #48]	; (800039c <MX_USART2_UART_Init+0x4c>)
 800036a:	2200      	movs	r2, #0
 800036c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000376:	220c      	movs	r2, #12
 8000378:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037a:	4b08      	ldr	r3, [pc, #32]	; (800039c <MX_USART2_UART_Init+0x4c>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <MX_USART2_UART_Init+0x4c>)
 8000388:	f002 fec4 	bl	8003114 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000392:	f000 f8b3 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200001c0 	.word	0x200001c0
 80003a0:	40004400 	.word	0x40004400

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b8:	4b45      	ldr	r3, [pc, #276]	; (80004d0 <MX_GPIO_Init+0x12c>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a44      	ldr	r2, [pc, #272]	; (80004d0 <MX_GPIO_Init+0x12c>)
 80003be:	f043 0310 	orr.w	r3, r3, #16
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b42      	ldr	r3, [pc, #264]	; (80004d0 <MX_GPIO_Init+0x12c>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0310 	and.w	r3, r3, #16
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d0:	4b3f      	ldr	r3, [pc, #252]	; (80004d0 <MX_GPIO_Init+0x12c>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a3e      	ldr	r2, [pc, #248]	; (80004d0 <MX_GPIO_Init+0x12c>)
 80003d6:	f043 0320 	orr.w	r3, r3, #32
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b3c      	ldr	r3, [pc, #240]	; (80004d0 <MX_GPIO_Init+0x12c>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f003 0320 	and.w	r3, r3, #32
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	4b39      	ldr	r3, [pc, #228]	; (80004d0 <MX_GPIO_Init+0x12c>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a38      	ldr	r2, [pc, #224]	; (80004d0 <MX_GPIO_Init+0x12c>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]
 80003f4:	4b36      	ldr	r3, [pc, #216]	; (80004d0 <MX_GPIO_Init+0x12c>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	f003 0304 	and.w	r3, r3, #4
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000400:	4b33      	ldr	r3, [pc, #204]	; (80004d0 <MX_GPIO_Init+0x12c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a32      	ldr	r2, [pc, #200]	; (80004d0 <MX_GPIO_Init+0x12c>)
 8000406:	f043 0308 	orr.w	r3, r3, #8
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <MX_GPIO_Init+0x12c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0308 	and.w	r3, r3, #8
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800041e:	482d      	ldr	r0, [pc, #180]	; (80004d4 <MX_GPIO_Init+0x130>)
 8000420:	f001 fb93 	bl	8001b4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800042a:	482b      	ldr	r0, [pc, #172]	; (80004d8 <MX_GPIO_Init+0x134>)
 800042c:	f001 fb8d 	bl	8001b4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000436:	4b29      	ldr	r3, [pc, #164]	; (80004dc <MX_GPIO_Init+0x138>)
 8000438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043a:	2300      	movs	r3, #0
 800043c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	4826      	ldr	r0, [pc, #152]	; (80004e0 <MX_GPIO_Init+0x13c>)
 8000446:	f001 f9e5 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_BTN_Pin BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = PD_BTN_Pin|BTN_1_Pin|BTN_2_Pin;
 800044a:	2313      	movs	r3, #19
 800044c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800044e:	2300      	movs	r3, #0
 8000450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000452:	2301      	movs	r3, #1
 8000454:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	4619      	mov	r1, r3
 800045c:	481d      	ldr	r0, [pc, #116]	; (80004d4 <MX_GPIO_Init+0x130>)
 800045e:	f001 f9d9 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PD_LED_1_Pin TR_LED_A_0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin;
 8000462:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8000466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000468:	2301      	movs	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046c:	2300      	movs	r3, #0
 800046e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	2302      	movs	r3, #2
 8000472:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f107 0310 	add.w	r3, r7, #16
 8000478:	4619      	mov	r1, r3
 800047a:	4816      	ldr	r0, [pc, #88]	; (80004d4 <MX_GPIO_Init+0x130>)
 800047c:	f001 f9ca 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin;
 8000480:	2301      	movs	r3, #1
 8000482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000488:	2301      	movs	r3, #1
 800048a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_3_GPIO_Port, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4811      	ldr	r0, [pc, #68]	; (80004d8 <MX_GPIO_Init+0x134>)
 8000494:	f001 f9be 	bl	8001814 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_LED_0_Pin TR_LED_A_1_Pin TR_LED_B_1_Pin TR_LED_B_0_Pin */
  GPIO_InitStruct.Pin = PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin;
 8000498:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <MX_GPIO_Init+0x134>)
 80004b2:	f001 f9af 	bl	8001814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2100      	movs	r1, #0
 80004ba:	2028      	movs	r0, #40	; 0x28
 80004bc:	f001 f973 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004c0:	2028      	movs	r0, #40	; 0x28
 80004c2:	f001 f98c 	bl	80017de <HAL_NVIC_EnableIRQ>

}
 80004c6:	bf00      	nop
 80004c8:	3720      	adds	r7, #32
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010800 	.word	0x40010800
 80004d8:	40010c00 	.word	0x40010c00
 80004dc:	10110000 	.word	0x10110000
 80004e0:	40011000 	.word	0x40011000

080004e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	timer_run();
 80004ec:	f000 ff4e 	bl	800138c <timer_run>
	button_reading();
 80004f0:	f000 fc9e 	bl	8000e30 <button_reading>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler+0x8>
	...

08000508 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_MspInit+0x5c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a14      	ldr	r2, [pc, #80]	; (8000564 <HAL_MspInit+0x5c>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_MspInit+0x5c>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x5c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_MspInit+0x5c>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000530:	61d3      	str	r3, [r2, #28]
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x5c>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_MspInit+0x60>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_MspInit+0x60>)
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000
 8000568:	40010000 	.word	0x40010000

0800056c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800057c:	d113      	bne.n	80005a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <HAL_TIM_Base_MspInit+0x44>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a0b      	ldr	r2, [pc, #44]	; (80005b0 <HAL_TIM_Base_MspInit+0x44>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <HAL_TIM_Base_MspInit+0x44>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2100      	movs	r1, #0
 800059a:	201c      	movs	r0, #28
 800059c:	f001 f903 	bl	80017a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005a0:	201c      	movs	r0, #28
 80005a2:	f001 f91c 	bl	80017de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <HAL_TIM_PWM_MspInit+0x34>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d10b      	bne.n	80005de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_TIM_PWM_MspInit+0x38>)
 80005c8:	69db      	ldr	r3, [r3, #28]
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <HAL_TIM_PWM_MspInit+0x38>)
 80005cc:	f043 0302 	orr.w	r3, r3, #2
 80005d0:	61d3      	str	r3, [r2, #28]
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_TIM_PWM_MspInit+0x38>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40000400 	.word	0x40000400
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <HAL_TIM_MspPostInit+0x58>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d117      	bne.n	8000640 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_TIM_MspPostInit+0x5c>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <HAL_TIM_MspPostInit+0x5c>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <HAL_TIM_MspPostInit+0x5c>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PD_BUZZER_Pin;
 8000628:	2340      	movs	r3, #64	; 0x40
 800062a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PD_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <HAL_TIM_MspPostInit+0x60>)
 800063c:	f001 f8ea 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3720      	adds	r7, #32
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40000400 	.word	0x40000400
 800064c:	40021000 	.word	0x40021000
 8000650:	40010800 	.word	0x40010800

08000654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <HAL_UART_MspInit+0x70>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d123      	bne.n	80006bc <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_UART_MspInit+0x74>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <HAL_UART_MspInit+0x74>)
 800067a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067e:	61d3      	str	r3, [r2, #28]
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_UART_MspInit+0x74>)
 8000682:	69db      	ldr	r3, [r3, #28]
 8000684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_UART_MspInit+0x74>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <HAL_UART_MspInit+0x74>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <HAL_UART_MspInit+0x74>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006a4:	230c      	movs	r3, #12
 80006a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	4619      	mov	r1, r3
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <HAL_UART_MspInit+0x78>)
 80006b8:	f001 f8ac 	bl	8001814 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40004400 	.word	0x40004400
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010800 	.word	0x40010800

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000716:	f000 ff53 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <TIM2_IRQHandler+0x10>)
 8000726:	f001 ff56 	bl	80025d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000178 	.word	0x20000178

08000734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000738:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800073c:	f001 fa1e 	bl	8001b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800074c:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <_sbrk+0x5c>)
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <_sbrk+0x60>)
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <_sbrk+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <_sbrk+0x64>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <_sbrk+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	429a      	cmp	r2, r3
 8000772:	d207      	bcs.n	8000784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000774:	f002 fdaa 	bl	80032cc <__errno>
 8000778:	4603      	mov	r3, r0
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	e009      	b.n	8000798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <_sbrk+0x64>)
 8000794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000796:	68fb      	ldr	r3, [r7, #12]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20005000 	.word	0x20005000
 80007a4:	00000400 	.word	0x00000400
 80007a8:	200000e8 	.word	0x200000e8
 80007ac:	20000220 	.word	0x20000220

080007b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <traffic_init>:
#include "u_global.h"

/*-------------------- init setting --------------------*/
//uint32_t	trafficDuration[3] = {5000, 3000, 2000};

void traffic_init() {
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	global_state = INIT_MODE;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <traffic_init+0x2c>)
 80007c2:	220a      	movs	r2, #10
 80007c4:	701a      	strb	r2, [r3, #0]
	auto_A_state = AUTO_INIT;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <traffic_init+0x30>)
 80007c8:	2214      	movs	r2, #20
 80007ca:	701a      	strb	r2, [r3, #0]
	auto_B_state = AUTO_INIT;
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <traffic_init+0x34>)
 80007ce:	2214      	movs	r2, #20
 80007d0:	701a      	strb	r2, [r3, #0]
	manual_state = MN_INIT;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <traffic_init+0x38>)
 80007d4:	221e      	movs	r2, #30
 80007d6:	701a      	strb	r2, [r3, #0]
	set_state = SET_INIT;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <traffic_init+0x3c>)
 80007da:	2228      	movs	r2, #40	; 0x28
 80007dc:	701a      	strb	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	200000ec 	.word	0x200000ec
 80007ec:	200000ed 	.word	0x200000ed
 80007f0:	200000ee 	.word	0x200000ee
 80007f4:	200000ef 	.word	0x200000ef
 80007f8:	200000f0 	.word	0x200000f0

080007fc <traffic_auto_fsm_A>:

/*------------------- auto fsm -------------------------*/
void traffic_auto_fsm_A() {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	switch(auto_A_state) {
 8000800:	4b32      	ldr	r3, [pc, #200]	; (80008cc <traffic_auto_fsm_A+0xd0>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	3b14      	subs	r3, #20
 8000806:	2b03      	cmp	r3, #3
 8000808:	d856      	bhi.n	80008b8 <traffic_auto_fsm_A+0xbc>
 800080a:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <traffic_auto_fsm_A+0x14>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	08000821 	.word	0x08000821
 8000814:	08000835 	.word	0x08000835
 8000818:	08000863 	.word	0x08000863
 800081c:	0800088b 	.word	0x0800088b
	case AUTO_INIT:
		//change mode
		auto_A_state = AUTO_RED;
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <traffic_auto_fsm_A+0xd0>)
 8000822:	2215      	movs	r2, #21
 8000824:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000826:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <traffic_auto_fsm_A+0xd4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	2000      	movs	r0, #0
 800082e:	f000 fddd 	bl	80013ec <timer_setDuration>
		break;
 8000832:	e048      	b.n	80008c6 <traffic_auto_fsm_A+0xca>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000834:	2100      	movs	r1, #0
 8000836:	2005      	movs	r0, #5
 8000838:	f000 fc2a 	bl	8001090 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 800083c:	2000      	movs	r0, #0
 800083e:	f000 fdef 	bl	8001420 <timer_checkFlag>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d039      	beq.n	80008bc <traffic_auto_fsm_A+0xc0>
			auto_A_state = AUTO_GREEN;
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <traffic_auto_fsm_A+0xd0>)
 800084a:	2216      	movs	r2, #22
 800084c:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <traffic_auto_fsm_A+0xd8>)
 8000850:	223d      	movs	r2, #61	; 0x3d
 8000852:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <traffic_auto_fsm_A+0xd4>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4619      	mov	r1, r3
 800085a:	2000      	movs	r0, #0
 800085c:	f000 fdc6 	bl	80013ec <timer_setDuration>
		}
		break;
 8000860:	e02c      	b.n	80008bc <traffic_auto_fsm_A+0xc0>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000862:	2101      	movs	r1, #1
 8000864:	2005      	movs	r0, #5
 8000866:	f000 fc13 	bl	8001090 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 800086a:	2000      	movs	r0, #0
 800086c:	f000 fdd8 	bl	8001420 <timer_checkFlag>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d024      	beq.n	80008c0 <traffic_auto_fsm_A+0xc4>
			auto_A_state = AUTO_YELLOW;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <traffic_auto_fsm_A+0xd0>)
 8000878:	2217      	movs	r2, #23
 800087a:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <traffic_auto_fsm_A+0xd4>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	4619      	mov	r1, r3
 8000882:	2000      	movs	r0, #0
 8000884:	f000 fdb2 	bl	80013ec <timer_setDuration>
		}
		break;
 8000888:	e01a      	b.n	80008c0 <traffic_auto_fsm_A+0xc4>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 800088a:	2102      	movs	r1, #2
 800088c:	2005      	movs	r0, #5
 800088e:	f000 fbff 	bl	8001090 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000892:	2000      	movs	r0, #0
 8000894:	f000 fdc4 	bl	8001420 <timer_checkFlag>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d012      	beq.n	80008c4 <traffic_auto_fsm_A+0xc8>
			auto_A_state = AUTO_RED;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <traffic_auto_fsm_A+0xd0>)
 80008a0:	2215      	movs	r2, #21
 80008a2:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <traffic_auto_fsm_A+0xd8>)
 80008a6:	223e      	movs	r2, #62	; 0x3e
 80008a8:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <traffic_auto_fsm_A+0xd4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4619      	mov	r1, r3
 80008b0:	2000      	movs	r0, #0
 80008b2:	f000 fd9b 	bl	80013ec <timer_setDuration>
		}
		break;
 80008b6:	e005      	b.n	80008c4 <traffic_auto_fsm_A+0xc8>

	/////////////////////////////////////////////////////
	default:
		break;
 80008b8:	bf00      	nop
 80008ba:	e004      	b.n	80008c6 <traffic_auto_fsm_A+0xca>
		break;
 80008bc:	bf00      	nop
 80008be:	e002      	b.n	80008c6 <traffic_auto_fsm_A+0xca>
		break;
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <traffic_auto_fsm_A+0xca>
		break;
 80008c4:	bf00      	nop
	}
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000ed 	.word	0x200000ed
 80008d0:	20000004 	.word	0x20000004
 80008d4:	200000f1 	.word	0x200000f1

080008d8 <traffic_auto_fsm_B>:

void traffic_auto_fsm_B() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	switch(auto_B_state) {
 80008dc:	4b2f      	ldr	r3, [pc, #188]	; (800099c <traffic_auto_fsm_B+0xc4>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	3b14      	subs	r3, #20
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d850      	bhi.n	8000988 <traffic_auto_fsm_B+0xb0>
 80008e6:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <traffic_auto_fsm_B+0x14>)
 80008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ec:	080008fd 	.word	0x080008fd
 80008f0:	08000911 	.word	0x08000911
 80008f4:	08000939 	.word	0x08000939
 80008f8:	08000961 	.word	0x08000961
	case AUTO_INIT:
		//change mode
		auto_B_state = AUTO_GREEN;
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <traffic_auto_fsm_B+0xc4>)
 80008fe:	2216      	movs	r2, #22
 8000900:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000902:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <traffic_auto_fsm_B+0xc8>)
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	4619      	mov	r1, r3
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fd6f 	bl	80013ec <timer_setDuration>
		break;
 800090e:	e042      	b.n	8000996 <traffic_auto_fsm_B+0xbe>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_2, LED_RED);
 8000910:	2100      	movs	r1, #0
 8000912:	2006      	movs	r0, #6
 8000914:	f000 fbbc 	bl	8001090 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000918:	2001      	movs	r0, #1
 800091a:	f000 fd81 	bl	8001420 <timer_checkFlag>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d033      	beq.n	800098c <traffic_auto_fsm_B+0xb4>
			auto_B_state = AUTO_GREEN;
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <traffic_auto_fsm_B+0xc4>)
 8000926:	2216      	movs	r2, #22
 8000928:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <traffic_auto_fsm_B+0xc8>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	4619      	mov	r1, r3
 8000930:	2001      	movs	r0, #1
 8000932:	f000 fd5b 	bl	80013ec <timer_setDuration>
		}
		break;
 8000936:	e029      	b.n	800098c <traffic_auto_fsm_B+0xb4>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000938:	2101      	movs	r1, #1
 800093a:	2006      	movs	r0, #6
 800093c:	f000 fba8 	bl	8001090 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000940:	2001      	movs	r0, #1
 8000942:	f000 fd6d 	bl	8001420 <timer_checkFlag>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d021      	beq.n	8000990 <traffic_auto_fsm_B+0xb8>
			auto_B_state = AUTO_YELLOW;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <traffic_auto_fsm_B+0xc4>)
 800094e:	2217      	movs	r2, #23
 8000950:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <traffic_auto_fsm_B+0xc8>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	4619      	mov	r1, r3
 8000958:	2001      	movs	r0, #1
 800095a:	f000 fd47 	bl	80013ec <timer_setDuration>
		}
		break;
 800095e:	e017      	b.n	8000990 <traffic_auto_fsm_B+0xb8>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000960:	2102      	movs	r1, #2
 8000962:	2006      	movs	r0, #6
 8000964:	f000 fb94 	bl	8001090 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000968:	2001      	movs	r0, #1
 800096a:	f000 fd59 	bl	8001420 <timer_checkFlag>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00f      	beq.n	8000994 <traffic_auto_fsm_B+0xbc>
			auto_B_state = AUTO_RED;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <traffic_auto_fsm_B+0xc4>)
 8000976:	2215      	movs	r2, #21
 8000978:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <traffic_auto_fsm_B+0xc8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4619      	mov	r1, r3
 8000980:	2001      	movs	r0, #1
 8000982:	f000 fd33 	bl	80013ec <timer_setDuration>
		}
		break;
 8000986:	e005      	b.n	8000994 <traffic_auto_fsm_B+0xbc>

	/////////////////////////////////////////////////////
	default:
		break;
 8000988:	bf00      	nop
 800098a:	e004      	b.n	8000996 <traffic_auto_fsm_B+0xbe>
		break;
 800098c:	bf00      	nop
 800098e:	e002      	b.n	8000996 <traffic_auto_fsm_B+0xbe>
		break;
 8000990:	bf00      	nop
 8000992:	e000      	b.n	8000996 <traffic_auto_fsm_B+0xbe>
		break;
 8000994:	bf00      	nop
	}
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000ee 	.word	0x200000ee
 80009a0:	20000004 	.word	0x20000004

080009a4 <traffic_manual_fsm>:

/*----------------- manual fsm -------------------------*/
void traffic_manual_fsm() {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	switch(manual_state) {
 80009a8:	4b33      	ldr	r3, [pc, #204]	; (8000a78 <traffic_manual_fsm+0xd4>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	3b1e      	subs	r3, #30
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	d856      	bhi.n	8000a60 <traffic_manual_fsm+0xbc>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <traffic_manual_fsm+0x14>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009cd 	.word	0x080009cd
 80009bc:	080009d5 	.word	0x080009d5
 80009c0:	080009f9 	.word	0x080009f9
 80009c4:	08000a1b 	.word	0x08000a1b
 80009c8:	08000a3f 	.word	0x08000a3f
	case MN_INIT:
		//change mode
		manual_state = MN_RED0;
 80009cc:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <traffic_manual_fsm+0xd4>)
 80009ce:	221f      	movs	r2, #31
 80009d0:	701a      	strb	r2, [r3, #0]
		break;
 80009d2:	e04e      	b.n	8000a72 <traffic_manual_fsm+0xce>

	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - green
	case MN_RED0:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 80009d4:	2100      	movs	r1, #0
 80009d6:	2005      	movs	r0, #5
 80009d8:	f000 fb5a 	bl	8001090 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 80009dc:	2101      	movs	r1, #1
 80009de:	2006      	movs	r0, #6
 80009e0:	f000 fb56 	bl	8001090 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 80009e4:	2001      	movs	r0, #1
 80009e6:	f000 fb11 	bl	800100c <button_isPressed>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d039      	beq.n	8000a64 <traffic_manual_fsm+0xc0>
			manual_state = MN_RED1;
 80009f0:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <traffic_manual_fsm+0xd4>)
 80009f2:	2220      	movs	r2, #32
 80009f4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80009f6:	e035      	b.n	8000a64 <traffic_manual_fsm+0xc0>
	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - yellow
	case MN_RED1:
		//TODO
//		led_turn_on(TRAFFIC_1, LED_RED);
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 80009f8:	2102      	movs	r1, #2
 80009fa:	2006      	movs	r0, #6
 80009fc:	f000 fb48 	bl	8001090 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000a00:	2001      	movs	r0, #1
 8000a02:	f000 fb03 	bl	800100c <button_isPressed>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d02d      	beq.n	8000a68 <traffic_manual_fsm+0xc4>
			manual_state = MN_GREEN;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <traffic_manual_fsm+0xd4>)
 8000a0e:	2221      	movs	r2, #33	; 0x21
 8000a10:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <traffic_manual_fsm+0xd8>)
 8000a14:	223d      	movs	r2, #61	; 0x3d
 8000a16:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a18:	e026      	b.n	8000a68 <traffic_manual_fsm+0xc4>

	///////////////////////////////////////////////////////////
	// traffic A - green; traffic B - red
	case MN_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	2005      	movs	r0, #5
 8000a1e:	f000 fb37 	bl	8001090 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000a22:	2100      	movs	r1, #0
 8000a24:	2006      	movs	r0, #6
 8000a26:	f000 fb33 	bl	8001090 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f000 faee 	bl	800100c <button_isPressed>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d01a      	beq.n	8000a6c <traffic_manual_fsm+0xc8>
			manual_state = MN_YELLOW;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <traffic_manual_fsm+0xd4>)
 8000a38:	2222      	movs	r2, #34	; 0x22
 8000a3a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a3c:	e016      	b.n	8000a6c <traffic_manual_fsm+0xc8>

	///////////////////////////////////////////////////////////
	// traffic A - yellow; traffic B - red
	case MN_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000a3e:	2102      	movs	r1, #2
 8000a40:	2005      	movs	r0, #5
 8000a42:	f000 fb25 	bl	8001090 <led_turn_on>
//		led_turn_on(TRAFFIC_2, LED_RED);

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000a46:	2001      	movs	r0, #1
 8000a48:	f000 fae0 	bl	800100c <button_isPressed>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d00e      	beq.n	8000a70 <traffic_manual_fsm+0xcc>
			manual_state = MN_RED0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <traffic_manual_fsm+0xd4>)
 8000a54:	221f      	movs	r2, #31
 8000a56:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <traffic_manual_fsm+0xd8>)
 8000a5a:	223e      	movs	r2, #62	; 0x3e
 8000a5c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a5e:	e007      	b.n	8000a70 <traffic_manual_fsm+0xcc>

	///////////////////////////////////////////////////////////
	default:
		break;
 8000a60:	bf00      	nop
 8000a62:	e006      	b.n	8000a72 <traffic_manual_fsm+0xce>
		break;
 8000a64:	bf00      	nop
 8000a66:	e004      	b.n	8000a72 <traffic_manual_fsm+0xce>
		break;
 8000a68:	bf00      	nop
 8000a6a:	e002      	b.n	8000a72 <traffic_manual_fsm+0xce>
		break;
 8000a6c:	bf00      	nop
 8000a6e:	e000      	b.n	8000a72 <traffic_manual_fsm+0xce>
		break;
 8000a70:	bf00      	nop
	}
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000ef 	.word	0x200000ef
 8000a7c:	200000f1 	.word	0x200000f1

08000a80 <duration_inc>:

/*-------------------- set fsm -------------------------*/
void duration_inc(uint8_t led_type) {
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
	// increase specific duration by 1 unit
	trafficDuration[led_type] += DURATION_UNIT;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <duration_inc+0x50>)
 8000a8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000a98:	490d      	ldr	r1, [pc, #52]	; (8000ad0 <duration_inc+0x50>)
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (trafficDuration[led_type] > DURATION_MAX) { //if duration over max, reset to DURATION_UNIT
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <duration_inc+0x50>)
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d90a      	bls.n	8000ac4 <duration_inc+0x44>
		trafficDuration[led_type] -= DURATION_MAX;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <duration_inc+0x50>)
 8000ab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000abc:	3b10      	subs	r3, #16
 8000abe:	4904      	ldr	r1, [pc, #16]	; (8000ad0 <duration_inc+0x50>)
 8000ac0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <traffic_set_fsm>:

void traffic_set_fsm() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	switch(set_state) {
 8000ad8:	4b60      	ldr	r3, [pc, #384]	; (8000c5c <traffic_set_fsm+0x188>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	3b28      	subs	r3, #40	; 0x28
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	f200 80b2 	bhi.w	8000c48 <traffic_set_fsm+0x174>
 8000ae4:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <traffic_set_fsm+0x18>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000afd 	.word	0x08000afd
 8000af0:	08000b05 	.word	0x08000b05
 8000af4:	08000b71 	.word	0x08000b71
 8000af8:	08000bdd 	.word	0x08000bdd
	case SET_INIT:
		set_state = SET_RED;
 8000afc:	4b57      	ldr	r3, [pc, #348]	; (8000c5c <traffic_set_fsm+0x188>)
 8000afe:	2229      	movs	r2, #41	; 0x29
 8000b00:	701a      	strb	r2, [r3, #0]
#ifdef PROTEUS
		uart_send_num("Led red: ", trafficDuration[LED_RED]);
#endif
		break;
 8000b02:	e0a8      	b.n	8000c56 <traffic_set_fsm+0x182>

	//////////////////////////////////////////////////////////////
	case SET_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000b04:	2100      	movs	r1, #0
 8000b06:	2005      	movs	r0, #5
 8000b08:	f000 fac2 	bl	8001090 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2006      	movs	r0, #6
 8000b10:	f000 fabe 	bl	8001090 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000b14:	2002      	movs	r0, #2
 8000b16:	f000 fa79 	bl	800100c <button_isPressed>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d009      	beq.n	8000b34 <traffic_set_fsm+0x60>
			duration_inc(LED_RED);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff ffad 	bl	8000a80 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000b26:	2002      	movs	r0, #2
 8000b28:	f000 fc92 	bl	8001450 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000b2c:	210a      	movs	r1, #10
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f000 fc5c 	bl	80013ec <timer_setDuration>
#ifdef PROTEUS
			uart_send_num("Changing: ", trafficDuration[LED_RED]);
#endif
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 fa83 	bl	8001040 <button_isLongPressed>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00d      	beq.n	8000b5c <traffic_set_fsm+0x88>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000b40:	2002      	movs	r0, #2
 8000b42:	f000 fc6d 	bl	8001420 <timer_checkFlag>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d007      	beq.n	8000b5c <traffic_set_fsm+0x88>
				duration_inc(LED_RED);
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff ff97 	bl	8000a80 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000b52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b56:	2002      	movs	r0, #2
 8000b58:	f000 fc48 	bl	80013ec <timer_setDuration>
#endif
			}
		}

		//change led
		if (button_isPressed(BTN_2)) {
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f000 fa55 	bl	800100c <button_isPressed>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d071      	beq.n	8000c4c <traffic_set_fsm+0x178>
			set_state = SET_GREEN;
 8000b68:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <traffic_set_fsm+0x188>)
 8000b6a:	222a      	movs	r2, #42	; 0x2a
 8000b6c:	701a      	strb	r2, [r3, #0]
#ifdef PROTEUS
			uart_send_num("Led green: ", trafficDuration[LED_GREEN]);
#endif
		}
		break;
 8000b6e:	e06d      	b.n	8000c4c <traffic_set_fsm+0x178>

	//////////////////////////////////////////////////////////////
	case SET_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000b70:	2101      	movs	r1, #1
 8000b72:	2005      	movs	r0, #5
 8000b74:	f000 fa8c 	bl	8001090 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2006      	movs	r0, #6
 8000b7c:	f000 fa88 	bl	8001090 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000b80:	2002      	movs	r0, #2
 8000b82:	f000 fa43 	bl	800100c <button_isPressed>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d009      	beq.n	8000ba0 <traffic_set_fsm+0xcc>
			duration_inc(LED_GREEN);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff ff77 	bl	8000a80 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000b92:	2002      	movs	r0, #2
 8000b94:	f000 fc5c 	bl	8001450 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000b98:	210a      	movs	r1, #10
 8000b9a:	2002      	movs	r0, #2
 8000b9c:	f000 fc26 	bl	80013ec <timer_setDuration>
#ifdef PROTEUS
			uart_send_num("Changing: ", trafficDuration[LED_GREEN]);
#endif
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f000 fa4d 	bl	8001040 <button_isLongPressed>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00d      	beq.n	8000bc8 <traffic_set_fsm+0xf4>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000bac:	2002      	movs	r0, #2
 8000bae:	f000 fc37 	bl	8001420 <timer_checkFlag>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d007      	beq.n	8000bc8 <traffic_set_fsm+0xf4>
				duration_inc(LED_GREEN);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff ff61 	bl	8000a80 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000bbe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f000 fc12 	bl	80013ec <timer_setDuration>
#endif
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 fa1f 	bl	800100c <button_isPressed>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d03d      	beq.n	8000c50 <traffic_set_fsm+0x17c>
			set_state = SET_YELLOW;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <traffic_set_fsm+0x188>)
 8000bd6:	222b      	movs	r2, #43	; 0x2b
 8000bd8:	701a      	strb	r2, [r3, #0]
#ifdef PROTEUS
			uart_send_num("Led yellow: ", trafficDuration[LED_YELLOW]);
#endif
		}
		break;
 8000bda:	e039      	b.n	8000c50 <traffic_set_fsm+0x17c>

	//////////////////////////////////////////////////////////////
	case SET_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000bdc:	2102      	movs	r1, #2
 8000bde:	2005      	movs	r0, #5
 8000be0:	f000 fa56 	bl	8001090 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000be4:	2102      	movs	r1, #2
 8000be6:	2006      	movs	r0, #6
 8000be8:	f000 fa52 	bl	8001090 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000bec:	2002      	movs	r0, #2
 8000bee:	f000 fa0d 	bl	800100c <button_isPressed>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d009      	beq.n	8000c0c <traffic_set_fsm+0x138>
			duration_inc(LED_YELLOW);
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff ff41 	bl	8000a80 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 fc26 	bl	8001450 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000c04:	210a      	movs	r1, #10
 8000c06:	2002      	movs	r0, #2
 8000c08:	f000 fbf0 	bl	80013ec <timer_setDuration>
#ifdef PROTEUS
			uart_send_num("Changing: ", trafficDuration[LED_YELLOW]);
#endif
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f000 fa17 	bl	8001040 <button_isLongPressed>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00d      	beq.n	8000c34 <traffic_set_fsm+0x160>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 fc01 	bl	8001420 <timer_checkFlag>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d007      	beq.n	8000c34 <traffic_set_fsm+0x160>
				duration_inc(LED_YELLOW);
 8000c24:	2002      	movs	r0, #2
 8000c26:	f7ff ff2b 	bl	8000a80 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000c2a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f000 fbdc 	bl	80013ec <timer_setDuration>
#endif
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 f9e9 	bl	800100c <button_isPressed>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d009      	beq.n	8000c54 <traffic_set_fsm+0x180>
			set_state = SET_RED;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <traffic_set_fsm+0x188>)
 8000c42:	2229      	movs	r2, #41	; 0x29
 8000c44:	701a      	strb	r2, [r3, #0]
#ifdef PROTEUS
			uart_send_num("Led red: ", trafficDuration[LED_RED]);
#endif
		}
		break;
 8000c46:	e005      	b.n	8000c54 <traffic_set_fsm+0x180>

	//////////////////////////////////////////////////////////////
	default:
		break;
 8000c48:	bf00      	nop
 8000c4a:	e004      	b.n	8000c56 <traffic_set_fsm+0x182>
		break;
 8000c4c:	bf00      	nop
 8000c4e:	e002      	b.n	8000c56 <traffic_set_fsm+0x182>
		break;
 8000c50:	bf00      	nop
 8000c52:	e000      	b.n	8000c56 <traffic_set_fsm+0x182>
		break;
 8000c54:	bf00      	nop
	}
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000f0 	.word	0x200000f0

08000c60 <traffic_fsm>:

/*----------------- global fsm -------------------------*/
void traffic_fsm() {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	switch(global_state) {
 8000c64:	4b6c      	ldr	r3, [pc, #432]	; (8000e18 <traffic_fsm+0x1b8>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3b0a      	subs	r3, #10
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	f200 80ca 	bhi.w	8000e04 <traffic_fsm+0x1a4>
 8000c70:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <traffic_fsm+0x18>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000c89 	.word	0x08000c89
 8000c7c:	08000c95 	.word	0x08000c95
 8000c80:	08000cff 	.word	0x08000cff
 8000c84:	08000d21 	.word	0x08000d21
	case INIT_MODE:
		led_clear_all();
 8000c88:	f000 f9ee 	bl	8001068 <led_clear_all>
		global_state = AUTO_MODE;
 8000c8c:	4b62      	ldr	r3, [pc, #392]	; (8000e18 <traffic_fsm+0x1b8>)
 8000c8e:	220b      	movs	r2, #11
 8000c90:	701a      	strb	r2, [r3, #0]
		break;
 8000c92:	e0be      	b.n	8000e12 <traffic_fsm+0x1b2>

	///////////////////////////////////////////////
	case AUTO_MODE:
		//TODO
		traffic_auto_fsm_A();
 8000c94:	f7ff fdb2 	bl	80007fc <traffic_auto_fsm_A>
		traffic_auto_fsm_B();
 8000c98:	f7ff fe1e 	bl	80008d8 <traffic_auto_fsm_B>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f000 f9b5 	bl	800100c <button_isPressed>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d028      	beq.n	8000cfa <traffic_fsm+0x9a>
			led_clear_all();
 8000ca8:	f000 f9de 	bl	8001068 <led_clear_all>
			global_state = MANUAL_MODE;
 8000cac:	4b5a      	ldr	r3, [pc, #360]	; (8000e18 <traffic_fsm+0x1b8>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	701a      	strb	r2, [r3, #0]
			switch (auto_A_state) { //manual mode with previous auto state
 8000cb2:	4b5a      	ldr	r3, [pc, #360]	; (8000e1c <traffic_fsm+0x1bc>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b17      	cmp	r3, #23
 8000cb8:	d01b      	beq.n	8000cf2 <traffic_fsm+0x92>
 8000cba:	2b17      	cmp	r3, #23
 8000cbc:	f300 80a4 	bgt.w	8000e08 <traffic_fsm+0x1a8>
 8000cc0:	2b15      	cmp	r3, #21
 8000cc2:	d002      	beq.n	8000cca <traffic_fsm+0x6a>
 8000cc4:	2b16      	cmp	r3, #22
 8000cc6:	d010      	beq.n	8000cea <traffic_fsm+0x8a>
			case AUTO_YELLOW: // traffic A = yellow
				manual_state = MN_YELLOW;
				break;
			}
		}
		break;
 8000cc8:	e09e      	b.n	8000e08 <traffic_fsm+0x1a8>
				switch (auto_B_state){
 8000cca:	4b55      	ldr	r3, [pc, #340]	; (8000e20 <traffic_fsm+0x1c0>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b16      	cmp	r3, #22
 8000cd0:	d002      	beq.n	8000cd8 <traffic_fsm+0x78>
 8000cd2:	2b17      	cmp	r3, #23
 8000cd4:	d004      	beq.n	8000ce0 <traffic_fsm+0x80>
				break;
 8000cd6:	e011      	b.n	8000cfc <traffic_fsm+0x9c>
					manual_state = MN_RED0;
 8000cd8:	4b52      	ldr	r3, [pc, #328]	; (8000e24 <traffic_fsm+0x1c4>)
 8000cda:	221f      	movs	r2, #31
 8000cdc:	701a      	strb	r2, [r3, #0]
					break;
 8000cde:	e003      	b.n	8000ce8 <traffic_fsm+0x88>
					manual_state = MN_RED1;
 8000ce0:	4b50      	ldr	r3, [pc, #320]	; (8000e24 <traffic_fsm+0x1c4>)
 8000ce2:	2220      	movs	r2, #32
 8000ce4:	701a      	strb	r2, [r3, #0]
					break;
 8000ce6:	bf00      	nop
				break;
 8000ce8:	e008      	b.n	8000cfc <traffic_fsm+0x9c>
				manual_state = MN_GREEN;
 8000cea:	4b4e      	ldr	r3, [pc, #312]	; (8000e24 <traffic_fsm+0x1c4>)
 8000cec:	2221      	movs	r2, #33	; 0x21
 8000cee:	701a      	strb	r2, [r3, #0]
				break;
 8000cf0:	e004      	b.n	8000cfc <traffic_fsm+0x9c>
				manual_state = MN_YELLOW;
 8000cf2:	4b4c      	ldr	r3, [pc, #304]	; (8000e24 <traffic_fsm+0x1c4>)
 8000cf4:	2222      	movs	r2, #34	; 0x22
 8000cf6:	701a      	strb	r2, [r3, #0]
				break;
 8000cf8:	e000      	b.n	8000cfc <traffic_fsm+0x9c>
		}
 8000cfa:	bf00      	nop
		break;
 8000cfc:	e084      	b.n	8000e08 <traffic_fsm+0x1a8>

	///////////////////////////////////////////////
	case MANUAL_MODE:
		//TODO
		traffic_manual_fsm();
 8000cfe:	f7ff fe51 	bl	80009a4 <traffic_manual_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 f982 	bl	800100c <button_isPressed>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d07e      	beq.n	8000e0c <traffic_fsm+0x1ac>
			global_state = SET_MODE;
 8000d0e:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <traffic_fsm+0x1b8>)
 8000d10:	220d      	movs	r2, #13
 8000d12:	701a      	strb	r2, [r3, #0]
			set_state = SET_INIT;
 8000d14:	4b44      	ldr	r3, [pc, #272]	; (8000e28 <traffic_fsm+0x1c8>)
 8000d16:	2228      	movs	r2, #40	; 0x28
 8000d18:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8000d1a:	f000 f9a5 	bl	8001068 <led_clear_all>
		}
		break;
 8000d1e:	e075      	b.n	8000e0c <traffic_fsm+0x1ac>

	///////////////////////////////////////////////
	case SET_MODE:
		//TODO
		traffic_set_fsm();
 8000d20:	f7ff fed8 	bl	8000ad4 <traffic_set_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 f971 	bl	800100c <button_isPressed>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d067      	beq.n	8000e00 <traffic_fsm+0x1a0>
			global_state = AUTO_MODE;
 8000d30:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <traffic_fsm+0x1b8>)
 8000d32:	220b      	movs	r2, #11
 8000d34:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8000d36:	f000 f997 	bl	8001068 <led_clear_all>
			timer_clear(TIMER_AUTO_A); //clear timer, prepare for auto mode
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 fb88 	bl	8001450 <timer_clear>
			timer_clear(TIMER_AUTO_B); //clear timer, prepare for auto mode
 8000d40:	2001      	movs	r0, #1
 8000d42:	f000 fb85 	bl	8001450 <timer_clear>
			switch(manual_state) { //auto mode with previous manual state
 8000d46:	4b37      	ldr	r3, [pc, #220]	; (8000e24 <traffic_fsm+0x1c4>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3b1f      	subs	r3, #31
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d85f      	bhi.n	8000e10 <traffic_fsm+0x1b0>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <traffic_fsm+0xf8>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000d8f 	.word	0x08000d8f
 8000d60:	08000db5 	.word	0x08000db5
 8000d64:	08000ddb 	.word	0x08000ddb

			case MN_RED0: //traffic A: red; traffic B: green
				auto_A_state = AUTO_RED;
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <traffic_fsm+0x1bc>)
 8000d6a:	2215      	movs	r2, #21
 8000d6c:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <traffic_fsm+0x1cc>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4619      	mov	r1, r3
 8000d74:	2000      	movs	r0, #0
 8000d76:	f000 fb39 	bl	80013ec <timer_setDuration>
				auto_B_state = AUTO_GREEN;
 8000d7a:	4b29      	ldr	r3, [pc, #164]	; (8000e20 <traffic_fsm+0x1c0>)
 8000d7c:	2216      	movs	r2, #22
 8000d7e:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000d80:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <traffic_fsm+0x1cc>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	4619      	mov	r1, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	f000 fb30 	bl	80013ec <timer_setDuration>
				break;
 8000d8c:	e039      	b.n	8000e02 <traffic_fsm+0x1a2>

			case MN_RED1: //traffic A: red; traffic B: yellow
				auto_A_state = AUTO_RED;
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <traffic_fsm+0x1bc>)
 8000d90:	2215      	movs	r2, #21
 8000d92:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <traffic_fsm+0x1cc>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 fb26 	bl	80013ec <timer_setDuration>
				auto_B_state = AUTO_YELLOW;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <traffic_fsm+0x1c0>)
 8000da2:	2217      	movs	r2, #23
 8000da4:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <traffic_fsm+0x1cc>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	4619      	mov	r1, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	f000 fb1d 	bl	80013ec <timer_setDuration>
				break;
 8000db2:	e026      	b.n	8000e02 <traffic_fsm+0x1a2>

			case MN_GREEN: //traffic A: green; traffic B: red
				auto_A_state = AUTO_GREEN;
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <traffic_fsm+0x1bc>)
 8000db6:	2216      	movs	r2, #22
 8000db8:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <traffic_fsm+0x1cc>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f000 fb13 	bl	80013ec <timer_setDuration>
				auto_B_state = AUTO_RED;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <traffic_fsm+0x1c0>)
 8000dc8:	2215      	movs	r2, #21
 8000dca:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <traffic_fsm+0x1cc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 fb0a 	bl	80013ec <timer_setDuration>
				break;
 8000dd8:	e013      	b.n	8000e02 <traffic_fsm+0x1a2>

			case MN_YELLOW: //traffic A: yellow; traffic B: red
				auto_A_state = AUTO_YELLOW;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <traffic_fsm+0x1bc>)
 8000ddc:	2217      	movs	r2, #23
 8000dde:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <traffic_fsm+0x1cc>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	4619      	mov	r1, r3
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 fb00 	bl	80013ec <timer_setDuration>
				auto_B_state = AUTO_RED;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <traffic_fsm+0x1c0>)
 8000dee:	2215      	movs	r2, #21
 8000df0:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <traffic_fsm+0x1cc>)
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	4619      	mov	r1, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 faf7 	bl	80013ec <timer_setDuration>
				break;
 8000dfe:	e000      	b.n	8000e02 <traffic_fsm+0x1a2>
			}
		}
 8000e00:	bf00      	nop
		break;
 8000e02:	e005      	b.n	8000e10 <traffic_fsm+0x1b0>

	///////////////////////////////////////////////
	default:
		break;
 8000e04:	bf00      	nop
 8000e06:	e004      	b.n	8000e12 <traffic_fsm+0x1b2>
		break;
 8000e08:	bf00      	nop
 8000e0a:	e002      	b.n	8000e12 <traffic_fsm+0x1b2>
		break;
 8000e0c:	bf00      	nop
 8000e0e:	e000      	b.n	8000e12 <traffic_fsm+0x1b2>
		break;
 8000e10:	bf00      	nop
	}
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000ec 	.word	0x200000ec
 8000e1c:	200000ed 	.word	0x200000ed
 8000e20:	200000ee 	.word	0x200000ee
 8000e24:	200000ef 	.word	0x200000ef
 8000e28:	200000f0 	.word	0x200000f0
 8000e2c:	20000004 	.word	0x20000004

08000e30 <button_reading>:

int TimeOutForKeyPress[MAX_BUTTON] = {LONG_DURATION};
int flagBtn[MAX_BUTTON] = {0};
int flagBtnLong[MAX_BUTTON] = {0};

void button_reading(void){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++){
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e0a2      	b.n	8000f82 <button_reading+0x152>
		KeyReg2[i] = KeyReg1[i];
 8000e3c:	4a55      	ldr	r2, [pc, #340]	; (8000f94 <button_reading+0x164>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e44:	4954      	ldr	r1, [pc, #336]	; (8000f98 <button_reading+0x168>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8000e4c:	4a53      	ldr	r2, [pc, #332]	; (8000f9c <button_reading+0x16c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e54:	494f      	ldr	r1, [pc, #316]	; (8000f94 <button_reading+0x164>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d836      	bhi.n	8000ed0 <button_reading+0xa0>
 8000e62:	a201      	add	r2, pc, #4	; (adr r2, 8000e68 <button_reading+0x38>)
 8000e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e68:	08000e79 	.word	0x08000e79
 8000e6c:	08000e8f 	.word	0x08000e8f
 8000e70:	08000ea5 	.word	0x08000ea5
 8000e74:	08000ebb 	.word	0x08000ebb
		switch (i){ //check which button is being read now
		case BTN_1:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_1_Pin);
 8000e78:	2102      	movs	r1, #2
 8000e7a:	4849      	ldr	r0, [pc, #292]	; (8000fa0 <button_reading+0x170>)
 8000e7c:	f000 fe4e 	bl	8001b1c <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4619      	mov	r1, r3
 8000e84:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <button_reading+0x16c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000e8c:	e021      	b.n	8000ed2 <button_reading+0xa2>
		case BTN_2:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_2_Pin);
 8000e8e:	2110      	movs	r1, #16
 8000e90:	4843      	ldr	r0, [pc, #268]	; (8000fa0 <button_reading+0x170>)
 8000e92:	f000 fe43 	bl	8001b1c <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4a40      	ldr	r2, [pc, #256]	; (8000f9c <button_reading+0x16c>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000ea2:	e016      	b.n	8000ed2 <button_reading+0xa2>
		case BTN_3:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, BTN_3_Pin);
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	483f      	ldr	r0, [pc, #252]	; (8000fa4 <button_reading+0x174>)
 8000ea8:	f000 fe38 	bl	8001b1c <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4a3a      	ldr	r2, [pc, #232]	; (8000f9c <button_reading+0x16c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000eb8:	e00b      	b.n	8000ed2 <button_reading+0xa2>
		case BTN_PD:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, PD_BTN_Pin);
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4838      	ldr	r0, [pc, #224]	; (8000fa0 <button_reading+0x170>)
 8000ebe:	f000 fe2d 	bl	8001b1c <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <button_reading+0x16c>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8000ece:	e000      	b.n	8000ed2 <button_reading+0xa2>
		default:
			break;
 8000ed0:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000ed2:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <button_reading+0x164>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eda:	4930      	ldr	r1, [pc, #192]	; (8000f9c <button_reading+0x16c>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d14a      	bne.n	8000f7c <button_reading+0x14c>
 8000ee6:	4a2b      	ldr	r2, [pc, #172]	; (8000f94 <button_reading+0x164>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eee:	492a      	ldr	r1, [pc, #168]	; (8000f98 <button_reading+0x168>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d140      	bne.n	8000f7c <button_reading+0x14c>
			if (KeyReg2[i] != KeyReg3[i]){
 8000efa:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <button_reading+0x168>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f02:	4929      	ldr	r1, [pc, #164]	; (8000fa8 <button_reading+0x178>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d022      	beq.n	8000f54 <button_reading+0x124>
				KeyReg3[i] = KeyReg2[i];
 8000f0e:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <button_reading+0x168>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f16:	4924      	ldr	r1, [pc, #144]	; (8000fa8 <button_reading+0x178>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == IS_PRESSED){
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <button_reading+0x178>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d109      	bne.n	8000f3e <button_reading+0x10e>
					TimeOutForKeyPress[i] = LONG_DURATION;
 8000f2a:	4a20      	ldr	r2, [pc, #128]	; (8000fac <button_reading+0x17c>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000f32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f83e 	bl	8000fb8 <subKeyProcess>
 8000f3c:	e01e      	b.n	8000f7c <button_reading+0x14c>
				}
				else{
					flagBtnLong[i] = 0;
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <button_reading+0x180>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2100      	movs	r1, #0
 8000f44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					Over1Sec[i] = 0;
 8000f48:	4a1a      	ldr	r2, [pc, #104]	; (8000fb4 <button_reading+0x184>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f52:	e013      	b.n	8000f7c <button_reading+0x14c>
				}
			} else {
				TimeOutForKeyPress[i] --;
 8000f54:	4a15      	ldr	r2, [pc, #84]	; (8000fac <button_reading+0x17c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	1e5a      	subs	r2, r3, #1
 8000f5e:	4913      	ldr	r1, [pc, #76]	; (8000fac <button_reading+0x17c>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000f66:	4a11      	ldr	r2, [pc, #68]	; (8000fac <button_reading+0x17c>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d104      	bne.n	8000f7c <button_reading+0x14c>
					KeyReg3[i] = IS_RELEASED;
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <button_reading+0x178>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2101      	movs	r1, #1
 8000f78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++){
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	607b      	str	r3, [r7, #4]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	f77f af59 	ble.w	8000e3c <button_reading+0xc>
				}
			}
		}
	}
}
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000020 	.word	0x20000020
 8000f98:	20000030 	.word	0x20000030
 8000f9c:	20000010 	.word	0x20000010
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	20000040 	.word	0x20000040
 8000fac:	20000050 	.word	0x20000050
 8000fb0:	20000114 	.word	0x20000114
 8000fb4:	200000f4 	.word	0x200000f4

08000fb8 <subKeyProcess>:

void subKeyProcess(int index){
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	flagBtn[index] = 1;
 8000fc0:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <subKeyProcess+0x48>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (Over1Sec[index] == 0){
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <subKeyProcess+0x4c>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d105      	bne.n	8000fe2 <subKeyProcess+0x2a>
		Over1Sec[index] = 1;
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <subKeyProcess+0x4c>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2101      	movs	r1, #1
 8000fdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else{
		flagBtnLong[index] = 1;
		flagBtn[index] = 0;
	}
}
 8000fe0:	e009      	b.n	8000ff6 <subKeyProcess+0x3e>
		flagBtnLong[index] = 1;
 8000fe2:	4a09      	ldr	r2, [pc, #36]	; (8001008 <subKeyProcess+0x50>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagBtn[index] = 0;
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <subKeyProcess+0x48>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr
 8001000:	20000104 	.word	0x20000104
 8001004:	200000f4 	.word	0x200000f4
 8001008:	20000114 	.word	0x20000114

0800100c <button_isPressed>:

int button_isPressed(int index){
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	if (flagBtn[index] == 1){
 8001014:	4a09      	ldr	r2, [pc, #36]	; (800103c <button_isPressed+0x30>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d106      	bne.n	800102e <button_isPressed+0x22>
		flagBtn[index] = 0;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <button_isPressed+0x30>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2100      	movs	r1, #0
 8001026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <button_isPressed+0x24>
	}
	return 0;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000104 	.word	0x20000104

08001040 <button_isLongPressed>:

int button_isLongPressed(int index){
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	return (flagBtnLong[index] == 1);
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <button_isLongPressed+0x24>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001050:	2b01      	cmp	r3, #1
 8001052:	bf0c      	ite	eq
 8001054:	2301      	moveq	r3, #1
 8001056:	2300      	movne	r3, #0
 8001058:	b2db      	uxtb	r3, r3
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	20000114 	.word	0x20000114

08001068 <led_clear_all>:
#include "u_i_led.h"
#include "main.h"

#ifdef BOARD
//clear all led
void led_clear_all() { //00
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <led_clear_all+0x20>)
 8001074:	f000 fd69 	bl	8001b4a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800107e:	4803      	ldr	r0, [pc, #12]	; (800108c <led_clear_all+0x24>)
 8001080:	f000 fd63 	bl	8001b4a <HAL_GPIO_WritePin>
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40010800 	.word	0x40010800
 800108c:	40010c00 	.word	0x40010c00

08001090 <led_turn_on>:

//turn specific led with specific color
void led_turn_on(uint8_t led_index, uint8_t led_type) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	d063      	beq.n	800116e <led_turn_on+0xde>
 80010a6:	2b07      	cmp	r3, #7
 80010a8:	f300 8093 	bgt.w	80011d2 <led_turn_on+0x142>
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d002      	beq.n	80010b6 <led_turn_on+0x26>
 80010b0:	2b06      	cmp	r3, #6
 80010b2:	d030      	beq.n	8001116 <led_turn_on+0x86>
			break;
		}
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 80010b4:	e08d      	b.n	80011d2 <led_turn_on+0x142>
		switch (led_type) {
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d01f      	beq.n	80010fc <led_turn_on+0x6c>
 80010bc:	2b02      	cmp	r3, #2
 80010be:	f300 808a 	bgt.w	80011d6 <led_turn_on+0x146>
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d002      	beq.n	80010cc <led_turn_on+0x3c>
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d00c      	beq.n	80010e4 <led_turn_on+0x54>
		break;
 80010ca:	e084      	b.n	80011d6 <led_turn_on+0x146>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d2:	4845      	ldr	r0, [pc, #276]	; (80011e8 <led_turn_on+0x158>)
 80010d4:	f000 fd39 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2108      	movs	r1, #8
 80010dc:	4843      	ldr	r0, [pc, #268]	; (80011ec <led_turn_on+0x15c>)
 80010de:	f000 fd34 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 80010e2:	e017      	b.n	8001114 <led_turn_on+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ea:	483f      	ldr	r0, [pc, #252]	; (80011e8 <led_turn_on+0x158>)
 80010ec:	f000 fd2d 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2108      	movs	r1, #8
 80010f4:	483d      	ldr	r0, [pc, #244]	; (80011ec <led_turn_on+0x15c>)
 80010f6:	f000 fd28 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 80010fa:	e00b      	b.n	8001114 <led_turn_on+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001102:	4839      	ldr	r0, [pc, #228]	; (80011e8 <led_turn_on+0x158>)
 8001104:	f000 fd21 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2108      	movs	r1, #8
 800110c:	4837      	ldr	r0, [pc, #220]	; (80011ec <led_turn_on+0x15c>)
 800110e:	f000 fd1c 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 8001112:	bf00      	nop
		break;
 8001114:	e05f      	b.n	80011d6 <led_turn_on+0x146>
		switch (led_type) {
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d01c      	beq.n	8001156 <led_turn_on+0xc6>
 800111c:	2b02      	cmp	r3, #2
 800111e:	dc5c      	bgt.n	80011da <led_turn_on+0x14a>
 8001120:	2b00      	cmp	r3, #0
 8001122:	d002      	beq.n	800112a <led_turn_on+0x9a>
 8001124:	2b01      	cmp	r3, #1
 8001126:	d00b      	beq.n	8001140 <led_turn_on+0xb0>
		break;
 8001128:	e057      	b.n	80011da <led_turn_on+0x14a>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	2120      	movs	r1, #32
 800112e:	482f      	ldr	r0, [pc, #188]	; (80011ec <led_turn_on+0x15c>)
 8001130:	f000 fd0b 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2110      	movs	r1, #16
 8001138:	482c      	ldr	r0, [pc, #176]	; (80011ec <led_turn_on+0x15c>)
 800113a:	f000 fd06 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 800113e:	e015      	b.n	800116c <led_turn_on+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2120      	movs	r1, #32
 8001144:	4829      	ldr	r0, [pc, #164]	; (80011ec <led_turn_on+0x15c>)
 8001146:	f000 fd00 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	4827      	ldr	r0, [pc, #156]	; (80011ec <led_turn_on+0x15c>)
 8001150:	f000 fcfb 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 8001154:	e00a      	b.n	800116c <led_turn_on+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2120      	movs	r1, #32
 800115a:	4824      	ldr	r0, [pc, #144]	; (80011ec <led_turn_on+0x15c>)
 800115c:	f000 fcf5 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_SET);
 8001160:	2201      	movs	r2, #1
 8001162:	2110      	movs	r1, #16
 8001164:	4821      	ldr	r0, [pc, #132]	; (80011ec <led_turn_on+0x15c>)
 8001166:	f000 fcf0 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 800116a:	bf00      	nop
		break;
 800116c:	e035      	b.n	80011da <led_turn_on+0x14a>
		switch (led_type) {
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d020      	beq.n	80011b6 <led_turn_on+0x126>
 8001174:	2b02      	cmp	r3, #2
 8001176:	dc32      	bgt.n	80011de <led_turn_on+0x14e>
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <led_turn_on+0xf2>
 800117c:	2b01      	cmp	r3, #1
 800117e:	d00d      	beq.n	800119c <led_turn_on+0x10c>
		break;
 8001180:	e02d      	b.n	80011de <led_turn_on+0x14e>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001188:	4818      	ldr	r0, [pc, #96]	; (80011ec <led_turn_on+0x15c>)
 800118a:	f000 fcde 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001194:	4814      	ldr	r0, [pc, #80]	; (80011e8 <led_turn_on+0x158>)
 8001196:	f000 fcd8 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 800119a:	e019      	b.n	80011d0 <led_turn_on+0x140>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <led_turn_on+0x15c>)
 80011a4:	f000 fcd1 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <led_turn_on+0x158>)
 80011b0:	f000 fccb 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 80011b4:	e00c      	b.n	80011d0 <led_turn_on+0x140>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011bc:	480b      	ldr	r0, [pc, #44]	; (80011ec <led_turn_on+0x15c>)
 80011be:	f000 fcc4 	bl	8001b4a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <led_turn_on+0x158>)
 80011ca:	f000 fcbe 	bl	8001b4a <HAL_GPIO_WritePin>
			break;
 80011ce:	bf00      	nop
		break;
 80011d0:	e005      	b.n	80011de <led_turn_on+0x14e>
		break;
 80011d2:	bf00      	nop
 80011d4:	e004      	b.n	80011e0 <led_turn_on+0x150>
		break;
 80011d6:	bf00      	nop
 80011d8:	e002      	b.n	80011e0 <led_turn_on+0x150>
		break;
 80011da:	bf00      	nop
 80011dc:	e000      	b.n	80011e0 <led_turn_on+0x150>
		break;
 80011de:	bf00      	nop
	}
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40010800 	.word	0x40010800
 80011ec:	40010c00 	.word	0x40010c00

080011f0 <timer_unit_construct>:

struct timer_list timerList;
uint8_t	timerFlag[MAX_TIMER] = {0};

/*-------------- unit function -------------------*/
struct timer_unit* timer_unit_construct(uint8_t index, uint32_t duration) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = malloc(sizeof (struct timer_unit)); //dynamic allocating a timer unit
 80011fc:	200c      	movs	r0, #12
 80011fe:	f002 f88f 	bl	8003320 <malloc>
 8001202:	4603      	mov	r3, r0
 8001204:	60fb      	str	r3, [r7, #12]
	if (newUnit == NULL) {
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <timer_unit_construct+0x20>
		return NULL;
 800120c:	2300      	movs	r3, #0
 800120e:	e009      	b.n	8001224 <timer_unit_construct+0x34>
	}
	newUnit->index = index;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	79fa      	ldrb	r2, [r7, #7]
 8001214:	701a      	strb	r2, [r3, #0]
	newUnit->duration = duration;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	605a      	str	r2, [r3, #4]
	newUnit->nextTimer = NULL;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
	return newUnit;
 8001222:	68fb      	ldr	r3, [r7, #12]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <timer_unit_destruct>:

void timer_unit_destruct(struct timer_unit *unit) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	free(unit);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f002 f87b 	bl	8003330 <free>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <timer_list_add>:

/*-------------- list function -------------------*/
void timer_list_add(struct timer_unit *unit){
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	//list full
	if (timerList.size == MAX_TIMER) return;
 800124c:	4b38      	ldr	r3, [pc, #224]	; (8001330 <timer_list_add+0xec>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b04      	cmp	r3, #4
 8001252:	d068      	beq.n	8001326 <timer_list_add+0xe2>

	//list empty
	if (timerList.size == 0) {
 8001254:	4b36      	ldr	r3, [pc, #216]	; (8001330 <timer_list_add+0xec>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <timer_list_add+0x2c>
		timerList.head = unit;
 800125c:	4a34      	ldr	r2, [pc, #208]	; (8001330 <timer_list_add+0xec>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6053      	str	r3, [r2, #4]
		timerList.size++;
 8001262:	4b33      	ldr	r3, [pc, #204]	; (8001330 <timer_list_add+0xec>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <timer_list_add+0xec>)
 800126c:	701a      	strb	r2, [r3, #0]
		return;
 800126e:	e05b      	b.n	8001328 <timer_list_add+0xe4>
	}

	//list has at least 1 item
	struct timer_unit *curr = timerList.head,
 8001270:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <timer_list_add+0xec>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	617b      	str	r3, [r7, #20]
					  *prev = NULL;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
	uint32_t totalDuration = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
	while(curr != NULL) { //iterating the list
 800127e:	e00e      	b.n	800129e <timer_list_add+0x5a>
		totalDuration += curr->duration;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
		if (unit->duration < totalDuration) break;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d808      	bhi.n	80012a6 <timer_list_add+0x62>
		prev = curr;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
		curr = curr->nextTimer;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	617b      	str	r3, [r7, #20]
	while(curr != NULL) { //iterating the list
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ed      	bne.n	8001280 <timer_list_add+0x3c>
 80012a4:	e000      	b.n	80012a8 <timer_list_add+0x64>
		if (unit->duration < totalDuration) break;
 80012a6:	bf00      	nop
	}
	if (prev == NULL) { //new unit is added before the head
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d113      	bne.n	80012d6 <timer_list_add+0x92>
		unit->nextTimer = curr;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	609a      	str	r2, [r3, #8]
		curr->duration -= unit->duration;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	1ad2      	subs	r2, r2, r3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	605a      	str	r2, [r3, #4]
		timerList.head = unit;
 80012c2:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <timer_list_add+0xec>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6053      	str	r3, [r2, #4]
		timerList.size++;
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <timer_list_add+0xec>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <timer_list_add+0xec>)
 80012d2:	701a      	strb	r2, [r3, #0]
		return;
 80012d4:	e028      	b.n	8001328 <timer_list_add+0xe4>
	}
	prev->nextTimer = unit;
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	609a      	str	r2, [r3, #8]
	unit->nextTimer = curr;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	609a      	str	r2, [r3, #8]
	if (curr == NULL){
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d106      	bne.n	80012f6 <timer_list_add+0xb2>
		unit->duration -= totalDuration;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1ad2      	subs	r2, r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	e010      	b.n	8001318 <timer_list_add+0xd4>
	}
	else{
		uint32_t tmp = unit->duration;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	60bb      	str	r3, [r7, #8]
		unit->duration -= (totalDuration - curr->duration);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	6859      	ldr	r1, [r3, #4]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	1acb      	subs	r3, r1, r3
 8001308:	441a      	add	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	605a      	str	r2, [r3, #4]
		curr->duration = (totalDuration - tmp);
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1ad2      	subs	r2, r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	605a      	str	r2, [r3, #4]
	}
	timerList.size++;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <timer_list_add+0xec>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <timer_list_add+0xec>)
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e000      	b.n	8001328 <timer_list_add+0xe4>
	if (timerList.size == MAX_TIMER) return;
 8001326:	bf00      	nop
}
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000204 	.word	0x20000204

08001334 <timer_list_pop>:

void timer_list_pop(){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	 //list empty
	if (timerList.size == 0) return;
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <timer_list_pop+0x38>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d010      	beq.n	8001364 <timer_list_pop+0x30>

	struct timer_unit *delUnit = timerList.head;
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <timer_list_pop+0x38>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	607b      	str	r3, [r7, #4]
	timerList.head = delUnit->nextTimer;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <timer_list_pop+0x38>)
 800134e:	6053      	str	r3, [r2, #4]
	timer_unit_destruct(delUnit);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff6b 	bl	800122c <timer_unit_destruct>
	timerList.size--;
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <timer_list_pop+0x38>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3b01      	subs	r3, #1
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b03      	ldr	r3, [pc, #12]	; (800136c <timer_list_pop+0x38>)
 8001360:	701a      	strb	r2, [r3, #0]
 8001362:	e000      	b.n	8001366 <timer_list_pop+0x32>
	if (timerList.size == 0) return;
 8001364:	bf00      	nop
}
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000204 	.word	0x20000204

08001370 <timer_init>:

/*-------------- global function -------------------*/
void timer_init(){
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
	timerList.head = NULL;
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <timer_init+0x18>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
	timerList.size = 0;
 800137a:	4b03      	ldr	r3, [pc, #12]	; (8001388 <timer_init+0x18>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000204 	.word	0x20000204

0800138c <timer_run>:

void timer_run(){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
	if (timerList.size == 0) return;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <timer_run+0x58>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d020      	beq.n	80013dc <timer_run+0x50>
	if (timerList.head->duration >= 0) {
		timerList.head->duration--;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <timer_run+0x58>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	3a01      	subs	r2, #1
 80013a2:	605a      	str	r2, [r3, #4]
		if (timerList.head->duration <= 0) {
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <timer_run+0x58>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d117      	bne.n	80013de <timer_run+0x52>
			uint8_t index = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	71fb      	strb	r3, [r7, #7]
			while(timerList.size && timerList.head->duration == 0) {
 80013b2:	e009      	b.n	80013c8 <timer_run+0x3c>
				index = timerList.head->index;
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <timer_run+0x58>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
				timerFlag[index] = 1;
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <timer_run+0x5c>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	54d1      	strb	r1, [r2, r3]
				timer_list_pop();
 80013c4:	f7ff ffb6 	bl	8001334 <timer_list_pop>
			while(timerList.size && timerList.head->duration == 0) {
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <timer_run+0x58>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <timer_run+0x52>
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <timer_run+0x58>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0ec      	beq.n	80013b4 <timer_run+0x28>
 80013da:	e000      	b.n	80013de <timer_run+0x52>
	if (timerList.size == 0) return;
 80013dc:	bf00      	nop
			}
		}
	}
}
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000204 	.word	0x20000204
 80013e8:	20000124 	.word	0x20000124

080013ec <timer_setDuration>:

void timer_setDuration(uint8_t index, uint32_t duration) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = timer_unit_construct(index, duration/CYCLE);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <timer_setDuration+0x30>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	08da      	lsrs	r2, r3, #3
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fef2 	bl	80011f0 <timer_unit_construct>
 800140c:	60f8      	str	r0, [r7, #12]
	timer_list_add(newUnit);
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f7ff ff18 	bl	8001244 <timer_list_add>
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	cccccccd 	.word	0xcccccccd

08001420 <timer_checkFlag>:

uint8_t	timer_checkFlag(uint8_t index) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	if (timerFlag[index] == 1) {
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <timer_checkFlag+0x2c>)
 800142e:	5cd3      	ldrb	r3, [r2, r3]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <timer_checkFlag+0x20>
		timerFlag[index] = 0;
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	4a05      	ldr	r2, [pc, #20]	; (800144c <timer_checkFlag+0x2c>)
 8001438:	2100      	movs	r1, #0
 800143a:	54d1      	strb	r1, [r2, r3]
		return 1;
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <timer_checkFlag+0x22>
	}
	return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20000124 	.word	0x20000124

08001450 <timer_clear>:

void timer_clear(uint8_t index) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
//	uint32_t totalDuration = 0;
	timerFlag[index] = 0;
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4a20      	ldr	r2, [pc, #128]	; (80014e0 <timer_clear+0x90>)
 800145e:	2100      	movs	r1, #0
 8001460:	54d1      	strb	r1, [r2, r3]
	struct timer_unit *curr = timerList.head,
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <timer_clear+0x94>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	60fb      	str	r3, [r7, #12]
			          *prev = NULL;
 8001468:	2300      	movs	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
	while (curr != NULL) {
 800146c:	e009      	b.n	8001482 <timer_clear+0x32>
		if (curr->index == index) break;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	79fa      	ldrb	r2, [r7, #7]
 8001474:	429a      	cmp	r2, r3
 8001476:	d008      	beq.n	800148a <timer_clear+0x3a>

//		totalDuration += curr->duration;
		prev = curr;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	60bb      	str	r3, [r7, #8]
		curr = curr->nextTimer;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	60fb      	str	r3, [r7, #12]
	while (curr != NULL) {
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f2      	bne.n	800146e <timer_clear+0x1e>
 8001488:	e000      	b.n	800148c <timer_clear+0x3c>
		if (curr->index == index) break;
 800148a:	bf00      	nop
	}

	if (curr == NULL) return;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d022      	beq.n	80014d8 <timer_clear+0x88>
	if (prev == NULL) { //item at the head of list
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d104      	bne.n	80014a2 <timer_clear+0x52>
		timerList.head = curr->nextTimer;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <timer_clear+0x94>)
 800149e:	6053      	str	r3, [r2, #4]
 80014a0:	e003      	b.n	80014aa <timer_clear+0x5a>
	}
	else {
		prev->nextTimer = curr->nextTimer;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	609a      	str	r2, [r3, #8]
	}
	if (curr->nextTimer != NULL) curr->nextTimer->duration += curr->duration;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <timer_clear+0x74>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	440a      	add	r2, r1
 80014c2:	605a      	str	r2, [r3, #4]
	timer_unit_destruct(curr);
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f7ff feb1 	bl	800122c <timer_unit_destruct>
	timerList.size--;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <timer_clear+0x94>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <timer_clear+0x94>)
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	e000      	b.n	80014da <timer_clear+0x8a>
	if (curr == NULL) return;
 80014d8:	bf00      	nop
}
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000124 	.word	0x20000124
 80014e4:	20000204 	.word	0x20000204

080014e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ea:	490d      	ldr	r1, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001500:	4c0a      	ldr	r4, [pc, #40]	; (800152c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800150e:	f7ff f94f 	bl	80007b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f001 fee1 	bl	80032d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001516:	f7fe fe19 	bl	800014c <main>
  bx lr
 800151a:	4770      	bx	lr
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001524:	08003520 	.word	0x08003520
  ldr r2, =_sbss
 8001528:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 800152c:	20000220 	.word	0x20000220

08001530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_2_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_Init+0x28>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_Init+0x28>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f923 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f808 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7fe ffda 	bl	8000508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_InitTick+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x58>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f93b 	bl	80017fa <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f000 f903 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_InitTick+0x5c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000064 	.word	0x20000064
 80015bc:	20000060 	.word	0x20000060

080015c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <HAL_IncTick+0x1c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <HAL_IncTick+0x20>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <HAL_IncTick+0x20>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	20000064 	.word	0x20000064
 80015e0:	2000020c 	.word	0x2000020c

080015e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return uwTick;
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <HAL_GetTick+0x10>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	2000020c 	.word	0x2000020c

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	2b00      	cmp	r3, #0
 800166c:	db0b      	blt.n	8001686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	f003 021f 	and.w	r2, r3, #31
 8001674:	4906      	ldr	r1, [pc, #24]	; (8001690 <__NVIC_EnableIRQ+0x34>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2001      	movs	r0, #1
 800167e:	fa00 f202 	lsl.w	r2, r0, r2
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff90 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff2d 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff42 	bl	8001640 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff90 	bl	80016e8 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5f 	bl	8001694 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff35 	bl	800165c <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001814:	b480      	push	{r7}
 8001816:	b08b      	sub	sp, #44	; 0x2c
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181e:	2300      	movs	r3, #0
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001826:	e169      	b.n	8001afc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001828:	2201      	movs	r2, #1
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	429a      	cmp	r2, r3
 8001842:	f040 8158 	bne.w	8001af6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4a9a      	ldr	r2, [pc, #616]	; (8001ab4 <HAL_GPIO_Init+0x2a0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d05e      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001850:	4a98      	ldr	r2, [pc, #608]	; (8001ab4 <HAL_GPIO_Init+0x2a0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d875      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001856:	4a98      	ldr	r2, [pc, #608]	; (8001ab8 <HAL_GPIO_Init+0x2a4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d058      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 800185c:	4a96      	ldr	r2, [pc, #600]	; (8001ab8 <HAL_GPIO_Init+0x2a4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d86f      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001862:	4a96      	ldr	r2, [pc, #600]	; (8001abc <HAL_GPIO_Init+0x2a8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d052      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001868:	4a94      	ldr	r2, [pc, #592]	; (8001abc <HAL_GPIO_Init+0x2a8>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d869      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800186e:	4a94      	ldr	r2, [pc, #592]	; (8001ac0 <HAL_GPIO_Init+0x2ac>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d04c      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001874:	4a92      	ldr	r2, [pc, #584]	; (8001ac0 <HAL_GPIO_Init+0x2ac>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d863      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800187a:	4a92      	ldr	r2, [pc, #584]	; (8001ac4 <HAL_GPIO_Init+0x2b0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d046      	beq.n	800190e <HAL_GPIO_Init+0xfa>
 8001880:	4a90      	ldr	r2, [pc, #576]	; (8001ac4 <HAL_GPIO_Init+0x2b0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d85d      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 8001886:	2b12      	cmp	r3, #18
 8001888:	d82a      	bhi.n	80018e0 <HAL_GPIO_Init+0xcc>
 800188a:	2b12      	cmp	r3, #18
 800188c:	d859      	bhi.n	8001942 <HAL_GPIO_Init+0x12e>
 800188e:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <HAL_GPIO_Init+0x80>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	0800190f 	.word	0x0800190f
 8001898:	080018e9 	.word	0x080018e9
 800189c:	080018fb 	.word	0x080018fb
 80018a0:	0800193d 	.word	0x0800193d
 80018a4:	08001943 	.word	0x08001943
 80018a8:	08001943 	.word	0x08001943
 80018ac:	08001943 	.word	0x08001943
 80018b0:	08001943 	.word	0x08001943
 80018b4:	08001943 	.word	0x08001943
 80018b8:	08001943 	.word	0x08001943
 80018bc:	08001943 	.word	0x08001943
 80018c0:	08001943 	.word	0x08001943
 80018c4:	08001943 	.word	0x08001943
 80018c8:	08001943 	.word	0x08001943
 80018cc:	08001943 	.word	0x08001943
 80018d0:	08001943 	.word	0x08001943
 80018d4:	08001943 	.word	0x08001943
 80018d8:	080018f1 	.word	0x080018f1
 80018dc:	08001905 	.word	0x08001905
 80018e0:	4a79      	ldr	r2, [pc, #484]	; (8001ac8 <HAL_GPIO_Init+0x2b4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d013      	beq.n	800190e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018e6:	e02c      	b.n	8001942 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e029      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	3304      	adds	r3, #4
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e024      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	3308      	adds	r3, #8
 8001900:	623b      	str	r3, [r7, #32]
          break;
 8001902:	e01f      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	330c      	adds	r3, #12
 800190a:	623b      	str	r3, [r7, #32]
          break;
 800190c:	e01a      	b.n	8001944 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001916:	2304      	movs	r3, #4
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e013      	b.n	8001944 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001924:	2308      	movs	r3, #8
 8001926:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	611a      	str	r2, [r3, #16]
          break;
 800192e:	e009      	b.n	8001944 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001930:	2308      	movs	r3, #8
 8001932:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	615a      	str	r2, [r3, #20]
          break;
 800193a:	e003      	b.n	8001944 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
          break;
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x130>
          break;
 8001942:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d801      	bhi.n	800194e <HAL_GPIO_Init+0x13a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	e001      	b.n	8001952 <HAL_GPIO_Init+0x13e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3304      	adds	r3, #4
 8001952:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d802      	bhi.n	8001960 <HAL_GPIO_Init+0x14c>
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	e002      	b.n	8001966 <HAL_GPIO_Init+0x152>
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	3b08      	subs	r3, #8
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	210f      	movs	r1, #15
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	401a      	ands	r2, r3
 8001978:	6a39      	ldr	r1, [r7, #32]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	fa01 f303 	lsl.w	r3, r1, r3
 8001980:	431a      	orrs	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80b1 	beq.w	8001af6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001994:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <HAL_GPIO_Init+0x2b8>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	4a4c      	ldr	r2, [pc, #304]	; (8001acc <HAL_GPIO_Init+0x2b8>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6193      	str	r3, [r2, #24]
 80019a0:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <HAL_GPIO_Init+0x2b8>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019ac:	4a48      	ldr	r2, [pc, #288]	; (8001ad0 <HAL_GPIO_Init+0x2bc>)
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	3302      	adds	r3, #2
 80019b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	220f      	movs	r2, #15
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a40      	ldr	r2, [pc, #256]	; (8001ad4 <HAL_GPIO_Init+0x2c0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d013      	beq.n	8001a00 <HAL_GPIO_Init+0x1ec>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3f      	ldr	r2, [pc, #252]	; (8001ad8 <HAL_GPIO_Init+0x2c4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d00d      	beq.n	80019fc <HAL_GPIO_Init+0x1e8>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a3e      	ldr	r2, [pc, #248]	; (8001adc <HAL_GPIO_Init+0x2c8>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d007      	beq.n	80019f8 <HAL_GPIO_Init+0x1e4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a3d      	ldr	r2, [pc, #244]	; (8001ae0 <HAL_GPIO_Init+0x2cc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_GPIO_Init+0x1e0>
 80019f0:	2303      	movs	r3, #3
 80019f2:	e006      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019f4:	2304      	movs	r3, #4
 80019f6:	e004      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019f8:	2302      	movs	r3, #2
 80019fa:	e002      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_GPIO_Init+0x1ee>
 8001a00:	2300      	movs	r3, #0
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	f002 0203 	and.w	r2, r2, #3
 8001a08:	0092      	lsls	r2, r2, #2
 8001a0a:	4093      	lsls	r3, r2
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a12:	492f      	ldr	r1, [pc, #188]	; (8001ad0 <HAL_GPIO_Init+0x2bc>)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3302      	adds	r3, #2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	492c      	ldr	r1, [pc, #176]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4928      	ldr	r1, [pc, #160]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a54:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	4922      	ldr	r1, [pc, #136]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	491e      	ldr	r1, [pc, #120]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d006      	beq.n	8001a8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	4918      	ldr	r1, [pc, #96]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	608b      	str	r3, [r1, #8]
 8001a88:	e006      	b.n	8001a98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	4914      	ldr	r1, [pc, #80]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d021      	beq.n	8001ae8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	490e      	ldr	r1, [pc, #56]	; (8001ae4 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
 8001ab0:	e021      	b.n	8001af6 <HAL_GPIO_Init+0x2e2>
 8001ab2:	bf00      	nop
 8001ab4:	10320000 	.word	0x10320000
 8001ab8:	10310000 	.word	0x10310000
 8001abc:	10220000 	.word	0x10220000
 8001ac0:	10210000 	.word	0x10210000
 8001ac4:	10120000 	.word	0x10120000
 8001ac8:	10110000 	.word	0x10110000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40010c00 	.word	0x40010c00
 8001adc:	40011000 	.word	0x40011000
 8001ae0:	40011400 	.word	0x40011400
 8001ae4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4909      	ldr	r1, [pc, #36]	; (8001b18 <HAL_GPIO_Init+0x304>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	3301      	adds	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f47f ae8e 	bne.w	8001828 <HAL_GPIO_Init+0x14>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	372c      	adds	r7, #44	; 0x2c
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	40010400 	.word	0x40010400

08001b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	887b      	ldrh	r3, [r7, #2]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e001      	b.n	8001b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr

08001b4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	807b      	strh	r3, [r7, #2]
 8001b56:	4613      	mov	r3, r2
 8001b58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b5a:	787b      	ldrb	r3, [r7, #1]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b60:	887a      	ldrh	r2, [r7, #2]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b66:	e003      	b.n	8001b70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	041a      	lsls	r2, r3, #16
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	611a      	str	r2, [r3, #16]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
	...

08001b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d006      	beq.n	8001ba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b92:	4a05      	ldr	r2, [pc, #20]	; (8001ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f806 	bl	8001bac <HAL_GPIO_EXTI_Callback>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40010400 	.word	0x40010400

08001bac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e26c      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8087 	beq.w	8001cee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be0:	4b92      	ldr	r3, [pc, #584]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d00c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bec:	4b8f      	ldr	r3, [pc, #572]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d112      	bne.n	8001c1e <HAL_RCC_OscConfig+0x5e>
 8001bf8:	4b8c      	ldr	r3, [pc, #560]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c04:	d10b      	bne.n	8001c1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c06:	4b89      	ldr	r3, [pc, #548]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d06c      	beq.n	8001cec <HAL_RCC_OscConfig+0x12c>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d168      	bne.n	8001cec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e246      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x76>
 8001c28:	4b80      	ldr	r3, [pc, #512]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a7f      	ldr	r2, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e02e      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x98>
 8001c3e:	4b7b      	ldr	r3, [pc, #492]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7a      	ldr	r2, [pc, #488]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b78      	ldr	r3, [pc, #480]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a77      	ldr	r2, [pc, #476]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0xbc>
 8001c62:	4b72      	ldr	r3, [pc, #456]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a71      	ldr	r2, [pc, #452]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b6f      	ldr	r3, [pc, #444]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xd4>
 8001c7c:	4b6b      	ldr	r3, [pc, #428]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6a      	ldr	r2, [pc, #424]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b68      	ldr	r3, [pc, #416]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a67      	ldr	r2, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fca2 	bl	80015e4 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fc9e 	bl	80015e4 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1fa      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b5d      	ldr	r3, [pc, #372]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe4>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fc8e 	bl	80015e4 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fc8a 	bl	80015e4 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e1e6      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	4b53      	ldr	r3, [pc, #332]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x10c>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d063      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfa:	4b4c      	ldr	r3, [pc, #304]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d06:	4b49      	ldr	r3, [pc, #292]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d11c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x18c>
 8001d12:	4b46      	ldr	r3, [pc, #280]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d116      	bne.n	8001d4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x176>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e1ba      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4939      	ldr	r1, [pc, #228]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	e03a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d020      	beq.n	8001d96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d54:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <HAL_RCC_OscConfig+0x270>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fc43 	bl	80015e4 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d62:	f7ff fc3f 	bl	80015e4 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e19b      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4927      	ldr	r1, [pc, #156]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
 8001d94:	e015      	b.n	8001dc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_RCC_OscConfig+0x270>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fc22 	bl	80015e4 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff fc1e 	bl	80015e4 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e17a      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d03a      	beq.n	8001e44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d019      	beq.n	8001e0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fc02 	bl	80015e4 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff fbfe 	bl	80015e4 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e15a      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f000 fad8 	bl	80023b8 <RCC_Delay>
 8001e08:	e01c      	b.n	8001e44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_RCC_OscConfig+0x274>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e10:	f7ff fbe8 	bl	80015e4 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e16:	e00f      	b.n	8001e38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e18:	f7ff fbe4 	bl	80015e4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d908      	bls.n	8001e38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e140      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	42420000 	.word	0x42420000
 8001e34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e38:	4b9e      	ldr	r3, [pc, #632]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e9      	bne.n	8001e18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80a6 	beq.w	8001f9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e56:	4b97      	ldr	r3, [pc, #604]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10d      	bne.n	8001e7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4b94      	ldr	r3, [pc, #592]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4a93      	ldr	r2, [pc, #588]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	61d3      	str	r3, [r2, #28]
 8001e6e:	4b91      	ldr	r3, [pc, #580]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b8e      	ldr	r3, [pc, #568]	; (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d118      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8a:	4b8b      	ldr	r3, [pc, #556]	; (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a8a      	ldr	r2, [pc, #552]	; (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e96:	f7ff fba5 	bl	80015e4 <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9e:	f7ff fba1 	bl	80015e4 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b64      	cmp	r3, #100	; 0x64
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e0fd      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	4b81      	ldr	r3, [pc, #516]	; (80020b8 <HAL_RCC_OscConfig+0x4f8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x312>
 8001ec4:	4b7b      	ldr	r3, [pc, #492]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a7a      	ldr	r2, [pc, #488]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6213      	str	r3, [r2, #32]
 8001ed0:	e02d      	b.n	8001f2e <HAL_RCC_OscConfig+0x36e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x334>
 8001eda:	4b76      	ldr	r3, [pc, #472]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a75      	ldr	r2, [pc, #468]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	4b73      	ldr	r3, [pc, #460]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a72      	ldr	r2, [pc, #456]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	e01c      	b.n	8001f2e <HAL_RCC_OscConfig+0x36e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d10c      	bne.n	8001f16 <HAL_RCC_OscConfig+0x356>
 8001efc:	4b6d      	ldr	r3, [pc, #436]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a6c      	ldr	r2, [pc, #432]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	4a69      	ldr	r2, [pc, #420]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6213      	str	r3, [r2, #32]
 8001f14:	e00b      	b.n	8001f2e <HAL_RCC_OscConfig+0x36e>
 8001f16:	4b67      	ldr	r3, [pc, #412]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a66      	ldr	r2, [pc, #408]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	4b64      	ldr	r3, [pc, #400]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a63      	ldr	r2, [pc, #396]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d015      	beq.n	8001f62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7ff fb55 	bl	80015e4 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7ff fb51 	bl	80015e4 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0ab      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	4b57      	ldr	r3, [pc, #348]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ee      	beq.n	8001f3e <HAL_RCC_OscConfig+0x37e>
 8001f60:	e014      	b.n	8001f8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7ff fb3f 	bl	80015e4 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6a:	f7ff fb3b 	bl	80015e4 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e095      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f80:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ee      	bne.n	8001f6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f8c:	7dfb      	ldrb	r3, [r7, #23]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f92:	4b48      	ldr	r3, [pc, #288]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a47      	ldr	r2, [pc, #284]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8081 	beq.w	80020aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa8:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d061      	beq.n	8002078 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d146      	bne.n	800204a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <HAL_RCC_OscConfig+0x4fc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fb0f 	bl	80015e4 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff fb0b 	bl	80015e4 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e067      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fdc:	4b35      	ldr	r3, [pc, #212]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff0:	d108      	bne.n	8002004 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ff2:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	492d      	ldr	r1, [pc, #180]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002004:	4b2b      	ldr	r3, [pc, #172]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a19      	ldr	r1, [r3, #32]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	430b      	orrs	r3, r1
 8002016:	4927      	ldr	r1, [pc, #156]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x4fc>)
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff fadf 	bl	80015e4 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7ff fadb 	bl	80015e4 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e037      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0f0      	beq.n	800202a <HAL_RCC_OscConfig+0x46a>
 8002048:	e02f      	b.n	80020aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204a:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <HAL_RCC_OscConfig+0x4fc>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fac8 	bl	80015e4 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff fac4 	bl	80015e4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e020      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x498>
 8002076:	e018      	b.n	80020aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e013      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_OscConfig+0x4f4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	429a      	cmp	r2, r3
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000
 80020b8:	40007000 	.word	0x40007000
 80020bc:	42420060 	.word	0x42420060

080020c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e0d0      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d910      	bls.n	8002104 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 0207 	bic.w	r2, r3, #7
 80020ea:	4965      	ldr	r1, [pc, #404]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b63      	ldr	r3, [pc, #396]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0b8      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800211c:	4b59      	ldr	r3, [pc, #356]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	4a58      	ldr	r2, [pc, #352]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002126:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002134:	4b53      	ldr	r3, [pc, #332]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	4a52      	ldr	r2, [pc, #328]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800213e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b50      	ldr	r3, [pc, #320]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	494d      	ldr	r1, [pc, #308]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d040      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b47      	ldr	r3, [pc, #284]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d115      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e07f      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217e:	4b41      	ldr	r3, [pc, #260]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e073      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218e:	4b3d      	ldr	r3, [pc, #244]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06b      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219e:	4b39      	ldr	r3, [pc, #228]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f023 0203 	bic.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4936      	ldr	r1, [pc, #216]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b0:	f7ff fa18 	bl	80015e4 <HAL_GetTick>
 80021b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b8:	f7ff fa14 	bl	80015e4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e053      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 020c 	and.w	r2, r3, #12
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d1eb      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d210      	bcs.n	8002210 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4922      	ldr	r1, [pc, #136]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e032      	b.n	8002276 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4916      	ldr	r1, [pc, #88]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800223a:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	490e      	ldr	r1, [pc, #56]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	4313      	orrs	r3, r2
 800224c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224e:	f000 f821 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8002252:	4602      	mov	r2, r0
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	490a      	ldr	r1, [pc, #40]	; (8002288 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	5ccb      	ldrb	r3, [r1, r3]
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1cc>)
 8002268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800226a:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_ClockConfig+0x1d0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f976 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40022000 	.word	0x40022000
 8002284:	40021000 	.word	0x40021000
 8002288:	08003500 	.word	0x08003500
 800228c:	20000000 	.word	0x20000000
 8002290:	20000060 	.word	0x20000060

08002294 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002294:	b490      	push	{r4, r7}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800229a:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb0>)
 800229c:	1d3c      	adds	r4, r7, #4
 800229e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022a4:	f240 2301 	movw	r3, #513	; 0x201
 80022a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x40>
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x46>
 80022d2:	e02d      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022d6:	623b      	str	r3, [r7, #32]
      break;
 80022d8:	e02d      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022e6:	4413      	add	r3, r2
 80022e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f8:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	0c5b      	lsrs	r3, r3, #17
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002306:	4413      	add	r3, r2
 8002308:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800230c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4a0e      	ldr	r2, [pc, #56]	; (800234c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002312:	fb02 f203 	mul.w	r2, r2, r3
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
 800231e:	e004      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	623b      	str	r3, [r7, #32]
      break;
 800232e:	e002      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002332:	623b      	str	r3, [r7, #32]
      break;
 8002334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002336:	6a3b      	ldr	r3, [r7, #32]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3728      	adds	r7, #40	; 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bc90      	pop	{r4, r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	080034f0 	.word	0x080034f0
 8002348:	40021000 	.word	0x40021000
 800234c:	007a1200 	.word	0x007a1200
 8002350:	003d0900 	.word	0x003d0900

08002354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_RCC_GetHCLKFreq+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	20000000 	.word	0x20000000

08002368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800236c:	f7ff fff2 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002370:	4602      	mov	r2, r0
 8002372:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	4903      	ldr	r1, [pc, #12]	; (800238c <HAL_RCC_GetPCLK1Freq+0x24>)
 800237e:	5ccb      	ldrb	r3, [r1, r3]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002384:	4618      	mov	r0, r3
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	08003510 	.word	0x08003510

08002390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002394:	f7ff ffde 	bl	8002354 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	0adb      	lsrs	r3, r3, #11
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4903      	ldr	r1, [pc, #12]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08003510 	.word	0x08003510

080023b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <RCC_Delay+0x34>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0a      	ldr	r2, [pc, #40]	; (80023f0 <RCC_Delay+0x38>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0a5b      	lsrs	r3, r3, #9
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d4:	bf00      	nop
  }
  while (Delay --);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1e5a      	subs	r2, r3, #1
 80023da:	60fa      	str	r2, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1f9      	bne.n	80023d4 <RCC_Delay+0x1c>
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	20000000 	.word	0x20000000
 80023f0:	10624dd3 	.word	0x10624dd3

080023f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e041      	b.n	800248a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d106      	bne.n	8002420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe f8a6 	bl	800056c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	4619      	mov	r1, r3
 8002432:	4610      	mov	r0, r2
 8002434:	f000 fb7e 	bl	8002b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d001      	beq.n	80024ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e03a      	b.n	8002522 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0201 	orr.w	r2, r2, #1
 80024c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_TIM_Base_Start_IT+0x98>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00e      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x58>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d6:	d009      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x58>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <HAL_TIM_Base_Start_IT+0x9c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_TIM_Base_Start_IT+0x58>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a13      	ldr	r2, [pc, #76]	; (8002534 <HAL_TIM_Base_Start_IT+0xa0>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d111      	bne.n	8002510 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d010      	beq.n	8002520 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800250e:	e007      	b.n	8002520 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40000400 	.word	0x40000400
 8002534:	40000800 	.word	0x40000800

08002538 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e041      	b.n	80025ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d106      	bne.n	8002564 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe f828 	bl	80005b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f000 fadc 	bl	8002b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d122      	bne.n	8002632 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d11b      	bne.n	8002632 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f06f 0202 	mvn.w	r2, #2
 8002602:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fa70 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 800261e:	e005      	b.n	800262c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 fa63 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 fa72 	bl	8002b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d122      	bne.n	8002686 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b04      	cmp	r3, #4
 800264c:	d11b      	bne.n	8002686 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f06f 0204 	mvn.w	r2, #4
 8002656:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fa46 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 8002672:	e005      	b.n	8002680 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa39 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fa48 	bl	8002b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b08      	cmp	r3, #8
 8002692:	d122      	bne.n	80026da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d11b      	bne.n	80026da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f06f 0208 	mvn.w	r2, #8
 80026aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2204      	movs	r2, #4
 80026b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fa1c 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 80026c6:	e005      	b.n	80026d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 fa0f 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fa1e 	bl	8002b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d122      	bne.n	800272e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d11b      	bne.n	800272e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f06f 0210 	mvn.w	r2, #16
 80026fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2208      	movs	r2, #8
 8002704:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f9f2 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 800271a:	e005      	b.n	8002728 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f9e5 	bl	8002aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f9f4 	bl	8002b10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d10e      	bne.n	800275a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f06f 0201 	mvn.w	r2, #1
 8002752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7fd fec5 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d10e      	bne.n	8002786 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002772:	2b80      	cmp	r3, #128	; 0x80
 8002774:	d107      	bne.n	8002786 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800277e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fcbe 	bl	8003102 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d10e      	bne.n	80027b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d107      	bne.n	80027b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f9b8 	bl	8002b22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d10e      	bne.n	80027de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	d107      	bne.n	80027de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f06f 0220 	mvn.w	r2, #32
 80027d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 fc89 	bl	80030f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027fe:	2302      	movs	r3, #2
 8002800:	e0ac      	b.n	800295c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	f200 809f 	bhi.w	8002950 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002812:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	0800284d 	.word	0x0800284d
 800281c:	08002951 	.word	0x08002951
 8002820:	08002951 	.word	0x08002951
 8002824:	08002951 	.word	0x08002951
 8002828:	0800288d 	.word	0x0800288d
 800282c:	08002951 	.word	0x08002951
 8002830:	08002951 	.word	0x08002951
 8002834:	08002951 	.word	0x08002951
 8002838:	080028cf 	.word	0x080028cf
 800283c:	08002951 	.word	0x08002951
 8002840:	08002951 	.word	0x08002951
 8002844:	08002951 	.word	0x08002951
 8002848:	0800290f 	.word	0x0800290f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f9d0 	bl	8002bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0208 	orr.w	r2, r2, #8
 8002866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0204 	bic.w	r2, r2, #4
 8002876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6999      	ldr	r1, [r3, #24]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	619a      	str	r2, [r3, #24]
      break;
 800288a:	e062      	b.n	8002952 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fa16 	bl	8002cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6999      	ldr	r1, [r3, #24]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	021a      	lsls	r2, r3, #8
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	619a      	str	r2, [r3, #24]
      break;
 80028cc:	e041      	b.n	8002952 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fa5f 	bl	8002d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0208 	orr.w	r2, r2, #8
 80028e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0204 	bic.w	r2, r2, #4
 80028f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	69d9      	ldr	r1, [r3, #28]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	61da      	str	r2, [r3, #28]
      break;
 800290c:	e021      	b.n	8002952 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 faa9 	bl	8002e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69d9      	ldr	r1, [r3, #28]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	021a      	lsls	r2, r3, #8
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	61da      	str	r2, [r3, #28]
      break;
 800294e:	e000      	b.n	8002952 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002950:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_TIM_ConfigClockSource+0x18>
 8002978:	2302      	movs	r3, #2
 800297a:	e0b3      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x180>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800299a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b4:	d03e      	beq.n	8002a34 <HAL_TIM_ConfigClockSource+0xd0>
 80029b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ba:	f200 8087 	bhi.w	8002acc <HAL_TIM_ConfigClockSource+0x168>
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	f000 8085 	beq.w	8002ad0 <HAL_TIM_ConfigClockSource+0x16c>
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ca:	d87f      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x168>
 80029cc:	2b70      	cmp	r3, #112	; 0x70
 80029ce:	d01a      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0xa2>
 80029d0:	2b70      	cmp	r3, #112	; 0x70
 80029d2:	d87b      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x168>
 80029d4:	2b60      	cmp	r3, #96	; 0x60
 80029d6:	d050      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x116>
 80029d8:	2b60      	cmp	r3, #96	; 0x60
 80029da:	d877      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x168>
 80029dc:	2b50      	cmp	r3, #80	; 0x50
 80029de:	d03c      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0xf6>
 80029e0:	2b50      	cmp	r3, #80	; 0x50
 80029e2:	d873      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x168>
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d058      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0x136>
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d86f      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x168>
 80029ec:	2b30      	cmp	r3, #48	; 0x30
 80029ee:	d064      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x156>
 80029f0:	2b30      	cmp	r3, #48	; 0x30
 80029f2:	d86b      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x168>
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d060      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x156>
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d867      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x168>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d05c      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x156>
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d05a      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a04:	e062      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f000 faee 	bl	8002ff6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	609a      	str	r2, [r3, #8]
      break;
 8002a32:	e04e      	b.n	8002ad2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f000 fad7 	bl	8002ff6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a56:	609a      	str	r2, [r3, #8]
      break;
 8002a58:	e03b      	b.n	8002ad2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f000 fa4e 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2150      	movs	r1, #80	; 0x50
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 faa5 	bl	8002fc2 <TIM_ITRx_SetConfig>
      break;
 8002a78:	e02b      	b.n	8002ad2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f000 fa6c 	bl	8002f64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2160      	movs	r1, #96	; 0x60
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fa95 	bl	8002fc2 <TIM_ITRx_SetConfig>
      break;
 8002a98:	e01b      	b.n	8002ad2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f000 fa2e 	bl	8002f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2140      	movs	r1, #64	; 0x40
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fa85 	bl	8002fc2 <TIM_ITRx_SetConfig>
      break;
 8002ab8:	e00b      	b.n	8002ad2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f000 fa7c 	bl	8002fc2 <TIM_ITRx_SetConfig>
        break;
 8002aca:	e002      	b.n	8002ad2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002acc:	bf00      	nop
 8002ace:	e000      	b.n	8002ad2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ad0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr

08002afe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a29      	ldr	r2, [pc, #164]	; (8002bec <TIM_Base_SetConfig+0xb8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <TIM_Base_SetConfig+0x30>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b52:	d007      	beq.n	8002b64 <TIM_Base_SetConfig+0x30>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a26      	ldr	r2, [pc, #152]	; (8002bf0 <TIM_Base_SetConfig+0xbc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x30>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	; (8002bf4 <TIM_Base_SetConfig+0xc0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <TIM_Base_SetConfig+0xb8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00b      	beq.n	8002b96 <TIM_Base_SetConfig+0x62>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d007      	beq.n	8002b96 <TIM_Base_SetConfig+0x62>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <TIM_Base_SetConfig+0xbc>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d003      	beq.n	8002b96 <TIM_Base_SetConfig+0x62>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <TIM_Base_SetConfig+0xc0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a07      	ldr	r2, [pc, #28]	; (8002bec <TIM_Base_SetConfig+0xb8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d103      	bne.n	8002bdc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	615a      	str	r2, [r3, #20]
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800

08002bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f023 0201 	bic.w	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0303 	bic.w	r3, r3, #3
 8002c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f023 0302 	bic.w	r3, r3, #2
 8002c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <TIM_OC1_SetConfig+0xc8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d10c      	bne.n	8002c6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f023 0308 	bic.w	r3, r3, #8
 8002c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 0304 	bic.w	r3, r3, #4
 8002c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <TIM_OC1_SetConfig+0xc8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d111      	bne.n	8002c9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	621a      	str	r2, [r3, #32]
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40012c00 	.word	0x40012c00

08002cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f023 0210 	bic.w	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	021b      	lsls	r3, r3, #8
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f023 0320 	bic.w	r3, r3, #32
 8002d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <TIM_OC2_SetConfig+0xd0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10d      	bne.n	8002d40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <TIM_OC2_SetConfig+0xd0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d113      	bne.n	8002d70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	621a      	str	r2, [r3, #32]
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	40012c00 	.word	0x40012c00

08002d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a1d      	ldr	r2, [pc, #116]	; (8002e68 <TIM_OC3_SetConfig+0xd0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10d      	bne.n	8002e12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	021b      	lsls	r3, r3, #8
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <TIM_OC3_SetConfig+0xd0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d113      	bne.n	8002e42 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	621a      	str	r2, [r3, #32]
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40012c00 	.word	0x40012c00

08002e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	031b      	lsls	r3, r3, #12
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <TIM_OC4_SetConfig+0x98>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d109      	bne.n	8002ee0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	019b      	lsls	r3, r3, #6
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	621a      	str	r2, [r3, #32]
}
 8002efa:	bf00      	nop
 8002efc:	371c      	adds	r7, #28
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40012c00 	.word	0x40012c00

08002f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f023 0201 	bic.w	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f023 030a 	bic.w	r3, r3, #10
 8002f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	621a      	str	r2, [r3, #32]
}
 8002f5a:	bf00      	nop
 8002f5c:	371c      	adds	r7, #28
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f023 0210 	bic.w	r2, r3, #16
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	031b      	lsls	r3, r3, #12
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b085      	sub	sp, #20
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
 8002fca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f043 0307 	orr.w	r3, r3, #7
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	609a      	str	r2, [r3, #8]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b087      	sub	sp, #28
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003010:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	021a      	lsls	r2, r3, #8
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	431a      	orrs	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4313      	orrs	r3, r2
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4313      	orrs	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	609a      	str	r2, [r3, #8]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003048:	2302      	movs	r3, #2
 800304a:	e046      	b.n	80030da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00e      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d009      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d004      	beq.n	80030ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a10      	ldr	r2, [pc, #64]	; (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10c      	bne.n	80030c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	bc80      	pop	{r7}
 80030e2:	4770      	bx	lr
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40000800 	.word	0x40000800

080030f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e03f      	b.n	80031a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd fa8a 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2224      	movs	r2, #36	; 0x24
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003156:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f829 	bl	80031b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800316c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800317c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800318c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ea:	f023 030c 	bic.w	r3, r3, #12
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	430b      	orrs	r3, r1
 80031f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2c      	ldr	r2, [pc, #176]	; (80032c4 <UART_SetConfig+0x114>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d103      	bne.n	8003220 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003218:	f7ff f8ba 	bl	8002390 <HAL_RCC_GetPCLK2Freq>
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	e002      	b.n	8003226 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003220:	f7ff f8a2 	bl	8002368 <HAL_RCC_GetPCLK1Freq>
 8003224:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009a      	lsls	r2, r3, #2
 8003230:	441a      	add	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <UART_SetConfig+0x118>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	0119      	lsls	r1, r3, #4
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009a      	lsls	r2, r3, #2
 8003250:	441a      	add	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	fbb2 f2f3 	udiv	r2, r2, r3
 800325c:	4b1a      	ldr	r3, [pc, #104]	; (80032c8 <UART_SetConfig+0x118>)
 800325e:	fba3 0302 	umull	r0, r3, r3, r2
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2064      	movs	r0, #100	; 0x64
 8003266:	fb00 f303 	mul.w	r3, r0, r3
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	3332      	adds	r3, #50	; 0x32
 8003270:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <UART_SetConfig+0x118>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327c:	4419      	add	r1, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	009a      	lsls	r2, r3, #2
 8003288:	441a      	add	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fbb2 f2f3 	udiv	r2, r2, r3
 8003294:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <UART_SetConfig+0x118>)
 8003296:	fba3 0302 	umull	r0, r3, r3, r2
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2064      	movs	r0, #100	; 0x64
 800329e:	fb00 f303 	mul.w	r3, r0, r3
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	3332      	adds	r3, #50	; 0x32
 80032a8:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <UART_SetConfig+0x118>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	f003 020f 	and.w	r2, r3, #15
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	440a      	add	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40013800 	.word	0x40013800
 80032c8:	51eb851f 	.word	0x51eb851f

080032cc <__errno>:
 80032cc:	4b01      	ldr	r3, [pc, #4]	; (80032d4 <__errno+0x8>)
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000068 	.word	0x20000068

080032d8 <__libc_init_array>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	2600      	movs	r6, #0
 80032dc:	4d0c      	ldr	r5, [pc, #48]	; (8003310 <__libc_init_array+0x38>)
 80032de:	4c0d      	ldr	r4, [pc, #52]	; (8003314 <__libc_init_array+0x3c>)
 80032e0:	1b64      	subs	r4, r4, r5
 80032e2:	10a4      	asrs	r4, r4, #2
 80032e4:	42a6      	cmp	r6, r4
 80032e6:	d109      	bne.n	80032fc <__libc_init_array+0x24>
 80032e8:	f000 f8f6 	bl	80034d8 <_init>
 80032ec:	2600      	movs	r6, #0
 80032ee:	4d0a      	ldr	r5, [pc, #40]	; (8003318 <__libc_init_array+0x40>)
 80032f0:	4c0a      	ldr	r4, [pc, #40]	; (800331c <__libc_init_array+0x44>)
 80032f2:	1b64      	subs	r4, r4, r5
 80032f4:	10a4      	asrs	r4, r4, #2
 80032f6:	42a6      	cmp	r6, r4
 80032f8:	d105      	bne.n	8003306 <__libc_init_array+0x2e>
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003300:	4798      	blx	r3
 8003302:	3601      	adds	r6, #1
 8003304:	e7ee      	b.n	80032e4 <__libc_init_array+0xc>
 8003306:	f855 3b04 	ldr.w	r3, [r5], #4
 800330a:	4798      	blx	r3
 800330c:	3601      	adds	r6, #1
 800330e:	e7f2      	b.n	80032f6 <__libc_init_array+0x1e>
 8003310:	08003518 	.word	0x08003518
 8003314:	08003518 	.word	0x08003518
 8003318:	08003518 	.word	0x08003518
 800331c:	0800351c 	.word	0x0800351c

08003320 <malloc>:
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <malloc+0xc>)
 8003322:	4601      	mov	r1, r0
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	f000 b85f 	b.w	80033e8 <_malloc_r>
 800332a:	bf00      	nop
 800332c:	20000068 	.word	0x20000068

08003330 <free>:
 8003330:	4b02      	ldr	r3, [pc, #8]	; (800333c <free+0xc>)
 8003332:	4601      	mov	r1, r0
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	f000 b80b 	b.w	8003350 <_free_r>
 800333a:	bf00      	nop
 800333c:	20000068 	.word	0x20000068

08003340 <memset>:
 8003340:	4603      	mov	r3, r0
 8003342:	4402      	add	r2, r0
 8003344:	4293      	cmp	r3, r2
 8003346:	d100      	bne.n	800334a <memset+0xa>
 8003348:	4770      	bx	lr
 800334a:	f803 1b01 	strb.w	r1, [r3], #1
 800334e:	e7f9      	b.n	8003344 <memset+0x4>

08003350 <_free_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	4605      	mov	r5, r0
 8003354:	2900      	cmp	r1, #0
 8003356:	d043      	beq.n	80033e0 <_free_r+0x90>
 8003358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800335c:	1f0c      	subs	r4, r1, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	bfb8      	it	lt
 8003362:	18e4      	addlt	r4, r4, r3
 8003364:	f000 f8aa 	bl	80034bc <__malloc_lock>
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <_free_r+0x94>)
 800336a:	6813      	ldr	r3, [r2, #0]
 800336c:	4610      	mov	r0, r2
 800336e:	b933      	cbnz	r3, 800337e <_free_r+0x2e>
 8003370:	6063      	str	r3, [r4, #4]
 8003372:	6014      	str	r4, [r2, #0]
 8003374:	4628      	mov	r0, r5
 8003376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800337a:	f000 b8a5 	b.w	80034c8 <__malloc_unlock>
 800337e:	42a3      	cmp	r3, r4
 8003380:	d90a      	bls.n	8003398 <_free_r+0x48>
 8003382:	6821      	ldr	r1, [r4, #0]
 8003384:	1862      	adds	r2, r4, r1
 8003386:	4293      	cmp	r3, r2
 8003388:	bf01      	itttt	eq
 800338a:	681a      	ldreq	r2, [r3, #0]
 800338c:	685b      	ldreq	r3, [r3, #4]
 800338e:	1852      	addeq	r2, r2, r1
 8003390:	6022      	streq	r2, [r4, #0]
 8003392:	6063      	str	r3, [r4, #4]
 8003394:	6004      	str	r4, [r0, #0]
 8003396:	e7ed      	b.n	8003374 <_free_r+0x24>
 8003398:	461a      	mov	r2, r3
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b10b      	cbz	r3, 80033a2 <_free_r+0x52>
 800339e:	42a3      	cmp	r3, r4
 80033a0:	d9fa      	bls.n	8003398 <_free_r+0x48>
 80033a2:	6811      	ldr	r1, [r2, #0]
 80033a4:	1850      	adds	r0, r2, r1
 80033a6:	42a0      	cmp	r0, r4
 80033a8:	d10b      	bne.n	80033c2 <_free_r+0x72>
 80033aa:	6820      	ldr	r0, [r4, #0]
 80033ac:	4401      	add	r1, r0
 80033ae:	1850      	adds	r0, r2, r1
 80033b0:	4283      	cmp	r3, r0
 80033b2:	6011      	str	r1, [r2, #0]
 80033b4:	d1de      	bne.n	8003374 <_free_r+0x24>
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4401      	add	r1, r0
 80033bc:	6011      	str	r1, [r2, #0]
 80033be:	6053      	str	r3, [r2, #4]
 80033c0:	e7d8      	b.n	8003374 <_free_r+0x24>
 80033c2:	d902      	bls.n	80033ca <_free_r+0x7a>
 80033c4:	230c      	movs	r3, #12
 80033c6:	602b      	str	r3, [r5, #0]
 80033c8:	e7d4      	b.n	8003374 <_free_r+0x24>
 80033ca:	6820      	ldr	r0, [r4, #0]
 80033cc:	1821      	adds	r1, r4, r0
 80033ce:	428b      	cmp	r3, r1
 80033d0:	bf01      	itttt	eq
 80033d2:	6819      	ldreq	r1, [r3, #0]
 80033d4:	685b      	ldreq	r3, [r3, #4]
 80033d6:	1809      	addeq	r1, r1, r0
 80033d8:	6021      	streq	r1, [r4, #0]
 80033da:	6063      	str	r3, [r4, #4]
 80033dc:	6054      	str	r4, [r2, #4]
 80033de:	e7c9      	b.n	8003374 <_free_r+0x24>
 80033e0:	bd38      	pop	{r3, r4, r5, pc}
 80033e2:	bf00      	nop
 80033e4:	20000128 	.word	0x20000128

080033e8 <_malloc_r>:
 80033e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ea:	1ccd      	adds	r5, r1, #3
 80033ec:	f025 0503 	bic.w	r5, r5, #3
 80033f0:	3508      	adds	r5, #8
 80033f2:	2d0c      	cmp	r5, #12
 80033f4:	bf38      	it	cc
 80033f6:	250c      	movcc	r5, #12
 80033f8:	2d00      	cmp	r5, #0
 80033fa:	4606      	mov	r6, r0
 80033fc:	db01      	blt.n	8003402 <_malloc_r+0x1a>
 80033fe:	42a9      	cmp	r1, r5
 8003400:	d903      	bls.n	800340a <_malloc_r+0x22>
 8003402:	230c      	movs	r3, #12
 8003404:	6033      	str	r3, [r6, #0]
 8003406:	2000      	movs	r0, #0
 8003408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800340a:	f000 f857 	bl	80034bc <__malloc_lock>
 800340e:	4921      	ldr	r1, [pc, #132]	; (8003494 <_malloc_r+0xac>)
 8003410:	680a      	ldr	r2, [r1, #0]
 8003412:	4614      	mov	r4, r2
 8003414:	b99c      	cbnz	r4, 800343e <_malloc_r+0x56>
 8003416:	4f20      	ldr	r7, [pc, #128]	; (8003498 <_malloc_r+0xb0>)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	b923      	cbnz	r3, 8003426 <_malloc_r+0x3e>
 800341c:	4621      	mov	r1, r4
 800341e:	4630      	mov	r0, r6
 8003420:	f000 f83c 	bl	800349c <_sbrk_r>
 8003424:	6038      	str	r0, [r7, #0]
 8003426:	4629      	mov	r1, r5
 8003428:	4630      	mov	r0, r6
 800342a:	f000 f837 	bl	800349c <_sbrk_r>
 800342e:	1c43      	adds	r3, r0, #1
 8003430:	d123      	bne.n	800347a <_malloc_r+0x92>
 8003432:	230c      	movs	r3, #12
 8003434:	4630      	mov	r0, r6
 8003436:	6033      	str	r3, [r6, #0]
 8003438:	f000 f846 	bl	80034c8 <__malloc_unlock>
 800343c:	e7e3      	b.n	8003406 <_malloc_r+0x1e>
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	1b5b      	subs	r3, r3, r5
 8003442:	d417      	bmi.n	8003474 <_malloc_r+0x8c>
 8003444:	2b0b      	cmp	r3, #11
 8003446:	d903      	bls.n	8003450 <_malloc_r+0x68>
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	441c      	add	r4, r3
 800344c:	6025      	str	r5, [r4, #0]
 800344e:	e004      	b.n	800345a <_malloc_r+0x72>
 8003450:	6863      	ldr	r3, [r4, #4]
 8003452:	42a2      	cmp	r2, r4
 8003454:	bf0c      	ite	eq
 8003456:	600b      	streq	r3, [r1, #0]
 8003458:	6053      	strne	r3, [r2, #4]
 800345a:	4630      	mov	r0, r6
 800345c:	f000 f834 	bl	80034c8 <__malloc_unlock>
 8003460:	f104 000b 	add.w	r0, r4, #11
 8003464:	1d23      	adds	r3, r4, #4
 8003466:	f020 0007 	bic.w	r0, r0, #7
 800346a:	1ac2      	subs	r2, r0, r3
 800346c:	d0cc      	beq.n	8003408 <_malloc_r+0x20>
 800346e:	1a1b      	subs	r3, r3, r0
 8003470:	50a3      	str	r3, [r4, r2]
 8003472:	e7c9      	b.n	8003408 <_malloc_r+0x20>
 8003474:	4622      	mov	r2, r4
 8003476:	6864      	ldr	r4, [r4, #4]
 8003478:	e7cc      	b.n	8003414 <_malloc_r+0x2c>
 800347a:	1cc4      	adds	r4, r0, #3
 800347c:	f024 0403 	bic.w	r4, r4, #3
 8003480:	42a0      	cmp	r0, r4
 8003482:	d0e3      	beq.n	800344c <_malloc_r+0x64>
 8003484:	1a21      	subs	r1, r4, r0
 8003486:	4630      	mov	r0, r6
 8003488:	f000 f808 	bl	800349c <_sbrk_r>
 800348c:	3001      	adds	r0, #1
 800348e:	d1dd      	bne.n	800344c <_malloc_r+0x64>
 8003490:	e7cf      	b.n	8003432 <_malloc_r+0x4a>
 8003492:	bf00      	nop
 8003494:	20000128 	.word	0x20000128
 8003498:	2000012c 	.word	0x2000012c

0800349c <_sbrk_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	2300      	movs	r3, #0
 80034a0:	4d05      	ldr	r5, [pc, #20]	; (80034b8 <_sbrk_r+0x1c>)
 80034a2:	4604      	mov	r4, r0
 80034a4:	4608      	mov	r0, r1
 80034a6:	602b      	str	r3, [r5, #0]
 80034a8:	f7fd f94c 	bl	8000744 <_sbrk>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d102      	bne.n	80034b6 <_sbrk_r+0x1a>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	b103      	cbz	r3, 80034b6 <_sbrk_r+0x1a>
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	20000210 	.word	0x20000210

080034bc <__malloc_lock>:
 80034bc:	4801      	ldr	r0, [pc, #4]	; (80034c4 <__malloc_lock+0x8>)
 80034be:	f000 b809 	b.w	80034d4 <__retarget_lock_acquire_recursive>
 80034c2:	bf00      	nop
 80034c4:	20000218 	.word	0x20000218

080034c8 <__malloc_unlock>:
 80034c8:	4801      	ldr	r0, [pc, #4]	; (80034d0 <__malloc_unlock+0x8>)
 80034ca:	f000 b804 	b.w	80034d6 <__retarget_lock_release_recursive>
 80034ce:	bf00      	nop
 80034d0:	20000218 	.word	0x20000218

080034d4 <__retarget_lock_acquire_recursive>:
 80034d4:	4770      	bx	lr

080034d6 <__retarget_lock_release_recursive>:
 80034d6:	4770      	bx	lr

080034d8 <_init>:
 80034d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034da:	bf00      	nop
 80034dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034de:	bc08      	pop	{r3}
 80034e0:	469e      	mov	lr, r3
 80034e2:	4770      	bx	lr

080034e4 <_fini>:
 80034e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e6:	bf00      	nop
 80034e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ea:	bc08      	pop	{r3}
 80034ec:	469e      	mov	lr, r3
 80034ee:	4770      	bx	lr
