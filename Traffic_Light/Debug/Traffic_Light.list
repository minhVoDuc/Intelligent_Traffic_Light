
Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004268  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004418  08004418  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004418  08004418  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004418  08004418  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800441c  0800441c  0001441c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200000cc  080044ec  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080044ec  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001518b  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcf  00000000  00000000  00035280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00038050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00038e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e4b  00000000  00000000  00039a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a83  00000000  00000000  000538d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b44f  00000000  00000000  00064356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef7a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a68  00000000  00000000  000ef7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800435c 	.word	0x0800435c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	0800435c 	.word	0x0800435c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 fc78 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f816 	bl	8000184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f926 	bl	80003a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f8fa 	bl	8000354 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000160:	f000 f852 	bl	8000208 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 f89c 	bl	80002a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x34>)
 800016a:	f002 fc1b 	bl	80029a4 <HAL_TIM_Base_Start_IT>
  timer_init();
 800016e:	f001 fb63 	bl	8001838 <timer_init>
  traffic_init();
 8000172:	f000 fc2b 	bl	80009cc <traffic_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  traffic_fsm();
 8000176:	f000 febd 	bl	8000ef4 <traffic_fsm>
	  pedestrian_fsm();
 800017a:	f000 fbd3 	bl	8000924 <pedestrian_fsm>
	  traffic_fsm();
 800017e:	e7fa      	b.n	8000176 <main+0x2a>
 8000180:	20000154 	.word	0x20000154

08000184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b090      	sub	sp, #64	; 0x40
 8000188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	f107 0318 	add.w	r3, r7, #24
 800018e:	2228      	movs	r2, #40	; 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f003 fca0 	bl	8003ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]
 80001a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a6:	2302      	movs	r3, #2
 80001a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001aa:	2301      	movs	r3, #1
 80001ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ae:	2310      	movs	r3, #16
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b2:	2302      	movs	r3, #2
 80001b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b6:	2300      	movs	r3, #0
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0318 	add.w	r3, r7, #24
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 ff83 	bl	80020d0 <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001d0:	f000 f998 	bl	8000504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d8:	2302      	movs	r3, #2
 80001da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2102      	movs	r1, #2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 f9ee 	bl	80025d0 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001fa:	f000 f983 	bl	8000504 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	; 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800020e:	f107 0308 	add.w	r3, r7, #8
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <MX_TIM2_Init+0x94>)
 8000226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800022a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800022c:	4b1b      	ldr	r3, [pc, #108]	; (800029c <MX_TIM2_Init+0x94>)
 800022e:	223f      	movs	r2, #63	; 0x3f
 8000230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <MX_TIM2_Init+0x94>)
 8000234:	2200      	movs	r2, #0
 8000236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_TIM2_Init+0x94>)
 800023a:	f242 720f 	movw	r2, #9999	; 0x270f
 800023e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <MX_TIM2_Init+0x94>)
 8000242:	2200      	movs	r2, #0
 8000244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <MX_TIM2_Init+0x94>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800024c:	4813      	ldr	r0, [pc, #76]	; (800029c <MX_TIM2_Init+0x94>)
 800024e:	f002 fb59 	bl	8002904 <HAL_TIM_Base_Init>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000258:	f000 f954 	bl	8000504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800025c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000262:	f107 0308 	add.w	r3, r7, #8
 8000266:	4619      	mov	r1, r3
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <MX_TIM2_Init+0x94>)
 800026a:	f002 fe03 	bl	8002e74 <HAL_TIM_ConfigClockSource>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000274:	f000 f946 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000278:	2300      	movs	r3, #0
 800027a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_TIM2_Init+0x94>)
 8000286:	f003 f95d 	bl	8003544 <HAL_TIMEx_MasterConfigSynchronization>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000290:	f000 f938 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	3718      	adds	r7, #24
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000154 	.word	0x20000154

080002a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a6:	f107 0320 	add.w	r3, r7, #32
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]
 80002be:	615a      	str	r2, [r3, #20]
 80002c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002c2:	4b22      	ldr	r3, [pc, #136]	; (800034c <MX_TIM3_Init+0xac>)
 80002c4:	4a22      	ldr	r2, [pc, #136]	; (8000350 <MX_TIM3_Init+0xb0>)
 80002c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80002c8:	4b20      	ldr	r3, [pc, #128]	; (800034c <MX_TIM3_Init+0xac>)
 80002ca:	223f      	movs	r2, #63	; 0x3f
 80002cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <MX_TIM3_Init+0xac>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80002d4:	4b1d      	ldr	r3, [pc, #116]	; (800034c <MX_TIM3_Init+0xac>)
 80002d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_TIM3_Init+0xac>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	; (800034c <MX_TIM3_Init+0xac>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80002e8:	4818      	ldr	r0, [pc, #96]	; (800034c <MX_TIM3_Init+0xac>)
 80002ea:	f002 fbad 	bl	8002a48 <HAL_TIM_PWM_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80002f4:	f000 f906 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f8:	2300      	movs	r3, #0
 80002fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000300:	f107 0320 	add.w	r3, r7, #32
 8000304:	4619      	mov	r1, r3
 8000306:	4811      	ldr	r0, [pc, #68]	; (800034c <MX_TIM3_Init+0xac>)
 8000308:	f003 f91c 	bl	8003544 <HAL_TIMEx_MasterConfigSynchronization>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000312:	f000 f8f7 	bl	8000504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000316:	2360      	movs	r3, #96	; 0x60
 8000318:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	4619      	mov	r1, r3
 800032c:	4807      	ldr	r0, [pc, #28]	; (800034c <MX_TIM3_Init+0xac>)
 800032e:	f002 fce3 	bl	8002cf8 <HAL_TIM_PWM_ConfigChannel>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000338:	f000 f8e4 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800033c:	4803      	ldr	r0, [pc, #12]	; (800034c <MX_TIM3_Init+0xac>)
 800033e:	f000 f95b 	bl	80005f8 <HAL_TIM_MspPostInit>

}
 8000342:	bf00      	nop
 8000344:	3728      	adds	r7, #40	; 0x28
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200001c8 	.word	0x200001c8
 8000350:	40000400 	.word	0x40000400

08000354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800035a:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <MX_USART2_UART_Init+0x50>)
 800035c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800037a:	220c      	movs	r2, #12
 800037c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800038c:	f003 f94a 	bl	8003624 <HAL_UART_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000396:	f000 f8b5 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000218 	.word	0x20000218
 80003a4:	40004400 	.word	0x40004400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003bc:	4b45      	ldr	r3, [pc, #276]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a44      	ldr	r2, [pc, #272]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b42      	ldr	r3, [pc, #264]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d4:	4b3f      	ldr	r3, [pc, #252]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a3e      	ldr	r2, [pc, #248]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b3c      	ldr	r3, [pc, #240]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b39      	ldr	r3, [pc, #228]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a38      	ldr	r2, [pc, #224]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000404:	4b33      	ldr	r3, [pc, #204]	; (80004d4 <MX_GPIO_Init+0x12c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a32      	ldr	r2, [pc, #200]	; (80004d4 <MX_GPIO_Init+0x12c>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b30      	ldr	r3, [pc, #192]	; (80004d4 <MX_GPIO_Init+0x12c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0308 	and.w	r3, r3, #8
 8000418:	603b      	str	r3, [r7, #0]
 800041a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000422:	482d      	ldr	r0, [pc, #180]	; (80004d8 <MX_GPIO_Init+0x130>)
 8000424:	f001 fe19 	bl	800205a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800042e:	482b      	ldr	r0, [pc, #172]	; (80004dc <MX_GPIO_Init+0x134>)
 8000430:	f001 fe13 	bl	800205a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_GPIO_Init+0x138>)
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	4619      	mov	r1, r3
 8000448:	4826      	ldr	r0, [pc, #152]	; (80004e4 <MX_GPIO_Init+0x13c>)
 800044a:	f001 fc6b 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_BTN_Pin BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = PD_BTN_Pin|BTN_1_Pin|BTN_2_Pin;
 800044e:	2313      	movs	r3, #19
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000456:	2301      	movs	r3, #1
 8000458:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	481d      	ldr	r0, [pc, #116]	; (80004d8 <MX_GPIO_Init+0x130>)
 8000462:	f001 fc5f 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PD_LED_1_Pin TR_LED_A_0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin;
 8000466:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800046a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	2302      	movs	r3, #2
 8000476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4816      	ldr	r0, [pc, #88]	; (80004d8 <MX_GPIO_Init+0x130>)
 8000480:	f001 fc50 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin;
 8000484:	2301      	movs	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048c:	2301      	movs	r3, #1
 800048e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_3_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4811      	ldr	r0, [pc, #68]	; (80004dc <MX_GPIO_Init+0x134>)
 8000498:	f001 fc44 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_LED_0_Pin TR_LED_A_1_Pin TR_LED_B_1_Pin TR_LED_B_0_Pin */
  GPIO_InitStruct.Pin = PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin;
 800049c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4619      	mov	r1, r3
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <MX_GPIO_Init+0x134>)
 80004b6:	f001 fc35 	bl	8001d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	2028      	movs	r0, #40	; 0x28
 80004c0:	f001 fbf9 	bl	8001cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004c4:	2028      	movs	r0, #40	; 0x28
 80004c6:	f001 fc12 	bl	8001cee <HAL_NVIC_EnableIRQ>

}
 80004ca:	bf00      	nop
 80004cc:	3720      	adds	r7, #32
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010800 	.word	0x40010800
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	10110000 	.word	0x10110000
 80004e4:	40011000 	.word	0x40011000

080004e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	timer_run();
 80004f0:	f001 f9b0 	bl	8001854 <timer_run>
	button_reading();
 80004f4:	f000 fe12 	bl	800111c <button_reading>
	duration_run();
 80004f8:	f000 ffa8 	bl	800144c <duration_run>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_MspInit+0x5c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x5c>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_MspInit+0x60>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_MspInit+0x60>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	40010000 	.word	0x40010000

08000574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000584:	d113      	bne.n	80005ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	201c      	movs	r0, #28
 80005a4:	f001 fb87 	bl	8001cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005a8:	201c      	movs	r0, #28
 80005aa:	f001 fba0 	bl	8001cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <HAL_TIM_PWM_MspInit+0x34>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d10b      	bne.n	80005e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_TIM_PWM_MspInit+0x38>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <HAL_TIM_PWM_MspInit+0x38>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_TIM_PWM_MspInit+0x38>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40000400 	.word	0x40000400
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <HAL_TIM_MspPostInit+0x58>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d117      	bne.n	8000648 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_TIM_MspPostInit+0x5c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <HAL_TIM_MspPostInit+0x5c>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_TIM_MspPostInit+0x5c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PD_BUZZER_Pin;
 8000630:	2340      	movs	r3, #64	; 0x40
 8000632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PD_BUZZER_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_TIM_MspPostInit+0x60>)
 8000644:	f001 fb6e 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40000400 	.word	0x40000400
 8000654:	40021000 	.word	0x40021000
 8000658:	40010800 	.word	0x40010800

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <HAL_UART_MspInit+0x70>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d123      	bne.n	80006c4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_UART_MspInit+0x74>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <HAL_UART_MspInit+0x74>)
 8000682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000686:	61d3      	str	r3, [r2, #28]
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_UART_MspInit+0x74>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_UART_MspInit+0x74>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <HAL_UART_MspInit+0x74>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <HAL_UART_MspInit+0x74>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80006ac:	230c      	movs	r3, #12
 80006ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <HAL_UART_MspInit+0x78>)
 80006c0:	f001 fb30 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40004400 	.word	0x40004400
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071e:	f001 f9d7 	bl	8001ad0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <TIM2_IRQHandler+0x10>)
 800072e:	f002 f9da 	bl	8002ae6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000154 	.word	0x20000154

0800073c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000740:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000744:	f001 fca2 	bl	800208c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <_sbrk+0x5c>)
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <_sbrk+0x60>)
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <_sbrk+0x64>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <_sbrk+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	429a      	cmp	r2, r3
 800077a:	d207      	bcs.n	800078c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800077c:	f003 f972 	bl	8003a64 <__errno>
 8000780:	4603      	mov	r3, r0
 8000782:	220c      	movs	r2, #12
 8000784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	e009      	b.n	80007a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <_sbrk+0x64>)
 800079c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20005000 	.word	0x20005000
 80007ac:	00000400 	.word	0x00000400
 80007b0:	200000e8 	.word	0x200000e8
 80007b4:	20000270 	.word	0x20000270

080007b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <pedestrian_send_duration>:
void pedestrian_init() {
	pd_state = PD_INIT;
	pd_active_state = PD_A_INIT;
}

void pedestrian_send_duration() { //send duration to uart
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	pedestrian_currDur = duration_get(DUR_PEDESTRIAN);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 fe09 	bl	80013e0 <duration_get>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007d2:	6013      	str	r3, [r2, #0]
	if (pedestrian_currDur != pedestrian_prevDur) {
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <pedestrian_send_duration+0x38>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d005      	beq.n	80007ec <pedestrian_send_duration+0x28>
		uart_send_num("Pedestrian duration: ", pedestrian_currDur);
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <pedestrian_send_duration+0x3c>)
 80007e8:	f001 f8e2 	bl	80019b0 <uart_send_num>
	}
	pedestrian_prevDur = pedestrian_currDur;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a02      	ldr	r2, [pc, #8]	; (80007fc <pedestrian_send_duration+0x38>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000f4 	.word	0x200000f4
 80007fc:	200000f0 	.word	0x200000f0
 8000800:	08004374 	.word	0x08004374

08000804 <pedestrian_active_fsm>:

void pedestrian_active_fsm() {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	pd_duration = global_get_totalDuration(); //get total duration
 8000808:	f000 fc78 	bl	80010fc <global_get_totalDuration>
 800080c:	4603      	mov	r3, r0
 800080e:	4a40      	ldr	r2, [pc, #256]	; (8000910 <pedestrian_active_fsm+0x10c>)
 8000810:	6013      	str	r3, [r2, #0]
	if (timer_checkFlag(TIMER_BLINK)) { //check timer for blink led
 8000812:	2005      	movs	r0, #5
 8000814:	f001 f868 	bl	80018e8 <timer_checkFlag>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d015      	beq.n	800084a <pedestrian_active_fsm+0x46>
		timer_setDuration(TIMER_BLINK, PD_DUR_BLINK);
 800081e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000822:	2005      	movs	r0, #5
 8000824:	f001 f846 	bl	80018b4 <timer_setDuration>
		if (pd_led_state == PD_LED_OFF) {
 8000828:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <pedestrian_active_fsm+0x110>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b48      	cmp	r3, #72	; 0x48
 800082e:	d106      	bne.n	800083e <pedestrian_active_fsm+0x3a>
			pd_led_state = PD_LED_ON;
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <pedestrian_active_fsm+0x110>)
 8000832:	2247      	movs	r2, #71	; 0x47
 8000834:	701a      	strb	r2, [r3, #0]
			buzzer_state = BZ_ON;
 8000836:	4b38      	ldr	r3, [pc, #224]	; (8000918 <pedestrian_active_fsm+0x114>)
 8000838:	2251      	movs	r2, #81	; 0x51
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	e005      	b.n	800084a <pedestrian_active_fsm+0x46>
		}
		else {
			pd_led_state = PD_LED_OFF;
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <pedestrian_active_fsm+0x110>)
 8000840:	2248      	movs	r2, #72	; 0x48
 8000842:	701a      	strb	r2, [r3, #0]
			buzzer_state = BZ_OFF;
 8000844:	4b34      	ldr	r3, [pc, #208]	; (8000918 <pedestrian_active_fsm+0x114>)
 8000846:	2252      	movs	r2, #82	; 0x52
 8000848:	701a      	strb	r2, [r3, #0]
		}
	}

	switch (pd_active_state) {
 800084a:	4b34      	ldr	r3, [pc, #208]	; (800091c <pedestrian_active_fsm+0x118>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b3e      	cmp	r3, #62	; 0x3e
 8000850:	d030      	beq.n	80008b4 <pedestrian_active_fsm+0xb0>
 8000852:	2b3e      	cmp	r3, #62	; 0x3e
 8000854:	dc54      	bgt.n	8000900 <pedestrian_active_fsm+0xfc>
 8000856:	2b3c      	cmp	r3, #60	; 0x3c
 8000858:	d002      	beq.n	8000860 <pedestrian_active_fsm+0x5c>
 800085a:	2b3d      	cmp	r3, #61	; 0x3d
 800085c:	d004      	beq.n	8000868 <pedestrian_active_fsm+0x64>
		//change mode
		break;

	///////////////////////////////////////////
	default:
		break;
 800085e:	e04f      	b.n	8000900 <pedestrian_active_fsm+0xfc>
		pd_active_state = PD_A_RED;
 8000860:	4b2e      	ldr	r3, [pc, #184]	; (800091c <pedestrian_active_fsm+0x118>)
 8000862:	223d      	movs	r2, #61	; 0x3d
 8000864:	701a      	strb	r2, [r3, #0]
		break;
 8000866:	e050      	b.n	800090a <pedestrian_active_fsm+0x106>
		pedestrian_send_duration();
 8000868:	f7ff ffac 	bl	80007c4 <pedestrian_send_duration>
		if (pedestrian_currDur > 3) led_turn_on(PEDESTRIAN, LED_RED); //turn led red on when duration over 3 second
 800086c:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <pedestrian_active_fsm+0x11c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d904      	bls.n	800087e <pedestrian_active_fsm+0x7a>
 8000874:	2100      	movs	r1, #0
 8000876:	2007      	movs	r0, #7
 8000878:	f000 fe1a 	bl	80014b0 <led_turn_on>
 800087c:	e004      	b.n	8000888 <pedestrian_active_fsm+0x84>
			led_pedestrian_blinky(LED_RED); //otherwise, blink led red
 800087e:	2000      	movs	r0, #0
 8000880:	f000 ff02 	bl	8001688 <led_pedestrian_blinky>
			buzzer_blinky();
 8000884:	f000 fd84 	bl	8001390 <buzzer_blinky>
		if (button_isPressed(BTN_PD)) { //reset duration for pedestrian led
 8000888:	2003      	movs	r0, #3
 800088a:	f000 fd35 	bl	80012f8 <button_isPressed>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d037      	beq.n	8000904 <pedestrian_active_fsm+0x100>
			timer_clear(TIMER_PD);
 8000894:	2003      	movs	r0, #3
 8000896:	f001 f83f 	bl	8001918 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <pedestrian_active_fsm+0x10c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4619      	mov	r1, r3
 80008a0:	2003      	movs	r0, #3
 80008a2:	f001 f807 	bl	80018b4 <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <pedestrian_active_fsm+0x10c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	f000 fd7f 	bl	80013b0 <duration_set>
		break;
 80008b2:	e027      	b.n	8000904 <pedestrian_active_fsm+0x100>
		pedestrian_send_duration();
 80008b4:	f7ff ff86 	bl	80007c4 <pedestrian_send_duration>
		if (pedestrian_currDur > 3) led_turn_on(PEDESTRIAN, LED_GREEN); //turn led green on when duration over 3 second
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <pedestrian_active_fsm+0x11c>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d904      	bls.n	80008ca <pedestrian_active_fsm+0xc6>
 80008c0:	2101      	movs	r1, #1
 80008c2:	2007      	movs	r0, #7
 80008c4:	f000 fdf4 	bl	80014b0 <led_turn_on>
 80008c8:	e004      	b.n	80008d4 <pedestrian_active_fsm+0xd0>
			led_pedestrian_blinky(LED_GREEN); //otherwise, blink led green
 80008ca:	2001      	movs	r0, #1
 80008cc:	f000 fedc 	bl	8001688 <led_pedestrian_blinky>
			buzzer_blinky();
 80008d0:	f000 fd5e 	bl	8001390 <buzzer_blinky>
		if (button_isPressed(BTN_PD)) { //reset duration for pedestrian led
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 fd0f 	bl	80012f8 <button_isPressed>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d013      	beq.n	8000908 <pedestrian_active_fsm+0x104>
			timer_clear(TIMER_PD);
 80008e0:	2003      	movs	r0, #3
 80008e2:	f001 f819 	bl	8001918 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <pedestrian_active_fsm+0x10c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4619      	mov	r1, r3
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 ffe1 	bl	80018b4 <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 80008f2:	4b07      	ldr	r3, [pc, #28]	; (8000910 <pedestrian_active_fsm+0x10c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4619      	mov	r1, r3
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 fd59 	bl	80013b0 <duration_set>
		break;
 80008fe:	e003      	b.n	8000908 <pedestrian_active_fsm+0x104>
		break;
 8000900:	bf00      	nop
 8000902:	e002      	b.n	800090a <pedestrian_active_fsm+0x106>
		break;
 8000904:	bf00      	nop
 8000906:	e000      	b.n	800090a <pedestrian_active_fsm+0x106>
		break;
 8000908:	bf00      	nop
	}
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000ec 	.word	0x200000ec
 8000914:	20000106 	.word	0x20000106
 8000918:	20000107 	.word	0x20000107
 800091c:	20000105 	.word	0x20000105
 8000920:	200000f4 	.word	0x200000f4

08000924 <pedestrian_fsm>:

void pedestrian_fsm() {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	//check state of pd_state
	switch (pd_state) {
 8000928:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <pedestrian_fsm+0xa0>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b34      	cmp	r3, #52	; 0x34
 800092e:	d036      	beq.n	800099e <pedestrian_fsm+0x7a>
 8000930:	2b34      	cmp	r3, #52	; 0x34
 8000932:	dc40      	bgt.n	80009b6 <pedestrian_fsm+0x92>
 8000934:	2b32      	cmp	r3, #50	; 0x32
 8000936:	d002      	beq.n	800093e <pedestrian_fsm+0x1a>
 8000938:	2b33      	cmp	r3, #51	; 0x33
 800093a:	d007      	beq.n	800094c <pedestrian_fsm+0x28>
		break;

	//////////////////////////////////////////////////////

	default:
		break;
 800093c:	e03b      	b.n	80009b6 <pedestrian_fsm+0x92>
		led_turn_off(PEDESTRIAN);
 800093e:	2007      	movs	r0, #7
 8000940:	f000 fe66 	bl	8001610 <led_turn_off>
		pd_state = PD_IDLE;
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <pedestrian_fsm+0xa0>)
 8000946:	2233      	movs	r2, #51	; 0x33
 8000948:	701a      	strb	r2, [r3, #0]
		break;
 800094a:	e039      	b.n	80009c0 <pedestrian_fsm+0x9c>
		led_turn_off(PEDESTRIAN);
 800094c:	2007      	movs	r0, #7
 800094e:	f000 fe5f 	bl	8001610 <led_turn_off>
		if (button_isPressed(BTN_PD)) {
 8000952:	2003      	movs	r0, #3
 8000954:	f000 fcd0 	bl	80012f8 <button_isPressed>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d02d      	beq.n	80009ba <pedestrian_fsm+0x96>
			pd_state = PD_ACTIVE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <pedestrian_fsm+0xa0>)
 8000960:	2234      	movs	r2, #52	; 0x34
 8000962:	701a      	strb	r2, [r3, #0]
			pd_duration = global_get_totalDuration(); //get total duration for a cycle of traffic
 8000964:	f000 fbca 	bl	80010fc <global_get_totalDuration>
 8000968:	4603      	mov	r3, r0
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <pedestrian_fsm+0xa4>)
 800096c:	6013      	str	r3, [r2, #0]
			timer_clear(TIMER_PD); //clear timer for pedestrian (if yes)
 800096e:	2003      	movs	r0, #3
 8000970:	f000 ffd2 	bl	8001918 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration); //set new timer for pedestrian
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <pedestrian_fsm+0xa4>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4619      	mov	r1, r3
 800097a:	2003      	movs	r0, #3
 800097c:	f000 ff9a 	bl	80018b4 <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);//set duration for counter
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <pedestrian_fsm+0xa4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	2001      	movs	r0, #1
 8000988:	f000 fd12 	bl	80013b0 <duration_set>
			timer_clear(TIMER_BLINK);
 800098c:	2005      	movs	r0, #5
 800098e:	f000 ffc3 	bl	8001918 <timer_clear>
			timer_setDuration(TIMER_BLINK, PD_DUR_BLINK); //set timer for blinking led for the last 3 second
 8000992:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000996:	2005      	movs	r0, #5
 8000998:	f000 ff8c 	bl	80018b4 <timer_setDuration>
		break;
 800099c:	e00d      	b.n	80009ba <pedestrian_fsm+0x96>
		pedestrian_active_fsm();
 800099e:	f7ff ff31 	bl	8000804 <pedestrian_active_fsm>
		if (timer_checkFlag(TIMER_PD)) {
 80009a2:	2003      	movs	r0, #3
 80009a4:	f000 ffa0 	bl	80018e8 <timer_checkFlag>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <pedestrian_fsm+0x9a>
			pd_state = PD_IDLE;
 80009ae:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <pedestrian_fsm+0xa0>)
 80009b0:	2233      	movs	r2, #51	; 0x33
 80009b2:	701a      	strb	r2, [r3, #0]
		break;
 80009b4:	e003      	b.n	80009be <pedestrian_fsm+0x9a>
		break;
 80009b6:	bf00      	nop
 80009b8:	e002      	b.n	80009c0 <pedestrian_fsm+0x9c>
		break;
 80009ba:	bf00      	nop
 80009bc:	e000      	b.n	80009c0 <pedestrian_fsm+0x9c>
		break;
 80009be:	bf00      	nop
	}
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	200001c4 	.word	0x200001c4
 80009c8:	200000ec 	.word	0x200000ec

080009cc <traffic_init>:
/*-------------------- init setting --------------------*/
//uint32_t	trafficDuration[3] = {5000, 3000, 2000};
uint32_t traffic_prevDur = 0,
         traffic_currDur = 0; //previous and current duration of traffic

void traffic_init() {
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	global_state = INIT_MODE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <traffic_init+0x2c>)
 80009d2:	220a      	movs	r2, #10
 80009d4:	701a      	strb	r2, [r3, #0]
	auto_A_state = AUTO_INIT;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <traffic_init+0x30>)
 80009d8:	2214      	movs	r2, #20
 80009da:	701a      	strb	r2, [r3, #0]
	auto_B_state = AUTO_INIT;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <traffic_init+0x34>)
 80009de:	2214      	movs	r2, #20
 80009e0:	701a      	strb	r2, [r3, #0]
	manual_state = MN_INIT;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <traffic_init+0x38>)
 80009e4:	221e      	movs	r2, #30
 80009e6:	701a      	strb	r2, [r3, #0]
	set_state = SET_INIT;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <traffic_init+0x3c>)
 80009ea:	2228      	movs	r2, #40	; 0x28
 80009ec:	701a      	strb	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000100 	.word	0x20000100
 80009fc:	20000101 	.word	0x20000101
 8000a00:	20000102 	.word	0x20000102
 8000a04:	20000103 	.word	0x20000103
 8000a08:	20000104 	.word	0x20000104

08000a0c <traffic_send_duration>:

/*------------------- auto fsm -------------------------*/
void traffic_send_duration() {  //send duration to uart
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	traffic_currDur = duration_get(DUR_TRAFFIC);
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 fce5 	bl	80013e0 <duration_get>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <traffic_send_duration+0x3c>)
 8000a1a:	6013      	str	r3, [r2, #0]
	if (traffic_currDur && traffic_currDur != traffic_prevDur) {
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <traffic_send_duration+0x3c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d00b      	beq.n	8000a3c <traffic_send_duration+0x30>
 8000a24:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <traffic_send_duration+0x3c>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <traffic_send_duration+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d005      	beq.n	8000a3c <traffic_send_duration+0x30>
		uart_send_num("Traffic duration: ", traffic_currDur);
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <traffic_send_duration+0x3c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <traffic_send_duration+0x44>)
 8000a38:	f000 ffba 	bl	80019b0 <uart_send_num>
	}
	traffic_prevDur = traffic_currDur;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <traffic_send_duration+0x3c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a02      	ldr	r2, [pc, #8]	; (8000a4c <traffic_send_duration+0x40>)
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200000fc 	.word	0x200000fc
 8000a4c:	200000f8 	.word	0x200000f8
 8000a50:	0800438c 	.word	0x0800438c

08000a54 <traffic_auto_fsm_A>:

void traffic_auto_fsm_A() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(auto_A_state) {
 8000a58:	4b41      	ldr	r3, [pc, #260]	; (8000b60 <traffic_auto_fsm_A+0x10c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3b14      	subs	r3, #20
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d874      	bhi.n	8000b4c <traffic_auto_fsm_A+0xf8>
 8000a62:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <traffic_auto_fsm_A+0x14>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000a79 	.word	0x08000a79
 8000a6c:	08000a99 	.word	0x08000a99
 8000a70:	08000ad7 	.word	0x08000ad7
 8000a74:	08000b0f 	.word	0x08000b0f
	case AUTO_INIT:
		//change mode
		auto_A_state = AUTO_RED;
 8000a78:	4b39      	ldr	r3, [pc, #228]	; (8000b60 <traffic_auto_fsm_A+0x10c>)
 8000a7a:	2215      	movs	r2, #21
 8000a7c:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000a7e:	4b39      	ldr	r3, [pc, #228]	; (8000b64 <traffic_auto_fsm_A+0x110>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	2000      	movs	r0, #0
 8000a86:	f000 ff15 	bl	80018b4 <timer_setDuration>
		duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000a8a:	4b36      	ldr	r3, [pc, #216]	; (8000b64 <traffic_auto_fsm_A+0x110>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 fc8d 	bl	80013b0 <duration_set>
		break;
 8000a96:	e060      	b.n	8000b5a <traffic_auto_fsm_A+0x106>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2005      	movs	r0, #5
 8000a9c:	f000 fd08 	bl	80014b0 <led_turn_on>
		traffic_send_duration();
 8000aa0:	f7ff ffb4 	bl	8000a0c <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 ff1f 	bl	80018e8 <timer_checkFlag>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d04f      	beq.n	8000b50 <traffic_auto_fsm_A+0xfc>
			auto_A_state = AUTO_GREEN;
 8000ab0:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <traffic_auto_fsm_A+0x10c>)
 8000ab2:	2216      	movs	r2, #22
 8000ab4:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	; (8000b68 <traffic_auto_fsm_A+0x114>)
 8000ab8:	223d      	movs	r2, #61	; 0x3d
 8000aba:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000abc:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <traffic_auto_fsm_A+0x110>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 fef6 	bl	80018b4 <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 8000ac8:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <traffic_auto_fsm_A+0x110>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	4619      	mov	r1, r3
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 fc6e 	bl	80013b0 <duration_set>
		}
		break;
 8000ad4:	e03c      	b.n	8000b50 <traffic_auto_fsm_A+0xfc>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	2005      	movs	r0, #5
 8000ada:	f000 fce9 	bl	80014b0 <led_turn_on>
		traffic_send_duration();
 8000ade:	f7ff ff95 	bl	8000a0c <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 ff00 	bl	80018e8 <timer_checkFlag>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d032      	beq.n	8000b54 <traffic_auto_fsm_A+0x100>
			auto_A_state = AUTO_YELLOW;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <traffic_auto_fsm_A+0x10c>)
 8000af0:	2217      	movs	r2, #23
 8000af2:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <traffic_auto_fsm_A+0x110>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	4619      	mov	r1, r3
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 feda 	bl	80018b4 <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <traffic_auto_fsm_A+0x110>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	4619      	mov	r1, r3
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 fc52 	bl	80013b0 <duration_set>
		}
		break;
 8000b0c:	e022      	b.n	8000b54 <traffic_auto_fsm_A+0x100>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000b0e:	2102      	movs	r1, #2
 8000b10:	2005      	movs	r0, #5
 8000b12:	f000 fccd 	bl	80014b0 <led_turn_on>
		traffic_send_duration();
 8000b16:	f7ff ff79 	bl	8000a0c <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 fee4 	bl	80018e8 <timer_checkFlag>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d018      	beq.n	8000b58 <traffic_auto_fsm_A+0x104>
			auto_A_state = AUTO_RED;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <traffic_auto_fsm_A+0x10c>)
 8000b28:	2215      	movs	r2, #21
 8000b2a:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <traffic_auto_fsm_A+0x114>)
 8000b2e:	223e      	movs	r2, #62	; 0x3e
 8000b30:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <traffic_auto_fsm_A+0x110>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 febb 	bl	80018b4 <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <traffic_auto_fsm_A+0x110>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4619      	mov	r1, r3
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 fc33 	bl	80013b0 <duration_set>
		}
		break;
 8000b4a:	e005      	b.n	8000b58 <traffic_auto_fsm_A+0x104>

	/////////////////////////////////////////////////////
	default:
		break;
 8000b4c:	bf00      	nop
 8000b4e:	e004      	b.n	8000b5a <traffic_auto_fsm_A+0x106>
		break;
 8000b50:	bf00      	nop
 8000b52:	e002      	b.n	8000b5a <traffic_auto_fsm_A+0x106>
		break;
 8000b54:	bf00      	nop
 8000b56:	e000      	b.n	8000b5a <traffic_auto_fsm_A+0x106>
		break;
 8000b58:	bf00      	nop
	}
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000101 	.word	0x20000101
 8000b64:	20000004 	.word	0x20000004
 8000b68:	20000105 	.word	0x20000105

08000b6c <traffic_auto_fsm_B>:

void traffic_auto_fsm_B() {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	switch(auto_B_state) {
 8000b70:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <traffic_auto_fsm_B+0xc4>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	3b14      	subs	r3, #20
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d850      	bhi.n	8000c1c <traffic_auto_fsm_B+0xb0>
 8000b7a:	a201      	add	r2, pc, #4	; (adr r2, 8000b80 <traffic_auto_fsm_B+0x14>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000b91 	.word	0x08000b91
 8000b84:	08000ba5 	.word	0x08000ba5
 8000b88:	08000bcd 	.word	0x08000bcd
 8000b8c:	08000bf5 	.word	0x08000bf5
	case AUTO_INIT:
		//change mode
		auto_B_state = AUTO_GREEN;
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <traffic_auto_fsm_B+0xc4>)
 8000b92:	2216      	movs	r2, #22
 8000b94:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000b96:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <traffic_auto_fsm_B+0xc8>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f000 fe89 	bl	80018b4 <timer_setDuration>
		break;
 8000ba2:	e042      	b.n	8000c2a <traffic_auto_fsm_B+0xbe>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_2, LED_RED);
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2006      	movs	r0, #6
 8000ba8:	f000 fc82 	bl	80014b0 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000bac:	2001      	movs	r0, #1
 8000bae:	f000 fe9b 	bl	80018e8 <timer_checkFlag>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d033      	beq.n	8000c20 <traffic_auto_fsm_B+0xb4>
			auto_B_state = AUTO_GREEN;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <traffic_auto_fsm_B+0xc4>)
 8000bba:	2216      	movs	r2, #22
 8000bbc:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <traffic_auto_fsm_B+0xc8>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f000 fe75 	bl	80018b4 <timer_setDuration>
		}
		break;
 8000bca:	e029      	b.n	8000c20 <traffic_auto_fsm_B+0xb4>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000bcc:	2101      	movs	r1, #1
 8000bce:	2006      	movs	r0, #6
 8000bd0:	f000 fc6e 	bl	80014b0 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f000 fe87 	bl	80018e8 <timer_checkFlag>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d021      	beq.n	8000c24 <traffic_auto_fsm_B+0xb8>
			auto_B_state = AUTO_YELLOW;
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <traffic_auto_fsm_B+0xc4>)
 8000be2:	2217      	movs	r2, #23
 8000be4:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <traffic_auto_fsm_B+0xc8>)
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	4619      	mov	r1, r3
 8000bec:	2001      	movs	r0, #1
 8000bee:	f000 fe61 	bl	80018b4 <timer_setDuration>
		}
		break;
 8000bf2:	e017      	b.n	8000c24 <traffic_auto_fsm_B+0xb8>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000bf4:	2102      	movs	r1, #2
 8000bf6:	2006      	movs	r0, #6
 8000bf8:	f000 fc5a 	bl	80014b0 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 fe73 	bl	80018e8 <timer_checkFlag>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00f      	beq.n	8000c28 <traffic_auto_fsm_B+0xbc>
			auto_B_state = AUTO_RED;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <traffic_auto_fsm_B+0xc4>)
 8000c0a:	2215      	movs	r2, #21
 8000c0c:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <traffic_auto_fsm_B+0xc8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4619      	mov	r1, r3
 8000c14:	2001      	movs	r0, #1
 8000c16:	f000 fe4d 	bl	80018b4 <timer_setDuration>
		}
		break;
 8000c1a:	e005      	b.n	8000c28 <traffic_auto_fsm_B+0xbc>

	/////////////////////////////////////////////////////
	default:
		break;
 8000c1c:	bf00      	nop
 8000c1e:	e004      	b.n	8000c2a <traffic_auto_fsm_B+0xbe>
		break;
 8000c20:	bf00      	nop
 8000c22:	e002      	b.n	8000c2a <traffic_auto_fsm_B+0xbe>
		break;
 8000c24:	bf00      	nop
 8000c26:	e000      	b.n	8000c2a <traffic_auto_fsm_B+0xbe>
		break;
 8000c28:	bf00      	nop
	}
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000102 	.word	0x20000102
 8000c34:	20000004 	.word	0x20000004

08000c38 <traffic_manual_fsm>:

/*----------------- manual fsm -------------------------*/
void traffic_manual_fsm() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	switch(manual_state) {
 8000c3c:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <traffic_manual_fsm+0xd4>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	3b1e      	subs	r3, #30
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d856      	bhi.n	8000cf4 <traffic_manual_fsm+0xbc>
 8000c46:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <traffic_manual_fsm+0x14>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000c61 	.word	0x08000c61
 8000c50:	08000c69 	.word	0x08000c69
 8000c54:	08000c8d 	.word	0x08000c8d
 8000c58:	08000caf 	.word	0x08000caf
 8000c5c:	08000cd3 	.word	0x08000cd3
	case MN_INIT:
		//change mode
		manual_state = MN_RED0;
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <traffic_manual_fsm+0xd4>)
 8000c62:	221f      	movs	r2, #31
 8000c64:	701a      	strb	r2, [r3, #0]
		break;
 8000c66:	e04e      	b.n	8000d06 <traffic_manual_fsm+0xce>

	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - green
	case MN_RED0:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2005      	movs	r0, #5
 8000c6c:	f000 fc20 	bl	80014b0 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000c70:	2101      	movs	r1, #1
 8000c72:	2006      	movs	r0, #6
 8000c74:	f000 fc1c 	bl	80014b0 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 fb3d 	bl	80012f8 <button_isPressed>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d039      	beq.n	8000cf8 <traffic_manual_fsm+0xc0>
			manual_state = MN_RED1;
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <traffic_manual_fsm+0xd4>)
 8000c86:	2220      	movs	r2, #32
 8000c88:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c8a:	e035      	b.n	8000cf8 <traffic_manual_fsm+0xc0>
	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - yellow
	case MN_RED1:
		//TODO
//		led_turn_on(TRAFFIC_1, LED_RED);
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	2006      	movs	r0, #6
 8000c90:	f000 fc0e 	bl	80014b0 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 fb2f 	bl	80012f8 <button_isPressed>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d02d      	beq.n	8000cfc <traffic_manual_fsm+0xc4>
			manual_state = MN_GREEN;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <traffic_manual_fsm+0xd4>)
 8000ca2:	2221      	movs	r2, #33	; 0x21
 8000ca4:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <traffic_manual_fsm+0xd8>)
 8000ca8:	223d      	movs	r2, #61	; 0x3d
 8000caa:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cac:	e026      	b.n	8000cfc <traffic_manual_fsm+0xc4>

	///////////////////////////////////////////////////////////
	// traffic A - green; traffic B - red
	case MN_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000cae:	2101      	movs	r1, #1
 8000cb0:	2005      	movs	r0, #5
 8000cb2:	f000 fbfd 	bl	80014b0 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2006      	movs	r0, #6
 8000cba:	f000 fbf9 	bl	80014b0 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 fb1a 	bl	80012f8 <button_isPressed>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d01a      	beq.n	8000d00 <traffic_manual_fsm+0xc8>
			manual_state = MN_YELLOW;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <traffic_manual_fsm+0xd4>)
 8000ccc:	2222      	movs	r2, #34	; 0x22
 8000cce:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cd0:	e016      	b.n	8000d00 <traffic_manual_fsm+0xc8>

	///////////////////////////////////////////////////////////
	// traffic A - yellow; traffic B - red
	case MN_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	2005      	movs	r0, #5
 8000cd6:	f000 fbeb 	bl	80014b0 <led_turn_on>
//		led_turn_on(TRAFFIC_2, LED_RED);

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f000 fb0c 	bl	80012f8 <button_isPressed>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00e      	beq.n	8000d04 <traffic_manual_fsm+0xcc>
			manual_state = MN_RED0;
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <traffic_manual_fsm+0xd4>)
 8000ce8:	221f      	movs	r2, #31
 8000cea:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <traffic_manual_fsm+0xd8>)
 8000cee:	223e      	movs	r2, #62	; 0x3e
 8000cf0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cf2:	e007      	b.n	8000d04 <traffic_manual_fsm+0xcc>

	///////////////////////////////////////////////////////////
	default:
		break;
 8000cf4:	bf00      	nop
 8000cf6:	e006      	b.n	8000d06 <traffic_manual_fsm+0xce>
		break;
 8000cf8:	bf00      	nop
 8000cfa:	e004      	b.n	8000d06 <traffic_manual_fsm+0xce>
		break;
 8000cfc:	bf00      	nop
 8000cfe:	e002      	b.n	8000d06 <traffic_manual_fsm+0xce>
		break;
 8000d00:	bf00      	nop
 8000d02:	e000      	b.n	8000d06 <traffic_manual_fsm+0xce>
		break;
 8000d04:	bf00      	nop
	}
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000103 	.word	0x20000103
 8000d10:	20000105 	.word	0x20000105

08000d14 <duration_inc>:

/*-------------------- set fsm -------------------------*/
void duration_inc(uint8_t led_type) {
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
	// increase specific duration by 1 unit
	trafficDuration[led_type] += DURATION_UNIT;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a10      	ldr	r2, [pc, #64]	; (8000d64 <duration_inc+0x50>)
 8000d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000d2c:	490d      	ldr	r1, [pc, #52]	; (8000d64 <duration_inc+0x50>)
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (trafficDuration[led_type] > DURATION_MAX) { //if duration over max, reset to DURATION_UNIT
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <duration_inc+0x50>)
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d90a      	bls.n	8000d58 <duration_inc+0x44>
		trafficDuration[led_type] -= DURATION_MAX;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <duration_inc+0x50>)
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000d50:	3b10      	subs	r3, #16
 8000d52:	4904      	ldr	r1, [pc, #16]	; (8000d64 <duration_inc+0x50>)
 8000d54:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000004 	.word	0x20000004

08000d68 <traffic_set_fsm>:

void traffic_set_fsm() {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	switch(set_state) {
 8000d6c:	4b60      	ldr	r3, [pc, #384]	; (8000ef0 <traffic_set_fsm+0x188>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	3b28      	subs	r3, #40	; 0x28
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	f200 80b2 	bhi.w	8000edc <traffic_set_fsm+0x174>
 8000d78:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <traffic_set_fsm+0x18>)
 8000d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d7e:	bf00      	nop
 8000d80:	08000d91 	.word	0x08000d91
 8000d84:	08000d99 	.word	0x08000d99
 8000d88:	08000e05 	.word	0x08000e05
 8000d8c:	08000e71 	.word	0x08000e71
	case SET_INIT:
		set_state = SET_RED;
 8000d90:	4b57      	ldr	r3, [pc, #348]	; (8000ef0 <traffic_set_fsm+0x188>)
 8000d92:	2229      	movs	r2, #41	; 0x29
 8000d94:	701a      	strb	r2, [r3, #0]
		break;
 8000d96:	e0a8      	b.n	8000eea <traffic_set_fsm+0x182>

	//////////////////////////////////////////////////////////////
	case SET_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2005      	movs	r0, #5
 8000d9c:	f000 fb88 	bl	80014b0 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000da0:	2100      	movs	r1, #0
 8000da2:	2006      	movs	r0, #6
 8000da4:	f000 fb84 	bl	80014b0 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000da8:	2002      	movs	r0, #2
 8000daa:	f000 faa5 	bl	80012f8 <button_isPressed>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d009      	beq.n	8000dc8 <traffic_set_fsm+0x60>
			duration_inc(LED_RED);
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff ffad 	bl	8000d14 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f000 fdac 	bl	8001918 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000dc0:	210a      	movs	r1, #10
 8000dc2:	2002      	movs	r0, #2
 8000dc4:	f000 fd76 	bl	80018b4 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f000 faaf 	bl	800132c <button_isLongPressed>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00d      	beq.n	8000df0 <traffic_set_fsm+0x88>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f000 fd87 	bl	80018e8 <timer_checkFlag>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d007      	beq.n	8000df0 <traffic_set_fsm+0x88>
				duration_inc(LED_RED);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff ff97 	bl	8000d14 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000de6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dea:	2002      	movs	r0, #2
 8000dec:	f000 fd62 	bl	80018b4 <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)) {
 8000df0:	2001      	movs	r0, #1
 8000df2:	f000 fa81 	bl	80012f8 <button_isPressed>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d071      	beq.n	8000ee0 <traffic_set_fsm+0x178>
			set_state = SET_GREEN;
 8000dfc:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <traffic_set_fsm+0x188>)
 8000dfe:	222a      	movs	r2, #42	; 0x2a
 8000e00:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000e02:	e06d      	b.n	8000ee0 <traffic_set_fsm+0x178>

	//////////////////////////////////////////////////////////////
	case SET_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000e04:	2101      	movs	r1, #1
 8000e06:	2005      	movs	r0, #5
 8000e08:	f000 fb52 	bl	80014b0 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2006      	movs	r0, #6
 8000e10:	f000 fb4e 	bl	80014b0 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000e14:	2002      	movs	r0, #2
 8000e16:	f000 fa6f 	bl	80012f8 <button_isPressed>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d009      	beq.n	8000e34 <traffic_set_fsm+0xcc>
			duration_inc(LED_GREEN);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff ff77 	bl	8000d14 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f000 fd76 	bl	8001918 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000e2c:	210a      	movs	r1, #10
 8000e2e:	2002      	movs	r0, #2
 8000e30:	f000 fd40 	bl	80018b4 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000e34:	2002      	movs	r0, #2
 8000e36:	f000 fa79 	bl	800132c <button_isLongPressed>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00d      	beq.n	8000e5c <traffic_set_fsm+0xf4>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000e40:	2002      	movs	r0, #2
 8000e42:	f000 fd51 	bl	80018e8 <timer_checkFlag>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <traffic_set_fsm+0xf4>
				duration_inc(LED_GREEN);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff ff61 	bl	8000d14 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000e52:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e56:	2002      	movs	r0, #2
 8000e58:	f000 fd2c 	bl	80018b4 <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f000 fa4b 	bl	80012f8 <button_isPressed>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d03d      	beq.n	8000ee4 <traffic_set_fsm+0x17c>
			set_state = SET_YELLOW;
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <traffic_set_fsm+0x188>)
 8000e6a:	222b      	movs	r2, #43	; 0x2b
 8000e6c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000e6e:	e039      	b.n	8000ee4 <traffic_set_fsm+0x17c>

	//////////////////////////////////////////////////////////////
	case SET_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000e70:	2102      	movs	r1, #2
 8000e72:	2005      	movs	r0, #5
 8000e74:	f000 fb1c 	bl	80014b0 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000e78:	2102      	movs	r1, #2
 8000e7a:	2006      	movs	r0, #6
 8000e7c:	f000 fb18 	bl	80014b0 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000e80:	2002      	movs	r0, #2
 8000e82:	f000 fa39 	bl	80012f8 <button_isPressed>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d009      	beq.n	8000ea0 <traffic_set_fsm+0x138>
			duration_inc(LED_YELLOW);
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f7ff ff41 	bl	8000d14 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000e92:	2002      	movs	r0, #2
 8000e94:	f000 fd40 	bl	8001918 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000e98:	210a      	movs	r1, #10
 8000e9a:	2002      	movs	r0, #2
 8000e9c:	f000 fd0a 	bl	80018b4 <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f000 fa43 	bl	800132c <button_isLongPressed>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00d      	beq.n	8000ec8 <traffic_set_fsm+0x160>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000eac:	2002      	movs	r0, #2
 8000eae:	f000 fd1b 	bl	80018e8 <timer_checkFlag>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d007      	beq.n	8000ec8 <traffic_set_fsm+0x160>
				duration_inc(LED_YELLOW);
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f7ff ff2b 	bl	8000d14 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000ebe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f000 fcf6 	bl	80018b4 <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f000 fa15 	bl	80012f8 <button_isPressed>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d009      	beq.n	8000ee8 <traffic_set_fsm+0x180>
			set_state = SET_RED;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <traffic_set_fsm+0x188>)
 8000ed6:	2229      	movs	r2, #41	; 0x29
 8000ed8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000eda:	e005      	b.n	8000ee8 <traffic_set_fsm+0x180>

	//////////////////////////////////////////////////////////////
	default:
		break;
 8000edc:	bf00      	nop
 8000ede:	e004      	b.n	8000eea <traffic_set_fsm+0x182>
		break;
 8000ee0:	bf00      	nop
 8000ee2:	e002      	b.n	8000eea <traffic_set_fsm+0x182>
		break;
 8000ee4:	bf00      	nop
 8000ee6:	e000      	b.n	8000eea <traffic_set_fsm+0x182>
		break;
 8000ee8:	bf00      	nop
	}
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000104 	.word	0x20000104

08000ef4 <traffic_fsm>:

/*----------------- global fsm -------------------------*/
void traffic_fsm() {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	switch(global_state) {
 8000ef8:	4b7a      	ldr	r3, [pc, #488]	; (80010e4 <traffic_fsm+0x1f0>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	3b0a      	subs	r3, #10
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	f200 80e6 	bhi.w	80010d0 <traffic_fsm+0x1dc>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <traffic_fsm+0x18>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f1d 	.word	0x08000f1d
 8000f10:	08000f29 	.word	0x08000f29
 8000f14:	08000f9b 	.word	0x08000f9b
 8000f18:	08000fbf 	.word	0x08000fbf
	case INIT_MODE:
		led_clear_all();
 8000f1c:	f000 fab4 	bl	8001488 <led_clear_all>
		global_state = AUTO_MODE;
 8000f20:	4b70      	ldr	r3, [pc, #448]	; (80010e4 <traffic_fsm+0x1f0>)
 8000f22:	220b      	movs	r2, #11
 8000f24:	701a      	strb	r2, [r3, #0]
		break;
 8000f26:	e0da      	b.n	80010de <traffic_fsm+0x1ea>

	//////////////////////////////////////////////////////
	case AUTO_MODE: //automatically control traffic light
		//TODO
		traffic_auto_fsm_A();
 8000f28:	f7ff fd94 	bl	8000a54 <traffic_auto_fsm_A>
		traffic_auto_fsm_B();
 8000f2c:	f7ff fe1e 	bl	8000b6c <traffic_auto_fsm_B>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 f9e1 	bl	80012f8 <button_isPressed>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d02c      	beq.n	8000f96 <traffic_fsm+0xa2>
			led_clear_all();
 8000f3c:	f000 faa4 	bl	8001488 <led_clear_all>
			global_state = MANUAL_MODE;
 8000f40:	4b68      	ldr	r3, [pc, #416]	; (80010e4 <traffic_fsm+0x1f0>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	701a      	strb	r2, [r3, #0]
			duration_set(DUR_TRAFFIC, 0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 fa31 	bl	80013b0 <duration_set>
			switch (auto_A_state) { //manual mode with previous auto state
 8000f4e:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <traffic_fsm+0x1f4>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b17      	cmp	r3, #23
 8000f54:	d01b      	beq.n	8000f8e <traffic_fsm+0x9a>
 8000f56:	2b17      	cmp	r3, #23
 8000f58:	f300 80bc 	bgt.w	80010d4 <traffic_fsm+0x1e0>
 8000f5c:	2b15      	cmp	r3, #21
 8000f5e:	d002      	beq.n	8000f66 <traffic_fsm+0x72>
 8000f60:	2b16      	cmp	r3, #22
 8000f62:	d010      	beq.n	8000f86 <traffic_fsm+0x92>
			case AUTO_YELLOW: // traffic A = yellow
				manual_state = MN_YELLOW;
				break;
			}
		}
		break;
 8000f64:	e0b6      	b.n	80010d4 <traffic_fsm+0x1e0>
				switch (auto_B_state){
 8000f66:	4b61      	ldr	r3, [pc, #388]	; (80010ec <traffic_fsm+0x1f8>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b16      	cmp	r3, #22
 8000f6c:	d002      	beq.n	8000f74 <traffic_fsm+0x80>
 8000f6e:	2b17      	cmp	r3, #23
 8000f70:	d004      	beq.n	8000f7c <traffic_fsm+0x88>
				break;
 8000f72:	e011      	b.n	8000f98 <traffic_fsm+0xa4>
					manual_state = MN_RED0;
 8000f74:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <traffic_fsm+0x1fc>)
 8000f76:	221f      	movs	r2, #31
 8000f78:	701a      	strb	r2, [r3, #0]
					break;
 8000f7a:	e003      	b.n	8000f84 <traffic_fsm+0x90>
					manual_state = MN_RED1;
 8000f7c:	4b5c      	ldr	r3, [pc, #368]	; (80010f0 <traffic_fsm+0x1fc>)
 8000f7e:	2220      	movs	r2, #32
 8000f80:	701a      	strb	r2, [r3, #0]
					break;
 8000f82:	bf00      	nop
				break;
 8000f84:	e008      	b.n	8000f98 <traffic_fsm+0xa4>
				manual_state = MN_GREEN;
 8000f86:	4b5a      	ldr	r3, [pc, #360]	; (80010f0 <traffic_fsm+0x1fc>)
 8000f88:	2221      	movs	r2, #33	; 0x21
 8000f8a:	701a      	strb	r2, [r3, #0]
				break;
 8000f8c:	e004      	b.n	8000f98 <traffic_fsm+0xa4>
				manual_state = MN_YELLOW;
 8000f8e:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <traffic_fsm+0x1fc>)
 8000f90:	2222      	movs	r2, #34	; 0x22
 8000f92:	701a      	strb	r2, [r3, #0]
				break;
 8000f94:	e000      	b.n	8000f98 <traffic_fsm+0xa4>
		}
 8000f96:	bf00      	nop
		break;
 8000f98:	e09c      	b.n	80010d4 <traffic_fsm+0x1e0>

	////////////////////////////////////////////////////
	case MANUAL_MODE: // manually control traffic light
		//TODO
		traffic_manual_fsm();
 8000f9a:	f7ff fe4d 	bl	8000c38 <traffic_manual_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f9aa 	bl	80012f8 <button_isPressed>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8096 	beq.w	80010d8 <traffic_fsm+0x1e4>
			global_state = SET_MODE;
 8000fac:	4b4d      	ldr	r3, [pc, #308]	; (80010e4 <traffic_fsm+0x1f0>)
 8000fae:	220d      	movs	r2, #13
 8000fb0:	701a      	strb	r2, [r3, #0]
			set_state = SET_INIT;
 8000fb2:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <traffic_fsm+0x200>)
 8000fb4:	2228      	movs	r2, #40	; 0x28
 8000fb6:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8000fb8:	f000 fa66 	bl	8001488 <led_clear_all>
		}
		break;
 8000fbc:	e08c      	b.n	80010d8 <traffic_fsm+0x1e4>

	//////////////////////////////////////////////////////
	case SET_MODE: //set duration for each led of traffic
		//TODO
		traffic_set_fsm();
 8000fbe:	f7ff fed3 	bl	8000d68 <traffic_set_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f000 f998 	bl	80012f8 <button_isPressed>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d07e      	beq.n	80010cc <traffic_fsm+0x1d8>
			global_state = AUTO_MODE;
 8000fce:	4b45      	ldr	r3, [pc, #276]	; (80010e4 <traffic_fsm+0x1f0>)
 8000fd0:	220b      	movs	r2, #11
 8000fd2:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8000fd4:	f000 fa58 	bl	8001488 <led_clear_all>
			timer_clear(TIMER_AUTO_A); //clear timer, prepare for auto mode
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 fc9d 	bl	8001918 <timer_clear>
			timer_clear(TIMER_AUTO_B); //clear timer, prepare for auto mode
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 fc9a 	bl	8001918 <timer_clear>
			switch(manual_state) { //auto mode with previous manual state
 8000fe4:	4b42      	ldr	r3, [pc, #264]	; (80010f0 <traffic_fsm+0x1fc>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	3b1f      	subs	r3, #31
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d876      	bhi.n	80010dc <traffic_fsm+0x1e8>
 8000fee:	a201      	add	r2, pc, #4	; (adr r2, 8000ff4 <traffic_fsm+0x100>)
 8000ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff4:	08001005 	.word	0x08001005
 8000ff8:	08001037 	.word	0x08001037
 8000ffc:	08001069 	.word	0x08001069
 8001000:	0800109b 	.word	0x0800109b
			///////////////////////////////////////////////////
			case MN_RED0: //traffic A: red; traffic B: green
				auto_A_state = AUTO_RED;
 8001004:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <traffic_fsm+0x1f4>)
 8001006:	2215      	movs	r2, #21
 8001008:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 800100a:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <traffic_fsm+0x204>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4619      	mov	r1, r3
 8001010:	2000      	movs	r0, #0
 8001012:	f000 fc4f 	bl	80018b4 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8001016:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <traffic_fsm+0x204>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	2000      	movs	r0, #0
 800101e:	f000 f9c7 	bl	80013b0 <duration_set>

				auto_B_state = AUTO_GREEN;
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <traffic_fsm+0x1f8>)
 8001024:	2216      	movs	r2, #22
 8001026:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <traffic_fsm+0x204>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4619      	mov	r1, r3
 800102e:	2001      	movs	r0, #1
 8001030:	f000 fc40 	bl	80018b4 <timer_setDuration>
				break;
 8001034:	e04b      	b.n	80010ce <traffic_fsm+0x1da>
			///////////////////////////////////////////////////
			case MN_RED1: //traffic A: red; traffic B: yellow
				auto_A_state = AUTO_RED;
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <traffic_fsm+0x1f4>)
 8001038:	2215      	movs	r2, #21
 800103a:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 800103c:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <traffic_fsm+0x204>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4619      	mov	r1, r3
 8001042:	2000      	movs	r0, #0
 8001044:	f000 fc36 	bl	80018b4 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <traffic_fsm+0x204>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4619      	mov	r1, r3
 800104e:	2000      	movs	r0, #0
 8001050:	f000 f9ae 	bl	80013b0 <duration_set>

				auto_B_state = AUTO_YELLOW;
 8001054:	4b25      	ldr	r3, [pc, #148]	; (80010ec <traffic_fsm+0x1f8>)
 8001056:	2217      	movs	r2, #23
 8001058:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <traffic_fsm+0x204>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	4619      	mov	r1, r3
 8001060:	2001      	movs	r0, #1
 8001062:	f000 fc27 	bl	80018b4 <timer_setDuration>
				break;
 8001066:	e032      	b.n	80010ce <traffic_fsm+0x1da>

			///////////////////////////////////////////////////
			case MN_GREEN: //traffic A: green; traffic B: red
				auto_A_state = AUTO_GREEN;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <traffic_fsm+0x1f4>)
 800106a:	2216      	movs	r2, #22
 800106c:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <traffic_fsm+0x204>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4619      	mov	r1, r3
 8001074:	2000      	movs	r0, #0
 8001076:	f000 fc1d 	bl	80018b4 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <traffic_fsm+0x204>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4619      	mov	r1, r3
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f995 	bl	80013b0 <duration_set>

				auto_B_state = AUTO_RED;
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <traffic_fsm+0x1f8>)
 8001088:	2215      	movs	r2, #21
 800108a:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <traffic_fsm+0x204>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	2001      	movs	r0, #1
 8001094:	f000 fc0e 	bl	80018b4 <timer_setDuration>
				break;
 8001098:	e019      	b.n	80010ce <traffic_fsm+0x1da>
			///////////////////////////////////////////////////
			case MN_YELLOW: //traffic A: yellow; traffic B: red
				auto_A_state = AUTO_YELLOW;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <traffic_fsm+0x1f4>)
 800109c:	2217      	movs	r2, #23
 800109e:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <traffic_fsm+0x204>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4619      	mov	r1, r3
 80010a6:	2000      	movs	r0, #0
 80010a8:	f000 fc04 	bl	80018b4 <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <traffic_fsm+0x204>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4619      	mov	r1, r3
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 f97c 	bl	80013b0 <duration_set>

				auto_B_state = AUTO_RED;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <traffic_fsm+0x1f8>)
 80010ba:	2215      	movs	r2, #21
 80010bc:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <traffic_fsm+0x204>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4619      	mov	r1, r3
 80010c4:	2001      	movs	r0, #1
 80010c6:	f000 fbf5 	bl	80018b4 <timer_setDuration>
				break;
 80010ca:	e000      	b.n	80010ce <traffic_fsm+0x1da>
			}
		}
 80010cc:	bf00      	nop
		break;
 80010ce:	e005      	b.n	80010dc <traffic_fsm+0x1e8>

	///////////////////////////////////////////////
	default:
		break;
 80010d0:	bf00      	nop
 80010d2:	e004      	b.n	80010de <traffic_fsm+0x1ea>
		break;
 80010d4:	bf00      	nop
 80010d6:	e002      	b.n	80010de <traffic_fsm+0x1ea>
		break;
 80010d8:	bf00      	nop
 80010da:	e000      	b.n	80010de <traffic_fsm+0x1ea>
		break;
 80010dc:	bf00      	nop
	}
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000100 	.word	0x20000100
 80010e8:	20000101 	.word	0x20000101
 80010ec:	20000102 	.word	0x20000102
 80010f0:	20000103 	.word	0x20000103
 80010f4:	20000104 	.word	0x20000104
 80010f8:	20000004 	.word	0x20000004

080010fc <global_get_totalDuration>:
uint8_t buzzer_state 	= 0;

//function for duration
uint32_t trafficDuration[3] = {5000, 3000, 2000};

uint32_t global_get_totalDuration() {
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
	return trafficDuration[0] + trafficDuration[1] + trafficDuration[2];
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <global_get_totalDuration+0x1c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b04      	ldr	r3, [pc, #16]	; (8001118 <global_get_totalDuration+0x1c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	441a      	add	r2, r3
 800110a:	4b03      	ldr	r3, [pc, #12]	; (8001118 <global_get_totalDuration+0x1c>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	4413      	add	r3, r2
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	20000004 	.word	0x20000004

0800111c <button_reading>:

int TimeOutForKeyPress[MAX_BUTTON] = {LONG_DURATION};
int flagBtn[MAX_BUTTON] = {0};
int flagBtnLong[MAX_BUTTON] = {0};

void button_reading(void){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++){
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	e0a2      	b.n	800126e <button_reading+0x152>
		KeyReg2[i] = KeyReg1[i];
 8001128:	4a55      	ldr	r2, [pc, #340]	; (8001280 <button_reading+0x164>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001130:	4954      	ldr	r1, [pc, #336]	; (8001284 <button_reading+0x168>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 8001138:	4a53      	ldr	r2, [pc, #332]	; (8001288 <button_reading+0x16c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001140:	494f      	ldr	r1, [pc, #316]	; (8001280 <button_reading+0x164>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b03      	cmp	r3, #3
 800114c:	d836      	bhi.n	80011bc <button_reading+0xa0>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <button_reading+0x38>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	08001165 	.word	0x08001165
 8001158:	0800117b 	.word	0x0800117b
 800115c:	08001191 	.word	0x08001191
 8001160:	080011a7 	.word	0x080011a7
		switch (i){ //check which button is being read now
		case BTN_1:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_1_Pin);
 8001164:	2102      	movs	r1, #2
 8001166:	4849      	ldr	r0, [pc, #292]	; (800128c <button_reading+0x170>)
 8001168:	f000 ff60 	bl	800202c <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	4619      	mov	r1, r3
 8001170:	4a45      	ldr	r2, [pc, #276]	; (8001288 <button_reading+0x16c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8001178:	e021      	b.n	80011be <button_reading+0xa2>
		case BTN_2:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_2_Pin);
 800117a:	2110      	movs	r1, #16
 800117c:	4843      	ldr	r0, [pc, #268]	; (800128c <button_reading+0x170>)
 800117e:	f000 ff55 	bl	800202c <HAL_GPIO_ReadPin>
 8001182:	4603      	mov	r3, r0
 8001184:	4619      	mov	r1, r3
 8001186:	4a40      	ldr	r2, [pc, #256]	; (8001288 <button_reading+0x16c>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800118e:	e016      	b.n	80011be <button_reading+0xa2>
		case BTN_3:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, BTN_3_Pin);
 8001190:	2101      	movs	r1, #1
 8001192:	483f      	ldr	r0, [pc, #252]	; (8001290 <button_reading+0x174>)
 8001194:	f000 ff4a 	bl	800202c <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	4619      	mov	r1, r3
 800119c:	4a3a      	ldr	r2, [pc, #232]	; (8001288 <button_reading+0x16c>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80011a4:	e00b      	b.n	80011be <button_reading+0xa2>
		case BTN_PD:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, PD_BTN_Pin);
 80011a6:	2101      	movs	r1, #1
 80011a8:	4838      	ldr	r0, [pc, #224]	; (800128c <button_reading+0x170>)
 80011aa:	f000 ff3f 	bl	800202c <HAL_GPIO_ReadPin>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4a35      	ldr	r2, [pc, #212]	; (8001288 <button_reading+0x16c>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80011ba:	e000      	b.n	80011be <button_reading+0xa2>
		default:
			break;
 80011bc:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80011be:	4a30      	ldr	r2, [pc, #192]	; (8001280 <button_reading+0x164>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011c6:	4930      	ldr	r1, [pc, #192]	; (8001288 <button_reading+0x16c>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d14a      	bne.n	8001268 <button_reading+0x14c>
 80011d2:	4a2b      	ldr	r2, [pc, #172]	; (8001280 <button_reading+0x164>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011da:	492a      	ldr	r1, [pc, #168]	; (8001284 <button_reading+0x168>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d140      	bne.n	8001268 <button_reading+0x14c>
			if (KeyReg2[i] != KeyReg3[i]){
 80011e6:	4a27      	ldr	r2, [pc, #156]	; (8001284 <button_reading+0x168>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ee:	4929      	ldr	r1, [pc, #164]	; (8001294 <button_reading+0x178>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d022      	beq.n	8001240 <button_reading+0x124>
				KeyReg3[i] = KeyReg2[i];
 80011fa:	4a22      	ldr	r2, [pc, #136]	; (8001284 <button_reading+0x168>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001202:	4924      	ldr	r1, [pc, #144]	; (8001294 <button_reading+0x178>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == IS_PRESSED){
 800120a:	4a22      	ldr	r2, [pc, #136]	; (8001294 <button_reading+0x178>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <button_reading+0x10e>
					TimeOutForKeyPress[i] = LONG_DURATION;
 8001216:	4a20      	ldr	r2, [pc, #128]	; (8001298 <button_reading+0x17c>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800121e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f83e 	bl	80012a4 <subKeyProcess>
 8001228:	e01e      	b.n	8001268 <button_reading+0x14c>
				}
				else{
					flagBtnLong[i] = 0;
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <button_reading+0x180>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2100      	movs	r1, #0
 8001230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					Over1Sec[i] = 0;
 8001234:	4a1a      	ldr	r2, [pc, #104]	; (80012a0 <button_reading+0x184>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2100      	movs	r1, #0
 800123a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800123e:	e013      	b.n	8001268 <button_reading+0x14c>
				}
			} else {
				TimeOutForKeyPress[i] --;
 8001240:	4a15      	ldr	r2, [pc, #84]	; (8001298 <button_reading+0x17c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	4913      	ldr	r1, [pc, #76]	; (8001298 <button_reading+0x17c>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8001252:	4a11      	ldr	r2, [pc, #68]	; (8001298 <button_reading+0x17c>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d104      	bne.n	8001268 <button_reading+0x14c>
					KeyReg3[i] = IS_RELEASED;
 800125e:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <button_reading+0x178>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2101      	movs	r1, #1
 8001264:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++){
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3301      	adds	r3, #1
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b03      	cmp	r3, #3
 8001272:	f77f af59 	ble.w	8001128 <button_reading+0xc>
				}
			}
		}
	}
}
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000020 	.word	0x20000020
 8001284:	20000030 	.word	0x20000030
 8001288:	20000010 	.word	0x20000010
 800128c:	40010800 	.word	0x40010800
 8001290:	40010c00 	.word	0x40010c00
 8001294:	20000040 	.word	0x20000040
 8001298:	20000050 	.word	0x20000050
 800129c:	20000128 	.word	0x20000128
 80012a0:	20000108 	.word	0x20000108

080012a4 <subKeyProcess>:

void subKeyProcess(int index){
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	flagBtn[index] = 1;
 80012ac:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <subKeyProcess+0x48>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2101      	movs	r1, #1
 80012b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (Over1Sec[index] == 0){
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <subKeyProcess+0x4c>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d105      	bne.n	80012ce <subKeyProcess+0x2a>
		Over1Sec[index] = 1;
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <subKeyProcess+0x4c>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2101      	movs	r1, #1
 80012c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else{
		flagBtnLong[index] = 1;
		flagBtn[index] = 0;
	}
}
 80012cc:	e009      	b.n	80012e2 <subKeyProcess+0x3e>
		flagBtnLong[index] = 1;
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <subKeyProcess+0x50>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2101      	movs	r1, #1
 80012d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagBtn[index] = 0;
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <subKeyProcess+0x48>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2100      	movs	r1, #0
 80012de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000118 	.word	0x20000118
 80012f0:	20000108 	.word	0x20000108
 80012f4:	20000128 	.word	0x20000128

080012f8 <button_isPressed>:

int button_isPressed(int index){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	if (flagBtn[index] == 1){
 8001300:	4a09      	ldr	r2, [pc, #36]	; (8001328 <button_isPressed+0x30>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <button_isPressed+0x22>
		flagBtn[index] = 0;
 800130c:	4a06      	ldr	r2, [pc, #24]	; (8001328 <button_isPressed+0x30>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2100      	movs	r1, #0
 8001312:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <button_isPressed+0x24>
	}
	return 0;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000118 	.word	0x20000118

0800132c <button_isLongPressed>:

int button_isLongPressed(int index){
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	return (flagBtnLong[index] == 1);
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <button_isLongPressed+0x24>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	2b01      	cmp	r3, #1
 800133e:	bf0c      	ite	eq
 8001340:	2301      	moveq	r3, #1
 8001342:	2300      	movne	r3, #0
 8001344:	b2db      	uxtb	r3, r3
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000128 	.word	0x20000128

08001354 <buzzer_modify_volume>:
#include "u_i_buzzer.h"
#include "u_global.h"

TIM_HandleTypeDef htim3;

void buzzer_modify_volume(uint8_t volumeLevel) {
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, volumeLevel);
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <buzzer_modify_volume+0x1c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	200001c8 	.word	0x200001c8

08001374 <buzzer_turn_on>:

void buzzer_turn_on() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	buzzer_modify_volume(100);
 8001378:	2064      	movs	r0, #100	; 0x64
 800137a:	f7ff ffeb 	bl	8001354 <buzzer_modify_volume>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}

08001382 <buzzer_turn_off>:

void buzzer_turn_off() {
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
	buzzer_modify_volume(0);
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ffe4 	bl	8001354 <buzzer_modify_volume>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <buzzer_blinky>:

void buzzer_blinky() {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	if (buzzer_state == BZ_ON) buzzer_turn_on();
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <buzzer_blinky+0x1c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b51      	cmp	r3, #81	; 0x51
 800139a:	d102      	bne.n	80013a2 <buzzer_blinky+0x12>
 800139c:	f7ff ffea 	bl	8001374 <buzzer_turn_on>
	else buzzer_turn_off();
}
 80013a0:	e001      	b.n	80013a6 <buzzer_blinky+0x16>
	else buzzer_turn_off();
 80013a2:	f7ff ffee 	bl	8001382 <buzzer_turn_off>
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000107 	.word	0x20000107

080013b0 <duration_set>:

void duration_init() {
	timer_setDuration(TIMER_DUR, 10);
	durationList[0] = durationList[1] = 0; //0s
}
void duration_set(uint8_t index, uint32_t duration_ms) {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
	durationList[index] = duration_ms / DUR_CYCLE; //unit of time: milisecond
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	4905      	ldr	r1, [pc, #20]	; (80013d8 <duration_set+0x28>)
 80013c2:	fba1 1202 	umull	r1, r2, r1, r2
 80013c6:	08d2      	lsrs	r2, r2, #3
 80013c8:	4904      	ldr	r1, [pc, #16]	; (80013dc <duration_set+0x2c>)
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	cccccccd 	.word	0xcccccccd
 80013dc:	20000148 	.word	0x20000148

080013e0 <duration_get>:

uint32_t duration_get(uint8_t index) { //return value of duration in second (not in milisecond)
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	uint32_t extra_duration = ((durationList[index] * DUR_CYCLE) % (DUR_UNIT)) ? 1 : 0;
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4a15      	ldr	r2, [pc, #84]	; (8001444 <duration_get+0x64>)
 80013ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f2:	4613      	mov	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <duration_get+0x68>)
 80013fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001402:	099b      	lsrs	r3, r3, #6
 8001404:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001408:	fb01 f303 	mul.w	r3, r1, r3
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	60fb      	str	r3, [r7, #12]
	return (durationList[index] * DUR_CYCLE / DUR_UNIT) + extra_duration;
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4a09      	ldr	r2, [pc, #36]	; (8001444 <duration_get+0x64>)
 800141e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	461a      	mov	r2, r3
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <duration_get+0x68>)
 800142e:	fba3 2302 	umull	r2, r3, r3, r2
 8001432:	099a      	lsrs	r2, r3, #6
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000148 	.word	0x20000148
 8001448:	10624dd3 	.word	0x10624dd3

0800144c <duration_run>:

void duration_run() { //use timer interupt to auto increase
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	durationList[0] = (durationList[0] == 0) ? 0 : durationList[0] - 1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <duration_run+0x38>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <duration_run+0x14>
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <duration_run+0x38>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3b01      	subs	r3, #1
 800145e:	e000      	b.n	8001462 <duration_run+0x16>
 8001460:	2300      	movs	r3, #0
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <duration_run+0x38>)
 8001464:	6013      	str	r3, [r2, #0]
	durationList[1] = (durationList[1] == 0) ? 0 : durationList[1] - 1;
 8001466:	4b07      	ldr	r3, [pc, #28]	; (8001484 <duration_run+0x38>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <duration_run+0x2a>
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <duration_run+0x38>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	e000      	b.n	8001478 <duration_run+0x2c>
 8001476:	2300      	movs	r3, #0
 8001478:	4a02      	ldr	r2, [pc, #8]	; (8001484 <duration_run+0x38>)
 800147a:	6053      	str	r3, [r2, #4]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000148 	.word	0x20000148

08001488 <led_clear_all>:
#include "main.h"
#include "u_global.h"

#ifdef BOARD
//clear all led
void led_clear_all() { //00
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <led_clear_all+0x20>)
 8001494:	f000 fde1 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800149e:	4803      	ldr	r0, [pc, #12]	; (80014ac <led_clear_all+0x24>)
 80014a0:	f000 fddb 	bl	800205a <HAL_GPIO_WritePin>
}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40010800 	.word	0x40010800
 80014ac:	40010c00 	.word	0x40010c00

080014b0 <led_turn_on>:

//turn specific led with specific color
void led_turn_on(uint8_t led_index, uint8_t led_type) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	460a      	mov	r2, r1
 80014ba:	71fb      	strb	r3, [r7, #7]
 80014bc:	4613      	mov	r3, r2
 80014be:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	2b07      	cmp	r3, #7
 80014c4:	d063      	beq.n	800158e <led_turn_on+0xde>
 80014c6:	2b07      	cmp	r3, #7
 80014c8:	f300 8093 	bgt.w	80015f2 <led_turn_on+0x142>
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d002      	beq.n	80014d6 <led_turn_on+0x26>
 80014d0:	2b06      	cmp	r3, #6
 80014d2:	d030      	beq.n	8001536 <led_turn_on+0x86>
			break;
		}
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 80014d4:	e08d      	b.n	80015f2 <led_turn_on+0x142>
		switch (led_type) {
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d01f      	beq.n	800151c <led_turn_on+0x6c>
 80014dc:	2b02      	cmp	r3, #2
 80014de:	f300 808a 	bgt.w	80015f6 <led_turn_on+0x146>
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <led_turn_on+0x3c>
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d00c      	beq.n	8001504 <led_turn_on+0x54>
		break;
 80014ea:	e084      	b.n	80015f6 <led_turn_on+0x146>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f2:	4845      	ldr	r0, [pc, #276]	; (8001608 <led_turn_on+0x158>)
 80014f4:	f000 fdb1 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2108      	movs	r1, #8
 80014fc:	4843      	ldr	r0, [pc, #268]	; (800160c <led_turn_on+0x15c>)
 80014fe:	f000 fdac 	bl	800205a <HAL_GPIO_WritePin>
			break;
 8001502:	e017      	b.n	8001534 <led_turn_on+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800150a:	483f      	ldr	r0, [pc, #252]	; (8001608 <led_turn_on+0x158>)
 800150c:	f000 fda5 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2108      	movs	r1, #8
 8001514:	483d      	ldr	r0, [pc, #244]	; (800160c <led_turn_on+0x15c>)
 8001516:	f000 fda0 	bl	800205a <HAL_GPIO_WritePin>
			break;
 800151a:	e00b      	b.n	8001534 <led_turn_on+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001522:	4839      	ldr	r0, [pc, #228]	; (8001608 <led_turn_on+0x158>)
 8001524:	f000 fd99 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_SET);
 8001528:	2201      	movs	r2, #1
 800152a:	2108      	movs	r1, #8
 800152c:	4837      	ldr	r0, [pc, #220]	; (800160c <led_turn_on+0x15c>)
 800152e:	f000 fd94 	bl	800205a <HAL_GPIO_WritePin>
			break;
 8001532:	bf00      	nop
		break;
 8001534:	e05f      	b.n	80015f6 <led_turn_on+0x146>
		switch (led_type) {
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d01c      	beq.n	8001576 <led_turn_on+0xc6>
 800153c:	2b02      	cmp	r3, #2
 800153e:	dc5c      	bgt.n	80015fa <led_turn_on+0x14a>
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <led_turn_on+0x9a>
 8001544:	2b01      	cmp	r3, #1
 8001546:	d00b      	beq.n	8001560 <led_turn_on+0xb0>
		break;
 8001548:	e057      	b.n	80015fa <led_turn_on+0x14a>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2120      	movs	r1, #32
 800154e:	482f      	ldr	r0, [pc, #188]	; (800160c <led_turn_on+0x15c>)
 8001550:	f000 fd83 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_RESET);
 8001554:	2200      	movs	r2, #0
 8001556:	2110      	movs	r1, #16
 8001558:	482c      	ldr	r0, [pc, #176]	; (800160c <led_turn_on+0x15c>)
 800155a:	f000 fd7e 	bl	800205a <HAL_GPIO_WritePin>
			break;
 800155e:	e015      	b.n	800158c <led_turn_on+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8001560:	2200      	movs	r2, #0
 8001562:	2120      	movs	r1, #32
 8001564:	4829      	ldr	r0, [pc, #164]	; (800160c <led_turn_on+0x15c>)
 8001566:	f000 fd78 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2110      	movs	r1, #16
 800156e:	4827      	ldr	r0, [pc, #156]	; (800160c <led_turn_on+0x15c>)
 8001570:	f000 fd73 	bl	800205a <HAL_GPIO_WritePin>
			break;
 8001574:	e00a      	b.n	800158c <led_turn_on+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	2120      	movs	r1, #32
 800157a:	4824      	ldr	r0, [pc, #144]	; (800160c <led_turn_on+0x15c>)
 800157c:	f000 fd6d 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	2110      	movs	r1, #16
 8001584:	4821      	ldr	r0, [pc, #132]	; (800160c <led_turn_on+0x15c>)
 8001586:	f000 fd68 	bl	800205a <HAL_GPIO_WritePin>
			break;
 800158a:	bf00      	nop
		break;
 800158c:	e035      	b.n	80015fa <led_turn_on+0x14a>
		switch (led_type) {
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d020      	beq.n	80015d6 <led_turn_on+0x126>
 8001594:	2b02      	cmp	r3, #2
 8001596:	dc32      	bgt.n	80015fe <led_turn_on+0x14e>
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <led_turn_on+0xf2>
 800159c:	2b01      	cmp	r3, #1
 800159e:	d00d      	beq.n	80015bc <led_turn_on+0x10c>
		break;
 80015a0:	e02d      	b.n	80015fe <led_turn_on+0x14e>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_SET);
 80015a2:	2201      	movs	r2, #1
 80015a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015a8:	4818      	ldr	r0, [pc, #96]	; (800160c <led_turn_on+0x15c>)
 80015aa:	f000 fd56 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b4:	4814      	ldr	r0, [pc, #80]	; (8001608 <led_turn_on+0x158>)
 80015b6:	f000 fd50 	bl	800205a <HAL_GPIO_WritePin>
			break;
 80015ba:	e019      	b.n	80015f0 <led_turn_on+0x140>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c2:	4812      	ldr	r0, [pc, #72]	; (800160c <led_turn_on+0x15c>)
 80015c4:	f000 fd49 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ce:	480e      	ldr	r0, [pc, #56]	; (8001608 <led_turn_on+0x158>)
 80015d0:	f000 fd43 	bl	800205a <HAL_GPIO_WritePin>
			break;
 80015d4:	e00c      	b.n	80015f0 <led_turn_on+0x140>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <led_turn_on+0x15c>)
 80015de:	f000 fd3c 	bl	800205a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <led_turn_on+0x158>)
 80015ea:	f000 fd36 	bl	800205a <HAL_GPIO_WritePin>
			break;
 80015ee:	bf00      	nop
		break;
 80015f0:	e005      	b.n	80015fe <led_turn_on+0x14e>
		break;
 80015f2:	bf00      	nop
 80015f4:	e004      	b.n	8001600 <led_turn_on+0x150>
		break;
 80015f6:	bf00      	nop
 80015f8:	e002      	b.n	8001600 <led_turn_on+0x150>
		break;
 80015fa:	bf00      	nop
 80015fc:	e000      	b.n	8001600 <led_turn_on+0x150>
		break;
 80015fe:	bf00      	nop
	}
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40010800 	.word	0x40010800
 800160c:	40010c00 	.word	0x40010c00

08001610 <led_turn_off>:

//turn of specific led
void led_turn_off(uint8_t led_index) { // 00
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
	switch (led_index) {
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	2b07      	cmp	r3, #7
 800161e:	d01d      	beq.n	800165c <led_turn_off+0x4c>
 8001620:	2b07      	cmp	r3, #7
 8001622:	dc28      	bgt.n	8001676 <led_turn_off+0x66>
 8001624:	2b05      	cmp	r3, #5
 8001626:	d002      	beq.n	800162e <led_turn_off+0x1e>
 8001628:	2b06      	cmp	r3, #6
 800162a:	d00c      	beq.n	8001646 <led_turn_off+0x36>
		HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 800162c:	e023      	b.n	8001676 <led_turn_off+0x66>
		HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001634:	4812      	ldr	r0, [pc, #72]	; (8001680 <led_turn_off+0x70>)
 8001636:	f000 fd10 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2108      	movs	r1, #8
 800163e:	4811      	ldr	r0, [pc, #68]	; (8001684 <led_turn_off+0x74>)
 8001640:	f000 fd0b 	bl	800205a <HAL_GPIO_WritePin>
		break;
 8001644:	e018      	b.n	8001678 <led_turn_off+0x68>
		HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2120      	movs	r1, #32
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <led_turn_off+0x74>)
 800164c:	f000 fd05 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	2110      	movs	r1, #16
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <led_turn_off+0x74>)
 8001656:	f000 fd00 	bl	800205a <HAL_GPIO_WritePin>
		break;
 800165a:	e00d      	b.n	8001678 <led_turn_off+0x68>
		HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001662:	4808      	ldr	r0, [pc, #32]	; (8001684 <led_turn_off+0x74>)
 8001664:	f000 fcf9 	bl	800205a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <led_turn_off+0x70>)
 8001670:	f000 fcf3 	bl	800205a <HAL_GPIO_WritePin>
		break;
 8001674:	e000      	b.n	8001678 <led_turn_off+0x68>
		break;
 8001676:	bf00      	nop
	}
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40010800 	.word	0x40010800
 8001684:	40010c00 	.word	0x40010c00

08001688 <led_pedestrian_blinky>:

//blink led pedestrian
void led_pedestrian_blinky(uint8_t led_type) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	if (pd_led_state == PD_LED_ON) led_turn_on(PEDESTRIAN, led_type);
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <led_pedestrian_blinky+0x2c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b47      	cmp	r3, #71	; 0x47
 8001698:	d105      	bne.n	80016a6 <led_pedestrian_blinky+0x1e>
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4619      	mov	r1, r3
 800169e:	2007      	movs	r0, #7
 80016a0:	f7ff ff06 	bl	80014b0 <led_turn_on>
	else led_turn_off(PEDESTRIAN);
}
 80016a4:	e002      	b.n	80016ac <led_pedestrian_blinky+0x24>
	else led_turn_off(PEDESTRIAN);
 80016a6:	2007      	movs	r0, #7
 80016a8:	f7ff ffb2 	bl	8001610 <led_turn_off>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000106 	.word	0x20000106

080016b8 <timer_unit_construct>:

struct timer_list timerList;
uint8_t	timerFlag[MAX_TIMER] = {0};

/*-------------- unit function -------------------*/
struct timer_unit* timer_unit_construct(uint8_t index, uint32_t duration) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = malloc(sizeof (struct timer_unit)); //dynamic allocating a timer unit
 80016c4:	200c      	movs	r0, #12
 80016c6:	f002 f9f7 	bl	8003ab8 <malloc>
 80016ca:	4603      	mov	r3, r0
 80016cc:	60fb      	str	r3, [r7, #12]
	if (newUnit == NULL) {
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <timer_unit_construct+0x20>
		return NULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e009      	b.n	80016ec <timer_unit_construct+0x34>
	}
	newUnit->index = index;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	701a      	strb	r2, [r3, #0]
	newUnit->duration = duration;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	605a      	str	r2, [r3, #4]
	newUnit->nextTimer = NULL;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
	return newUnit;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <timer_unit_destruct>:

void timer_unit_destruct(struct timer_unit *unit) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	free(unit);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f002 f9e3 	bl	8003ac8 <free>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <timer_list_add>:

/*-------------- list function -------------------*/
void timer_list_add(struct timer_unit *unit){
 800170c:	b480      	push	{r7}
 800170e:	b087      	sub	sp, #28
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	//list full
	if (timerList.size == MAX_TIMER) return;
 8001714:	4b38      	ldr	r3, [pc, #224]	; (80017f8 <timer_list_add+0xec>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b06      	cmp	r3, #6
 800171a:	d068      	beq.n	80017ee <timer_list_add+0xe2>

	//list empty
	if (timerList.size == 0) {
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <timer_list_add+0xec>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d109      	bne.n	8001738 <timer_list_add+0x2c>
		timerList.head = unit;
 8001724:	4a34      	ldr	r2, [pc, #208]	; (80017f8 <timer_list_add+0xec>)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6053      	str	r3, [r2, #4]
		timerList.size++;
 800172a:	4b33      	ldr	r3, [pc, #204]	; (80017f8 <timer_list_add+0xec>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <timer_list_add+0xec>)
 8001734:	701a      	strb	r2, [r3, #0]
		return;
 8001736:	e05b      	b.n	80017f0 <timer_list_add+0xe4>
	}

	//list has at least 1 item
	struct timer_unit *curr = timerList.head,
 8001738:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <timer_list_add+0xec>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	617b      	str	r3, [r7, #20]
					  *prev = NULL;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
	uint32_t totalDuration = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
	while(curr != NULL) { //iterating the list
 8001746:	e00e      	b.n	8001766 <timer_list_add+0x5a>
		totalDuration += curr->duration;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
		if (unit->duration < totalDuration) break;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	429a      	cmp	r2, r3
 800175a:	d808      	bhi.n	800176e <timer_list_add+0x62>
		prev = curr;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
		curr = curr->nextTimer;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	617b      	str	r3, [r7, #20]
	while(curr != NULL) { //iterating the list
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1ed      	bne.n	8001748 <timer_list_add+0x3c>
 800176c:	e000      	b.n	8001770 <timer_list_add+0x64>
		if (unit->duration < totalDuration) break;
 800176e:	bf00      	nop
	}
	if (prev == NULL) { //new unit is added before the head
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d113      	bne.n	800179e <timer_list_add+0x92>
		unit->nextTimer = curr;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	609a      	str	r2, [r3, #8]
		curr->duration -= unit->duration;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	1ad2      	subs	r2, r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	605a      	str	r2, [r3, #4]
		timerList.head = unit;
 800178a:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <timer_list_add+0xec>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6053      	str	r3, [r2, #4]
		timerList.size++;
 8001790:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <timer_list_add+0xec>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <timer_list_add+0xec>)
 800179a:	701a      	strb	r2, [r3, #0]
		return;
 800179c:	e028      	b.n	80017f0 <timer_list_add+0xe4>
	}
	prev->nextTimer = unit;
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]
	unit->nextTimer = curr;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	609a      	str	r2, [r3, #8]
	if (curr == NULL){
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d106      	bne.n	80017be <timer_list_add+0xb2>
		unit->duration -= totalDuration;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	1ad2      	subs	r2, r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	e010      	b.n	80017e0 <timer_list_add+0xd4>
	}
	else{
		uint32_t tmp = unit->duration;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	60bb      	str	r3, [r7, #8]
		unit->duration -= (totalDuration - curr->duration);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	6859      	ldr	r1, [r3, #4]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1acb      	subs	r3, r1, r3
 80017d0:	441a      	add	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	605a      	str	r2, [r3, #4]
		curr->duration = (totalDuration - tmp);
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1ad2      	subs	r2, r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	605a      	str	r2, [r3, #4]
	}
	timerList.size++;
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <timer_list_add+0xec>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <timer_list_add+0xec>)
 80017ea:	701a      	strb	r2, [r3, #0]
 80017ec:	e000      	b.n	80017f0 <timer_list_add+0xe4>
	if (timerList.size == MAX_TIMER) return;
 80017ee:	bf00      	nop
}
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	20000210 	.word	0x20000210

080017fc <timer_list_pop>:

void timer_list_pop(){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
	 //list empty
	if (timerList.size == 0) return;
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <timer_list_pop+0x38>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d010      	beq.n	800182c <timer_list_pop+0x30>

	struct timer_unit *delUnit = timerList.head;
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <timer_list_pop+0x38>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	607b      	str	r3, [r7, #4]
	timerList.head = delUnit->nextTimer;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <timer_list_pop+0x38>)
 8001816:	6053      	str	r3, [r2, #4]
	timer_unit_destruct(delUnit);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ff6b 	bl	80016f4 <timer_unit_destruct>
	timerList.size--;
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <timer_list_pop+0x38>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3b01      	subs	r3, #1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <timer_list_pop+0x38>)
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	e000      	b.n	800182e <timer_list_pop+0x32>
	if (timerList.size == 0) return;
 800182c:	bf00      	nop
}
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000210 	.word	0x20000210

08001838 <timer_init>:

/*-------------- global function -------------------*/
void timer_init(){
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	timerList.head = NULL;
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <timer_init+0x18>)
 800183e:	2200      	movs	r2, #0
 8001840:	605a      	str	r2, [r3, #4]
	timerList.size = 0;
 8001842:	4b03      	ldr	r3, [pc, #12]	; (8001850 <timer_init+0x18>)
 8001844:	2200      	movs	r2, #0
 8001846:	701a      	strb	r2, [r3, #0]
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	20000210 	.word	0x20000210

08001854 <timer_run>:

void timer_run(){
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	if (timerList.size == 0) return;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <timer_run+0x58>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d020      	beq.n	80018a4 <timer_run+0x50>
	if (timerList.head->duration >= 0) {
		timerList.head->duration--;
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <timer_run+0x58>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	3a01      	subs	r2, #1
 800186a:	605a      	str	r2, [r3, #4]
		if (timerList.head->duration <= 0) {
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <timer_run+0x58>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d117      	bne.n	80018a6 <timer_run+0x52>
			uint8_t index = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	71fb      	strb	r3, [r7, #7]
			while(timerList.size && timerList.head->duration == 0) {
 800187a:	e009      	b.n	8001890 <timer_run+0x3c>
				index = timerList.head->index;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <timer_run+0x58>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
				timerFlag[index] = 1;
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <timer_run+0x5c>)
 8001888:	2101      	movs	r1, #1
 800188a:	54d1      	strb	r1, [r2, r3]
				timer_list_pop();
 800188c:	f7ff ffb6 	bl	80017fc <timer_list_pop>
			while(timerList.size && timerList.head->duration == 0) {
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <timer_run+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d006      	beq.n	80018a6 <timer_run+0x52>
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <timer_run+0x58>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0ec      	beq.n	800187c <timer_run+0x28>
 80018a2:	e000      	b.n	80018a6 <timer_run+0x52>
	if (timerList.size == 0) return;
 80018a4:	bf00      	nop
			}
		}
	}
}
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000210 	.word	0x20000210
 80018b0:	20000138 	.word	0x20000138

080018b4 <timer_setDuration>:

void timer_setDuration(uint8_t index, uint32_t duration) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = timer_unit_construct(index, duration/CYCLE);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4a08      	ldr	r2, [pc, #32]	; (80018e4 <timer_setDuration+0x30>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	08da      	lsrs	r2, r3, #3
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fef2 	bl	80016b8 <timer_unit_construct>
 80018d4:	60f8      	str	r0, [r7, #12]
	timer_list_add(newUnit);
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7ff ff18 	bl	800170c <timer_list_add>
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	cccccccd 	.word	0xcccccccd

080018e8 <timer_checkFlag>:

uint8_t	timer_checkFlag(uint8_t index) {
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	if (timerFlag[index] == 1) {
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <timer_checkFlag+0x2c>)
 80018f6:	5cd3      	ldrb	r3, [r2, r3]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d105      	bne.n	8001908 <timer_checkFlag+0x20>
		timerFlag[index] = 0;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4a05      	ldr	r2, [pc, #20]	; (8001914 <timer_checkFlag+0x2c>)
 8001900:	2100      	movs	r1, #0
 8001902:	54d1      	strb	r1, [r2, r3]
		return 1;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <timer_checkFlag+0x22>
	}
	return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000138 	.word	0x20000138

08001918 <timer_clear>:

void timer_clear(uint8_t index) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
//	uint32_t totalDuration = 0;
	timerFlag[index] = 0;
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <timer_clear+0x90>)
 8001926:	2100      	movs	r1, #0
 8001928:	54d1      	strb	r1, [r2, r3]
	struct timer_unit *curr = timerList.head,
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <timer_clear+0x94>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	60fb      	str	r3, [r7, #12]
			          *prev = NULL;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
	while (curr != NULL) {
 8001934:	e009      	b.n	800194a <timer_clear+0x32>
		if (curr->index == index) break;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	429a      	cmp	r2, r3
 800193e:	d008      	beq.n	8001952 <timer_clear+0x3a>

//		totalDuration += curr->duration;
		prev = curr;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	60bb      	str	r3, [r7, #8]
		curr = curr->nextTimer;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	60fb      	str	r3, [r7, #12]
	while (curr != NULL) {
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f2      	bne.n	8001936 <timer_clear+0x1e>
 8001950:	e000      	b.n	8001954 <timer_clear+0x3c>
		if (curr->index == index) break;
 8001952:	bf00      	nop
	}

	if (curr == NULL) return;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d022      	beq.n	80019a0 <timer_clear+0x88>
	if (prev == NULL) { //item at the head of list
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <timer_clear+0x52>
		timerList.head = curr->nextTimer;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a11      	ldr	r2, [pc, #68]	; (80019ac <timer_clear+0x94>)
 8001966:	6053      	str	r3, [r2, #4]
 8001968:	e003      	b.n	8001972 <timer_clear+0x5a>
	}
	else {
		prev->nextTimer = curr->nextTimer;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	609a      	str	r2, [r3, #8]
	}
	if (curr->nextTimer != NULL) curr->nextTimer->duration += curr->duration;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <timer_clear+0x74>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	440a      	add	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
	timer_unit_destruct(curr);
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff feb1 	bl	80016f4 <timer_unit_destruct>
	timerList.size--;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <timer_clear+0x94>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	3b01      	subs	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <timer_clear+0x94>)
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e000      	b.n	80019a2 <timer_clear+0x8a>
	if (curr == NULL) return;
 80019a0:	bf00      	nop
}
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000138 	.word	0x20000138
 80019ac:	20000210 	.word	0x20000210

080019b0 <uart_send_num>:
	sprintf(tx_data, "%s\r\n", str);
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
}

void uart_send_num(char str[], uint32_t data) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
	sprintf(tx_data, "%s%ld\r\n", str, data);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	490a      	ldr	r1, [pc, #40]	; (80019e8 <uart_send_num+0x38>)
 80019c0:	480a      	ldr	r0, [pc, #40]	; (80019ec <uart_send_num+0x3c>)
 80019c2:	f002 f947 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	2228      	movs	r2, #40	; 0x28
 80019cc:	4907      	ldr	r1, [pc, #28]	; (80019ec <uart_send_num+0x3c>)
 80019ce:	4808      	ldr	r0, [pc, #32]	; (80019f0 <uart_send_num+0x40>)
 80019d0:	f001 fe75 	bl	80036be <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80019d4:	2201      	movs	r2, #1
 80019d6:	4907      	ldr	r1, [pc, #28]	; (80019f4 <uart_send_num+0x44>)
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <uart_send_num+0x40>)
 80019da:	f001 ff02 	bl	80037e2 <HAL_UART_Receive_IT>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	080043b4 	.word	0x080043b4
 80019ec:	2000019c 	.word	0x2000019c
 80019f0:	20000218 	.word	0x20000218
 80019f4:	20000150 	.word	0x20000150

080019f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f8:	480c      	ldr	r0, [pc, #48]	; (8001a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019fa:	490d      	ldr	r1, [pc, #52]	; (8001a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a10:	4c0a      	ldr	r4, [pc, #40]	; (8001a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a1e:	f7fe fecb 	bl	80007b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a22:	f002 f825 	bl	8003a70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a26:	f7fe fb91 	bl	800014c <main>
  bx lr
 8001a2a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001a34:	08004420 	.word	0x08004420
  ldr r2, =_sbss
 8001a38:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001a3c:	20000270 	.word	0x20000270

08001a40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC1_2_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_Init+0x28>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_Init+0x28>)
 8001a4e:	f043 0310 	orr.w	r3, r3, #16
 8001a52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a54:	2003      	movs	r0, #3
 8001a56:	f000 f923 	bl	8001ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f808 	bl	8001a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a60:	f7fe fd56 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40022000 	.word	0x40022000

08001a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_InitTick+0x54>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_InitTick+0x58>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4619      	mov	r1, r3
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f93b 	bl	8001d0a <HAL_SYSTICK_Config>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00e      	b.n	8001abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	d80a      	bhi.n	8001aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f000 f903 	bl	8001cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab0:	4a06      	ldr	r2, [pc, #24]	; (8001acc <HAL_InitTick+0x5c>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000064 	.word	0x20000064
 8001acc:	20000060 	.word	0x20000060

08001ad0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_IncTick+0x1c>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_IncTick+0x20>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4413      	add	r3, r2
 8001ae0:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <HAL_IncTick+0x20>)
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	20000064 	.word	0x20000064
 8001af0:	2000025c 	.word	0x2000025c

08001af4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return uwTick;
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <HAL_GetTick+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	2000025c 	.word	0x2000025c

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3a:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	60d3      	str	r3, [r2, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4906      	ldr	r1, [pc, #24]	; (8001ba0 <__NVIC_EnableIRQ+0x34>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100

08001ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	6039      	str	r1, [r7, #0]
 8001bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db0a      	blt.n	8001bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <__NVIC_SetPriority+0x4c>)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bcc:	e00a      	b.n	8001be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4908      	ldr	r1, [pc, #32]	; (8001bf4 <__NVIC_SetPriority+0x50>)
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	3b04      	subs	r3, #4
 8001bdc:	0112      	lsls	r2, r2, #4
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	761a      	strb	r2, [r3, #24]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e100 	.word	0xe000e100
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f1c3 0307 	rsb	r3, r3, #7
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	bf28      	it	cs
 8001c16:	2304      	movcs	r3, #4
 8001c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d902      	bls.n	8001c28 <NVIC_EncodePriority+0x30>
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3b03      	subs	r3, #3
 8001c26:	e000      	b.n	8001c2a <NVIC_EncodePriority+0x32>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c40:	f04f 31ff 	mov.w	r1, #4294967295
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	4313      	orrs	r3, r2
         );
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3724      	adds	r7, #36	; 0x24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c6c:	d301      	bcc.n	8001c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00f      	b.n	8001c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c72:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <SysTick_Config+0x40>)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f7ff ff90 	bl	8001ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <SysTick_Config+0x40>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c8a:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <SysTick_Config+0x40>)
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	e000e010 	.word	0xe000e010

08001ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ff2d 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b086      	sub	sp, #24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc8:	f7ff ff42 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	6978      	ldr	r0, [r7, #20]
 8001cd4:	f7ff ff90 	bl	8001bf8 <NVIC_EncodePriority>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cde:	4611      	mov	r1, r2
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff5f 	bl	8001ba4 <__NVIC_SetPriority>
}
 8001ce6:	bf00      	nop
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff35 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffa2 	bl	8001c5c <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b08b      	sub	sp, #44	; 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	e169      	b.n	800200c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8158 	bne.w	8002006 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a9a      	ldr	r2, [pc, #616]	; (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d05e      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d60:	4a98      	ldr	r2, [pc, #608]	; (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d875      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d66:	4a98      	ldr	r2, [pc, #608]	; (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d058      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d6c:	4a96      	ldr	r2, [pc, #600]	; (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d86f      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d72:	4a96      	ldr	r2, [pc, #600]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d052      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d78:	4a94      	ldr	r2, [pc, #592]	; (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d869      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a94      	ldr	r2, [pc, #592]	; (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d04c      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d84:	4a92      	ldr	r2, [pc, #584]	; (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d863      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d8a:	4a92      	ldr	r2, [pc, #584]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d046      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d90:	4a90      	ldr	r2, [pc, #576]	; (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d85d      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d96:	2b12      	cmp	r3, #18
 8001d98:	d82a      	bhi.n	8001df0 <HAL_GPIO_Init+0xcc>
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d859      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d9e:	a201      	add	r2, pc, #4	; (adr r2, 8001da4 <HAL_GPIO_Init+0x80>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001e1f 	.word	0x08001e1f
 8001da8:	08001df9 	.word	0x08001df9
 8001dac:	08001e0b 	.word	0x08001e0b
 8001db0:	08001e4d 	.word	0x08001e4d
 8001db4:	08001e53 	.word	0x08001e53
 8001db8:	08001e53 	.word	0x08001e53
 8001dbc:	08001e53 	.word	0x08001e53
 8001dc0:	08001e53 	.word	0x08001e53
 8001dc4:	08001e53 	.word	0x08001e53
 8001dc8:	08001e53 	.word	0x08001e53
 8001dcc:	08001e53 	.word	0x08001e53
 8001dd0:	08001e53 	.word	0x08001e53
 8001dd4:	08001e53 	.word	0x08001e53
 8001dd8:	08001e53 	.word	0x08001e53
 8001ddc:	08001e53 	.word	0x08001e53
 8001de0:	08001e53 	.word	0x08001e53
 8001de4:	08001e53 	.word	0x08001e53
 8001de8:	08001e01 	.word	0x08001e01
 8001dec:	08001e15 	.word	0x08001e15
 8001df0:	4a79      	ldr	r2, [pc, #484]	; (8001fd8 <HAL_GPIO_Init+0x2b4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001df6:	e02c      	b.n	8001e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e029      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	3304      	adds	r3, #4
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e024      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e01f      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e01a      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e26:	2304      	movs	r3, #4
 8001e28:	623b      	str	r3, [r7, #32]
          break;
 8001e2a:	e013      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	611a      	str	r2, [r3, #16]
          break;
 8001e3e:	e009      	b.n	8001e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	615a      	str	r2, [r3, #20]
          break;
 8001e4a:	e003      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
          break;
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          break;
 8001e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d801      	bhi.n	8001e5e <HAL_GPIO_Init+0x13a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_Init+0x13e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	; 0xff
 8001e68:	d802      	bhi.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x152>
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	3b08      	subs	r3, #8
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	210f      	movs	r1, #15
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80b1 	beq.w	8002006 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ebc:	4a48      	ldr	r2, [pc, #288]	; (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a40      	ldr	r2, [pc, #256]	; (8001fe4 <HAL_GPIO_Init+0x2c0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <HAL_GPIO_Init+0x1ec>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3f      	ldr	r2, [pc, #252]	; (8001fe8 <HAL_GPIO_Init+0x2c4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00d      	beq.n	8001f0c <HAL_GPIO_Init+0x1e8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3e      	ldr	r2, [pc, #248]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <HAL_GPIO_Init+0x1e4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3d      	ldr	r2, [pc, #244]	; (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_GPIO_Init+0x1e0>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e006      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f04:	2304      	movs	r3, #4
 8001f06:	e004      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e002      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f10:	2300      	movs	r3, #0
 8001f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f14:	f002 0203 	and.w	r2, r2, #3
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	4093      	lsls	r3, r2
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f22:	492f      	ldr	r1, [pc, #188]	; (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	492c      	ldr	r1, [pc, #176]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4928      	ldr	r1, [pc, #160]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f64:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4922      	ldr	r1, [pc, #136]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	604b      	str	r3, [r1, #4]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	491e      	ldr	r1, [pc, #120]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	4918      	ldr	r1, [pc, #96]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4914      	ldr	r1, [pc, #80]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d021      	beq.n	8001ff8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	490e      	ldr	r1, [pc, #56]	; (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60cb      	str	r3, [r1, #12]
 8001fc0:	e021      	b.n	8002006 <HAL_GPIO_Init+0x2e2>
 8001fc2:	bf00      	nop
 8001fc4:	10320000 	.word	0x10320000
 8001fc8:	10310000 	.word	0x10310000
 8001fcc:	10220000 	.word	0x10220000
 8001fd0:	10210000 	.word	0x10210000
 8001fd4:	10120000 	.word	0x10120000
 8001fd8:	10110000 	.word	0x10110000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	40010c00 	.word	0x40010c00
 8001fec:	40011000 	.word	0x40011000
 8001ff0:	40011400 	.word	0x40011400
 8001ff4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_GPIO_Init+0x304>)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4909      	ldr	r1, [pc, #36]	; (8002028 <HAL_GPIO_Init+0x304>)
 8002002:	4013      	ands	r3, r2
 8002004:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	3301      	adds	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	f47f ae8e 	bne.w	8001d38 <HAL_GPIO_Init+0x14>
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	372c      	adds	r7, #44	; 0x2c
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40010400 	.word	0x40010400

0800202c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e001      	b.n	800204e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	807b      	strh	r3, [r7, #2]
 8002066:	4613      	mov	r3, r2
 8002068:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800206a:	787b      	ldrb	r3, [r7, #1]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002070:	887a      	ldrh	r2, [r7, #2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002076:	e003      	b.n	8002080 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
	...

0800208c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	4013      	ands	r3, r2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d006      	beq.n	80020b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f806 	bl	80020bc <HAL_GPIO_EXTI_Callback>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40010400 	.word	0x40010400

080020bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e26c      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 8087 	beq.w	80021fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f0:	4b92      	ldr	r3, [pc, #584]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d00c      	beq.n	8002116 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020fc:	4b8f      	ldr	r3, [pc, #572]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d112      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
 8002108:	4b8c      	ldr	r3, [pc, #560]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d10b      	bne.n	800212e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002116:	4b89      	ldr	r3, [pc, #548]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d06c      	beq.n	80021fc <HAL_RCC_OscConfig+0x12c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d168      	bne.n	80021fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e246      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x76>
 8002138:	4b80      	ldr	r3, [pc, #512]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a7f      	ldr	r2, [pc, #508]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800213e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	e02e      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x98>
 800214e:	4b7b      	ldr	r3, [pc, #492]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7a      	ldr	r2, [pc, #488]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	4b78      	ldr	r3, [pc, #480]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a77      	ldr	r2, [pc, #476]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e01d      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0xbc>
 8002172:	4b72      	ldr	r3, [pc, #456]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a71      	ldr	r2, [pc, #452]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6e      	ldr	r2, [pc, #440]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	e00b      	b.n	80021a4 <HAL_RCC_OscConfig+0xd4>
 800218c:	4b6b      	ldr	r3, [pc, #428]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a6a      	ldr	r2, [pc, #424]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b68      	ldr	r3, [pc, #416]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a67      	ldr	r2, [pc, #412]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800219e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d013      	beq.n	80021d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fca2 	bl	8001af4 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fc9e 	bl	8001af4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1fa      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b5d      	ldr	r3, [pc, #372]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe4>
 80021d2:	e014      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7ff fc8e 	bl	8001af4 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021dc:	f7ff fc8a 	bl	8001af4 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b64      	cmp	r3, #100	; 0x64
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e1e6      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1f0      	bne.n	80021dc <HAL_RCC_OscConfig+0x10c>
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d063      	beq.n	80022d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800220a:	4b4c      	ldr	r3, [pc, #304]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00b      	beq.n	800222e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002216:	4b49      	ldr	r3, [pc, #292]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b08      	cmp	r3, #8
 8002220:	d11c      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
 8002222:	4b46      	ldr	r3, [pc, #280]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d116      	bne.n	800225c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d005      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e1ba      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b3d      	ldr	r3, [pc, #244]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4939      	ldr	r1, [pc, #228]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d020      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_RCC_OscConfig+0x270>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7ff fc43 	bl	8001af4 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002272:	f7ff fc3f 	bl	8001af4 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e19b      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4927      	ldr	r1, [pc, #156]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
 80022a4:	e015      	b.n	80022d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <HAL_RCC_OscConfig+0x270>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff fc22 	bl	8001af4 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7ff fc1e 	bl	8001af4 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e17a      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d03a      	beq.n	8002354 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d019      	beq.n	800231a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ec:	f7ff fc02 	bl	8001af4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff fbfe 	bl	8001af4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e15a      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_RCC_OscConfig+0x26c>)
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 fad8 	bl	80028c8 <RCC_Delay>
 8002318:	e01c      	b.n	8002354 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_RCC_OscConfig+0x274>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7ff fbe8 	bl	8001af4 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002326:	e00f      	b.n	8002348 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7ff fbe4 	bl	8001af4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d908      	bls.n	8002348 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e140      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000
 8002340:	42420000 	.word	0x42420000
 8002344:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002348:	4b9e      	ldr	r3, [pc, #632]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e9      	bne.n	8002328 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a6 	beq.w	80024ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002366:	4b97      	ldr	r3, [pc, #604]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b94      	ldr	r3, [pc, #592]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4a93      	ldr	r2, [pc, #588]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237c:	61d3      	str	r3, [r2, #28]
 800237e:	4b91      	ldr	r3, [pc, #580]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4b8e      	ldr	r3, [pc, #568]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800239a:	4b8b      	ldr	r3, [pc, #556]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a8a      	ldr	r2, [pc, #552]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fba5 	bl	8001af4 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7ff fba1 	bl	8001af4 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0fd      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b81      	ldr	r3, [pc, #516]	; (80025c8 <HAL_RCC_OscConfig+0x4f8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x312>
 80023d4:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a7a      	ldr	r2, [pc, #488]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	e02d      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x334>
 80023ea:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a75      	ldr	r2, [pc, #468]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	4b73      	ldr	r3, [pc, #460]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	4a72      	ldr	r2, [pc, #456]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	6213      	str	r3, [r2, #32]
 8002402:	e01c      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b05      	cmp	r3, #5
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_OscConfig+0x356>
 800240c:	4b6d      	ldr	r3, [pc, #436]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a6c      	ldr	r2, [pc, #432]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	4b6a      	ldr	r3, [pc, #424]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a69      	ldr	r2, [pc, #420]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	e00b      	b.n	800243e <HAL_RCC_OscConfig+0x36e>
 8002426:	4b67      	ldr	r3, [pc, #412]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a66      	ldr	r2, [pc, #408]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	6213      	str	r3, [r2, #32]
 8002432:	4b64      	ldr	r3, [pc, #400]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4a63      	ldr	r2, [pc, #396]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	f023 0304 	bic.w	r3, r3, #4
 800243c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d015      	beq.n	8002472 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7ff fb55 	bl	8001af4 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244e:	f7ff fb51 	bl	8001af4 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e0ab      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ee      	beq.n	800244e <HAL_RCC_OscConfig+0x37e>
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002472:	f7ff fb3f 	bl	8001af4 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7ff fb3b 	bl	8001af4 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e095      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	4b4c      	ldr	r3, [pc, #304]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d105      	bne.n	80024ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b48      	ldr	r3, [pc, #288]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a47      	ldr	r2, [pc, #284]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8081 	beq.w	80025ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b8:	4b42      	ldr	r3, [pc, #264]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d061      	beq.n	8002588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d146      	bne.n	800255a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024cc:	4b3f      	ldr	r3, [pc, #252]	; (80025cc <HAL_RCC_OscConfig+0x4fc>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff fb0f 	bl	8001af4 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff fb0b 	bl	8001af4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e067      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002500:	d108      	bne.n	8002514 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002502:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	492d      	ldr	r1, [pc, #180]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a19      	ldr	r1, [r3, #32]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	430b      	orrs	r3, r1
 8002526:	4927      	ldr	r1, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_RCC_OscConfig+0x4fc>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7ff fadf 	bl	8001af4 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7ff fadb 	bl	8001af4 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e037      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	4b1d      	ldr	r3, [pc, #116]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x46a>
 8002558:	e02f      	b.n	80025ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_RCC_OscConfig+0x4fc>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fac8 	bl	8001af4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7ff fac4 	bl	8001af4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e020      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x498>
 8002586:	e018      	b.n	80025ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e013      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_OscConfig+0x4f4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d106      	bne.n	80025b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40007000 	.word	0x40007000
 80025cc:	42420060 	.word	0x42420060

080025d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0d0      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b67      	ldr	r3, [pc, #412]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4965      	ldr	r1, [pc, #404]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262c:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002636:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800264e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	494d      	ldr	r1, [pc, #308]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d040      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d115      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e073      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3d      	ldr	r3, [pc, #244]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e06b      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b39      	ldr	r3, [pc, #228]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4936      	ldr	r1, [pc, #216]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7ff fa18 	bl	8001af4 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7ff fa14 	bl	8001af4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e053      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2d      	ldr	r3, [pc, #180]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d210      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 0207 	bic.w	r2, r3, #7
 8002706:	4922      	ldr	r1, [pc, #136]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e032      	b.n	8002786 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4916      	ldr	r1, [pc, #88]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	490e      	ldr	r1, [pc, #56]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800275e:	f000 f821 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	490a      	ldr	r1, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1cc>)
 8002778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1d0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff f976 	bl	8001a70 <HAL_InitTick>

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40022000 	.word	0x40022000
 8002794:	40021000 	.word	0x40021000
 8002798:	080043cc 	.word	0x080043cc
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000060 	.word	0x20000060

080027a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b490      	push	{r4, r7}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027ac:	1d3c      	adds	r4, r7, #4
 80027ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027b4:	f240 2301 	movw	r3, #513	; 0x201
 80027b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	2300      	movs	r3, #0
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d002      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x40>
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d003      	beq.n	80027ea <HAL_RCC_GetSysClockFreq+0x46>
 80027e2:	e02d      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e6:	623b      	str	r3, [r7, #32]
      break;
 80027e8:	e02d      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	0c9b      	lsrs	r3, r3, #18
 80027ee:	f003 030f 	and.w	r3, r3, #15
 80027f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027f6:	4413      	add	r3, r2
 80027f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d013      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002808:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	0c5b      	lsrs	r3, r3, #17
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002816:	4413      	add	r3, r2
 8002818:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800281c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	4a0e      	ldr	r2, [pc, #56]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002822:	fb02 f203 	mul.w	r2, r2, r3
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
 800282e:	e004      	b.n	800283a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	623b      	str	r3, [r7, #32]
      break;
 800283e:	e002      	b.n	8002846 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002842:	623b      	str	r3, [r7, #32]
      break;
 8002844:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002846:	6a3b      	ldr	r3, [r7, #32]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3728      	adds	r7, #40	; 0x28
 800284c:	46bd      	mov	sp, r7
 800284e:	bc90      	pop	{r4, r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	080043bc 	.word	0x080043bc
 8002858:	40021000 	.word	0x40021000
 800285c:	007a1200 	.word	0x007a1200
 8002860:	003d0900 	.word	0x003d0900

08002864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b02      	ldr	r3, [pc, #8]	; (8002874 <HAL_RCC_GetHCLKFreq+0x10>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	20000000 	.word	0x20000000

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800287c:	f7ff fff2 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	080043dc 	.word	0x080043dc

080028a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a4:	f7ff ffde 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0adb      	lsrs	r3, r3, #11
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4903      	ldr	r1, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	080043dc 	.word	0x080043dc

080028c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <RCC_Delay+0x34>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <RCC_Delay+0x38>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0a5b      	lsrs	r3, r3, #9
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e4:	bf00      	nop
  }
  while (Delay --);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e5a      	subs	r2, r3, #1
 80028ea:	60fa      	str	r2, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f9      	bne.n	80028e4 <RCC_Delay+0x1c>
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	20000000 	.word	0x20000000
 8002900:	10624dd3 	.word	0x10624dd3

08002904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e041      	b.n	800299a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fd fe22 	bl	8000574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f000 fb7e 	bl	8003044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d001      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e03a      	b.n	8002a32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <HAL_TIM_Base_Start_IT+0x98>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00e      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0x58>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e6:	d009      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0x58>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a14      	ldr	r2, [pc, #80]	; (8002a40 <HAL_TIM_Base_Start_IT+0x9c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0x58>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <HAL_TIM_Base_Start_IT+0xa0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d111      	bne.n	8002a20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b06      	cmp	r3, #6
 8002a0c:	d010      	beq.n	8002a30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f042 0201 	orr.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1e:	e007      	b.n	8002a30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0201 	orr.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	40012c00 	.word	0x40012c00
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800

08002a48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e041      	b.n	8002ade <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d106      	bne.n	8002a74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fd fda4 	bl	80005bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3304      	adds	r3, #4
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f000 fadc 	bl	8003044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d122      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d11b      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f06f 0202 	mvn.w	r2, #2
 8002b12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fa70 	bl	800300e <HAL_TIM_IC_CaptureCallback>
 8002b2e:	e005      	b.n	8002b3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fa63 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fa72 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d122      	bne.n	8002b96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d11b      	bne.n	8002b96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f06f 0204 	mvn.w	r2, #4
 8002b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fa46 	bl	800300e <HAL_TIM_IC_CaptureCallback>
 8002b82:	e005      	b.n	8002b90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fa39 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa48 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d122      	bne.n	8002bea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d11b      	bne.n	8002bea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f06f 0208 	mvn.w	r2, #8
 8002bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fa1c 	bl	800300e <HAL_TIM_IC_CaptureCallback>
 8002bd6:	e005      	b.n	8002be4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fa0f 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fa1e 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b10      	cmp	r3, #16
 8002bf6:	d122      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	2b10      	cmp	r3, #16
 8002c04:	d11b      	bne.n	8002c3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0210 	mvn.w	r2, #16
 8002c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2208      	movs	r2, #8
 8002c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f9f2 	bl	800300e <HAL_TIM_IC_CaptureCallback>
 8002c2a:	e005      	b.n	8002c38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f9e5 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f9f4 	bl	8003020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d10e      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f06f 0201 	mvn.w	r2, #1
 8002c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fd fc3f 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	2b80      	cmp	r3, #128	; 0x80
 8002c76:	d10e      	bne.n	8002c96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c82:	2b80      	cmp	r3, #128	; 0x80
 8002c84:	d107      	bne.n	8002c96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fcbe 	bl	8003612 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d10e      	bne.n	8002cc2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d107      	bne.n	8002cc2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f9b8 	bl	8003032 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b20      	cmp	r3, #32
 8002cce:	d10e      	bne.n	8002cee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0320 	and.w	r3, r3, #32
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d107      	bne.n	8002cee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f06f 0220 	mvn.w	r2, #32
 8002ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fc89 	bl	8003600 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e0ac      	b.n	8002e6c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	f200 809f 	bhi.w	8002e60 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002d22:	a201      	add	r2, pc, #4	; (adr r2, 8002d28 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d5d 	.word	0x08002d5d
 8002d2c:	08002e61 	.word	0x08002e61
 8002d30:	08002e61 	.word	0x08002e61
 8002d34:	08002e61 	.word	0x08002e61
 8002d38:	08002d9d 	.word	0x08002d9d
 8002d3c:	08002e61 	.word	0x08002e61
 8002d40:	08002e61 	.word	0x08002e61
 8002d44:	08002e61 	.word	0x08002e61
 8002d48:	08002ddf 	.word	0x08002ddf
 8002d4c:	08002e61 	.word	0x08002e61
 8002d50:	08002e61 	.word	0x08002e61
 8002d54:	08002e61 	.word	0x08002e61
 8002d58:	08002e1f 	.word	0x08002e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f9d0 	bl	8003108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0208 	orr.w	r2, r2, #8
 8002d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0204 	bic.w	r2, r2, #4
 8002d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6999      	ldr	r1, [r3, #24]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	619a      	str	r2, [r3, #24]
      break;
 8002d9a:	e062      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fa16 	bl	80031d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6999      	ldr	r1, [r3, #24]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	021a      	lsls	r2, r3, #8
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	619a      	str	r2, [r3, #24]
      break;
 8002ddc:	e041      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fa5f 	bl	80032a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0208 	orr.w	r2, r2, #8
 8002df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69da      	ldr	r2, [r3, #28]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0204 	bic.w	r2, r2, #4
 8002e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69d9      	ldr	r1, [r3, #28]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	61da      	str	r2, [r3, #28]
      break;
 8002e1c:	e021      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 faa9 	bl	800337c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69d9      	ldr	r1, [r3, #28]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	021a      	lsls	r2, r3, #8
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	61da      	str	r2, [r3, #28]
      break;
 8002e5e:	e000      	b.n	8002e62 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002e60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_TIM_ConfigClockSource+0x18>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e0b3      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x180>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec4:	d03e      	beq.n	8002f44 <HAL_TIM_ConfigClockSource+0xd0>
 8002ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eca:	f200 8087 	bhi.w	8002fdc <HAL_TIM_ConfigClockSource+0x168>
 8002ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed2:	f000 8085 	beq.w	8002fe0 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	d87f      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x168>
 8002edc:	2b70      	cmp	r3, #112	; 0x70
 8002ede:	d01a      	beq.n	8002f16 <HAL_TIM_ConfigClockSource+0xa2>
 8002ee0:	2b70      	cmp	r3, #112	; 0x70
 8002ee2:	d87b      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x168>
 8002ee4:	2b60      	cmp	r3, #96	; 0x60
 8002ee6:	d050      	beq.n	8002f8a <HAL_TIM_ConfigClockSource+0x116>
 8002ee8:	2b60      	cmp	r3, #96	; 0x60
 8002eea:	d877      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x168>
 8002eec:	2b50      	cmp	r3, #80	; 0x50
 8002eee:	d03c      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0xf6>
 8002ef0:	2b50      	cmp	r3, #80	; 0x50
 8002ef2:	d873      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x168>
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d058      	beq.n	8002faa <HAL_TIM_ConfigClockSource+0x136>
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d86f      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x168>
 8002efc:	2b30      	cmp	r3, #48	; 0x30
 8002efe:	d064      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x156>
 8002f00:	2b30      	cmp	r3, #48	; 0x30
 8002f02:	d86b      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x168>
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	d060      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x156>
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d867      	bhi.n	8002fdc <HAL_TIM_ConfigClockSource+0x168>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d05c      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x156>
 8002f10:	2b10      	cmp	r3, #16
 8002f12:	d05a      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f14:	e062      	b.n	8002fdc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6899      	ldr	r1, [r3, #8]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f000 faee 	bl	8003506 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	609a      	str	r2, [r3, #8]
      break;
 8002f42:	e04e      	b.n	8002fe2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6818      	ldr	r0, [r3, #0]
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6899      	ldr	r1, [r3, #8]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f000 fad7 	bl	8003506 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f66:	609a      	str	r2, [r3, #8]
      break;
 8002f68:	e03b      	b.n	8002fe2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f000 fa4e 	bl	8003418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2150      	movs	r1, #80	; 0x50
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 faa5 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8002f88:	e02b      	b.n	8002fe2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6859      	ldr	r1, [r3, #4]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	461a      	mov	r2, r3
 8002f98:	f000 fa6c 	bl	8003474 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2160      	movs	r1, #96	; 0x60
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fa95 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8002fa8:	e01b      	b.n	8002fe2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f000 fa2e 	bl	8003418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2140      	movs	r1, #64	; 0x40
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fa85 	bl	80034d2 <TIM_ITRx_SetConfig>
      break;
 8002fc8:	e00b      	b.n	8002fe2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	f000 fa7c 	bl	80034d2 <TIM_ITRx_SetConfig>
        break;
 8002fda:	e002      	b.n	8002fe2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fdc:	bf00      	nop
 8002fde:	e000      	b.n	8002fe2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fe0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a29      	ldr	r2, [pc, #164]	; (80030fc <TIM_Base_SetConfig+0xb8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00b      	beq.n	8003074 <TIM_Base_SetConfig+0x30>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003062:	d007      	beq.n	8003074 <TIM_Base_SetConfig+0x30>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a26      	ldr	r2, [pc, #152]	; (8003100 <TIM_Base_SetConfig+0xbc>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_Base_SetConfig+0x30>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a25      	ldr	r2, [pc, #148]	; (8003104 <TIM_Base_SetConfig+0xc0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d108      	bne.n	8003086 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <TIM_Base_SetConfig+0xb8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00b      	beq.n	80030a6 <TIM_Base_SetConfig+0x62>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003094:	d007      	beq.n	80030a6 <TIM_Base_SetConfig+0x62>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a19      	ldr	r2, [pc, #100]	; (8003100 <TIM_Base_SetConfig+0xbc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d003      	beq.n	80030a6 <TIM_Base_SetConfig+0x62>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a18      	ldr	r2, [pc, #96]	; (8003104 <TIM_Base_SetConfig+0xc0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d108      	bne.n	80030b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a07      	ldr	r2, [pc, #28]	; (80030fc <TIM_Base_SetConfig+0xb8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d103      	bne.n	80030ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	615a      	str	r2, [r3, #20]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	40012c00 	.word	0x40012c00
 8003100:	40000400 	.word	0x40000400
 8003104:	40000800 	.word	0x40000800

08003108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f023 0201 	bic.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0303 	bic.w	r3, r3, #3
 800313e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f023 0302 	bic.w	r3, r3, #2
 8003150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <TIM_OC1_SetConfig+0xc8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d10c      	bne.n	800317e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0308 	bic.w	r3, r3, #8
 800316a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <TIM_OC1_SetConfig+0xc8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d111      	bne.n	80031aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800318c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	621a      	str	r2, [r3, #32]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40012c00 	.word	0x40012c00

080031d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f023 0210 	bic.w	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f023 0320 	bic.w	r3, r3, #32
 800321e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a1d      	ldr	r2, [pc, #116]	; (80032a4 <TIM_OC2_SetConfig+0xd0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d10d      	bne.n	8003250 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800323a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800324e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <TIM_OC2_SetConfig+0xd0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d113      	bne.n	8003280 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800325e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	621a      	str	r2, [r3, #32]
}
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	40012c00 	.word	0x40012c00

080032a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <TIM_OC3_SetConfig+0xd0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d10d      	bne.n	8003322 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800330c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a14      	ldr	r2, [pc, #80]	; (8003378 <TIM_OC3_SetConfig+0xd0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d113      	bne.n	8003352 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	621a      	str	r2, [r3, #32]
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40012c00 	.word	0x40012c00

0800337c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	031b      	lsls	r3, r3, #12
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <TIM_OC4_SetConfig+0x98>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d109      	bne.n	80033f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	019b      	lsls	r3, r3, #6
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	621a      	str	r2, [r3, #32]
}
 800340a:	bf00      	nop
 800340c:	371c      	adds	r7, #28
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	40012c00 	.word	0x40012c00

08003418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	f023 0201 	bic.w	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f023 030a 	bic.w	r3, r3, #10
 8003454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	621a      	str	r2, [r3, #32]
}
 800346a:	bf00      	nop
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	bc80      	pop	{r7}
 8003472:	4770      	bx	lr

08003474 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f023 0210 	bic.w	r2, r3, #16
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800349e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	031b      	lsls	r3, r3, #12
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	621a      	str	r2, [r3, #32]
}
 80034c8:	bf00      	nop
 80034ca:	371c      	adds	r7, #28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f043 0307 	orr.w	r3, r3, #7
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	609a      	str	r2, [r3, #8]
}
 80034fc:	bf00      	nop
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003506:	b480      	push	{r7}
 8003508:	b087      	sub	sp, #28
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003520:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	021a      	lsls	r2, r3, #8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	431a      	orrs	r2, r3
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	4313      	orrs	r3, r2
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	609a      	str	r2, [r3, #8]
}
 800353a:	bf00      	nop
 800353c:	371c      	adds	r7, #28
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003558:	2302      	movs	r3, #2
 800355a:	e046      	b.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00e      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d009      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d004      	beq.n	80035be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a10      	ldr	r2, [pc, #64]	; (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10c      	bne.n	80035d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr
 80035f4:	40012c00 	.word	0x40012c00
 80035f8:	40000400 	.word	0x40000400
 80035fc:	40000800 	.word	0x40000800

08003600 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e03f      	b.n	80036b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd f806 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	; 0x24
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f96d 	bl	8003948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800367c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800368c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800369c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b08a      	sub	sp, #40	; 0x28
 80036c2:	af02      	add	r7, sp, #8
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b20      	cmp	r3, #32
 80036dc:	d17c      	bne.n	80037d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_UART_Transmit+0x2c>
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e075      	b.n	80037da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <HAL_UART_Transmit+0x3e>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e06e      	b.n	80037da <HAL_UART_Transmit+0x11c>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2221      	movs	r2, #33	; 0x21
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003712:	f7fe f9ef 	bl	8001af4 <HAL_GetTick>
 8003716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	88fa      	ldrh	r2, [r7, #6]
 800371c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372c:	d108      	bne.n	8003740 <HAL_UART_Transmit+0x82>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d104      	bne.n	8003740 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e003      	b.n	8003748 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003750:	e02a      	b.n	80037a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2200      	movs	r2, #0
 800375a:	2180      	movs	r1, #128	; 0x80
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f870 	bl	8003842 <UART_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e036      	b.n	80037da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	881b      	ldrh	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003780:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	3302      	adds	r3, #2
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	e007      	b.n	800379a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	3301      	adds	r3, #1
 8003798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1cf      	bne.n	8003752 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2200      	movs	r2, #0
 80037ba:	2140      	movs	r1, #64	; 0x40
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f840 	bl	8003842 <UART_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e006      	b.n	80037da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	4613      	mov	r3, r2
 80037ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d11d      	bne.n	8003838 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_UART_Receive_IT+0x26>
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e016      	b.n	800383a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_UART_Receive_IT+0x38>
 8003816:	2302      	movs	r3, #2
 8003818:	e00f      	b.n	800383a <HAL_UART_Receive_IT+0x58>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003828:	88fb      	ldrh	r3, [r7, #6]
 800382a:	461a      	mov	r2, r3
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f851 	bl	80038d6 <UART_Start_Receive_IT>
 8003834:	4603      	mov	r3, r0
 8003836:	e000      	b.n	800383a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	603b      	str	r3, [r7, #0]
 800384e:	4613      	mov	r3, r2
 8003850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003852:	e02c      	b.n	80038ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d028      	beq.n	80038ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <UART_WaitOnFlagUntilTimeout+0x30>
 8003862:	f7fe f947 	bl	8001af4 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	429a      	cmp	r2, r3
 8003870:	d21d      	bcs.n	80038ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003880:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e00f      	b.n	80038ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4013      	ands	r3, r2
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	bf0c      	ite	eq
 80038be:	2301      	moveq	r3, #1
 80038c0:	2300      	movne	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	461a      	mov	r2, r3
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d0c3      	beq.n	8003854 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	4613      	mov	r3, r2
 80038e2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	88fa      	ldrh	r2, [r7, #6]
 80038ee:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	88fa      	ldrh	r2, [r7, #6]
 80038f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2222      	movs	r2, #34	; 0x22
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695a      	ldr	r2, [r3, #20]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0220 	orr.w	r2, r2, #32
 800393a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	4313      	orrs	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003982:	f023 030c 	bic.w	r3, r3, #12
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	430b      	orrs	r3, r1
 800398e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2c      	ldr	r2, [pc, #176]	; (8003a5c <UART_SetConfig+0x114>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d103      	bne.n	80039b8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039b0:	f7fe ff76 	bl	80028a0 <HAL_RCC_GetPCLK2Freq>
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	e002      	b.n	80039be <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039b8:	f7fe ff5e 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 80039bc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009a      	lsls	r2, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <UART_SetConfig+0x118>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	0119      	lsls	r1, r3, #4
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4613      	mov	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	009a      	lsls	r2, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f4:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <UART_SetConfig+0x118>)
 80039f6:	fba3 0302 	umull	r0, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2064      	movs	r0, #100	; 0x64
 80039fe:	fb00 f303 	mul.w	r3, r0, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	3332      	adds	r3, #50	; 0x32
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <UART_SetConfig+0x118>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a14:	4419      	add	r1, r3
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009a      	lsls	r2, r3, #2
 8003a20:	441a      	add	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <UART_SetConfig+0x118>)
 8003a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2064      	movs	r0, #100	; 0x64
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	3332      	adds	r3, #50	; 0x32
 8003a40:	4a07      	ldr	r2, [pc, #28]	; (8003a60 <UART_SetConfig+0x118>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	440a      	add	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40013800 	.word	0x40013800
 8003a60:	51eb851f 	.word	0x51eb851f

08003a64 <__errno>:
 8003a64:	4b01      	ldr	r3, [pc, #4]	; (8003a6c <__errno+0x8>)
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000068 	.word	0x20000068

08003a70 <__libc_init_array>:
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	2600      	movs	r6, #0
 8003a74:	4d0c      	ldr	r5, [pc, #48]	; (8003aa8 <__libc_init_array+0x38>)
 8003a76:	4c0d      	ldr	r4, [pc, #52]	; (8003aac <__libc_init_array+0x3c>)
 8003a78:	1b64      	subs	r4, r4, r5
 8003a7a:	10a4      	asrs	r4, r4, #2
 8003a7c:	42a6      	cmp	r6, r4
 8003a7e:	d109      	bne.n	8003a94 <__libc_init_array+0x24>
 8003a80:	f000 fc6c 	bl	800435c <_init>
 8003a84:	2600      	movs	r6, #0
 8003a86:	4d0a      	ldr	r5, [pc, #40]	; (8003ab0 <__libc_init_array+0x40>)
 8003a88:	4c0a      	ldr	r4, [pc, #40]	; (8003ab4 <__libc_init_array+0x44>)
 8003a8a:	1b64      	subs	r4, r4, r5
 8003a8c:	10a4      	asrs	r4, r4, #2
 8003a8e:	42a6      	cmp	r6, r4
 8003a90:	d105      	bne.n	8003a9e <__libc_init_array+0x2e>
 8003a92:	bd70      	pop	{r4, r5, r6, pc}
 8003a94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a98:	4798      	blx	r3
 8003a9a:	3601      	adds	r6, #1
 8003a9c:	e7ee      	b.n	8003a7c <__libc_init_array+0xc>
 8003a9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa2:	4798      	blx	r3
 8003aa4:	3601      	adds	r6, #1
 8003aa6:	e7f2      	b.n	8003a8e <__libc_init_array+0x1e>
 8003aa8:	08004418 	.word	0x08004418
 8003aac:	08004418 	.word	0x08004418
 8003ab0:	08004418 	.word	0x08004418
 8003ab4:	0800441c 	.word	0x0800441c

08003ab8 <malloc>:
 8003ab8:	4b02      	ldr	r3, [pc, #8]	; (8003ac4 <malloc+0xc>)
 8003aba:	4601      	mov	r1, r0
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	f000 b85f 	b.w	8003b80 <_malloc_r>
 8003ac2:	bf00      	nop
 8003ac4:	20000068 	.word	0x20000068

08003ac8 <free>:
 8003ac8:	4b02      	ldr	r3, [pc, #8]	; (8003ad4 <free+0xc>)
 8003aca:	4601      	mov	r1, r0
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	f000 b80b 	b.w	8003ae8 <_free_r>
 8003ad2:	bf00      	nop
 8003ad4:	20000068 	.word	0x20000068

08003ad8 <memset>:
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4402      	add	r2, r0
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <memset+0xa>
 8003ae0:	4770      	bx	lr
 8003ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae6:	e7f9      	b.n	8003adc <memset+0x4>

08003ae8 <_free_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	4605      	mov	r5, r0
 8003aec:	2900      	cmp	r1, #0
 8003aee:	d043      	beq.n	8003b78 <_free_r+0x90>
 8003af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003af4:	1f0c      	subs	r4, r1, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bfb8      	it	lt
 8003afa:	18e4      	addlt	r4, r4, r3
 8003afc:	f000 f8ca 	bl	8003c94 <__malloc_lock>
 8003b00:	4a1e      	ldr	r2, [pc, #120]	; (8003b7c <_free_r+0x94>)
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	4610      	mov	r0, r2
 8003b06:	b933      	cbnz	r3, 8003b16 <_free_r+0x2e>
 8003b08:	6063      	str	r3, [r4, #4]
 8003b0a:	6014      	str	r4, [r2, #0]
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b12:	f000 b8c5 	b.w	8003ca0 <__malloc_unlock>
 8003b16:	42a3      	cmp	r3, r4
 8003b18:	d90a      	bls.n	8003b30 <_free_r+0x48>
 8003b1a:	6821      	ldr	r1, [r4, #0]
 8003b1c:	1862      	adds	r2, r4, r1
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	bf01      	itttt	eq
 8003b22:	681a      	ldreq	r2, [r3, #0]
 8003b24:	685b      	ldreq	r3, [r3, #4]
 8003b26:	1852      	addeq	r2, r2, r1
 8003b28:	6022      	streq	r2, [r4, #0]
 8003b2a:	6063      	str	r3, [r4, #4]
 8003b2c:	6004      	str	r4, [r0, #0]
 8003b2e:	e7ed      	b.n	8003b0c <_free_r+0x24>
 8003b30:	461a      	mov	r2, r3
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	b10b      	cbz	r3, 8003b3a <_free_r+0x52>
 8003b36:	42a3      	cmp	r3, r4
 8003b38:	d9fa      	bls.n	8003b30 <_free_r+0x48>
 8003b3a:	6811      	ldr	r1, [r2, #0]
 8003b3c:	1850      	adds	r0, r2, r1
 8003b3e:	42a0      	cmp	r0, r4
 8003b40:	d10b      	bne.n	8003b5a <_free_r+0x72>
 8003b42:	6820      	ldr	r0, [r4, #0]
 8003b44:	4401      	add	r1, r0
 8003b46:	1850      	adds	r0, r2, r1
 8003b48:	4283      	cmp	r3, r0
 8003b4a:	6011      	str	r1, [r2, #0]
 8003b4c:	d1de      	bne.n	8003b0c <_free_r+0x24>
 8003b4e:	6818      	ldr	r0, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4401      	add	r1, r0
 8003b54:	6011      	str	r1, [r2, #0]
 8003b56:	6053      	str	r3, [r2, #4]
 8003b58:	e7d8      	b.n	8003b0c <_free_r+0x24>
 8003b5a:	d902      	bls.n	8003b62 <_free_r+0x7a>
 8003b5c:	230c      	movs	r3, #12
 8003b5e:	602b      	str	r3, [r5, #0]
 8003b60:	e7d4      	b.n	8003b0c <_free_r+0x24>
 8003b62:	6820      	ldr	r0, [r4, #0]
 8003b64:	1821      	adds	r1, r4, r0
 8003b66:	428b      	cmp	r3, r1
 8003b68:	bf01      	itttt	eq
 8003b6a:	6819      	ldreq	r1, [r3, #0]
 8003b6c:	685b      	ldreq	r3, [r3, #4]
 8003b6e:	1809      	addeq	r1, r1, r0
 8003b70:	6021      	streq	r1, [r4, #0]
 8003b72:	6063      	str	r3, [r4, #4]
 8003b74:	6054      	str	r4, [r2, #4]
 8003b76:	e7c9      	b.n	8003b0c <_free_r+0x24>
 8003b78:	bd38      	pop	{r3, r4, r5, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000140 	.word	0x20000140

08003b80 <_malloc_r>:
 8003b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b82:	1ccd      	adds	r5, r1, #3
 8003b84:	f025 0503 	bic.w	r5, r5, #3
 8003b88:	3508      	adds	r5, #8
 8003b8a:	2d0c      	cmp	r5, #12
 8003b8c:	bf38      	it	cc
 8003b8e:	250c      	movcc	r5, #12
 8003b90:	2d00      	cmp	r5, #0
 8003b92:	4606      	mov	r6, r0
 8003b94:	db01      	blt.n	8003b9a <_malloc_r+0x1a>
 8003b96:	42a9      	cmp	r1, r5
 8003b98:	d903      	bls.n	8003ba2 <_malloc_r+0x22>
 8003b9a:	230c      	movs	r3, #12
 8003b9c:	6033      	str	r3, [r6, #0]
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ba2:	f000 f877 	bl	8003c94 <__malloc_lock>
 8003ba6:	4921      	ldr	r1, [pc, #132]	; (8003c2c <_malloc_r+0xac>)
 8003ba8:	680a      	ldr	r2, [r1, #0]
 8003baa:	4614      	mov	r4, r2
 8003bac:	b99c      	cbnz	r4, 8003bd6 <_malloc_r+0x56>
 8003bae:	4f20      	ldr	r7, [pc, #128]	; (8003c30 <_malloc_r+0xb0>)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	b923      	cbnz	r3, 8003bbe <_malloc_r+0x3e>
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f000 f83c 	bl	8003c34 <_sbrk_r>
 8003bbc:	6038      	str	r0, [r7, #0]
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	f000 f837 	bl	8003c34 <_sbrk_r>
 8003bc6:	1c43      	adds	r3, r0, #1
 8003bc8:	d123      	bne.n	8003c12 <_malloc_r+0x92>
 8003bca:	230c      	movs	r3, #12
 8003bcc:	4630      	mov	r0, r6
 8003bce:	6033      	str	r3, [r6, #0]
 8003bd0:	f000 f866 	bl	8003ca0 <__malloc_unlock>
 8003bd4:	e7e3      	b.n	8003b9e <_malloc_r+0x1e>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	1b5b      	subs	r3, r3, r5
 8003bda:	d417      	bmi.n	8003c0c <_malloc_r+0x8c>
 8003bdc:	2b0b      	cmp	r3, #11
 8003bde:	d903      	bls.n	8003be8 <_malloc_r+0x68>
 8003be0:	6023      	str	r3, [r4, #0]
 8003be2:	441c      	add	r4, r3
 8003be4:	6025      	str	r5, [r4, #0]
 8003be6:	e004      	b.n	8003bf2 <_malloc_r+0x72>
 8003be8:	6863      	ldr	r3, [r4, #4]
 8003bea:	42a2      	cmp	r2, r4
 8003bec:	bf0c      	ite	eq
 8003bee:	600b      	streq	r3, [r1, #0]
 8003bf0:	6053      	strne	r3, [r2, #4]
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f000 f854 	bl	8003ca0 <__malloc_unlock>
 8003bf8:	f104 000b 	add.w	r0, r4, #11
 8003bfc:	1d23      	adds	r3, r4, #4
 8003bfe:	f020 0007 	bic.w	r0, r0, #7
 8003c02:	1ac2      	subs	r2, r0, r3
 8003c04:	d0cc      	beq.n	8003ba0 <_malloc_r+0x20>
 8003c06:	1a1b      	subs	r3, r3, r0
 8003c08:	50a3      	str	r3, [r4, r2]
 8003c0a:	e7c9      	b.n	8003ba0 <_malloc_r+0x20>
 8003c0c:	4622      	mov	r2, r4
 8003c0e:	6864      	ldr	r4, [r4, #4]
 8003c10:	e7cc      	b.n	8003bac <_malloc_r+0x2c>
 8003c12:	1cc4      	adds	r4, r0, #3
 8003c14:	f024 0403 	bic.w	r4, r4, #3
 8003c18:	42a0      	cmp	r0, r4
 8003c1a:	d0e3      	beq.n	8003be4 <_malloc_r+0x64>
 8003c1c:	1a21      	subs	r1, r4, r0
 8003c1e:	4630      	mov	r0, r6
 8003c20:	f000 f808 	bl	8003c34 <_sbrk_r>
 8003c24:	3001      	adds	r0, #1
 8003c26:	d1dd      	bne.n	8003be4 <_malloc_r+0x64>
 8003c28:	e7cf      	b.n	8003bca <_malloc_r+0x4a>
 8003c2a:	bf00      	nop
 8003c2c:	20000140 	.word	0x20000140
 8003c30:	20000144 	.word	0x20000144

08003c34 <_sbrk_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	2300      	movs	r3, #0
 8003c38:	4d05      	ldr	r5, [pc, #20]	; (8003c50 <_sbrk_r+0x1c>)
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	602b      	str	r3, [r5, #0]
 8003c40:	f7fc fd84 	bl	800074c <_sbrk>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_sbrk_r+0x1a>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_sbrk_r+0x1a>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	20000260 	.word	0x20000260

08003c54 <siprintf>:
 8003c54:	b40e      	push	{r1, r2, r3}
 8003c56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c5a:	b500      	push	{lr}
 8003c5c:	b09c      	sub	sp, #112	; 0x70
 8003c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c60:	9002      	str	r0, [sp, #8]
 8003c62:	9006      	str	r0, [sp, #24]
 8003c64:	9107      	str	r1, [sp, #28]
 8003c66:	9104      	str	r1, [sp, #16]
 8003c68:	4808      	ldr	r0, [pc, #32]	; (8003c8c <siprintf+0x38>)
 8003c6a:	4909      	ldr	r1, [pc, #36]	; (8003c90 <siprintf+0x3c>)
 8003c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c70:	9105      	str	r1, [sp, #20]
 8003c72:	6800      	ldr	r0, [r0, #0]
 8003c74:	a902      	add	r1, sp, #8
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	f000 f874 	bl	8003d64 <_svfiprintf_r>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	9b02      	ldr	r3, [sp, #8]
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	b01c      	add	sp, #112	; 0x70
 8003c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c88:	b003      	add	sp, #12
 8003c8a:	4770      	bx	lr
 8003c8c:	20000068 	.word	0x20000068
 8003c90:	ffff0208 	.word	0xffff0208

08003c94 <__malloc_lock>:
 8003c94:	4801      	ldr	r0, [pc, #4]	; (8003c9c <__malloc_lock+0x8>)
 8003c96:	f000 bafb 	b.w	8004290 <__retarget_lock_acquire_recursive>
 8003c9a:	bf00      	nop
 8003c9c:	20000268 	.word	0x20000268

08003ca0 <__malloc_unlock>:
 8003ca0:	4801      	ldr	r0, [pc, #4]	; (8003ca8 <__malloc_unlock+0x8>)
 8003ca2:	f000 baf6 	b.w	8004292 <__retarget_lock_release_recursive>
 8003ca6:	bf00      	nop
 8003ca8:	20000268 	.word	0x20000268

08003cac <__ssputs_r>:
 8003cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb0:	688e      	ldr	r6, [r1, #8]
 8003cb2:	4682      	mov	sl, r0
 8003cb4:	429e      	cmp	r6, r3
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	4690      	mov	r8, r2
 8003cba:	461f      	mov	r7, r3
 8003cbc:	d838      	bhi.n	8003d30 <__ssputs_r+0x84>
 8003cbe:	898a      	ldrh	r2, [r1, #12]
 8003cc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cc4:	d032      	beq.n	8003d2c <__ssputs_r+0x80>
 8003cc6:	6825      	ldr	r5, [r4, #0]
 8003cc8:	6909      	ldr	r1, [r1, #16]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	eba5 0901 	sub.w	r9, r5, r1
 8003cd0:	6965      	ldr	r5, [r4, #20]
 8003cd2:	444b      	add	r3, r9
 8003cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cdc:	106d      	asrs	r5, r5, #1
 8003cde:	429d      	cmp	r5, r3
 8003ce0:	bf38      	it	cc
 8003ce2:	461d      	movcc	r5, r3
 8003ce4:	0553      	lsls	r3, r2, #21
 8003ce6:	d531      	bpl.n	8003d4c <__ssputs_r+0xa0>
 8003ce8:	4629      	mov	r1, r5
 8003cea:	f7ff ff49 	bl	8003b80 <_malloc_r>
 8003cee:	4606      	mov	r6, r0
 8003cf0:	b950      	cbnz	r0, 8003d08 <__ssputs_r+0x5c>
 8003cf2:	230c      	movs	r3, #12
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	f8ca 3000 	str.w	r3, [sl]
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d08:	464a      	mov	r2, r9
 8003d0a:	6921      	ldr	r1, [r4, #16]
 8003d0c:	f000 fad0 	bl	80042b0 <memcpy>
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d1a:	81a3      	strh	r3, [r4, #12]
 8003d1c:	6126      	str	r6, [r4, #16]
 8003d1e:	444e      	add	r6, r9
 8003d20:	6026      	str	r6, [r4, #0]
 8003d22:	463e      	mov	r6, r7
 8003d24:	6165      	str	r5, [r4, #20]
 8003d26:	eba5 0509 	sub.w	r5, r5, r9
 8003d2a:	60a5      	str	r5, [r4, #8]
 8003d2c:	42be      	cmp	r6, r7
 8003d2e:	d900      	bls.n	8003d32 <__ssputs_r+0x86>
 8003d30:	463e      	mov	r6, r7
 8003d32:	4632      	mov	r2, r6
 8003d34:	4641      	mov	r1, r8
 8003d36:	6820      	ldr	r0, [r4, #0]
 8003d38:	f000 fac8 	bl	80042cc <memmove>
 8003d3c:	68a3      	ldr	r3, [r4, #8]
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	1b9b      	subs	r3, r3, r6
 8003d42:	4432      	add	r2, r6
 8003d44:	2000      	movs	r0, #0
 8003d46:	60a3      	str	r3, [r4, #8]
 8003d48:	6022      	str	r2, [r4, #0]
 8003d4a:	e7db      	b.n	8003d04 <__ssputs_r+0x58>
 8003d4c:	462a      	mov	r2, r5
 8003d4e:	f000 fad7 	bl	8004300 <_realloc_r>
 8003d52:	4606      	mov	r6, r0
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d1e1      	bne.n	8003d1c <__ssputs_r+0x70>
 8003d58:	4650      	mov	r0, sl
 8003d5a:	6921      	ldr	r1, [r4, #16]
 8003d5c:	f7ff fec4 	bl	8003ae8 <_free_r>
 8003d60:	e7c7      	b.n	8003cf2 <__ssputs_r+0x46>
	...

08003d64 <_svfiprintf_r>:
 8003d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d68:	4698      	mov	r8, r3
 8003d6a:	898b      	ldrh	r3, [r1, #12]
 8003d6c:	4607      	mov	r7, r0
 8003d6e:	061b      	lsls	r3, r3, #24
 8003d70:	460d      	mov	r5, r1
 8003d72:	4614      	mov	r4, r2
 8003d74:	b09d      	sub	sp, #116	; 0x74
 8003d76:	d50e      	bpl.n	8003d96 <_svfiprintf_r+0x32>
 8003d78:	690b      	ldr	r3, [r1, #16]
 8003d7a:	b963      	cbnz	r3, 8003d96 <_svfiprintf_r+0x32>
 8003d7c:	2140      	movs	r1, #64	; 0x40
 8003d7e:	f7ff feff 	bl	8003b80 <_malloc_r>
 8003d82:	6028      	str	r0, [r5, #0]
 8003d84:	6128      	str	r0, [r5, #16]
 8003d86:	b920      	cbnz	r0, 8003d92 <_svfiprintf_r+0x2e>
 8003d88:	230c      	movs	r3, #12
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d90:	e0d1      	b.n	8003f36 <_svfiprintf_r+0x1d2>
 8003d92:	2340      	movs	r3, #64	; 0x40
 8003d94:	616b      	str	r3, [r5, #20]
 8003d96:	2300      	movs	r3, #0
 8003d98:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9a:	2320      	movs	r3, #32
 8003d9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003da0:	2330      	movs	r3, #48	; 0x30
 8003da2:	f04f 0901 	mov.w	r9, #1
 8003da6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003daa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003f50 <_svfiprintf_r+0x1ec>
 8003dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003db2:	4623      	mov	r3, r4
 8003db4:	469a      	mov	sl, r3
 8003db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dba:	b10a      	cbz	r2, 8003dc0 <_svfiprintf_r+0x5c>
 8003dbc:	2a25      	cmp	r2, #37	; 0x25
 8003dbe:	d1f9      	bne.n	8003db4 <_svfiprintf_r+0x50>
 8003dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8003dc4:	d00b      	beq.n	8003dde <_svfiprintf_r+0x7a>
 8003dc6:	465b      	mov	r3, fp
 8003dc8:	4622      	mov	r2, r4
 8003dca:	4629      	mov	r1, r5
 8003dcc:	4638      	mov	r0, r7
 8003dce:	f7ff ff6d 	bl	8003cac <__ssputs_r>
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	f000 80aa 	beq.w	8003f2c <_svfiprintf_r+0x1c8>
 8003dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dda:	445a      	add	r2, fp
 8003ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8003dde:	f89a 3000 	ldrb.w	r3, [sl]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80a2 	beq.w	8003f2c <_svfiprintf_r+0x1c8>
 8003de8:	2300      	movs	r3, #0
 8003dea:	f04f 32ff 	mov.w	r2, #4294967295
 8003dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003df2:	f10a 0a01 	add.w	sl, sl, #1
 8003df6:	9304      	str	r3, [sp, #16]
 8003df8:	9307      	str	r3, [sp, #28]
 8003dfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dfe:	931a      	str	r3, [sp, #104]	; 0x68
 8003e00:	4654      	mov	r4, sl
 8003e02:	2205      	movs	r2, #5
 8003e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e08:	4851      	ldr	r0, [pc, #324]	; (8003f50 <_svfiprintf_r+0x1ec>)
 8003e0a:	f000 fa43 	bl	8004294 <memchr>
 8003e0e:	9a04      	ldr	r2, [sp, #16]
 8003e10:	b9d8      	cbnz	r0, 8003e4a <_svfiprintf_r+0xe6>
 8003e12:	06d0      	lsls	r0, r2, #27
 8003e14:	bf44      	itt	mi
 8003e16:	2320      	movmi	r3, #32
 8003e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e1c:	0711      	lsls	r1, r2, #28
 8003e1e:	bf44      	itt	mi
 8003e20:	232b      	movmi	r3, #43	; 0x2b
 8003e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003e26:	f89a 3000 	ldrb.w	r3, [sl]
 8003e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8003e2c:	d015      	beq.n	8003e5a <_svfiprintf_r+0xf6>
 8003e2e:	4654      	mov	r4, sl
 8003e30:	2000      	movs	r0, #0
 8003e32:	f04f 0c0a 	mov.w	ip, #10
 8003e36:	9a07      	ldr	r2, [sp, #28]
 8003e38:	4621      	mov	r1, r4
 8003e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e3e:	3b30      	subs	r3, #48	; 0x30
 8003e40:	2b09      	cmp	r3, #9
 8003e42:	d94e      	bls.n	8003ee2 <_svfiprintf_r+0x17e>
 8003e44:	b1b0      	cbz	r0, 8003e74 <_svfiprintf_r+0x110>
 8003e46:	9207      	str	r2, [sp, #28]
 8003e48:	e014      	b.n	8003e74 <_svfiprintf_r+0x110>
 8003e4a:	eba0 0308 	sub.w	r3, r0, r8
 8003e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8003e52:	4313      	orrs	r3, r2
 8003e54:	46a2      	mov	sl, r4
 8003e56:	9304      	str	r3, [sp, #16]
 8003e58:	e7d2      	b.n	8003e00 <_svfiprintf_r+0x9c>
 8003e5a:	9b03      	ldr	r3, [sp, #12]
 8003e5c:	1d19      	adds	r1, r3, #4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	9103      	str	r1, [sp, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bfbb      	ittet	lt
 8003e66:	425b      	neglt	r3, r3
 8003e68:	f042 0202 	orrlt.w	r2, r2, #2
 8003e6c:	9307      	strge	r3, [sp, #28]
 8003e6e:	9307      	strlt	r3, [sp, #28]
 8003e70:	bfb8      	it	lt
 8003e72:	9204      	strlt	r2, [sp, #16]
 8003e74:	7823      	ldrb	r3, [r4, #0]
 8003e76:	2b2e      	cmp	r3, #46	; 0x2e
 8003e78:	d10c      	bne.n	8003e94 <_svfiprintf_r+0x130>
 8003e7a:	7863      	ldrb	r3, [r4, #1]
 8003e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e7e:	d135      	bne.n	8003eec <_svfiprintf_r+0x188>
 8003e80:	9b03      	ldr	r3, [sp, #12]
 8003e82:	3402      	adds	r4, #2
 8003e84:	1d1a      	adds	r2, r3, #4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	9203      	str	r2, [sp, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bfb8      	it	lt
 8003e8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e92:	9305      	str	r3, [sp, #20]
 8003e94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003f60 <_svfiprintf_r+0x1fc>
 8003e98:	2203      	movs	r2, #3
 8003e9a:	4650      	mov	r0, sl
 8003e9c:	7821      	ldrb	r1, [r4, #0]
 8003e9e:	f000 f9f9 	bl	8004294 <memchr>
 8003ea2:	b140      	cbz	r0, 8003eb6 <_svfiprintf_r+0x152>
 8003ea4:	2340      	movs	r3, #64	; 0x40
 8003ea6:	eba0 000a 	sub.w	r0, r0, sl
 8003eaa:	fa03 f000 	lsl.w	r0, r3, r0
 8003eae:	9b04      	ldr	r3, [sp, #16]
 8003eb0:	3401      	adds	r4, #1
 8003eb2:	4303      	orrs	r3, r0
 8003eb4:	9304      	str	r3, [sp, #16]
 8003eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eba:	2206      	movs	r2, #6
 8003ebc:	4825      	ldr	r0, [pc, #148]	; (8003f54 <_svfiprintf_r+0x1f0>)
 8003ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ec2:	f000 f9e7 	bl	8004294 <memchr>
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d038      	beq.n	8003f3c <_svfiprintf_r+0x1d8>
 8003eca:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <_svfiprintf_r+0x1f4>)
 8003ecc:	bb1b      	cbnz	r3, 8003f16 <_svfiprintf_r+0x1b2>
 8003ece:	9b03      	ldr	r3, [sp, #12]
 8003ed0:	3307      	adds	r3, #7
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	9303      	str	r3, [sp, #12]
 8003eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003edc:	4433      	add	r3, r6
 8003ede:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee0:	e767      	b.n	8003db2 <_svfiprintf_r+0x4e>
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eea:	e7a5      	b.n	8003e38 <_svfiprintf_r+0xd4>
 8003eec:	2300      	movs	r3, #0
 8003eee:	f04f 0c0a 	mov.w	ip, #10
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	3401      	adds	r4, #1
 8003ef6:	9305      	str	r3, [sp, #20]
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003efe:	3a30      	subs	r2, #48	; 0x30
 8003f00:	2a09      	cmp	r2, #9
 8003f02:	d903      	bls.n	8003f0c <_svfiprintf_r+0x1a8>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0c5      	beq.n	8003e94 <_svfiprintf_r+0x130>
 8003f08:	9105      	str	r1, [sp, #20]
 8003f0a:	e7c3      	b.n	8003e94 <_svfiprintf_r+0x130>
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	2301      	movs	r3, #1
 8003f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f14:	e7f0      	b.n	8003ef8 <_svfiprintf_r+0x194>
 8003f16:	ab03      	add	r3, sp, #12
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	462a      	mov	r2, r5
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <_svfiprintf_r+0x1f8>)
 8003f20:	a904      	add	r1, sp, #16
 8003f22:	f3af 8000 	nop.w
 8003f26:	1c42      	adds	r2, r0, #1
 8003f28:	4606      	mov	r6, r0
 8003f2a:	d1d6      	bne.n	8003eda <_svfiprintf_r+0x176>
 8003f2c:	89ab      	ldrh	r3, [r5, #12]
 8003f2e:	065b      	lsls	r3, r3, #25
 8003f30:	f53f af2c 	bmi.w	8003d8c <_svfiprintf_r+0x28>
 8003f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f36:	b01d      	add	sp, #116	; 0x74
 8003f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3c:	ab03      	add	r3, sp, #12
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	462a      	mov	r2, r5
 8003f42:	4638      	mov	r0, r7
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <_svfiprintf_r+0x1f8>)
 8003f46:	a904      	add	r1, sp, #16
 8003f48:	f000 f87c 	bl	8004044 <_printf_i>
 8003f4c:	e7eb      	b.n	8003f26 <_svfiprintf_r+0x1c2>
 8003f4e:	bf00      	nop
 8003f50:	080043e4 	.word	0x080043e4
 8003f54:	080043ee 	.word	0x080043ee
 8003f58:	00000000 	.word	0x00000000
 8003f5c:	08003cad 	.word	0x08003cad
 8003f60:	080043ea 	.word	0x080043ea

08003f64 <_printf_common>:
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	4616      	mov	r6, r2
 8003f6a:	4699      	mov	r9, r3
 8003f6c:	688a      	ldr	r2, [r1, #8]
 8003f6e:	690b      	ldr	r3, [r1, #16]
 8003f70:	4607      	mov	r7, r0
 8003f72:	4293      	cmp	r3, r2
 8003f74:	bfb8      	it	lt
 8003f76:	4613      	movlt	r3, r2
 8003f78:	6033      	str	r3, [r6, #0]
 8003f7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f7e:	460c      	mov	r4, r1
 8003f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f84:	b10a      	cbz	r2, 8003f8a <_printf_common+0x26>
 8003f86:	3301      	adds	r3, #1
 8003f88:	6033      	str	r3, [r6, #0]
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	0699      	lsls	r1, r3, #26
 8003f8e:	bf42      	ittt	mi
 8003f90:	6833      	ldrmi	r3, [r6, #0]
 8003f92:	3302      	addmi	r3, #2
 8003f94:	6033      	strmi	r3, [r6, #0]
 8003f96:	6825      	ldr	r5, [r4, #0]
 8003f98:	f015 0506 	ands.w	r5, r5, #6
 8003f9c:	d106      	bne.n	8003fac <_printf_common+0x48>
 8003f9e:	f104 0a19 	add.w	sl, r4, #25
 8003fa2:	68e3      	ldr	r3, [r4, #12]
 8003fa4:	6832      	ldr	r2, [r6, #0]
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	42ab      	cmp	r3, r5
 8003faa:	dc28      	bgt.n	8003ffe <_printf_common+0x9a>
 8003fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003fb0:	1e13      	subs	r3, r2, #0
 8003fb2:	6822      	ldr	r2, [r4, #0]
 8003fb4:	bf18      	it	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	0692      	lsls	r2, r2, #26
 8003fba:	d42d      	bmi.n	8004018 <_printf_common+0xb4>
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	4638      	mov	r0, r7
 8003fc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fc4:	47c0      	blx	r8
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	d020      	beq.n	800400c <_printf_common+0xa8>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	68e5      	ldr	r5, [r4, #12]
 8003fce:	f003 0306 	and.w	r3, r3, #6
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	bf18      	it	ne
 8003fd6:	2500      	movne	r5, #0
 8003fd8:	6832      	ldr	r2, [r6, #0]
 8003fda:	f04f 0600 	mov.w	r6, #0
 8003fde:	68a3      	ldr	r3, [r4, #8]
 8003fe0:	bf08      	it	eq
 8003fe2:	1aad      	subeq	r5, r5, r2
 8003fe4:	6922      	ldr	r2, [r4, #16]
 8003fe6:	bf08      	it	eq
 8003fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fec:	4293      	cmp	r3, r2
 8003fee:	bfc4      	itt	gt
 8003ff0:	1a9b      	subgt	r3, r3, r2
 8003ff2:	18ed      	addgt	r5, r5, r3
 8003ff4:	341a      	adds	r4, #26
 8003ff6:	42b5      	cmp	r5, r6
 8003ff8:	d11a      	bne.n	8004030 <_printf_common+0xcc>
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	e008      	b.n	8004010 <_printf_common+0xac>
 8003ffe:	2301      	movs	r3, #1
 8004000:	4652      	mov	r2, sl
 8004002:	4649      	mov	r1, r9
 8004004:	4638      	mov	r0, r7
 8004006:	47c0      	blx	r8
 8004008:	3001      	adds	r0, #1
 800400a:	d103      	bne.n	8004014 <_printf_common+0xb0>
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
 8004010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004014:	3501      	adds	r5, #1
 8004016:	e7c4      	b.n	8003fa2 <_printf_common+0x3e>
 8004018:	2030      	movs	r0, #48	; 0x30
 800401a:	18e1      	adds	r1, r4, r3
 800401c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004026:	4422      	add	r2, r4
 8004028:	3302      	adds	r3, #2
 800402a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800402e:	e7c5      	b.n	8003fbc <_printf_common+0x58>
 8004030:	2301      	movs	r3, #1
 8004032:	4622      	mov	r2, r4
 8004034:	4649      	mov	r1, r9
 8004036:	4638      	mov	r0, r7
 8004038:	47c0      	blx	r8
 800403a:	3001      	adds	r0, #1
 800403c:	d0e6      	beq.n	800400c <_printf_common+0xa8>
 800403e:	3601      	adds	r6, #1
 8004040:	e7d9      	b.n	8003ff6 <_printf_common+0x92>
	...

08004044 <_printf_i>:
 8004044:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004048:	460c      	mov	r4, r1
 800404a:	7e27      	ldrb	r7, [r4, #24]
 800404c:	4691      	mov	r9, r2
 800404e:	2f78      	cmp	r7, #120	; 0x78
 8004050:	4680      	mov	r8, r0
 8004052:	469a      	mov	sl, r3
 8004054:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004056:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800405a:	d807      	bhi.n	800406c <_printf_i+0x28>
 800405c:	2f62      	cmp	r7, #98	; 0x62
 800405e:	d80a      	bhi.n	8004076 <_printf_i+0x32>
 8004060:	2f00      	cmp	r7, #0
 8004062:	f000 80d9 	beq.w	8004218 <_printf_i+0x1d4>
 8004066:	2f58      	cmp	r7, #88	; 0x58
 8004068:	f000 80a4 	beq.w	80041b4 <_printf_i+0x170>
 800406c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004070:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004074:	e03a      	b.n	80040ec <_printf_i+0xa8>
 8004076:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800407a:	2b15      	cmp	r3, #21
 800407c:	d8f6      	bhi.n	800406c <_printf_i+0x28>
 800407e:	a001      	add	r0, pc, #4	; (adr r0, 8004084 <_printf_i+0x40>)
 8004080:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004084:	080040dd 	.word	0x080040dd
 8004088:	080040f1 	.word	0x080040f1
 800408c:	0800406d 	.word	0x0800406d
 8004090:	0800406d 	.word	0x0800406d
 8004094:	0800406d 	.word	0x0800406d
 8004098:	0800406d 	.word	0x0800406d
 800409c:	080040f1 	.word	0x080040f1
 80040a0:	0800406d 	.word	0x0800406d
 80040a4:	0800406d 	.word	0x0800406d
 80040a8:	0800406d 	.word	0x0800406d
 80040ac:	0800406d 	.word	0x0800406d
 80040b0:	080041ff 	.word	0x080041ff
 80040b4:	08004121 	.word	0x08004121
 80040b8:	080041e1 	.word	0x080041e1
 80040bc:	0800406d 	.word	0x0800406d
 80040c0:	0800406d 	.word	0x0800406d
 80040c4:	08004221 	.word	0x08004221
 80040c8:	0800406d 	.word	0x0800406d
 80040cc:	08004121 	.word	0x08004121
 80040d0:	0800406d 	.word	0x0800406d
 80040d4:	0800406d 	.word	0x0800406d
 80040d8:	080041e9 	.word	0x080041e9
 80040dc:	680b      	ldr	r3, [r1, #0]
 80040de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040e2:	1d1a      	adds	r2, r3, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	600a      	str	r2, [r1, #0]
 80040e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040ec:	2301      	movs	r3, #1
 80040ee:	e0a4      	b.n	800423a <_printf_i+0x1f6>
 80040f0:	6825      	ldr	r5, [r4, #0]
 80040f2:	6808      	ldr	r0, [r1, #0]
 80040f4:	062e      	lsls	r6, r5, #24
 80040f6:	f100 0304 	add.w	r3, r0, #4
 80040fa:	d50a      	bpl.n	8004112 <_printf_i+0xce>
 80040fc:	6805      	ldr	r5, [r0, #0]
 80040fe:	600b      	str	r3, [r1, #0]
 8004100:	2d00      	cmp	r5, #0
 8004102:	da03      	bge.n	800410c <_printf_i+0xc8>
 8004104:	232d      	movs	r3, #45	; 0x2d
 8004106:	426d      	negs	r5, r5
 8004108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410c:	230a      	movs	r3, #10
 800410e:	485e      	ldr	r0, [pc, #376]	; (8004288 <_printf_i+0x244>)
 8004110:	e019      	b.n	8004146 <_printf_i+0x102>
 8004112:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004116:	6805      	ldr	r5, [r0, #0]
 8004118:	600b      	str	r3, [r1, #0]
 800411a:	bf18      	it	ne
 800411c:	b22d      	sxthne	r5, r5
 800411e:	e7ef      	b.n	8004100 <_printf_i+0xbc>
 8004120:	680b      	ldr	r3, [r1, #0]
 8004122:	6825      	ldr	r5, [r4, #0]
 8004124:	1d18      	adds	r0, r3, #4
 8004126:	6008      	str	r0, [r1, #0]
 8004128:	0628      	lsls	r0, r5, #24
 800412a:	d501      	bpl.n	8004130 <_printf_i+0xec>
 800412c:	681d      	ldr	r5, [r3, #0]
 800412e:	e002      	b.n	8004136 <_printf_i+0xf2>
 8004130:	0669      	lsls	r1, r5, #25
 8004132:	d5fb      	bpl.n	800412c <_printf_i+0xe8>
 8004134:	881d      	ldrh	r5, [r3, #0]
 8004136:	2f6f      	cmp	r7, #111	; 0x6f
 8004138:	bf0c      	ite	eq
 800413a:	2308      	moveq	r3, #8
 800413c:	230a      	movne	r3, #10
 800413e:	4852      	ldr	r0, [pc, #328]	; (8004288 <_printf_i+0x244>)
 8004140:	2100      	movs	r1, #0
 8004142:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004146:	6866      	ldr	r6, [r4, #4]
 8004148:	2e00      	cmp	r6, #0
 800414a:	bfa8      	it	ge
 800414c:	6821      	ldrge	r1, [r4, #0]
 800414e:	60a6      	str	r6, [r4, #8]
 8004150:	bfa4      	itt	ge
 8004152:	f021 0104 	bicge.w	r1, r1, #4
 8004156:	6021      	strge	r1, [r4, #0]
 8004158:	b90d      	cbnz	r5, 800415e <_printf_i+0x11a>
 800415a:	2e00      	cmp	r6, #0
 800415c:	d04d      	beq.n	80041fa <_printf_i+0x1b6>
 800415e:	4616      	mov	r6, r2
 8004160:	fbb5 f1f3 	udiv	r1, r5, r3
 8004164:	fb03 5711 	mls	r7, r3, r1, r5
 8004168:	5dc7      	ldrb	r7, [r0, r7]
 800416a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800416e:	462f      	mov	r7, r5
 8004170:	42bb      	cmp	r3, r7
 8004172:	460d      	mov	r5, r1
 8004174:	d9f4      	bls.n	8004160 <_printf_i+0x11c>
 8004176:	2b08      	cmp	r3, #8
 8004178:	d10b      	bne.n	8004192 <_printf_i+0x14e>
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	07df      	lsls	r7, r3, #31
 800417e:	d508      	bpl.n	8004192 <_printf_i+0x14e>
 8004180:	6923      	ldr	r3, [r4, #16]
 8004182:	6861      	ldr	r1, [r4, #4]
 8004184:	4299      	cmp	r1, r3
 8004186:	bfde      	ittt	le
 8004188:	2330      	movle	r3, #48	; 0x30
 800418a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800418e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004192:	1b92      	subs	r2, r2, r6
 8004194:	6122      	str	r2, [r4, #16]
 8004196:	464b      	mov	r3, r9
 8004198:	4621      	mov	r1, r4
 800419a:	4640      	mov	r0, r8
 800419c:	f8cd a000 	str.w	sl, [sp]
 80041a0:	aa03      	add	r2, sp, #12
 80041a2:	f7ff fedf 	bl	8003f64 <_printf_common>
 80041a6:	3001      	adds	r0, #1
 80041a8:	d14c      	bne.n	8004244 <_printf_i+0x200>
 80041aa:	f04f 30ff 	mov.w	r0, #4294967295
 80041ae:	b004      	add	sp, #16
 80041b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041b4:	4834      	ldr	r0, [pc, #208]	; (8004288 <_printf_i+0x244>)
 80041b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80041ba:	680e      	ldr	r6, [r1, #0]
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	f856 5b04 	ldr.w	r5, [r6], #4
 80041c2:	061f      	lsls	r7, r3, #24
 80041c4:	600e      	str	r6, [r1, #0]
 80041c6:	d514      	bpl.n	80041f2 <_printf_i+0x1ae>
 80041c8:	07d9      	lsls	r1, r3, #31
 80041ca:	bf44      	itt	mi
 80041cc:	f043 0320 	orrmi.w	r3, r3, #32
 80041d0:	6023      	strmi	r3, [r4, #0]
 80041d2:	b91d      	cbnz	r5, 80041dc <_printf_i+0x198>
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	f023 0320 	bic.w	r3, r3, #32
 80041da:	6023      	str	r3, [r4, #0]
 80041dc:	2310      	movs	r3, #16
 80041de:	e7af      	b.n	8004140 <_printf_i+0xfc>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	f043 0320 	orr.w	r3, r3, #32
 80041e6:	6023      	str	r3, [r4, #0]
 80041e8:	2378      	movs	r3, #120	; 0x78
 80041ea:	4828      	ldr	r0, [pc, #160]	; (800428c <_printf_i+0x248>)
 80041ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041f0:	e7e3      	b.n	80041ba <_printf_i+0x176>
 80041f2:	065e      	lsls	r6, r3, #25
 80041f4:	bf48      	it	mi
 80041f6:	b2ad      	uxthmi	r5, r5
 80041f8:	e7e6      	b.n	80041c8 <_printf_i+0x184>
 80041fa:	4616      	mov	r6, r2
 80041fc:	e7bb      	b.n	8004176 <_printf_i+0x132>
 80041fe:	680b      	ldr	r3, [r1, #0]
 8004200:	6826      	ldr	r6, [r4, #0]
 8004202:	1d1d      	adds	r5, r3, #4
 8004204:	6960      	ldr	r0, [r4, #20]
 8004206:	600d      	str	r5, [r1, #0]
 8004208:	0635      	lsls	r5, r6, #24
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	d501      	bpl.n	8004212 <_printf_i+0x1ce>
 800420e:	6018      	str	r0, [r3, #0]
 8004210:	e002      	b.n	8004218 <_printf_i+0x1d4>
 8004212:	0671      	lsls	r1, r6, #25
 8004214:	d5fb      	bpl.n	800420e <_printf_i+0x1ca>
 8004216:	8018      	strh	r0, [r3, #0]
 8004218:	2300      	movs	r3, #0
 800421a:	4616      	mov	r6, r2
 800421c:	6123      	str	r3, [r4, #16]
 800421e:	e7ba      	b.n	8004196 <_printf_i+0x152>
 8004220:	680b      	ldr	r3, [r1, #0]
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	600a      	str	r2, [r1, #0]
 8004226:	681e      	ldr	r6, [r3, #0]
 8004228:	2100      	movs	r1, #0
 800422a:	4630      	mov	r0, r6
 800422c:	6862      	ldr	r2, [r4, #4]
 800422e:	f000 f831 	bl	8004294 <memchr>
 8004232:	b108      	cbz	r0, 8004238 <_printf_i+0x1f4>
 8004234:	1b80      	subs	r0, r0, r6
 8004236:	6060      	str	r0, [r4, #4]
 8004238:	6863      	ldr	r3, [r4, #4]
 800423a:	6123      	str	r3, [r4, #16]
 800423c:	2300      	movs	r3, #0
 800423e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004242:	e7a8      	b.n	8004196 <_printf_i+0x152>
 8004244:	4632      	mov	r2, r6
 8004246:	4649      	mov	r1, r9
 8004248:	4640      	mov	r0, r8
 800424a:	6923      	ldr	r3, [r4, #16]
 800424c:	47d0      	blx	sl
 800424e:	3001      	adds	r0, #1
 8004250:	d0ab      	beq.n	80041aa <_printf_i+0x166>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	079b      	lsls	r3, r3, #30
 8004256:	d413      	bmi.n	8004280 <_printf_i+0x23c>
 8004258:	68e0      	ldr	r0, [r4, #12]
 800425a:	9b03      	ldr	r3, [sp, #12]
 800425c:	4298      	cmp	r0, r3
 800425e:	bfb8      	it	lt
 8004260:	4618      	movlt	r0, r3
 8004262:	e7a4      	b.n	80041ae <_printf_i+0x16a>
 8004264:	2301      	movs	r3, #1
 8004266:	4632      	mov	r2, r6
 8004268:	4649      	mov	r1, r9
 800426a:	4640      	mov	r0, r8
 800426c:	47d0      	blx	sl
 800426e:	3001      	adds	r0, #1
 8004270:	d09b      	beq.n	80041aa <_printf_i+0x166>
 8004272:	3501      	adds	r5, #1
 8004274:	68e3      	ldr	r3, [r4, #12]
 8004276:	9903      	ldr	r1, [sp, #12]
 8004278:	1a5b      	subs	r3, r3, r1
 800427a:	42ab      	cmp	r3, r5
 800427c:	dcf2      	bgt.n	8004264 <_printf_i+0x220>
 800427e:	e7eb      	b.n	8004258 <_printf_i+0x214>
 8004280:	2500      	movs	r5, #0
 8004282:	f104 0619 	add.w	r6, r4, #25
 8004286:	e7f5      	b.n	8004274 <_printf_i+0x230>
 8004288:	080043f5 	.word	0x080043f5
 800428c:	08004406 	.word	0x08004406

08004290 <__retarget_lock_acquire_recursive>:
 8004290:	4770      	bx	lr

08004292 <__retarget_lock_release_recursive>:
 8004292:	4770      	bx	lr

08004294 <memchr>:
 8004294:	4603      	mov	r3, r0
 8004296:	b510      	push	{r4, lr}
 8004298:	b2c9      	uxtb	r1, r1
 800429a:	4402      	add	r2, r0
 800429c:	4293      	cmp	r3, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	d101      	bne.n	80042a6 <memchr+0x12>
 80042a2:	2000      	movs	r0, #0
 80042a4:	e003      	b.n	80042ae <memchr+0x1a>
 80042a6:	7804      	ldrb	r4, [r0, #0]
 80042a8:	3301      	adds	r3, #1
 80042aa:	428c      	cmp	r4, r1
 80042ac:	d1f6      	bne.n	800429c <memchr+0x8>
 80042ae:	bd10      	pop	{r4, pc}

080042b0 <memcpy>:
 80042b0:	440a      	add	r2, r1
 80042b2:	4291      	cmp	r1, r2
 80042b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042b8:	d100      	bne.n	80042bc <memcpy+0xc>
 80042ba:	4770      	bx	lr
 80042bc:	b510      	push	{r4, lr}
 80042be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c2:	4291      	cmp	r1, r2
 80042c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c8:	d1f9      	bne.n	80042be <memcpy+0xe>
 80042ca:	bd10      	pop	{r4, pc}

080042cc <memmove>:
 80042cc:	4288      	cmp	r0, r1
 80042ce:	b510      	push	{r4, lr}
 80042d0:	eb01 0402 	add.w	r4, r1, r2
 80042d4:	d902      	bls.n	80042dc <memmove+0x10>
 80042d6:	4284      	cmp	r4, r0
 80042d8:	4623      	mov	r3, r4
 80042da:	d807      	bhi.n	80042ec <memmove+0x20>
 80042dc:	1e43      	subs	r3, r0, #1
 80042de:	42a1      	cmp	r1, r4
 80042e0:	d008      	beq.n	80042f4 <memmove+0x28>
 80042e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80042e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80042ea:	e7f8      	b.n	80042de <memmove+0x12>
 80042ec:	4601      	mov	r1, r0
 80042ee:	4402      	add	r2, r0
 80042f0:	428a      	cmp	r2, r1
 80042f2:	d100      	bne.n	80042f6 <memmove+0x2a>
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80042fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80042fe:	e7f7      	b.n	80042f0 <memmove+0x24>

08004300 <_realloc_r>:
 8004300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004302:	4607      	mov	r7, r0
 8004304:	4614      	mov	r4, r2
 8004306:	460e      	mov	r6, r1
 8004308:	b921      	cbnz	r1, 8004314 <_realloc_r+0x14>
 800430a:	4611      	mov	r1, r2
 800430c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004310:	f7ff bc36 	b.w	8003b80 <_malloc_r>
 8004314:	b922      	cbnz	r2, 8004320 <_realloc_r+0x20>
 8004316:	f7ff fbe7 	bl	8003ae8 <_free_r>
 800431a:	4625      	mov	r5, r4
 800431c:	4628      	mov	r0, r5
 800431e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004320:	f000 f814 	bl	800434c <_malloc_usable_size_r>
 8004324:	42a0      	cmp	r0, r4
 8004326:	d20f      	bcs.n	8004348 <_realloc_r+0x48>
 8004328:	4621      	mov	r1, r4
 800432a:	4638      	mov	r0, r7
 800432c:	f7ff fc28 	bl	8003b80 <_malloc_r>
 8004330:	4605      	mov	r5, r0
 8004332:	2800      	cmp	r0, #0
 8004334:	d0f2      	beq.n	800431c <_realloc_r+0x1c>
 8004336:	4631      	mov	r1, r6
 8004338:	4622      	mov	r2, r4
 800433a:	f7ff ffb9 	bl	80042b0 <memcpy>
 800433e:	4631      	mov	r1, r6
 8004340:	4638      	mov	r0, r7
 8004342:	f7ff fbd1 	bl	8003ae8 <_free_r>
 8004346:	e7e9      	b.n	800431c <_realloc_r+0x1c>
 8004348:	4635      	mov	r5, r6
 800434a:	e7e7      	b.n	800431c <_realloc_r+0x1c>

0800434c <_malloc_usable_size_r>:
 800434c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004350:	1f18      	subs	r0, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	bfbc      	itt	lt
 8004356:	580b      	ldrlt	r3, [r1, r0]
 8004358:	18c0      	addlt	r0, r0, r3
 800435a:	4770      	bx	lr

0800435c <_init>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr

08004368 <_fini>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	bf00      	nop
 800436c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800436e:	bc08      	pop	{r3}
 8004370:	469e      	mov	lr, r3
 8004372:	4770      	bx	lr
