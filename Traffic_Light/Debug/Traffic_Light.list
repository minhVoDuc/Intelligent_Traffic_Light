
Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800466c  0800466c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800466c  0800466c  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800466c  0800466c  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200000cc  08004740  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004740  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001517f  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de7  00000000  00000000  00035274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00038060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00038e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e54  00000000  00000000  00039a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ad9  00000000  00000000  000538ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b46c  00000000  00000000  000643c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef831  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a58  00000000  00000000  000ef884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	080045b0 	.word	0x080045b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	080045b0 	.word	0x080045b0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 fcd4 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f81e 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f94a 	bl	80003f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f91e 	bl	800039c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000160:	f000 f85a 	bl	8000218 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 f8a4 	bl	80002b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000168:	4808      	ldr	r0, [pc, #32]	; (800018c <main+0x40>)
 800016a:	f002 fc77 	bl	8002a5c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800016e:	2100      	movs	r1, #0
 8000170:	4807      	ldr	r0, [pc, #28]	; (8000190 <main+0x44>)
 8000172:	f002 fd1d 	bl	8002bb0 <HAL_TIM_PWM_Start>
  timer_init();
 8000176:	f001 fbbb 	bl	80018f0 <timer_init>
  traffic_init();
 800017a:	f000 fc5b 	bl	8000a34 <traffic_init>
  pedestrian_init();
 800017e:	f000 fb3b 	bl	80007f8 <pedestrian_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  traffic_fsm();
 8000182:	f000 fefd 	bl	8000f80 <traffic_fsm>
	  pedestrian_fsm();
 8000186:	f000 fbf3 	bl	8000970 <pedestrian_fsm>
	  traffic_fsm();
 800018a:	e7fa      	b.n	8000182 <main+0x36>
 800018c:	20000158 	.word	0x20000158
 8000190:	200001c8 	.word	0x200001c8

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	; 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	; 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f003 fdc2 	bl	8003d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2302      	movs	r3, #2
 80001b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001be:	2310      	movs	r3, #16
 80001c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c2:	2302      	movs	r3, #2
 80001c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001c6:	2300      	movs	r3, #0
 80001c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ca:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d0:	f107 0318 	add.w	r3, r7, #24
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 ffd7 	bl	8002188 <HAL_RCC_OscConfig>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d001      	beq.n	80001e4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001e0:	f000 f9b4 	bl	800054c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e4:	230f      	movs	r3, #15
 80001e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e8:	2302      	movs	r3, #2
 80001ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2102      	movs	r1, #2
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fa42 	bl	8002688 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800020a:	f000 f99f 	bl	800054c <Error_Handler>
  }
}
 800020e:	bf00      	nop
 8000210:	3740      	adds	r7, #64	; 0x40
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b086      	sub	sp, #24
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800021e:	f107 0308 	add.w	r3, r7, #8
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
 800022a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000234:	4b1d      	ldr	r3, [pc, #116]	; (80002ac <MX_TIM2_Init+0x94>)
 8000236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800023c:	4b1b      	ldr	r3, [pc, #108]	; (80002ac <MX_TIM2_Init+0x94>)
 800023e:	223f      	movs	r2, #63	; 0x3f
 8000240:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000242:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <MX_TIM2_Init+0x94>)
 8000244:	2200      	movs	r2, #0
 8000246:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000248:	4b18      	ldr	r3, [pc, #96]	; (80002ac <MX_TIM2_Init+0x94>)
 800024a:	f242 720f 	movw	r2, #9999	; 0x270f
 800024e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000250:	4b16      	ldr	r3, [pc, #88]	; (80002ac <MX_TIM2_Init+0x94>)
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <MX_TIM2_Init+0x94>)
 8000258:	2200      	movs	r2, #0
 800025a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800025c:	4813      	ldr	r0, [pc, #76]	; (80002ac <MX_TIM2_Init+0x94>)
 800025e:	f002 fbad 	bl	80029bc <HAL_TIM_Base_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000268:	f000 f970 	bl	800054c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800026c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000270:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000272:	f107 0308 	add.w	r3, r7, #8
 8000276:	4619      	mov	r1, r3
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <MX_TIM2_Init+0x94>)
 800027a:	f002 ff01 	bl	8003080 <HAL_TIM_ConfigClockSource>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000284:	f000 f962 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000288:	2300      	movs	r3, #0
 800028a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800028c:	2300      	movs	r3, #0
 800028e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000290:	463b      	mov	r3, r7
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_TIM2_Init+0x94>)
 8000296:	f003 fa7f 	bl	8003798 <HAL_TIMEx_MasterConfigSynchronization>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002a0:	f000 f954 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	3718      	adds	r7, #24
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000158 	.word	0x20000158

080002b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b08e      	sub	sp, #56	; 0x38
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c4:	f107 0320 	add.w	r3, r7, #32
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
 80002dc:	615a      	str	r2, [r3, #20]
 80002de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002e0:	4b2c      	ldr	r3, [pc, #176]	; (8000394 <MX_TIM3_Init+0xe4>)
 80002e2:	4a2d      	ldr	r2, [pc, #180]	; (8000398 <MX_TIM3_Init+0xe8>)
 80002e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80002e6:	4b2b      	ldr	r3, [pc, #172]	; (8000394 <MX_TIM3_Init+0xe4>)
 80002e8:	223f      	movs	r2, #63	; 0x3f
 80002ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ec:	4b29      	ldr	r3, [pc, #164]	; (8000394 <MX_TIM3_Init+0xe4>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80002f2:	4b28      	ldr	r3, [pc, #160]	; (8000394 <MX_TIM3_Init+0xe4>)
 80002f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002fa:	4b26      	ldr	r3, [pc, #152]	; (8000394 <MX_TIM3_Init+0xe4>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000300:	4b24      	ldr	r3, [pc, #144]	; (8000394 <MX_TIM3_Init+0xe4>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000306:	4823      	ldr	r0, [pc, #140]	; (8000394 <MX_TIM3_Init+0xe4>)
 8000308:	f002 fb58 	bl	80029bc <HAL_TIM_Base_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000312:	f000 f91b 	bl	800054c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800031c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000320:	4619      	mov	r1, r3
 8000322:	481c      	ldr	r0, [pc, #112]	; (8000394 <MX_TIM3_Init+0xe4>)
 8000324:	f002 feac 	bl	8003080 <HAL_TIM_ConfigClockSource>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800032e:	f000 f90d 	bl	800054c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000332:	4818      	ldr	r0, [pc, #96]	; (8000394 <MX_TIM3_Init+0xe4>)
 8000334:	f002 fbe4 	bl	8002b00 <HAL_TIM_PWM_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800033e:	f000 f905 	bl	800054c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000342:	2300      	movs	r3, #0
 8000344:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000346:	2300      	movs	r3, #0
 8000348:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800034a:	f107 0320 	add.w	r3, r7, #32
 800034e:	4619      	mov	r1, r3
 8000350:	4810      	ldr	r0, [pc, #64]	; (8000394 <MX_TIM3_Init+0xe4>)
 8000352:	f003 fa21 	bl	8003798 <HAL_TIMEx_MasterConfigSynchronization>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800035c:	f000 f8f6 	bl	800054c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000360:	2360      	movs	r3, #96	; 0x60
 8000362:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	4619      	mov	r1, r3
 8000376:	4807      	ldr	r0, [pc, #28]	; (8000394 <MX_TIM3_Init+0xe4>)
 8000378:	f002 fdc4 	bl	8002f04 <HAL_TIM_PWM_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000382:	f000 f8e3 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000386:	4803      	ldr	r0, [pc, #12]	; (8000394 <MX_TIM3_Init+0xe4>)
 8000388:	f000 f950 	bl	800062c <HAL_TIM_MspPostInit>

}
 800038c:	bf00      	nop
 800038e:	3738      	adds	r7, #56	; 0x38
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	200001c8 	.word	0x200001c8
 8000398:	40000400 	.word	0x40000400

0800039c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <MX_USART2_UART_Init+0x50>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART2_UART_Init+0x4c>)
 80003d4:	f003 fa50 	bl	8003878 <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003de:	f000 f8b5 	bl	800054c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000218 	.word	0x20000218
 80003ec:	40004400 	.word	0x40004400

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000404:	4b45      	ldr	r3, [pc, #276]	; (800051c <MX_GPIO_Init+0x12c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a44      	ldr	r2, [pc, #272]	; (800051c <MX_GPIO_Init+0x12c>)
 800040a:	f043 0310 	orr.w	r3, r3, #16
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b42      	ldr	r3, [pc, #264]	; (800051c <MX_GPIO_Init+0x12c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0310 	and.w	r3, r3, #16
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800041c:	4b3f      	ldr	r3, [pc, #252]	; (800051c <MX_GPIO_Init+0x12c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a3e      	ldr	r2, [pc, #248]	; (800051c <MX_GPIO_Init+0x12c>)
 8000422:	f043 0320 	orr.w	r3, r3, #32
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b3c      	ldr	r3, [pc, #240]	; (800051c <MX_GPIO_Init+0x12c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0320 	and.w	r3, r3, #32
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b39      	ldr	r3, [pc, #228]	; (800051c <MX_GPIO_Init+0x12c>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a38      	ldr	r2, [pc, #224]	; (800051c <MX_GPIO_Init+0x12c>)
 800043a:	f043 0304 	orr.w	r3, r3, #4
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b36      	ldr	r3, [pc, #216]	; (800051c <MX_GPIO_Init+0x12c>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0304 	and.w	r3, r3, #4
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <MX_GPIO_Init+0x12c>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a32      	ldr	r2, [pc, #200]	; (800051c <MX_GPIO_Init+0x12c>)
 8000452:	f043 0308 	orr.w	r3, r3, #8
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b30      	ldr	r3, [pc, #192]	; (800051c <MX_GPIO_Init+0x12c>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0308 	and.w	r3, r3, #8
 8000460:	603b      	str	r3, [r7, #0]
 8000462:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800046a:	482d      	ldr	r0, [pc, #180]	; (8000520 <MX_GPIO_Init+0x130>)
 800046c:	f001 fe51 	bl	8002112 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000476:	482b      	ldr	r0, [pc, #172]	; (8000524 <MX_GPIO_Init+0x134>)
 8000478:	f001 fe4b 	bl	8002112 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800047c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000482:	4b29      	ldr	r3, [pc, #164]	; (8000528 <MX_GPIO_Init+0x138>)
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	4826      	ldr	r0, [pc, #152]	; (800052c <MX_GPIO_Init+0x13c>)
 8000492:	f001 fca3 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_BTN_Pin BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = PD_BTN_Pin|BTN_1_Pin|BTN_2_Pin;
 8000496:	2313      	movs	r3, #19
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800049e:	2301      	movs	r3, #1
 80004a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	481d      	ldr	r0, [pc, #116]	; (8000520 <MX_GPIO_Init+0x130>)
 80004aa:	f001 fc97 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PD_LED_1_Pin TR_LED_A_0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin;
 80004ae:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 80004b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	2301      	movs	r3, #1
 80004b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2302      	movs	r3, #2
 80004be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4816      	ldr	r0, [pc, #88]	; (8000520 <MX_GPIO_Init+0x130>)
 80004c8:	f001 fc88 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin;
 80004cc:	2301      	movs	r3, #1
 80004ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_3_GPIO_Port, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4811      	ldr	r0, [pc, #68]	; (8000524 <MX_GPIO_Init+0x134>)
 80004e0:	f001 fc7c 	bl	8001ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_LED_0_Pin TR_LED_A_1_Pin TR_LED_B_1_Pin TR_LED_B_0_Pin */
  GPIO_InitStruct.Pin = PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin;
 80004e4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80004e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	2301      	movs	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <MX_GPIO_Init+0x134>)
 80004fe:	f001 fc6d 	bl	8001ddc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000502:	2200      	movs	r2, #0
 8000504:	2100      	movs	r1, #0
 8000506:	2028      	movs	r0, #40	; 0x28
 8000508:	f001 fc31 	bl	8001d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800050c:	2028      	movs	r0, #40	; 0x28
 800050e:	f001 fc4a 	bl	8001da6 <HAL_NVIC_EnableIRQ>

}
 8000512:	bf00      	nop
 8000514:	3720      	adds	r7, #32
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	40010800 	.word	0x40010800
 8000524:	40010c00 	.word	0x40010c00
 8000528:	10110000 	.word	0x10110000
 800052c:	40011000 	.word	0x40011000

08000530 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	timer_run();
 8000538:	f001 f9e8 	bl	800190c <timer_run>
	button_reading();
 800053c:	f000 fe4a 	bl	80011d4 <button_reading>
	duration_run();
 8000540:	f000 ffe0 	bl	8001504 <duration_run>
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000550:	b672      	cpsid	i
}
 8000552:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000554:	e7fe      	b.n	8000554 <Error_Handler+0x8>
	...

08000558 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_MspInit+0x5c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <HAL_MspInit+0x5c>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <HAL_MspInit+0x5c>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <HAL_MspInit+0x5c>)
 800057c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_MspInit+0x60>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <HAL_MspInit+0x60>)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010000 	.word	0x40010000

080005bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005cc:	d114      	bne.n	80005f8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <HAL_TIM_Base_MspInit+0x68>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a14      	ldr	r2, [pc, #80]	; (8000624 <HAL_TIM_Base_MspInit+0x68>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_TIM_Base_MspInit+0x68>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	201c      	movs	r0, #28
 80005ec:	f001 fbbf 	bl	8001d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005f0:	201c      	movs	r0, #28
 80005f2:	f001 fbd8 	bl	8001da6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005f6:	e010      	b.n	800061a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <HAL_TIM_Base_MspInit+0x6c>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d10b      	bne.n	800061a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <HAL_TIM_Base_MspInit+0x68>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	4a07      	ldr	r2, [pc, #28]	; (8000624 <HAL_TIM_Base_MspInit+0x68>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	61d3      	str	r3, [r2, #28]
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_TIM_Base_MspInit+0x68>)
 8000610:	69db      	ldr	r3, [r3, #28]
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40021000 	.word	0x40021000
 8000628:	40000400 	.word	0x40000400

0800062c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a0f      	ldr	r2, [pc, #60]	; (8000684 <HAL_TIM_MspPostInit+0x58>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d117      	bne.n	800067c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_TIM_MspPostInit+0x5c>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <HAL_TIM_MspPostInit+0x5c>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <HAL_TIM_MspPostInit+0x5c>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PD_BUZZER_Pin;
 8000664:	2340      	movs	r3, #64	; 0x40
 8000666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PD_BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <HAL_TIM_MspPostInit+0x60>)
 8000678:	f001 fbb0 	bl	8001ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40000400 	.word	0x40000400
 8000688:	40021000 	.word	0x40021000
 800068c:	40010800 	.word	0x40010800

08000690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <HAL_UART_MspInit+0x70>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d123      	bne.n	80006f8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <HAL_UART_MspInit+0x74>)
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	4a13      	ldr	r2, [pc, #76]	; (8000704 <HAL_UART_MspInit+0x74>)
 80006b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ba:	61d3      	str	r3, [r2, #28]
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <HAL_UART_MspInit+0x74>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <HAL_UART_MspInit+0x74>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a0d      	ldr	r2, [pc, #52]	; (8000704 <HAL_UART_MspInit+0x74>)
 80006ce:	f043 0304 	orr.w	r3, r3, #4
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <HAL_UART_MspInit+0x74>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80006e0:	230c      	movs	r3, #12
 80006e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4619      	mov	r1, r3
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <HAL_UART_MspInit+0x78>)
 80006f4:	f001 fb72 	bl	8001ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40004400 	.word	0x40004400
 8000704:	40021000 	.word	0x40021000
 8000708:	40010800 	.word	0x40010800

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr

08000736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000752:	f001 fa19 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <TIM2_IRQHandler+0x10>)
 8000762:	f002 fac7 	bl	8002cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000158 	.word	0x20000158

08000770 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000774:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000778:	f001 fce4 	bl	8002144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <_sbrk+0x5c>)
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_sbrk+0x60>)
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <_sbrk+0x64>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <_sbrk+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b0:	f003 fa82 	bl	8003cb8 <__errno>
 80007b4:	4603      	mov	r3, r0
 80007b6:	220c      	movs	r2, #12
 80007b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	e009      	b.n	80007d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <_sbrk+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20005000 	.word	0x20005000
 80007e0:	00000400 	.word	0x00000400
 80007e4:	200000e8 	.word	0x200000e8
 80007e8:	20000270 	.word	0x20000270

080007ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <pedestrian_init>:
uint32_t	pd_duration = 0,
			pedestrian_prevDur = 0,
			pedestrian_currDur = 0;

// initialize suitable state for each mode
void pedestrian_init() {
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	pd_state = PD_INIT;
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <pedestrian_init+0x18>)
 80007fe:	2232      	movs	r2, #50	; 0x32
 8000800:	701a      	strb	r2, [r3, #0]
	pd_active_state = PD_A_INIT;
 8000802:	4b04      	ldr	r3, [pc, #16]	; (8000814 <pedestrian_init+0x1c>)
 8000804:	223c      	movs	r2, #60	; 0x3c
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	200000ec 	.word	0x200000ec
 8000814:	20000109 	.word	0x20000109

08000818 <pedestrian_send_duration>:

void pedestrian_send_duration() { //send duration to uart
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	pedestrian_currDur = duration_get(DUR_PEDESTRIAN);
 800081c:	2001      	movs	r0, #1
 800081e:	f000 fe3b 	bl	8001498 <duration_get>
 8000822:	4603      	mov	r3, r0
 8000824:	4a09      	ldr	r2, [pc, #36]	; (800084c <pedestrian_send_duration+0x34>)
 8000826:	6013      	str	r3, [r2, #0]
	if (pedestrian_currDur != pedestrian_prevDur) {
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <pedestrian_send_duration+0x34>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <pedestrian_send_duration+0x38>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	d005      	beq.n	8000840 <pedestrian_send_duration+0x28>
		uart_send_num("Pedestrian duration: ", pedestrian_currDur);
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <pedestrian_send_duration+0x34>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	4806      	ldr	r0, [pc, #24]	; (8000854 <pedestrian_send_duration+0x3c>)
 800083c:	f001 f914 	bl	8001a68 <uart_send_num>
	}
	pedestrian_prevDur = pedestrian_currDur;
 8000840:	4b02      	ldr	r3, [pc, #8]	; (800084c <pedestrian_send_duration+0x34>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a02      	ldr	r2, [pc, #8]	; (8000850 <pedestrian_send_duration+0x38>)
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000f8 	.word	0x200000f8
 8000850:	200000f4 	.word	0x200000f4
 8000854:	080045c8 	.word	0x080045c8

08000858 <pedestrian_active_fsm>:

void pedestrian_active_fsm() {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	pd_duration = 2*global_get_totalDuration(); //get total duration
 800085c:	f000 fcaa 	bl	80011b4 <global_get_totalDuration>
 8000860:	4603      	mov	r3, r0
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4a3e      	ldr	r2, [pc, #248]	; (8000960 <pedestrian_active_fsm+0x108>)
 8000866:	6013      	str	r3, [r2, #0]
	if (timer_checkFlag(TIMER_BLINK)) { //check timer for blink led
 8000868:	2005      	movs	r0, #5
 800086a:	f001 f899 	bl	80019a0 <timer_checkFlag>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d014      	beq.n	800089e <pedestrian_active_fsm+0x46>
		timer_setDuration(TIMER_BLINK, PD_DUR_BLINK);
 8000874:	21c8      	movs	r1, #200	; 0xc8
 8000876:	2005      	movs	r0, #5
 8000878:	f001 f878 	bl	800196c <timer_setDuration>
		if (pd_led_state == PD_LED_OFF) {
 800087c:	4b39      	ldr	r3, [pc, #228]	; (8000964 <pedestrian_active_fsm+0x10c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b48      	cmp	r3, #72	; 0x48
 8000882:	d106      	bne.n	8000892 <pedestrian_active_fsm+0x3a>
			pd_led_state = PD_LED_ON;
 8000884:	4b37      	ldr	r3, [pc, #220]	; (8000964 <pedestrian_active_fsm+0x10c>)
 8000886:	2247      	movs	r2, #71	; 0x47
 8000888:	701a      	strb	r2, [r3, #0]
			buzzer_state = BZ_ON;
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <pedestrian_active_fsm+0x110>)
 800088c:	2251      	movs	r2, #81	; 0x51
 800088e:	701a      	strb	r2, [r3, #0]
 8000890:	e005      	b.n	800089e <pedestrian_active_fsm+0x46>
		}
		else {
			pd_led_state = PD_LED_OFF;
 8000892:	4b34      	ldr	r3, [pc, #208]	; (8000964 <pedestrian_active_fsm+0x10c>)
 8000894:	2248      	movs	r2, #72	; 0x48
 8000896:	701a      	strb	r2, [r3, #0]
			buzzer_state = BZ_OFF;
 8000898:	4b33      	ldr	r3, [pc, #204]	; (8000968 <pedestrian_active_fsm+0x110>)
 800089a:	2252      	movs	r2, #82	; 0x52
 800089c:	701a      	strb	r2, [r3, #0]
		}
	}

	switch (pd_active_state) {
 800089e:	4b33      	ldr	r3, [pc, #204]	; (800096c <pedestrian_active_fsm+0x114>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b3e      	cmp	r3, #62	; 0x3e
 80008a4:	d02a      	beq.n	80008fc <pedestrian_active_fsm+0xa4>
 80008a6:	2b3e      	cmp	r3, #62	; 0x3e
 80008a8:	dc53      	bgt.n	8000952 <pedestrian_active_fsm+0xfa>
 80008aa:	2b3c      	cmp	r3, #60	; 0x3c
 80008ac:	d002      	beq.n	80008b4 <pedestrian_active_fsm+0x5c>
 80008ae:	2b3d      	cmp	r3, #61	; 0x3d
 80008b0:	d004      	beq.n	80008bc <pedestrian_active_fsm+0x64>
		//change mode
		break;

	///////////////////////////////////////////
	default:
		break;
 80008b2:	e04e      	b.n	8000952 <pedestrian_active_fsm+0xfa>
		pd_active_state = PD_A_RED;
 80008b4:	4b2d      	ldr	r3, [pc, #180]	; (800096c <pedestrian_active_fsm+0x114>)
 80008b6:	223d      	movs	r2, #61	; 0x3d
 80008b8:	701a      	strb	r2, [r3, #0]
		break;
 80008ba:	e04f      	b.n	800095c <pedestrian_active_fsm+0x104>
		pedestrian_send_duration();
 80008bc:	f7ff ffac 	bl	8000818 <pedestrian_send_duration>
		led_turn_on(PEDESTRIAN, LED_RED);
 80008c0:	2100      	movs	r1, #0
 80008c2:	2007      	movs	r0, #7
 80008c4:	f000 fe50 	bl	8001568 <led_turn_on>
		buzzer_turn_off();
 80008c8:	f000 fdb7 	bl	800143a <buzzer_turn_off>
		if (button_isPressed(BTN_PD)) { //reset duration for pedestrian led
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 fd6f 	bl	80013b0 <button_isPressed>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d03e      	beq.n	8000956 <pedestrian_active_fsm+0xfe>
			timer_clear(TIMER_PD);
 80008d8:	2003      	movs	r0, #3
 80008da:	f001 f879 	bl	80019d0 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <pedestrian_active_fsm+0x108>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	2003      	movs	r0, #3
 80008e6:	f001 f841 	bl	800196c <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 80008ea:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <pedestrian_active_fsm+0x108>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4619      	mov	r1, r3
 80008f0:	2001      	movs	r0, #1
 80008f2:	f000 fdb9 	bl	8001468 <duration_set>
			buzzer_turn_off();
 80008f6:	f000 fda0 	bl	800143a <buzzer_turn_off>
		break;
 80008fa:	e02c      	b.n	8000956 <pedestrian_active_fsm+0xfe>
		pedestrian_send_duration();
 80008fc:	f7ff ff8c 	bl	8000818 <pedestrian_send_duration>
		if (traffic_get_currDur() > 3){
 8000900:	f000 f8b8 	bl	8000a74 <traffic_get_currDur>
 8000904:	4603      	mov	r3, r0
 8000906:	2b03      	cmp	r3, #3
 8000908:	d906      	bls.n	8000918 <pedestrian_active_fsm+0xc0>
			led_turn_on(PEDESTRIAN, LED_GREEN); //turn led green on when duration over 3 second
 800090a:	2101      	movs	r1, #1
 800090c:	2007      	movs	r0, #7
 800090e:	f000 fe2b 	bl	8001568 <led_turn_on>
			buzzer_turn_off();
 8000912:	f000 fd92 	bl	800143a <buzzer_turn_off>
 8000916:	e004      	b.n	8000922 <pedestrian_active_fsm+0xca>
			led_pedestrian_blinky(LED_GREEN); //otherwise, blink led green
 8000918:	2001      	movs	r0, #1
 800091a:	f000 ff11 	bl	8001740 <led_pedestrian_blinky>
			buzzer_blinky();
 800091e:	f000 fd93 	bl	8001448 <buzzer_blinky>
		if (button_isPressed(BTN_PD)) { //reset duration for pedestrian led
 8000922:	2003      	movs	r0, #3
 8000924:	f000 fd44 	bl	80013b0 <button_isPressed>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d015      	beq.n	800095a <pedestrian_active_fsm+0x102>
			timer_clear(TIMER_PD);
 800092e:	2003      	movs	r0, #3
 8000930:	f001 f84e 	bl	80019d0 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <pedestrian_active_fsm+0x108>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4619      	mov	r1, r3
 800093a:	2003      	movs	r0, #3
 800093c:	f001 f816 	bl	800196c <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <pedestrian_active_fsm+0x108>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	2001      	movs	r0, #1
 8000948:	f000 fd8e 	bl	8001468 <duration_set>
			buzzer_turn_off();
 800094c:	f000 fd75 	bl	800143a <buzzer_turn_off>
		break;
 8000950:	e003      	b.n	800095a <pedestrian_active_fsm+0x102>
		break;
 8000952:	bf00      	nop
 8000954:	e002      	b.n	800095c <pedestrian_active_fsm+0x104>
		break;
 8000956:	bf00      	nop
 8000958:	e000      	b.n	800095c <pedestrian_active_fsm+0x104>
		break;
 800095a:	bf00      	nop
	}
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200000f0 	.word	0x200000f0
 8000964:	2000010a 	.word	0x2000010a
 8000968:	2000010b 	.word	0x2000010b
 800096c:	20000109 	.word	0x20000109

08000970 <pedestrian_fsm>:

void pedestrian_fsm() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	//check state of pd_state
	switch (pd_state) {
 8000974:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <pedestrian_fsm+0xbc>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b34      	cmp	r3, #52	; 0x34
 800097a:	d038      	beq.n	80009ee <pedestrian_fsm+0x7e>
 800097c:	2b34      	cmp	r3, #52	; 0x34
 800097e:	dc4d      	bgt.n	8000a1c <pedestrian_fsm+0xac>
 8000980:	2b32      	cmp	r3, #50	; 0x32
 8000982:	d002      	beq.n	800098a <pedestrian_fsm+0x1a>
 8000984:	2b33      	cmp	r3, #51	; 0x33
 8000986:	d007      	beq.n	8000998 <pedestrian_fsm+0x28>
		break;

	//////////////////////////////////////////////////////

	default:
		break;
 8000988:	e048      	b.n	8000a1c <pedestrian_fsm+0xac>
		led_turn_off(PEDESTRIAN);
 800098a:	2007      	movs	r0, #7
 800098c:	f000 fe9c 	bl	80016c8 <led_turn_off>
		pd_state = PD_IDLE;
 8000990:	4b26      	ldr	r3, [pc, #152]	; (8000a2c <pedestrian_fsm+0xbc>)
 8000992:	2233      	movs	r2, #51	; 0x33
 8000994:	701a      	strb	r2, [r3, #0]
		break;
 8000996:	e046      	b.n	8000a26 <pedestrian_fsm+0xb6>
		buzzer_turn_off();
 8000998:	f000 fd4f 	bl	800143a <buzzer_turn_off>
		led_turn_off(PEDESTRIAN);
 800099c:	2007      	movs	r0, #7
 800099e:	f000 fe93 	bl	80016c8 <led_turn_off>
		if (button_isPressed(BTN_PD)) {
 80009a2:	2003      	movs	r0, #3
 80009a4:	f000 fd04 	bl	80013b0 <button_isPressed>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d038      	beq.n	8000a20 <pedestrian_fsm+0xb0>
			pd_state = PD_ACTIVE;
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <pedestrian_fsm+0xbc>)
 80009b0:	2234      	movs	r2, #52	; 0x34
 80009b2:	701a      	strb	r2, [r3, #0]
			pd_duration = 2*global_get_totalDuration(); //get total duration for a cycle of traffic
 80009b4:	f000 fbfe 	bl	80011b4 <global_get_totalDuration>
 80009b8:	4603      	mov	r3, r0
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <pedestrian_fsm+0xc0>)
 80009be:	6013      	str	r3, [r2, #0]
			timer_clear(TIMER_PD); //clear timer for pedestrian (if yes)
 80009c0:	2003      	movs	r0, #3
 80009c2:	f001 f805 	bl	80019d0 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration); //set new timer for pedestrian
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <pedestrian_fsm+0xc0>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4619      	mov	r1, r3
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 ffcd 	bl	800196c <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);//set duration for counter
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <pedestrian_fsm+0xc0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4619      	mov	r1, r3
 80009d8:	2001      	movs	r0, #1
 80009da:	f000 fd45 	bl	8001468 <duration_set>
			timer_clear(TIMER_BLINK);
 80009de:	2005      	movs	r0, #5
 80009e0:	f000 fff6 	bl	80019d0 <timer_clear>
			timer_setDuration(TIMER_BLINK, PD_DUR_BLINK); //set timer for blinking led for the last 3 second
 80009e4:	21c8      	movs	r1, #200	; 0xc8
 80009e6:	2005      	movs	r0, #5
 80009e8:	f000 ffc0 	bl	800196c <timer_setDuration>
		break;
 80009ec:	e018      	b.n	8000a20 <pedestrian_fsm+0xb0>
		pedestrian_active_fsm();
 80009ee:	f7ff ff33 	bl	8000858 <pedestrian_active_fsm>
		if (timer_checkFlag(TIMER_PD)) {
 80009f2:	2003      	movs	r0, #3
 80009f4:	f000 ffd4 	bl	80019a0 <timer_checkFlag>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <pedestrian_fsm+0x94>
			pd_state = PD_IDLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <pedestrian_fsm+0xbc>)
 8000a00:	2233      	movs	r2, #51	; 0x33
 8000a02:	701a      	strb	r2, [r3, #0]
		if (traffic_isSetMode()) {
 8000a04:	f000 fbc6 	bl	8001194 <traffic_isSetMode>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d00a      	beq.n	8000a24 <pedestrian_fsm+0xb4>
			timer_clear(TIMER_PD);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f000 ffde 	bl	80019d0 <timer_clear>
			pd_state = PD_IDLE;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <pedestrian_fsm+0xbc>)
 8000a16:	2233      	movs	r2, #51	; 0x33
 8000a18:	701a      	strb	r2, [r3, #0]
		break;
 8000a1a:	e003      	b.n	8000a24 <pedestrian_fsm+0xb4>
		break;
 8000a1c:	bf00      	nop
 8000a1e:	e002      	b.n	8000a26 <pedestrian_fsm+0xb6>
		break;
 8000a20:	bf00      	nop
 8000a22:	e000      	b.n	8000a26 <pedestrian_fsm+0xb6>
		break;
 8000a24:	bf00      	nop
	}
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000ec 	.word	0x200000ec
 8000a30:	200000f0 	.word	0x200000f0

08000a34 <traffic_init>:
/*-------------------- init setting --------------------*/
//uint32_t	trafficDuration[3] = {5000, 3000, 2000};
uint32_t traffic_prevDur = 0,
         traffic_currDur = 0; //previous and current duration of traffic

void traffic_init() {
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	global_state = INIT_MODE;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <traffic_init+0x2c>)
 8000a3a:	220a      	movs	r2, #10
 8000a3c:	701a      	strb	r2, [r3, #0]
	auto_A_state = AUTO_INIT;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <traffic_init+0x30>)
 8000a40:	2214      	movs	r2, #20
 8000a42:	701a      	strb	r2, [r3, #0]
	auto_B_state = AUTO_INIT;
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <traffic_init+0x34>)
 8000a46:	2214      	movs	r2, #20
 8000a48:	701a      	strb	r2, [r3, #0]
	manual_state = MN_INIT;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <traffic_init+0x38>)
 8000a4c:	221e      	movs	r2, #30
 8000a4e:	701a      	strb	r2, [r3, #0]
	set_state = SET_INIT;
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <traffic_init+0x3c>)
 8000a52:	2228      	movs	r2, #40	; 0x28
 8000a54:	701a      	strb	r2, [r3, #0]
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000104 	.word	0x20000104
 8000a64:	20000105 	.word	0x20000105
 8000a68:	20000106 	.word	0x20000106
 8000a6c:	20000107 	.word	0x20000107
 8000a70:	20000108 	.word	0x20000108

08000a74 <traffic_get_currDur>:

uint32_t traffic_get_currDur() {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	return traffic_currDur;
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <traffic_get_currDur+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	20000100 	.word	0x20000100

08000a88 <traffic_send_duration>:

/*------------------- auto fsm -------------------------*/
void traffic_send_duration() {  //send duration to uart
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	traffic_currDur = duration_get(DUR_TRAFFIC);
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f000 fd03 	bl	8001498 <duration_get>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <traffic_send_duration+0x3c>)
 8000a96:	6013      	str	r3, [r2, #0]
	if (traffic_currDur && traffic_currDur != traffic_prevDur) {
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <traffic_send_duration+0x3c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d00b      	beq.n	8000ab8 <traffic_send_duration+0x30>
 8000aa0:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <traffic_send_duration+0x3c>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <traffic_send_duration+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d005      	beq.n	8000ab8 <traffic_send_duration+0x30>
		uart_send_num("Traffic duration: ", traffic_currDur);
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <traffic_send_duration+0x3c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <traffic_send_duration+0x44>)
 8000ab4:	f000 ffd8 	bl	8001a68 <uart_send_num>
	}
	traffic_prevDur = traffic_currDur;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <traffic_send_duration+0x3c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a02      	ldr	r2, [pc, #8]	; (8000ac8 <traffic_send_duration+0x40>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000100 	.word	0x20000100
 8000ac8:	200000fc 	.word	0x200000fc
 8000acc:	080045e0 	.word	0x080045e0

08000ad0 <traffic_auto_fsm_A>:

void traffic_auto_fsm_A() {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
	switch(auto_A_state) {
 8000ad4:	4b41      	ldr	r3, [pc, #260]	; (8000bdc <traffic_auto_fsm_A+0x10c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	3b14      	subs	r3, #20
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d874      	bhi.n	8000bc8 <traffic_auto_fsm_A+0xf8>
 8000ade:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <traffic_auto_fsm_A+0x14>)
 8000ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae4:	08000af5 	.word	0x08000af5
 8000ae8:	08000b15 	.word	0x08000b15
 8000aec:	08000b53 	.word	0x08000b53
 8000af0:	08000b8b 	.word	0x08000b8b
	case AUTO_INIT:
		//change mode
		auto_A_state = AUTO_RED;
 8000af4:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <traffic_auto_fsm_A+0x10c>)
 8000af6:	2215      	movs	r2, #21
 8000af8:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000afa:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <traffic_auto_fsm_A+0x110>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4619      	mov	r1, r3
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 ff33 	bl	800196c <timer_setDuration>
		duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000b06:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <traffic_auto_fsm_A+0x110>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 fcab 	bl	8001468 <duration_set>
		break;
 8000b12:	e060      	b.n	8000bd6 <traffic_auto_fsm_A+0x106>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000b14:	2100      	movs	r1, #0
 8000b16:	2005      	movs	r0, #5
 8000b18:	f000 fd26 	bl	8001568 <led_turn_on>
		traffic_send_duration();
 8000b1c:	f7ff ffb4 	bl	8000a88 <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000b20:	2000      	movs	r0, #0
 8000b22:	f000 ff3d 	bl	80019a0 <timer_checkFlag>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d04f      	beq.n	8000bcc <traffic_auto_fsm_A+0xfc>
			auto_A_state = AUTO_GREEN;
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <traffic_auto_fsm_A+0x10c>)
 8000b2e:	2216      	movs	r2, #22
 8000b30:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8000b32:	4b2c      	ldr	r3, [pc, #176]	; (8000be4 <traffic_auto_fsm_A+0x114>)
 8000b34:	223d      	movs	r2, #61	; 0x3d
 8000b36:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000b38:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <traffic_auto_fsm_A+0x110>)
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 ff14 	bl	800196c <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 8000b44:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <traffic_auto_fsm_A+0x110>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 fc8c 	bl	8001468 <duration_set>
		}
		break;
 8000b50:	e03c      	b.n	8000bcc <traffic_auto_fsm_A+0xfc>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000b52:	2101      	movs	r1, #1
 8000b54:	2005      	movs	r0, #5
 8000b56:	f000 fd07 	bl	8001568 <led_turn_on>
		traffic_send_duration();
 8000b5a:	f7ff ff95 	bl	8000a88 <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 ff1e 	bl	80019a0 <timer_checkFlag>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d032      	beq.n	8000bd0 <traffic_auto_fsm_A+0x100>
			auto_A_state = AUTO_YELLOW;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <traffic_auto_fsm_A+0x10c>)
 8000b6c:	2217      	movs	r2, #23
 8000b6e:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <traffic_auto_fsm_A+0x110>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4619      	mov	r1, r3
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 fef8 	bl	800196c <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <traffic_auto_fsm_A+0x110>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	4619      	mov	r1, r3
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 fc70 	bl	8001468 <duration_set>
		}
		break;
 8000b88:	e022      	b.n	8000bd0 <traffic_auto_fsm_A+0x100>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	2005      	movs	r0, #5
 8000b8e:	f000 fceb 	bl	8001568 <led_turn_on>
		traffic_send_duration();
 8000b92:	f7ff ff79 	bl	8000a88 <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 ff02 	bl	80019a0 <timer_checkFlag>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d018      	beq.n	8000bd4 <traffic_auto_fsm_A+0x104>
			auto_A_state = AUTO_RED;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <traffic_auto_fsm_A+0x10c>)
 8000ba4:	2215      	movs	r2, #21
 8000ba6:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 8000ba8:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <traffic_auto_fsm_A+0x114>)
 8000baa:	223e      	movs	r2, #62	; 0x3e
 8000bac:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <traffic_auto_fsm_A+0x110>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f000 fed9 	bl	800196c <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <traffic_auto_fsm_A+0x110>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fc51 	bl	8001468 <duration_set>
		}
		break;
 8000bc6:	e005      	b.n	8000bd4 <traffic_auto_fsm_A+0x104>

	/////////////////////////////////////////////////////
	default:
		break;
 8000bc8:	bf00      	nop
 8000bca:	e004      	b.n	8000bd6 <traffic_auto_fsm_A+0x106>
		break;
 8000bcc:	bf00      	nop
 8000bce:	e002      	b.n	8000bd6 <traffic_auto_fsm_A+0x106>
		break;
 8000bd0:	bf00      	nop
 8000bd2:	e000      	b.n	8000bd6 <traffic_auto_fsm_A+0x106>
		break;
 8000bd4:	bf00      	nop
	}
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000105 	.word	0x20000105
 8000be0:	20000004 	.word	0x20000004
 8000be4:	20000109 	.word	0x20000109

08000be8 <traffic_auto_fsm_B>:

void traffic_auto_fsm_B() {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
	switch(auto_B_state) {
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <traffic_auto_fsm_B+0xc4>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	3b14      	subs	r3, #20
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d850      	bhi.n	8000c98 <traffic_auto_fsm_B+0xb0>
 8000bf6:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <traffic_auto_fsm_B+0x14>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c0d 	.word	0x08000c0d
 8000c00:	08000c21 	.word	0x08000c21
 8000c04:	08000c49 	.word	0x08000c49
 8000c08:	08000c71 	.word	0x08000c71
	case AUTO_INIT:
		//change mode
		auto_B_state = AUTO_GREEN;
 8000c0c:	4b27      	ldr	r3, [pc, #156]	; (8000cac <traffic_auto_fsm_B+0xc4>)
 8000c0e:	2216      	movs	r2, #22
 8000c10:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <traffic_auto_fsm_B+0xc8>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	4619      	mov	r1, r3
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 fea7 	bl	800196c <timer_setDuration>
		break;
 8000c1e:	e042      	b.n	8000ca6 <traffic_auto_fsm_B+0xbe>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_2, LED_RED);
 8000c20:	2100      	movs	r1, #0
 8000c22:	2006      	movs	r0, #6
 8000c24:	f000 fca0 	bl	8001568 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f000 feb9 	bl	80019a0 <timer_checkFlag>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d033      	beq.n	8000c9c <traffic_auto_fsm_B+0xb4>
			auto_B_state = AUTO_GREEN;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <traffic_auto_fsm_B+0xc4>)
 8000c36:	2216      	movs	r2, #22
 8000c38:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <traffic_auto_fsm_B+0xc8>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	2001      	movs	r0, #1
 8000c42:	f000 fe93 	bl	800196c <timer_setDuration>
		}
		break;
 8000c46:	e029      	b.n	8000c9c <traffic_auto_fsm_B+0xb4>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000c48:	2101      	movs	r1, #1
 8000c4a:	2006      	movs	r0, #6
 8000c4c:	f000 fc8c 	bl	8001568 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000c50:	2001      	movs	r0, #1
 8000c52:	f000 fea5 	bl	80019a0 <timer_checkFlag>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d021      	beq.n	8000ca0 <traffic_auto_fsm_B+0xb8>
			auto_B_state = AUTO_YELLOW;
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <traffic_auto_fsm_B+0xc4>)
 8000c5e:	2217      	movs	r2, #23
 8000c60:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <traffic_auto_fsm_B+0xc8>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	4619      	mov	r1, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f000 fe7f 	bl	800196c <timer_setDuration>
		}
		break;
 8000c6e:	e017      	b.n	8000ca0 <traffic_auto_fsm_B+0xb8>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000c70:	2102      	movs	r1, #2
 8000c72:	2006      	movs	r0, #6
 8000c74:	f000 fc78 	bl	8001568 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f000 fe91 	bl	80019a0 <timer_checkFlag>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d00f      	beq.n	8000ca4 <traffic_auto_fsm_B+0xbc>
			auto_B_state = AUTO_RED;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <traffic_auto_fsm_B+0xc4>)
 8000c86:	2215      	movs	r2, #21
 8000c88:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <traffic_auto_fsm_B+0xc8>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	f000 fe6b 	bl	800196c <timer_setDuration>
		}
		break;
 8000c96:	e005      	b.n	8000ca4 <traffic_auto_fsm_B+0xbc>

	/////////////////////////////////////////////////////
	default:
		break;
 8000c98:	bf00      	nop
 8000c9a:	e004      	b.n	8000ca6 <traffic_auto_fsm_B+0xbe>
		break;
 8000c9c:	bf00      	nop
 8000c9e:	e002      	b.n	8000ca6 <traffic_auto_fsm_B+0xbe>
		break;
 8000ca0:	bf00      	nop
 8000ca2:	e000      	b.n	8000ca6 <traffic_auto_fsm_B+0xbe>
		break;
 8000ca4:	bf00      	nop
	}
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000106 	.word	0x20000106
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <traffic_manual_fsm>:

/*----------------- manual fsm -------------------------*/
void traffic_manual_fsm() {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	switch(manual_state) {
 8000cb8:	4b37      	ldr	r3, [pc, #220]	; (8000d98 <traffic_manual_fsm+0xe4>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	3b1e      	subs	r3, #30
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	d85e      	bhi.n	8000d80 <traffic_manual_fsm+0xcc>
 8000cc2:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <traffic_manual_fsm+0x14>)
 8000cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc8:	08000cdd 	.word	0x08000cdd
 8000ccc:	08000ce5 	.word	0x08000ce5
 8000cd0:	08000d09 	.word	0x08000d09
 8000cd4:	08000d33 	.word	0x08000d33
 8000cd8:	08000d57 	.word	0x08000d57
	case MN_INIT:
		//change mode
		manual_state = MN_RED0;
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <traffic_manual_fsm+0xe4>)
 8000cde:	221f      	movs	r2, #31
 8000ce0:	701a      	strb	r2, [r3, #0]
		break;
 8000ce2:	e056      	b.n	8000d92 <traffic_manual_fsm+0xde>

	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - green
	case MN_RED0:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2005      	movs	r0, #5
 8000ce8:	f000 fc3e 	bl	8001568 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000cec:	2101      	movs	r1, #1
 8000cee:	2006      	movs	r0, #6
 8000cf0:	f000 fc3a 	bl	8001568 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f000 fb5b 	bl	80013b0 <button_isPressed>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d041      	beq.n	8000d84 <traffic_manual_fsm+0xd0>
			manual_state = MN_RED1;
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <traffic_manual_fsm+0xe4>)
 8000d02:	2220      	movs	r2, #32
 8000d04:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d06:	e03d      	b.n	8000d84 <traffic_manual_fsm+0xd0>

	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - yellow
	case MN_RED1:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2005      	movs	r0, #5
 8000d0c:	f000 fc2c 	bl	8001568 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000d10:	2102      	movs	r1, #2
 8000d12:	2006      	movs	r0, #6
 8000d14:	f000 fc28 	bl	8001568 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f000 fb49 	bl	80013b0 <button_isPressed>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d031      	beq.n	8000d88 <traffic_manual_fsm+0xd4>
			manual_state = MN_GREEN;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <traffic_manual_fsm+0xe4>)
 8000d26:	2221      	movs	r2, #33	; 0x21
 8000d28:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <traffic_manual_fsm+0xe8>)
 8000d2c:	223d      	movs	r2, #61	; 0x3d
 8000d2e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d30:	e02a      	b.n	8000d88 <traffic_manual_fsm+0xd4>

	///////////////////////////////////////////////////////////
	// traffic A - green; traffic B - red
	case MN_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000d32:	2101      	movs	r1, #1
 8000d34:	2005      	movs	r0, #5
 8000d36:	f000 fc17 	bl	8001568 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2006      	movs	r0, #6
 8000d3e:	f000 fc13 	bl	8001568 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000d42:	2001      	movs	r0, #1
 8000d44:	f000 fb34 	bl	80013b0 <button_isPressed>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d01e      	beq.n	8000d8c <traffic_manual_fsm+0xd8>
			manual_state = MN_YELLOW;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <traffic_manual_fsm+0xe4>)
 8000d50:	2222      	movs	r2, #34	; 0x22
 8000d52:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d54:	e01a      	b.n	8000d8c <traffic_manual_fsm+0xd8>

	///////////////////////////////////////////////////////////
	// traffic A - yellow; traffic B - red
	case MN_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000d56:	2102      	movs	r1, #2
 8000d58:	2005      	movs	r0, #5
 8000d5a:	f000 fc05 	bl	8001568 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2006      	movs	r0, #6
 8000d62:	f000 fc01 	bl	8001568 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 fb22 	bl	80013b0 <button_isPressed>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00e      	beq.n	8000d90 <traffic_manual_fsm+0xdc>
			manual_state = MN_RED0;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <traffic_manual_fsm+0xe4>)
 8000d74:	221f      	movs	r2, #31
 8000d76:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <traffic_manual_fsm+0xe8>)
 8000d7a:	223e      	movs	r2, #62	; 0x3e
 8000d7c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d7e:	e007      	b.n	8000d90 <traffic_manual_fsm+0xdc>

	///////////////////////////////////////////////////////////
	default:
		break;
 8000d80:	bf00      	nop
 8000d82:	e006      	b.n	8000d92 <traffic_manual_fsm+0xde>
		break;
 8000d84:	bf00      	nop
 8000d86:	e004      	b.n	8000d92 <traffic_manual_fsm+0xde>
		break;
 8000d88:	bf00      	nop
 8000d8a:	e002      	b.n	8000d92 <traffic_manual_fsm+0xde>
		break;
 8000d8c:	bf00      	nop
 8000d8e:	e000      	b.n	8000d92 <traffic_manual_fsm+0xde>
		break;
 8000d90:	bf00      	nop
	}
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000107 	.word	0x20000107
 8000d9c:	20000109 	.word	0x20000109

08000da0 <duration_inc>:

/*-------------------- set fsm -------------------------*/
void duration_inc(uint8_t led_type) {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	// increase specific duration by 1 unit
	trafficDuration[led_type] += DURATION_UNIT;
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <duration_inc+0x50>)
 8000dae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000db8:	490d      	ldr	r1, [pc, #52]	; (8000df0 <duration_inc+0x50>)
 8000dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (trafficDuration[led_type] > DURATION_MAX) { //if duration over max, reset to DURATION_UNIT
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <duration_inc+0x50>)
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d90a      	bls.n	8000de4 <duration_inc+0x44>
		trafficDuration[led_type] -= DURATION_MAX;
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <duration_inc+0x50>)
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000ddc:	3b10      	subs	r3, #16
 8000dde:	4904      	ldr	r1, [pc, #16]	; (8000df0 <duration_inc+0x50>)
 8000de0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000004 	.word	0x20000004

08000df4 <traffic_set_fsm>:

void traffic_set_fsm() {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	switch(set_state) {
 8000df8:	4b60      	ldr	r3, [pc, #384]	; (8000f7c <traffic_set_fsm+0x188>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	3b28      	subs	r3, #40	; 0x28
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	f200 80b2 	bhi.w	8000f68 <traffic_set_fsm+0x174>
 8000e04:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <traffic_set_fsm+0x18>)
 8000e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0a:	bf00      	nop
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000e25 	.word	0x08000e25
 8000e14:	08000e91 	.word	0x08000e91
 8000e18:	08000efd 	.word	0x08000efd
	case SET_INIT:
		set_state = SET_RED;
 8000e1c:	4b57      	ldr	r3, [pc, #348]	; (8000f7c <traffic_set_fsm+0x188>)
 8000e1e:	2229      	movs	r2, #41	; 0x29
 8000e20:	701a      	strb	r2, [r3, #0]
		break;
 8000e22:	e0a8      	b.n	8000f76 <traffic_set_fsm+0x182>

	//////////////////////////////////////////////////////////////
	case SET_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000e24:	2100      	movs	r1, #0
 8000e26:	2005      	movs	r0, #5
 8000e28:	f000 fb9e 	bl	8001568 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2006      	movs	r0, #6
 8000e30:	f000 fb9a 	bl	8001568 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000e34:	2002      	movs	r0, #2
 8000e36:	f000 fabb 	bl	80013b0 <button_isPressed>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d009      	beq.n	8000e54 <traffic_set_fsm+0x60>
			duration_inc(LED_RED);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f7ff ffad 	bl	8000da0 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000e46:	2002      	movs	r0, #2
 8000e48:	f000 fdc2 	bl	80019d0 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000e4c:	210a      	movs	r1, #10
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f000 fd8c 	bl	800196c <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000e54:	2002      	movs	r0, #2
 8000e56:	f000 fac5 	bl	80013e4 <button_isLongPressed>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00d      	beq.n	8000e7c <traffic_set_fsm+0x88>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000e60:	2002      	movs	r0, #2
 8000e62:	f000 fd9d 	bl	80019a0 <timer_checkFlag>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d007      	beq.n	8000e7c <traffic_set_fsm+0x88>
				duration_inc(LED_RED);
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f7ff ff97 	bl	8000da0 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000e72:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e76:	2002      	movs	r0, #2
 8000e78:	f000 fd78 	bl	800196c <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)) {
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f000 fa97 	bl	80013b0 <button_isPressed>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d071      	beq.n	8000f6c <traffic_set_fsm+0x178>
			set_state = SET_GREEN;
 8000e88:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <traffic_set_fsm+0x188>)
 8000e8a:	222a      	movs	r2, #42	; 0x2a
 8000e8c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000e8e:	e06d      	b.n	8000f6c <traffic_set_fsm+0x178>

	//////////////////////////////////////////////////////////////
	case SET_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000e90:	2101      	movs	r1, #1
 8000e92:	2005      	movs	r0, #5
 8000e94:	f000 fb68 	bl	8001568 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000e98:	2101      	movs	r1, #1
 8000e9a:	2006      	movs	r0, #6
 8000e9c:	f000 fb64 	bl	8001568 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f000 fa85 	bl	80013b0 <button_isPressed>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d009      	beq.n	8000ec0 <traffic_set_fsm+0xcc>
			duration_inc(LED_GREEN);
 8000eac:	2001      	movs	r0, #1
 8000eae:	f7ff ff77 	bl	8000da0 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f000 fd8c 	bl	80019d0 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000eb8:	210a      	movs	r1, #10
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f000 fd56 	bl	800196c <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f000 fa8f 	bl	80013e4 <button_isLongPressed>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d00d      	beq.n	8000ee8 <traffic_set_fsm+0xf4>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f000 fd67 	bl	80019a0 <timer_checkFlag>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <traffic_set_fsm+0xf4>
				duration_inc(LED_GREEN);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff ff61 	bl	8000da0 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000ede:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f000 fd42 	bl	800196c <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fa61 	bl	80013b0 <button_isPressed>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d03d      	beq.n	8000f70 <traffic_set_fsm+0x17c>
			set_state = SET_YELLOW;
 8000ef4:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <traffic_set_fsm+0x188>)
 8000ef6:	222b      	movs	r2, #43	; 0x2b
 8000ef8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000efa:	e039      	b.n	8000f70 <traffic_set_fsm+0x17c>

	//////////////////////////////////////////////////////////////
	case SET_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000efc:	2102      	movs	r1, #2
 8000efe:	2005      	movs	r0, #5
 8000f00:	f000 fb32 	bl	8001568 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000f04:	2102      	movs	r1, #2
 8000f06:	2006      	movs	r0, #6
 8000f08:	f000 fb2e 	bl	8001568 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f000 fa4f 	bl	80013b0 <button_isPressed>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d009      	beq.n	8000f2c <traffic_set_fsm+0x138>
			duration_inc(LED_YELLOW);
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f7ff ff41 	bl	8000da0 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f000 fd56 	bl	80019d0 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000f24:	210a      	movs	r1, #10
 8000f26:	2002      	movs	r0, #2
 8000f28:	f000 fd20 	bl	800196c <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f000 fa59 	bl	80013e4 <button_isLongPressed>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00d      	beq.n	8000f54 <traffic_set_fsm+0x160>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f000 fd31 	bl	80019a0 <timer_checkFlag>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d007      	beq.n	8000f54 <traffic_set_fsm+0x160>
				duration_inc(LED_YELLOW);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f7ff ff2b 	bl	8000da0 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000f4a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f000 fd0c 	bl	800196c <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8000f54:	2001      	movs	r0, #1
 8000f56:	f000 fa2b 	bl	80013b0 <button_isPressed>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d009      	beq.n	8000f74 <traffic_set_fsm+0x180>
			set_state = SET_RED;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <traffic_set_fsm+0x188>)
 8000f62:	2229      	movs	r2, #41	; 0x29
 8000f64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000f66:	e005      	b.n	8000f74 <traffic_set_fsm+0x180>

	//////////////////////////////////////////////////////////////
	default:
		break;
 8000f68:	bf00      	nop
 8000f6a:	e004      	b.n	8000f76 <traffic_set_fsm+0x182>
		break;
 8000f6c:	bf00      	nop
 8000f6e:	e002      	b.n	8000f76 <traffic_set_fsm+0x182>
		break;
 8000f70:	bf00      	nop
 8000f72:	e000      	b.n	8000f76 <traffic_set_fsm+0x182>
		break;
 8000f74:	bf00      	nop
	}
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000108 	.word	0x20000108

08000f80 <traffic_fsm>:

/*----------------- global fsm -------------------------*/
void traffic_fsm() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	switch(global_state) {
 8000f84:	4b7c      	ldr	r3, [pc, #496]	; (8001178 <traffic_fsm+0x1f8>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3b0a      	subs	r3, #10
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	f200 80ea 	bhi.w	8001164 <traffic_fsm+0x1e4>
 8000f90:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <traffic_fsm+0x18>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	08000fa9 	.word	0x08000fa9
 8000f9c:	08000fb5 	.word	0x08000fb5
 8000fa0:	0800102f 	.word	0x0800102f
 8000fa4:	08001053 	.word	0x08001053
	case INIT_MODE:
		led_clear_all();
 8000fa8:	f000 faca 	bl	8001540 <led_clear_all>
		global_state = AUTO_MODE;
 8000fac:	4b72      	ldr	r3, [pc, #456]	; (8001178 <traffic_fsm+0x1f8>)
 8000fae:	220b      	movs	r2, #11
 8000fb0:	701a      	strb	r2, [r3, #0]
		break;
 8000fb2:	e0de      	b.n	8001172 <traffic_fsm+0x1f2>

	//////////////////////////////////////////////////////
	case AUTO_MODE: //automatically control traffic light
		//TODO
		traffic_auto_fsm_A();
 8000fb4:	f7ff fd8c 	bl	8000ad0 <traffic_auto_fsm_A>
		traffic_auto_fsm_B();
 8000fb8:	f7ff fe16 	bl	8000be8 <traffic_auto_fsm_B>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 f9f7 	bl	80013b0 <button_isPressed>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d030      	beq.n	800102a <traffic_fsm+0xaa>
			led_clear_all();
 8000fc8:	f000 faba 	bl	8001540 <led_clear_all>
			global_state = MANUAL_MODE;
 8000fcc:	4b6a      	ldr	r3, [pc, #424]	; (8001178 <traffic_fsm+0x1f8>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	701a      	strb	r2, [r3, #0]
			traffic_currDur = 10000;
 8000fd2:	4b6a      	ldr	r3, [pc, #424]	; (800117c <traffic_fsm+0x1fc>)
 8000fd4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fd8:	601a      	str	r2, [r3, #0]
			duration_set(DUR_TRAFFIC, 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f000 fa43 	bl	8001468 <duration_set>
			switch (auto_A_state) { //manual mode with previous auto state
 8000fe2:	4b67      	ldr	r3, [pc, #412]	; (8001180 <traffic_fsm+0x200>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b17      	cmp	r3, #23
 8000fe8:	d01b      	beq.n	8001022 <traffic_fsm+0xa2>
 8000fea:	2b17      	cmp	r3, #23
 8000fec:	f300 80bc 	bgt.w	8001168 <traffic_fsm+0x1e8>
 8000ff0:	2b15      	cmp	r3, #21
 8000ff2:	d002      	beq.n	8000ffa <traffic_fsm+0x7a>
 8000ff4:	2b16      	cmp	r3, #22
 8000ff6:	d010      	beq.n	800101a <traffic_fsm+0x9a>
			case AUTO_YELLOW: // traffic A = yellow
				manual_state = MN_YELLOW;
				break;
			}
		}
		break;
 8000ff8:	e0b6      	b.n	8001168 <traffic_fsm+0x1e8>
				switch (auto_B_state){
 8000ffa:	4b62      	ldr	r3, [pc, #392]	; (8001184 <traffic_fsm+0x204>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b16      	cmp	r3, #22
 8001000:	d002      	beq.n	8001008 <traffic_fsm+0x88>
 8001002:	2b17      	cmp	r3, #23
 8001004:	d004      	beq.n	8001010 <traffic_fsm+0x90>
				break;
 8001006:	e011      	b.n	800102c <traffic_fsm+0xac>
					manual_state = MN_RED0;
 8001008:	4b5f      	ldr	r3, [pc, #380]	; (8001188 <traffic_fsm+0x208>)
 800100a:	221f      	movs	r2, #31
 800100c:	701a      	strb	r2, [r3, #0]
					break;
 800100e:	e003      	b.n	8001018 <traffic_fsm+0x98>
					manual_state = MN_RED1;
 8001010:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <traffic_fsm+0x208>)
 8001012:	2220      	movs	r2, #32
 8001014:	701a      	strb	r2, [r3, #0]
					break;
 8001016:	bf00      	nop
				break;
 8001018:	e008      	b.n	800102c <traffic_fsm+0xac>
				manual_state = MN_GREEN;
 800101a:	4b5b      	ldr	r3, [pc, #364]	; (8001188 <traffic_fsm+0x208>)
 800101c:	2221      	movs	r2, #33	; 0x21
 800101e:	701a      	strb	r2, [r3, #0]
				break;
 8001020:	e004      	b.n	800102c <traffic_fsm+0xac>
				manual_state = MN_YELLOW;
 8001022:	4b59      	ldr	r3, [pc, #356]	; (8001188 <traffic_fsm+0x208>)
 8001024:	2222      	movs	r2, #34	; 0x22
 8001026:	701a      	strb	r2, [r3, #0]
				break;
 8001028:	e000      	b.n	800102c <traffic_fsm+0xac>
		}
 800102a:	bf00      	nop
		break;
 800102c:	e09c      	b.n	8001168 <traffic_fsm+0x1e8>

	////////////////////////////////////////////////////
	case MANUAL_MODE: // manually control traffic light
		//TODO
		traffic_manual_fsm();
 800102e:	f7ff fe41 	bl	8000cb4 <traffic_manual_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8001032:	2000      	movs	r0, #0
 8001034:	f000 f9bc 	bl	80013b0 <button_isPressed>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8096 	beq.w	800116c <traffic_fsm+0x1ec>
			global_state = SET_MODE;
 8001040:	4b4d      	ldr	r3, [pc, #308]	; (8001178 <traffic_fsm+0x1f8>)
 8001042:	220d      	movs	r2, #13
 8001044:	701a      	strb	r2, [r3, #0]
			set_state = SET_INIT;
 8001046:	4b51      	ldr	r3, [pc, #324]	; (800118c <traffic_fsm+0x20c>)
 8001048:	2228      	movs	r2, #40	; 0x28
 800104a:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 800104c:	f000 fa78 	bl	8001540 <led_clear_all>
		}
		break;
 8001050:	e08c      	b.n	800116c <traffic_fsm+0x1ec>

	//////////////////////////////////////////////////////
	case SET_MODE: //set duration for each led of traffic
		//TODO
		traffic_set_fsm();
 8001052:	f7ff fecf 	bl	8000df4 <traffic_set_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f9aa 	bl	80013b0 <button_isPressed>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d07e      	beq.n	8001160 <traffic_fsm+0x1e0>
			global_state = AUTO_MODE;
 8001062:	4b45      	ldr	r3, [pc, #276]	; (8001178 <traffic_fsm+0x1f8>)
 8001064:	220b      	movs	r2, #11
 8001066:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8001068:	f000 fa6a 	bl	8001540 <led_clear_all>
			timer_clear(TIMER_AUTO_A); //clear timer, prepare for auto mode
 800106c:	2000      	movs	r0, #0
 800106e:	f000 fcaf 	bl	80019d0 <timer_clear>
			timer_clear(TIMER_AUTO_B); //clear timer, prepare for auto mode
 8001072:	2001      	movs	r0, #1
 8001074:	f000 fcac 	bl	80019d0 <timer_clear>
			switch(manual_state) { //auto mode with previous manual state
 8001078:	4b43      	ldr	r3, [pc, #268]	; (8001188 <traffic_fsm+0x208>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3b1f      	subs	r3, #31
 800107e:	2b03      	cmp	r3, #3
 8001080:	d876      	bhi.n	8001170 <traffic_fsm+0x1f0>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <traffic_fsm+0x108>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	08001099 	.word	0x08001099
 800108c:	080010cb 	.word	0x080010cb
 8001090:	080010fd 	.word	0x080010fd
 8001094:	0800112f 	.word	0x0800112f
			///////////////////////////////////////////////////
			case MN_RED0: //traffic A: red; traffic B: green
				auto_A_state = AUTO_RED;
 8001098:	4b39      	ldr	r3, [pc, #228]	; (8001180 <traffic_fsm+0x200>)
 800109a:	2215      	movs	r2, #21
 800109c:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 800109e:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <traffic_fsm+0x210>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4619      	mov	r1, r3
 80010a4:	2000      	movs	r0, #0
 80010a6:	f000 fc61 	bl	800196c <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 80010aa:	4b39      	ldr	r3, [pc, #228]	; (8001190 <traffic_fsm+0x210>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 f9d9 	bl	8001468 <duration_set>

				auto_B_state = AUTO_GREEN;
 80010b6:	4b33      	ldr	r3, [pc, #204]	; (8001184 <traffic_fsm+0x204>)
 80010b8:	2216      	movs	r2, #22
 80010ba:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 80010bc:	4b34      	ldr	r3, [pc, #208]	; (8001190 <traffic_fsm+0x210>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4619      	mov	r1, r3
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fc52 	bl	800196c <timer_setDuration>
				break;
 80010c8:	e04b      	b.n	8001162 <traffic_fsm+0x1e2>
			///////////////////////////////////////////////////
			case MN_RED1: //traffic A: red; traffic B: yellow
				auto_A_state = AUTO_RED;
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <traffic_fsm+0x200>)
 80010cc:	2215      	movs	r2, #21
 80010ce:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <traffic_fsm+0x210>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4619      	mov	r1, r3
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 fc48 	bl	800196c <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <traffic_fsm+0x210>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	4619      	mov	r1, r3
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f9c0 	bl	8001468 <duration_set>

				auto_B_state = AUTO_YELLOW;
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <traffic_fsm+0x204>)
 80010ea:	2217      	movs	r2, #23
 80010ec:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <traffic_fsm+0x210>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4619      	mov	r1, r3
 80010f4:	2001      	movs	r0, #1
 80010f6:	f000 fc39 	bl	800196c <timer_setDuration>
				break;
 80010fa:	e032      	b.n	8001162 <traffic_fsm+0x1e2>

			///////////////////////////////////////////////////
			case MN_GREEN: //traffic A: green; traffic B: red
				auto_A_state = AUTO_GREEN;
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <traffic_fsm+0x200>)
 80010fe:	2216      	movs	r2, #22
 8001100:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <traffic_fsm+0x210>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4619      	mov	r1, r3
 8001108:	2000      	movs	r0, #0
 800110a:	f000 fc2f 	bl	800196c <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <traffic_fsm+0x210>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4619      	mov	r1, r3
 8001114:	2000      	movs	r0, #0
 8001116:	f000 f9a7 	bl	8001468 <duration_set>

				auto_B_state = AUTO_RED;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <traffic_fsm+0x204>)
 800111c:	2215      	movs	r2, #21
 800111e:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <traffic_fsm+0x210>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	2001      	movs	r0, #1
 8001128:	f000 fc20 	bl	800196c <timer_setDuration>
				break;
 800112c:	e019      	b.n	8001162 <traffic_fsm+0x1e2>
			///////////////////////////////////////////////////
			case MN_YELLOW: //traffic A: yellow; traffic B: red
				auto_A_state = AUTO_YELLOW;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <traffic_fsm+0x200>)
 8001130:	2217      	movs	r2, #23
 8001132:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <traffic_fsm+0x210>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	4619      	mov	r1, r3
 800113a:	2000      	movs	r0, #0
 800113c:	f000 fc16 	bl	800196c <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <traffic_fsm+0x210>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	4619      	mov	r1, r3
 8001146:	2000      	movs	r0, #0
 8001148:	f000 f98e 	bl	8001468 <duration_set>

				auto_B_state = AUTO_RED;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <traffic_fsm+0x204>)
 800114e:	2215      	movs	r2, #21
 8001150:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <traffic_fsm+0x210>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4619      	mov	r1, r3
 8001158:	2001      	movs	r0, #1
 800115a:	f000 fc07 	bl	800196c <timer_setDuration>
				break;
 800115e:	e000      	b.n	8001162 <traffic_fsm+0x1e2>
			}
		}
 8001160:	bf00      	nop
		break;
 8001162:	e005      	b.n	8001170 <traffic_fsm+0x1f0>

	///////////////////////////////////////////////
	default:
		break;
 8001164:	bf00      	nop
 8001166:	e004      	b.n	8001172 <traffic_fsm+0x1f2>
		break;
 8001168:	bf00      	nop
 800116a:	e002      	b.n	8001172 <traffic_fsm+0x1f2>
		break;
 800116c:	bf00      	nop
 800116e:	e000      	b.n	8001172 <traffic_fsm+0x1f2>
		break;
 8001170:	bf00      	nop
	}
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000104 	.word	0x20000104
 800117c:	20000100 	.word	0x20000100
 8001180:	20000105 	.word	0x20000105
 8001184:	20000106 	.word	0x20000106
 8001188:	20000107 	.word	0x20000107
 800118c:	20000108 	.word	0x20000108
 8001190:	20000004 	.word	0x20000004

08001194 <traffic_isSetMode>:

uint8_t traffic_isSetMode() {
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
	if (global_state == SET_MODE) return 1;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <traffic_isSetMode+0x1c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b0d      	cmp	r3, #13
 800119e:	d101      	bne.n	80011a4 <traffic_isSetMode+0x10>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <traffic_isSetMode+0x12>
	return 0;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000104 	.word	0x20000104

080011b4 <global_get_totalDuration>:
uint8_t buzzer_state 	= 0;

//function for duration
uint32_t trafficDuration[3] = {5000, 3000, 2000};

uint32_t global_get_totalDuration() {
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
	return trafficDuration[0] + trafficDuration[1] + trafficDuration[2];
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <global_get_totalDuration+0x1c>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <global_get_totalDuration+0x1c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	441a      	add	r2, r3
 80011c2:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <global_get_totalDuration+0x1c>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	4413      	add	r3, r2
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000004 	.word	0x20000004

080011d4 <button_reading>:

int TimeOutForKeyPress[MAX_BUTTON] = {LONG_DURATION};
int flagBtn[MAX_BUTTON] = {0};
int flagBtnLong[MAX_BUTTON] = {0};

void button_reading(void){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++){
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	e0a2      	b.n	8001326 <button_reading+0x152>
		KeyReg2[i] = KeyReg1[i];
 80011e0:	4a55      	ldr	r2, [pc, #340]	; (8001338 <button_reading+0x164>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011e8:	4954      	ldr	r1, [pc, #336]	; (800133c <button_reading+0x168>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80011f0:	4a53      	ldr	r2, [pc, #332]	; (8001340 <button_reading+0x16c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011f8:	494f      	ldr	r1, [pc, #316]	; (8001338 <button_reading+0x164>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d836      	bhi.n	8001274 <button_reading+0xa0>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <button_reading+0x38>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	0800121d 	.word	0x0800121d
 8001210:	08001233 	.word	0x08001233
 8001214:	08001249 	.word	0x08001249
 8001218:	0800125f 	.word	0x0800125f
		switch (i){ //check which button is being read now
		case BTN_1:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_1_Pin);
 800121c:	2102      	movs	r1, #2
 800121e:	4849      	ldr	r0, [pc, #292]	; (8001344 <button_reading+0x170>)
 8001220:	f000 ff60 	bl	80020e4 <HAL_GPIO_ReadPin>
 8001224:	4603      	mov	r3, r0
 8001226:	4619      	mov	r1, r3
 8001228:	4a45      	ldr	r2, [pc, #276]	; (8001340 <button_reading+0x16c>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8001230:	e021      	b.n	8001276 <button_reading+0xa2>
		case BTN_2:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_2_Pin);
 8001232:	2110      	movs	r1, #16
 8001234:	4843      	ldr	r0, [pc, #268]	; (8001344 <button_reading+0x170>)
 8001236:	f000 ff55 	bl	80020e4 <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	4619      	mov	r1, r3
 800123e:	4a40      	ldr	r2, [pc, #256]	; (8001340 <button_reading+0x16c>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8001246:	e016      	b.n	8001276 <button_reading+0xa2>
		case BTN_3:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, BTN_3_Pin);
 8001248:	2101      	movs	r1, #1
 800124a:	483f      	ldr	r0, [pc, #252]	; (8001348 <button_reading+0x174>)
 800124c:	f000 ff4a 	bl	80020e4 <HAL_GPIO_ReadPin>
 8001250:	4603      	mov	r3, r0
 8001252:	4619      	mov	r1, r3
 8001254:	4a3a      	ldr	r2, [pc, #232]	; (8001340 <button_reading+0x16c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800125c:	e00b      	b.n	8001276 <button_reading+0xa2>
		case BTN_PD:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, PD_BTN_Pin);
 800125e:	2101      	movs	r1, #1
 8001260:	4838      	ldr	r0, [pc, #224]	; (8001344 <button_reading+0x170>)
 8001262:	f000 ff3f 	bl	80020e4 <HAL_GPIO_ReadPin>
 8001266:	4603      	mov	r3, r0
 8001268:	4619      	mov	r1, r3
 800126a:	4a35      	ldr	r2, [pc, #212]	; (8001340 <button_reading+0x16c>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8001272:	e000      	b.n	8001276 <button_reading+0xa2>
		default:
			break;
 8001274:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8001276:	4a30      	ldr	r2, [pc, #192]	; (8001338 <button_reading+0x164>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800127e:	4930      	ldr	r1, [pc, #192]	; (8001340 <button_reading+0x16c>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001286:	429a      	cmp	r2, r3
 8001288:	d14a      	bne.n	8001320 <button_reading+0x14c>
 800128a:	4a2b      	ldr	r2, [pc, #172]	; (8001338 <button_reading+0x164>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001292:	492a      	ldr	r1, [pc, #168]	; (800133c <button_reading+0x168>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800129a:	429a      	cmp	r2, r3
 800129c:	d140      	bne.n	8001320 <button_reading+0x14c>
			if (KeyReg2[i] != KeyReg3[i]){
 800129e:	4a27      	ldr	r2, [pc, #156]	; (800133c <button_reading+0x168>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012a6:	4929      	ldr	r1, [pc, #164]	; (800134c <button_reading+0x178>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d022      	beq.n	80012f8 <button_reading+0x124>
				KeyReg3[i] = KeyReg2[i];
 80012b2:	4a22      	ldr	r2, [pc, #136]	; (800133c <button_reading+0x168>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012ba:	4924      	ldr	r1, [pc, #144]	; (800134c <button_reading+0x178>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == IS_PRESSED){
 80012c2:	4a22      	ldr	r2, [pc, #136]	; (800134c <button_reading+0x178>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <button_reading+0x10e>
					TimeOutForKeyPress[i] = LONG_DURATION;
 80012ce:	4a20      	ldr	r2, [pc, #128]	; (8001350 <button_reading+0x17c>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80012d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f83e 	bl	800135c <subKeyProcess>
 80012e0:	e01e      	b.n	8001320 <button_reading+0x14c>
				}
				else{
					flagBtnLong[i] = 0;
 80012e2:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <button_reading+0x180>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2100      	movs	r1, #0
 80012e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					Over1Sec[i] = 0;
 80012ec:	4a1a      	ldr	r2, [pc, #104]	; (8001358 <button_reading+0x184>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2100      	movs	r1, #0
 80012f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80012f6:	e013      	b.n	8001320 <button_reading+0x14c>
				}
			} else {
				TimeOutForKeyPress[i] --;
 80012f8:	4a15      	ldr	r2, [pc, #84]	; (8001350 <button_reading+0x17c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	4913      	ldr	r1, [pc, #76]	; (8001350 <button_reading+0x17c>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 800130a:	4a11      	ldr	r2, [pc, #68]	; (8001350 <button_reading+0x17c>)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d104      	bne.n	8001320 <button_reading+0x14c>
					KeyReg3[i] = IS_RELEASED;
 8001316:	4a0d      	ldr	r2, [pc, #52]	; (800134c <button_reading+0x178>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2101      	movs	r1, #1
 800131c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++){
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3301      	adds	r3, #1
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b03      	cmp	r3, #3
 800132a:	f77f af59 	ble.w	80011e0 <button_reading+0xc>
				}
			}
		}
	}
}
 800132e:	bf00      	nop
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000020 	.word	0x20000020
 800133c:	20000030 	.word	0x20000030
 8001340:	20000010 	.word	0x20000010
 8001344:	40010800 	.word	0x40010800
 8001348:	40010c00 	.word	0x40010c00
 800134c:	20000040 	.word	0x20000040
 8001350:	20000050 	.word	0x20000050
 8001354:	2000012c 	.word	0x2000012c
 8001358:	2000010c 	.word	0x2000010c

0800135c <subKeyProcess>:

void subKeyProcess(int index){
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	flagBtn[index] = 1;
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <subKeyProcess+0x48>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2101      	movs	r1, #1
 800136a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (Over1Sec[index] == 0){
 800136e:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <subKeyProcess+0x4c>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <subKeyProcess+0x2a>
		Over1Sec[index] = 1;
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <subKeyProcess+0x4c>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2101      	movs	r1, #1
 8001380:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else{
		flagBtnLong[index] = 1;
		flagBtn[index] = 0;
	}
}
 8001384:	e009      	b.n	800139a <subKeyProcess+0x3e>
		flagBtnLong[index] = 1;
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <subKeyProcess+0x50>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2101      	movs	r1, #1
 800138c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagBtn[index] = 0;
 8001390:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <subKeyProcess+0x48>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2100      	movs	r1, #0
 8001396:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	2000011c 	.word	0x2000011c
 80013a8:	2000010c 	.word	0x2000010c
 80013ac:	2000012c 	.word	0x2000012c

080013b0 <button_isPressed>:

int button_isPressed(int index){
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
	if (flagBtn[index] == 1){
 80013b8:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <button_isPressed+0x30>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d106      	bne.n	80013d2 <button_isPressed+0x22>
		flagBtn[index] = 0;
 80013c4:	4a06      	ldr	r2, [pc, #24]	; (80013e0 <button_isPressed+0x30>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2100      	movs	r1, #0
 80013ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <button_isPressed+0x24>
	}
	return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	2000011c 	.word	0x2000011c

080013e4 <button_isLongPressed>:

int button_isLongPressed(int index){
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	return (flagBtnLong[index] == 1);
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <button_isLongPressed+0x24>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	2000012c 	.word	0x2000012c

0800140c <buzzer_modify_volume>:
#include "u_i_buzzer.h"
#include "u_global.h"

TIM_HandleTypeDef htim3;

void buzzer_modify_volume(uint8_t volumeLevel) {
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, volumeLevel);
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <buzzer_modify_volume+0x1c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	79fa      	ldrb	r2, [r7, #7]
 800141c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	200001c8 	.word	0x200001c8

0800142c <buzzer_turn_on>:

void buzzer_turn_on() {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	buzzer_modify_volume(50);
 8001430:	2032      	movs	r0, #50	; 0x32
 8001432:	f7ff ffeb 	bl	800140c <buzzer_modify_volume>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}

0800143a <buzzer_turn_off>:

void buzzer_turn_off() {
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
	buzzer_modify_volume(0);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff ffe4 	bl	800140c <buzzer_modify_volume>
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <buzzer_blinky>:

void buzzer_blinky() {
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	if (buzzer_state == BZ_ON) buzzer_turn_on();
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <buzzer_blinky+0x1c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b51      	cmp	r3, #81	; 0x51
 8001452:	d102      	bne.n	800145a <buzzer_blinky+0x12>
 8001454:	f7ff ffea 	bl	800142c <buzzer_turn_on>
	else buzzer_turn_off();
}
 8001458:	e001      	b.n	800145e <buzzer_blinky+0x16>
	else buzzer_turn_off();
 800145a:	f7ff ffee 	bl	800143a <buzzer_turn_off>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000010b 	.word	0x2000010b

08001468 <duration_set>:

void duration_init() {
	timer_setDuration(TIMER_DUR, 10);
	durationList[0] = durationList[1] = 0; //0s
}
void duration_set(uint8_t index, uint32_t duration_ms) {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
	durationList[index] = duration_ms / DUR_CYCLE; //unit of time: milisecond
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	4905      	ldr	r1, [pc, #20]	; (8001490 <duration_set+0x28>)
 800147a:	fba1 1202 	umull	r1, r2, r1, r2
 800147e:	08d2      	lsrs	r2, r2, #3
 8001480:	4904      	ldr	r1, [pc, #16]	; (8001494 <duration_set+0x2c>)
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	cccccccd 	.word	0xcccccccd
 8001494:	2000014c 	.word	0x2000014c

08001498 <duration_get>:

uint32_t duration_get(uint8_t index) { //return value of duration in second (not in milisecond)
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	uint32_t extra_duration = ((durationList[index] * DUR_CYCLE) % (DUR_UNIT)) ? 1 : 0;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4a15      	ldr	r2, [pc, #84]	; (80014fc <duration_get+0x64>)
 80014a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <duration_get+0x68>)
 80014b6:	fba3 1302 	umull	r1, r3, r3, r2
 80014ba:	099b      	lsrs	r3, r3, #6
 80014bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014c0:	fb01 f303 	mul.w	r3, r1, r3
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	bf14      	ite	ne
 80014ca:	2301      	movne	r3, #1
 80014cc:	2300      	moveq	r3, #0
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	60fb      	str	r3, [r7, #12]
	return (durationList[index] * DUR_CYCLE / DUR_UNIT) + extra_duration;
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4a09      	ldr	r2, [pc, #36]	; (80014fc <duration_get+0x64>)
 80014d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <duration_get+0x68>)
 80014e6:	fba3 2302 	umull	r2, r3, r3, r2
 80014ea:	099a      	lsrs	r2, r3, #6
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	2000014c 	.word	0x2000014c
 8001500:	10624dd3 	.word	0x10624dd3

08001504 <duration_run>:

void duration_run() { //use timer interupt to auto increase
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
	durationList[0] = (durationList[0] == 0) ? 0 : durationList[0] - 1;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <duration_run+0x38>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <duration_run+0x14>
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <duration_run+0x38>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3b01      	subs	r3, #1
 8001516:	e000      	b.n	800151a <duration_run+0x16>
 8001518:	2300      	movs	r3, #0
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <duration_run+0x38>)
 800151c:	6013      	str	r3, [r2, #0]
	durationList[1] = (durationList[1] == 0) ? 0 : durationList[1] - 1;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <duration_run+0x38>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <duration_run+0x2a>
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <duration_run+0x38>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	e000      	b.n	8001530 <duration_run+0x2c>
 800152e:	2300      	movs	r3, #0
 8001530:	4a02      	ldr	r2, [pc, #8]	; (800153c <duration_run+0x38>)
 8001532:	6053      	str	r3, [r2, #4]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	2000014c 	.word	0x2000014c

08001540 <led_clear_all>:
#include "main.h"
#include "u_global.h"

#ifdef BOARD
//clear all led
void led_clear_all() { //00
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <led_clear_all+0x20>)
 800154c:	f000 fde1 	bl	8002112 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <led_clear_all+0x24>)
 8001558:	f000 fddb 	bl	8002112 <HAL_GPIO_WritePin>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40010800 	.word	0x40010800
 8001564:	40010c00 	.word	0x40010c00

08001568 <led_turn_on>:

//turn specific led with specific color
void led_turn_on(uint8_t led_index, uint8_t led_type) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	460a      	mov	r2, r1
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b07      	cmp	r3, #7
 800157c:	d063      	beq.n	8001646 <led_turn_on+0xde>
 800157e:	2b07      	cmp	r3, #7
 8001580:	f300 8093 	bgt.w	80016aa <led_turn_on+0x142>
 8001584:	2b05      	cmp	r3, #5
 8001586:	d002      	beq.n	800158e <led_turn_on+0x26>
 8001588:	2b06      	cmp	r3, #6
 800158a:	d030      	beq.n	80015ee <led_turn_on+0x86>
			break;
		}
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 800158c:	e08d      	b.n	80016aa <led_turn_on+0x142>
		switch (led_type) {
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d01f      	beq.n	80015d4 <led_turn_on+0x6c>
 8001594:	2b02      	cmp	r3, #2
 8001596:	f300 808a 	bgt.w	80016ae <led_turn_on+0x146>
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <led_turn_on+0x3c>
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d00c      	beq.n	80015bc <led_turn_on+0x54>
		break;
 80015a2:	e084      	b.n	80016ae <led_turn_on+0x146>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015aa:	4845      	ldr	r0, [pc, #276]	; (80016c0 <led_turn_on+0x158>)
 80015ac:	f000 fdb1 	bl	8002112 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2108      	movs	r1, #8
 80015b4:	4843      	ldr	r0, [pc, #268]	; (80016c4 <led_turn_on+0x15c>)
 80015b6:	f000 fdac 	bl	8002112 <HAL_GPIO_WritePin>
			break;
 80015ba:	e017      	b.n	80015ec <led_turn_on+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c2:	483f      	ldr	r0, [pc, #252]	; (80016c0 <led_turn_on+0x158>)
 80015c4:	f000 fda5 	bl	8002112 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_SET);
 80015c8:	2201      	movs	r2, #1
 80015ca:	2108      	movs	r1, #8
 80015cc:	483d      	ldr	r0, [pc, #244]	; (80016c4 <led_turn_on+0x15c>)
 80015ce:	f000 fda0 	bl	8002112 <HAL_GPIO_WritePin>
			break;
 80015d2:	e00b      	b.n	80015ec <led_turn_on+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015da:	4839      	ldr	r0, [pc, #228]	; (80016c0 <led_turn_on+0x158>)
 80015dc:	f000 fd99 	bl	8002112 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2108      	movs	r1, #8
 80015e4:	4837      	ldr	r0, [pc, #220]	; (80016c4 <led_turn_on+0x15c>)
 80015e6:	f000 fd94 	bl	8002112 <HAL_GPIO_WritePin>
			break;
 80015ea:	bf00      	nop
		break;
 80015ec:	e05f      	b.n	80016ae <led_turn_on+0x146>
		switch (led_type) {
 80015ee:	79bb      	ldrb	r3, [r7, #6]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d01c      	beq.n	800162e <led_turn_on+0xc6>
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	dc5c      	bgt.n	80016b2 <led_turn_on+0x14a>
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <led_turn_on+0x9a>
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d00b      	beq.n	8001618 <led_turn_on+0xb0>
		break;
 8001600:	e057      	b.n	80016b2 <led_turn_on+0x14a>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_SET);
 8001602:	2201      	movs	r2, #1
 8001604:	2120      	movs	r1, #32
 8001606:	482f      	ldr	r0, [pc, #188]	; (80016c4 <led_turn_on+0x15c>)
 8001608:	f000 fd83 	bl	8002112 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	2110      	movs	r1, #16
 8001610:	482c      	ldr	r0, [pc, #176]	; (80016c4 <led_turn_on+0x15c>)
 8001612:	f000 fd7e 	bl	8002112 <HAL_GPIO_WritePin>
			break;
 8001616:	e015      	b.n	8001644 <led_turn_on+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2120      	movs	r1, #32
 800161c:	4829      	ldr	r0, [pc, #164]	; (80016c4 <led_turn_on+0x15c>)
 800161e:	f000 fd78 	bl	8002112 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_SET);
 8001622:	2201      	movs	r2, #1
 8001624:	2110      	movs	r1, #16
 8001626:	4827      	ldr	r0, [pc, #156]	; (80016c4 <led_turn_on+0x15c>)
 8001628:	f000 fd73 	bl	8002112 <HAL_GPIO_WritePin>
			break;
 800162c:	e00a      	b.n	8001644 <led_turn_on+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	2120      	movs	r1, #32
 8001632:	4824      	ldr	r0, [pc, #144]	; (80016c4 <led_turn_on+0x15c>)
 8001634:	f000 fd6d 	bl	8002112 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2110      	movs	r1, #16
 800163c:	4821      	ldr	r0, [pc, #132]	; (80016c4 <led_turn_on+0x15c>)
 800163e:	f000 fd68 	bl	8002112 <HAL_GPIO_WritePin>
			break;
 8001642:	bf00      	nop
		break;
 8001644:	e035      	b.n	80016b2 <led_turn_on+0x14a>
		switch (led_type) {
 8001646:	79bb      	ldrb	r3, [r7, #6]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d020      	beq.n	800168e <led_turn_on+0x126>
 800164c:	2b02      	cmp	r3, #2
 800164e:	dc32      	bgt.n	80016b6 <led_turn_on+0x14e>
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <led_turn_on+0xf2>
 8001654:	2b01      	cmp	r3, #1
 8001656:	d00d      	beq.n	8001674 <led_turn_on+0x10c>
		break;
 8001658:	e02d      	b.n	80016b6 <led_turn_on+0x14e>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_SET);
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001660:	4818      	ldr	r0, [pc, #96]	; (80016c4 <led_turn_on+0x15c>)
 8001662:	f000 fd56 	bl	8002112 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166c:	4814      	ldr	r0, [pc, #80]	; (80016c0 <led_turn_on+0x158>)
 800166e:	f000 fd50 	bl	8002112 <HAL_GPIO_WritePin>
			break;
 8001672:	e019      	b.n	80016a8 <led_turn_on+0x140>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800167a:	4812      	ldr	r0, [pc, #72]	; (80016c4 <led_turn_on+0x15c>)
 800167c:	f000 fd49 	bl	8002112 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_SET);
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001686:	480e      	ldr	r0, [pc, #56]	; (80016c0 <led_turn_on+0x158>)
 8001688:	f000 fd43 	bl	8002112 <HAL_GPIO_WritePin>
			break;
 800168c:	e00c      	b.n	80016a8 <led_turn_on+0x140>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <led_turn_on+0x15c>)
 8001696:	f000 fd3c 	bl	8002112 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_SET);
 800169a:	2201      	movs	r2, #1
 800169c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <led_turn_on+0x158>)
 80016a2:	f000 fd36 	bl	8002112 <HAL_GPIO_WritePin>
			break;
 80016a6:	bf00      	nop
		break;
 80016a8:	e005      	b.n	80016b6 <led_turn_on+0x14e>
		break;
 80016aa:	bf00      	nop
 80016ac:	e004      	b.n	80016b8 <led_turn_on+0x150>
		break;
 80016ae:	bf00      	nop
 80016b0:	e002      	b.n	80016b8 <led_turn_on+0x150>
		break;
 80016b2:	bf00      	nop
 80016b4:	e000      	b.n	80016b8 <led_turn_on+0x150>
		break;
 80016b6:	bf00      	nop
	}
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40010800 	.word	0x40010800
 80016c4:	40010c00 	.word	0x40010c00

080016c8 <led_turn_off>:

//turn of specific led
void led_turn_off(uint8_t led_index) { // 00
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	switch (led_index) {
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2b07      	cmp	r3, #7
 80016d6:	d01d      	beq.n	8001714 <led_turn_off+0x4c>
 80016d8:	2b07      	cmp	r3, #7
 80016da:	dc28      	bgt.n	800172e <led_turn_off+0x66>
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d002      	beq.n	80016e6 <led_turn_off+0x1e>
 80016e0:	2b06      	cmp	r3, #6
 80016e2:	d00c      	beq.n	80016fe <led_turn_off+0x36>
		HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 80016e4:	e023      	b.n	800172e <led_turn_off+0x66>
		HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ec:	4812      	ldr	r0, [pc, #72]	; (8001738 <led_turn_off+0x70>)
 80016ee:	f000 fd10 	bl	8002112 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2108      	movs	r1, #8
 80016f6:	4811      	ldr	r0, [pc, #68]	; (800173c <led_turn_off+0x74>)
 80016f8:	f000 fd0b 	bl	8002112 <HAL_GPIO_WritePin>
		break;
 80016fc:	e018      	b.n	8001730 <led_turn_off+0x68>
		HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2120      	movs	r1, #32
 8001702:	480e      	ldr	r0, [pc, #56]	; (800173c <led_turn_off+0x74>)
 8001704:	f000 fd05 	bl	8002112 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2110      	movs	r1, #16
 800170c:	480b      	ldr	r0, [pc, #44]	; (800173c <led_turn_off+0x74>)
 800170e:	f000 fd00 	bl	8002112 <HAL_GPIO_WritePin>
		break;
 8001712:	e00d      	b.n	8001730 <led_turn_off+0x68>
		HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800171a:	4808      	ldr	r0, [pc, #32]	; (800173c <led_turn_off+0x74>)
 800171c:	f000 fcf9 	bl	8002112 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001726:	4804      	ldr	r0, [pc, #16]	; (8001738 <led_turn_off+0x70>)
 8001728:	f000 fcf3 	bl	8002112 <HAL_GPIO_WritePin>
		break;
 800172c:	e000      	b.n	8001730 <led_turn_off+0x68>
		break;
 800172e:	bf00      	nop
	}
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40010800 	.word	0x40010800
 800173c:	40010c00 	.word	0x40010c00

08001740 <led_pedestrian_blinky>:

//blink led pedestrian
void led_pedestrian_blinky(uint8_t led_type) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	if (pd_led_state == PD_LED_ON) led_turn_on(PEDESTRIAN, led_type);
 800174a:	4b08      	ldr	r3, [pc, #32]	; (800176c <led_pedestrian_blinky+0x2c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b47      	cmp	r3, #71	; 0x47
 8001750:	d105      	bne.n	800175e <led_pedestrian_blinky+0x1e>
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	4619      	mov	r1, r3
 8001756:	2007      	movs	r0, #7
 8001758:	f7ff ff06 	bl	8001568 <led_turn_on>
	else led_turn_off(PEDESTRIAN);
}
 800175c:	e002      	b.n	8001764 <led_pedestrian_blinky+0x24>
	else led_turn_off(PEDESTRIAN);
 800175e:	2007      	movs	r0, #7
 8001760:	f7ff ffb2 	bl	80016c8 <led_turn_off>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000010a 	.word	0x2000010a

08001770 <timer_unit_construct>:

struct timer_list timerList;
uint8_t	timerFlag[MAX_TIMER] = {0};

/*-------------- unit function -------------------*/
struct timer_unit* timer_unit_construct(uint8_t index, uint32_t duration) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = malloc(sizeof (struct timer_unit)); //dynamic allocating a timer unit
 800177c:	200c      	movs	r0, #12
 800177e:	f002 fac5 	bl	8003d0c <malloc>
 8001782:	4603      	mov	r3, r0
 8001784:	60fb      	str	r3, [r7, #12]
	if (newUnit == NULL) {
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <timer_unit_construct+0x20>
		return NULL;
 800178c:	2300      	movs	r3, #0
 800178e:	e009      	b.n	80017a4 <timer_unit_construct+0x34>
	}
	newUnit->index = index;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	79fa      	ldrb	r2, [r7, #7]
 8001794:	701a      	strb	r2, [r3, #0]
	newUnit->duration = duration;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	605a      	str	r2, [r3, #4]
	newUnit->nextTimer = NULL;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
	return newUnit;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3710      	adds	r7, #16
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <timer_unit_destruct>:

void timer_unit_destruct(struct timer_unit *unit) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	free(unit);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f002 fab1 	bl	8003d1c <free>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <timer_list_add>:

/*-------------- list function -------------------*/
void timer_list_add(struct timer_unit *unit){
 80017c4:	b480      	push	{r7}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	//list full
	if (timerList.size == MAX_TIMER) return;
 80017cc:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <timer_list_add+0xec>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b06      	cmp	r3, #6
 80017d2:	d068      	beq.n	80018a6 <timer_list_add+0xe2>

	//list empty
	if (timerList.size == 0) {
 80017d4:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <timer_list_add+0xec>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d109      	bne.n	80017f0 <timer_list_add+0x2c>
		timerList.head = unit;
 80017dc:	4a34      	ldr	r2, [pc, #208]	; (80018b0 <timer_list_add+0xec>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6053      	str	r3, [r2, #4]
		timerList.size++;
 80017e2:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <timer_list_add+0xec>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	3301      	adds	r3, #1
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <timer_list_add+0xec>)
 80017ec:	701a      	strb	r2, [r3, #0]
		return;
 80017ee:	e05b      	b.n	80018a8 <timer_list_add+0xe4>
	}

	//list has at least 1 item
	struct timer_unit *curr = timerList.head,
 80017f0:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <timer_list_add+0xec>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	617b      	str	r3, [r7, #20]
					  *prev = NULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
	uint32_t totalDuration = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
	while(curr != NULL) { //iterating the list
 80017fe:	e00e      	b.n	800181e <timer_list_add+0x5a>
		totalDuration += curr->duration;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]
		if (unit->duration < totalDuration) break;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	429a      	cmp	r2, r3
 8001812:	d808      	bhi.n	8001826 <timer_list_add+0x62>
		prev = curr;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
		curr = curr->nextTimer;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	617b      	str	r3, [r7, #20]
	while(curr != NULL) { //iterating the list
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1ed      	bne.n	8001800 <timer_list_add+0x3c>
 8001824:	e000      	b.n	8001828 <timer_list_add+0x64>
		if (unit->duration < totalDuration) break;
 8001826:	bf00      	nop
	}
	if (prev == NULL) { //new unit is added before the head
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d113      	bne.n	8001856 <timer_list_add+0x92>
		unit->nextTimer = curr;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	609a      	str	r2, [r3, #8]
		curr->duration -= unit->duration;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	1ad2      	subs	r2, r2, r3
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	605a      	str	r2, [r3, #4]
		timerList.head = unit;
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <timer_list_add+0xec>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6053      	str	r3, [r2, #4]
		timerList.size++;
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <timer_list_add+0xec>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <timer_list_add+0xec>)
 8001852:	701a      	strb	r2, [r3, #0]
		return;
 8001854:	e028      	b.n	80018a8 <timer_list_add+0xe4>
	}
	prev->nextTimer = unit;
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
	unit->nextTimer = curr;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	609a      	str	r2, [r3, #8]
	if (curr == NULL){
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d106      	bne.n	8001876 <timer_list_add+0xb2>
		unit->duration -= totalDuration;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	1ad2      	subs	r2, r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	e010      	b.n	8001898 <timer_list_add+0xd4>
	}
	else{
		uint32_t tmp = unit->duration;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	60bb      	str	r3, [r7, #8]
		unit->duration -= (totalDuration - curr->duration);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	6859      	ldr	r1, [r3, #4]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1acb      	subs	r3, r1, r3
 8001888:	441a      	add	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	605a      	str	r2, [r3, #4]
		curr->duration = (totalDuration - tmp);
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1ad2      	subs	r2, r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	605a      	str	r2, [r3, #4]
	}
	timerList.size++;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <timer_list_add+0xec>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <timer_list_add+0xec>)
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	e000      	b.n	80018a8 <timer_list_add+0xe4>
	if (timerList.size == MAX_TIMER) return;
 80018a6:	bf00      	nop
}
 80018a8:	371c      	adds	r7, #28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000210 	.word	0x20000210

080018b4 <timer_list_pop>:

void timer_list_pop(){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
	 //list empty
	if (timerList.size == 0) return;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <timer_list_pop+0x38>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d010      	beq.n	80018e4 <timer_list_pop+0x30>

	struct timer_unit *delUnit = timerList.head;
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <timer_list_pop+0x38>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	607b      	str	r3, [r7, #4]
	timerList.head = delUnit->nextTimer;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a07      	ldr	r2, [pc, #28]	; (80018ec <timer_list_pop+0x38>)
 80018ce:	6053      	str	r3, [r2, #4]
	timer_unit_destruct(delUnit);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff6b 	bl	80017ac <timer_unit_destruct>
	timerList.size--;
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <timer_list_pop+0x38>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	3b01      	subs	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b03      	ldr	r3, [pc, #12]	; (80018ec <timer_list_pop+0x38>)
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e000      	b.n	80018e6 <timer_list_pop+0x32>
	if (timerList.size == 0) return;
 80018e4:	bf00      	nop
}
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000210 	.word	0x20000210

080018f0 <timer_init>:

/*-------------- global function -------------------*/
void timer_init(){
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	timerList.head = NULL;
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <timer_init+0x18>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
	timerList.size = 0;
 80018fa:	4b03      	ldr	r3, [pc, #12]	; (8001908 <timer_init+0x18>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	20000210 	.word	0x20000210

0800190c <timer_run>:

void timer_run(){
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
	if (timerList.size == 0) return;
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <timer_run+0x58>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d020      	beq.n	800195c <timer_run+0x50>
	if (timerList.head->duration >= 0) {
		timerList.head->duration--;
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <timer_run+0x58>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	3a01      	subs	r2, #1
 8001922:	605a      	str	r2, [r3, #4]
		if (timerList.head->duration <= 0) {
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <timer_run+0x58>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d117      	bne.n	800195e <timer_run+0x52>
			uint8_t index = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	71fb      	strb	r3, [r7, #7]
			while(timerList.size && timerList.head->duration == 0) {
 8001932:	e009      	b.n	8001948 <timer_run+0x3c>
				index = timerList.head->index;
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <timer_run+0x58>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
				timerFlag[index] = 1;
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <timer_run+0x5c>)
 8001940:	2101      	movs	r1, #1
 8001942:	54d1      	strb	r1, [r2, r3]
				timer_list_pop();
 8001944:	f7ff ffb6 	bl	80018b4 <timer_list_pop>
			while(timerList.size && timerList.head->duration == 0) {
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <timer_run+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <timer_run+0x52>
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <timer_run+0x58>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0ec      	beq.n	8001934 <timer_run+0x28>
 800195a:	e000      	b.n	800195e <timer_run+0x52>
	if (timerList.size == 0) return;
 800195c:	bf00      	nop
			}
		}
	}
}
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000210 	.word	0x20000210
 8001968:	2000013c 	.word	0x2000013c

0800196c <timer_setDuration>:

void timer_setDuration(uint8_t index, uint32_t duration) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = timer_unit_construct(index, duration/CYCLE);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <timer_setDuration+0x30>)
 800197c:	fba2 2303 	umull	r2, r3, r2, r3
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fef2 	bl	8001770 <timer_unit_construct>
 800198c:	60f8      	str	r0, [r7, #12]
	timer_list_add(newUnit);
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff ff18 	bl	80017c4 <timer_list_add>
}
 8001994:	bf00      	nop
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	cccccccd 	.word	0xcccccccd

080019a0 <timer_checkFlag>:

uint8_t	timer_checkFlag(uint8_t index) {
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	if (timerFlag[index] == 1) {
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <timer_checkFlag+0x2c>)
 80019ae:	5cd3      	ldrb	r3, [r2, r3]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <timer_checkFlag+0x20>
		timerFlag[index] = 0;
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <timer_checkFlag+0x2c>)
 80019b8:	2100      	movs	r1, #0
 80019ba:	54d1      	strb	r1, [r2, r3]
		return 1;
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <timer_checkFlag+0x22>
	}
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr
 80019cc:	2000013c 	.word	0x2000013c

080019d0 <timer_clear>:

void timer_clear(uint8_t index) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
//	uint32_t totalDuration = 0;
	timerFlag[index] = 0;
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <timer_clear+0x90>)
 80019de:	2100      	movs	r1, #0
 80019e0:	54d1      	strb	r1, [r2, r3]
	struct timer_unit *curr = timerList.head,
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <timer_clear+0x94>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	60fb      	str	r3, [r7, #12]
			          *prev = NULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
	while (curr != NULL) {
 80019ec:	e009      	b.n	8001a02 <timer_clear+0x32>
		if (curr->index == index) break;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	79fa      	ldrb	r2, [r7, #7]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d008      	beq.n	8001a0a <timer_clear+0x3a>

//		totalDuration += curr->duration;
		prev = curr;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	60bb      	str	r3, [r7, #8]
		curr = curr->nextTimer;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	60fb      	str	r3, [r7, #12]
	while (curr != NULL) {
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f2      	bne.n	80019ee <timer_clear+0x1e>
 8001a08:	e000      	b.n	8001a0c <timer_clear+0x3c>
		if (curr->index == index) break;
 8001a0a:	bf00      	nop
	}

	if (curr == NULL) return;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d022      	beq.n	8001a58 <timer_clear+0x88>
	if (prev == NULL) { //item at the head of list
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d104      	bne.n	8001a22 <timer_clear+0x52>
		timerList.head = curr->nextTimer;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <timer_clear+0x94>)
 8001a1e:	6053      	str	r3, [r2, #4]
 8001a20:	e003      	b.n	8001a2a <timer_clear+0x5a>
	}
	else {
		prev->nextTimer = curr->nextTimer;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	609a      	str	r2, [r3, #8]
	}
	if (curr->nextTimer != NULL) curr->nextTimer->duration += curr->duration;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d008      	beq.n	8001a44 <timer_clear+0x74>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	440a      	add	r2, r1
 8001a42:	605a      	str	r2, [r3, #4]
	timer_unit_destruct(curr);
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f7ff feb1 	bl	80017ac <timer_unit_destruct>
	timerList.size--;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <timer_clear+0x94>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <timer_clear+0x94>)
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e000      	b.n	8001a5a <timer_clear+0x8a>
	if (curr == NULL) return;
 8001a58:	bf00      	nop
}
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000013c 	.word	0x2000013c
 8001a64:	20000210 	.word	0x20000210

08001a68 <uart_send_num>:
	sprintf(tx_data, "%s\r\n", str);
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
}

void uart_send_num(char str[], uint32_t data) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	sprintf(tx_data, "%s%ld\r\n", str, data);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	490a      	ldr	r1, [pc, #40]	; (8001aa0 <uart_send_num+0x38>)
 8001a78:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <uart_send_num+0x3c>)
 8001a7a:	f002 fa15 	bl	8003ea8 <siprintf>
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
 8001a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a82:	2228      	movs	r2, #40	; 0x28
 8001a84:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <uart_send_num+0x3c>)
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <uart_send_num+0x40>)
 8001a88:	f001 ff43 	bl	8003912 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4907      	ldr	r1, [pc, #28]	; (8001aac <uart_send_num+0x44>)
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <uart_send_num+0x40>)
 8001a92:	f001 ffd0 	bl	8003a36 <HAL_UART_Receive_IT>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	08004608 	.word	0x08004608
 8001aa4:	200001a0 	.word	0x200001a0
 8001aa8:	20000218 	.word	0x20000218
 8001aac:	20000154 	.word	0x20000154

08001ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ac8:	4c0a      	ldr	r4, [pc, #40]	; (8001af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ad6:	f7fe fe89 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ada:	f002 f8f3 	bl	8003cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ade:	f7fe fb35 	bl	800014c <main>
  bx lr
 8001ae2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8001aec:	08004674 	.word	0x08004674
  ldr r2, =_sbss
 8001af0:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001af4:	20000270 	.word	0x20000270

08001af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC1_2_IRQHandler>
	...

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_Init+0x28>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_Init+0x28>)
 8001b06:	f043 0310 	orr.w	r3, r3, #16
 8001b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f923 	bl	8001d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7fe fd1e 	bl	8000558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40022000 	.word	0x40022000

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f93b 	bl	8001dc2 <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f903 	bl	8001d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000064 	.word	0x20000064
 8001b84:	20000060 	.word	0x20000060

08001b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_IncTick+0x1c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	20000064 	.word	0x20000064
 8001ba8:	2000025c 	.word	0x2000025c

08001bac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b02      	ldr	r3, [pc, #8]	; (8001bbc <HAL_GetTick+0x10>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	2000025c 	.word	0x2000025c

08001bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bdc:	4013      	ands	r3, r2
 8001bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	60d3      	str	r3, [r2, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <__NVIC_GetPriorityGrouping+0x18>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	f003 0307 	and.w	r3, r3, #7
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	db0b      	blt.n	8001c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	f003 021f 	and.w	r2, r3, #31
 8001c3c:	4906      	ldr	r1, [pc, #24]	; (8001c58 <__NVIC_EnableIRQ+0x34>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	095b      	lsrs	r3, r3, #5
 8001c44:	2001      	movs	r0, #1
 8001c46:	fa00 f202 	lsl.w	r2, r0, r2
 8001c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d24:	d301      	bcc.n	8001d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00f      	b.n	8001d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <SysTick_Config+0x40>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d32:	210f      	movs	r1, #15
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f7ff ff90 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <SysTick_Config+0x40>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <SysTick_Config+0x40>)
 8001d44:	2207      	movs	r2, #7
 8001d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	e000e010 	.word	0xe000e010

08001d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ff2d 	bl	8001bc0 <__NVIC_SetPriorityGrouping>
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d80:	f7ff ff42 	bl	8001c08 <__NVIC_GetPriorityGrouping>
 8001d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f7ff ff90 	bl	8001cb0 <NVIC_EncodePriority>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff5f 	bl	8001c5c <__NVIC_SetPriority>
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	4603      	mov	r3, r0
 8001dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff35 	bl	8001c24 <__NVIC_EnableIRQ>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ffa2 	bl	8001d14 <SysTick_Config>
 8001dd0:	4603      	mov	r3, r0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b08b      	sub	sp, #44	; 0x2c
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dee:	e169      	b.n	80020c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001df0:	2201      	movs	r2, #1
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 8158 	bne.w	80020be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	4a9a      	ldr	r2, [pc, #616]	; (800207c <HAL_GPIO_Init+0x2a0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d05e      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e18:	4a98      	ldr	r2, [pc, #608]	; (800207c <HAL_GPIO_Init+0x2a0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d875      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e1e:	4a98      	ldr	r2, [pc, #608]	; (8002080 <HAL_GPIO_Init+0x2a4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d058      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e24:	4a96      	ldr	r2, [pc, #600]	; (8002080 <HAL_GPIO_Init+0x2a4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d86f      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e2a:	4a96      	ldr	r2, [pc, #600]	; (8002084 <HAL_GPIO_Init+0x2a8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d052      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e30:	4a94      	ldr	r2, [pc, #592]	; (8002084 <HAL_GPIO_Init+0x2a8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d869      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e36:	4a94      	ldr	r2, [pc, #592]	; (8002088 <HAL_GPIO_Init+0x2ac>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d04c      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e3c:	4a92      	ldr	r2, [pc, #584]	; (8002088 <HAL_GPIO_Init+0x2ac>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d863      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e42:	4a92      	ldr	r2, [pc, #584]	; (800208c <HAL_GPIO_Init+0x2b0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d046      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
 8001e48:	4a90      	ldr	r2, [pc, #576]	; (800208c <HAL_GPIO_Init+0x2b0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d85d      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e4e:	2b12      	cmp	r3, #18
 8001e50:	d82a      	bhi.n	8001ea8 <HAL_GPIO_Init+0xcc>
 8001e52:	2b12      	cmp	r3, #18
 8001e54:	d859      	bhi.n	8001f0a <HAL_GPIO_Init+0x12e>
 8001e56:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <HAL_GPIO_Init+0x80>)
 8001e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5c:	08001ed7 	.word	0x08001ed7
 8001e60:	08001eb1 	.word	0x08001eb1
 8001e64:	08001ec3 	.word	0x08001ec3
 8001e68:	08001f05 	.word	0x08001f05
 8001e6c:	08001f0b 	.word	0x08001f0b
 8001e70:	08001f0b 	.word	0x08001f0b
 8001e74:	08001f0b 	.word	0x08001f0b
 8001e78:	08001f0b 	.word	0x08001f0b
 8001e7c:	08001f0b 	.word	0x08001f0b
 8001e80:	08001f0b 	.word	0x08001f0b
 8001e84:	08001f0b 	.word	0x08001f0b
 8001e88:	08001f0b 	.word	0x08001f0b
 8001e8c:	08001f0b 	.word	0x08001f0b
 8001e90:	08001f0b 	.word	0x08001f0b
 8001e94:	08001f0b 	.word	0x08001f0b
 8001e98:	08001f0b 	.word	0x08001f0b
 8001e9c:	08001f0b 	.word	0x08001f0b
 8001ea0:	08001eb9 	.word	0x08001eb9
 8001ea4:	08001ecd 	.word	0x08001ecd
 8001ea8:	4a79      	ldr	r2, [pc, #484]	; (8002090 <HAL_GPIO_Init+0x2b4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eae:	e02c      	b.n	8001f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e029      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	623b      	str	r3, [r7, #32]
          break;
 8001ec0:	e024      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	3308      	adds	r3, #8
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e01f      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	330c      	adds	r3, #12
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e01a      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	623b      	str	r3, [r7, #32]
          break;
 8001ee2:	e013      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d105      	bne.n	8001ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eec:	2308      	movs	r3, #8
 8001eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	611a      	str	r2, [r3, #16]
          break;
 8001ef6:	e009      	b.n	8001f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	615a      	str	r2, [r3, #20]
          break;
 8001f02:	e003      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
          break;
 8001f08:	e000      	b.n	8001f0c <HAL_GPIO_Init+0x130>
          break;
 8001f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2bff      	cmp	r3, #255	; 0xff
 8001f10:	d801      	bhi.n	8001f16 <HAL_GPIO_Init+0x13a>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	e001      	b.n	8001f1a <HAL_GPIO_Init+0x13e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2bff      	cmp	r3, #255	; 0xff
 8001f20:	d802      	bhi.n	8001f28 <HAL_GPIO_Init+0x14c>
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	e002      	b.n	8001f2e <HAL_GPIO_Init+0x152>
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	3b08      	subs	r3, #8
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	210f      	movs	r1, #15
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	6a39      	ldr	r1, [r7, #32]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80b1 	beq.w	80020be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f5c:	4b4d      	ldr	r3, [pc, #308]	; (8002094 <HAL_GPIO_Init+0x2b8>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	4a4c      	ldr	r2, [pc, #304]	; (8002094 <HAL_GPIO_Init+0x2b8>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6193      	str	r3, [r2, #24]
 8001f68:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_GPIO_Init+0x2b8>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f74:	4a48      	ldr	r2, [pc, #288]	; (8002098 <HAL_GPIO_Init+0x2bc>)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	3302      	adds	r3, #2
 8001f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	f003 0303 	and.w	r3, r3, #3
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a40      	ldr	r2, [pc, #256]	; (800209c <HAL_GPIO_Init+0x2c0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d013      	beq.n	8001fc8 <HAL_GPIO_Init+0x1ec>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a3f      	ldr	r2, [pc, #252]	; (80020a0 <HAL_GPIO_Init+0x2c4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_GPIO_Init+0x1e8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a3e      	ldr	r2, [pc, #248]	; (80020a4 <HAL_GPIO_Init+0x2c8>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d007      	beq.n	8001fc0 <HAL_GPIO_Init+0x1e4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3d      	ldr	r2, [pc, #244]	; (80020a8 <HAL_GPIO_Init+0x2cc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d101      	bne.n	8001fbc <HAL_GPIO_Init+0x1e0>
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e006      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	e004      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e002      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <HAL_GPIO_Init+0x1ee>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fcc:	f002 0203 	and.w	r2, r2, #3
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	4093      	lsls	r3, r2
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fda:	492f      	ldr	r1, [pc, #188]	; (8002098 <HAL_GPIO_Init+0x2bc>)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d006      	beq.n	8002002 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	492c      	ldr	r1, [pc, #176]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e006      	b.n	8002010 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002002:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	43db      	mvns	r3, r3
 800200a:	4928      	ldr	r1, [pc, #160]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800200c:	4013      	ands	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d006      	beq.n	800202a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4922      	ldr	r1, [pc, #136]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	43db      	mvns	r3, r3
 8002032:	491e      	ldr	r1, [pc, #120]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002034:	4013      	ands	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	4918      	ldr	r1, [pc, #96]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	43db      	mvns	r3, r3
 800205a:	4914      	ldr	r1, [pc, #80]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800205c:	4013      	ands	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d021      	beq.n	80020b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 800206e:	68da      	ldr	r2, [r3, #12]
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <HAL_GPIO_Init+0x2d0>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
 8002078:	e021      	b.n	80020be <HAL_GPIO_Init+0x2e2>
 800207a:	bf00      	nop
 800207c:	10320000 	.word	0x10320000
 8002080:	10310000 	.word	0x10310000
 8002084:	10220000 	.word	0x10220000
 8002088:	10210000 	.word	0x10210000
 800208c:	10120000 	.word	0x10120000
 8002090:	10110000 	.word	0x10110000
 8002094:	40021000 	.word	0x40021000
 8002098:	40010000 	.word	0x40010000
 800209c:	40010800 	.word	0x40010800
 80020a0:	40010c00 	.word	0x40010c00
 80020a4:	40011000 	.word	0x40011000
 80020a8:	40011400 	.word	0x40011400
 80020ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_GPIO_Init+0x304>)
 80020b2:	68da      	ldr	r2, [r3, #12]
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	4909      	ldr	r1, [pc, #36]	; (80020e0 <HAL_GPIO_Init+0x304>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	3301      	adds	r3, #1
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	fa22 f303 	lsr.w	r3, r2, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f47f ae8e 	bne.w	8001df0 <HAL_GPIO_Init+0x14>
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	372c      	adds	r7, #44	; 0x2c
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr
 80020e0:	40010400 	.word	0x40010400

080020e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e001      	b.n	8002106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	807b      	strh	r3, [r7, #2]
 800211e:	4613      	mov	r3, r2
 8002120:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002122:	787b      	ldrb	r3, [r7, #1]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002128:	887a      	ldrh	r2, [r7, #2]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800212e:	e003      	b.n	8002138 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	041a      	lsls	r2, r3, #16
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	611a      	str	r2, [r3, #16]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
	...

08002144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f806 	bl	8002174 <HAL_GPIO_EXTI_Callback>
  }
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e26c      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8087 	beq.w	80022b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a8:	4b92      	ldr	r3, [pc, #584]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d00c      	beq.n	80021ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b4:	4b8f      	ldr	r3, [pc, #572]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 030c 	and.w	r3, r3, #12
 80021bc:	2b08      	cmp	r3, #8
 80021be:	d112      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5e>
 80021c0:	4b8c      	ldr	r3, [pc, #560]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021cc:	d10b      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ce:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d06c      	beq.n	80022b4 <HAL_RCC_OscConfig+0x12c>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d168      	bne.n	80022b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e246      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x76>
 80021f0:	4b80      	ldr	r3, [pc, #512]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a7f      	ldr	r2, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	e02e      	b.n	800225c <HAL_RCC_OscConfig+0xd4>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x98>
 8002206:	4b7b      	ldr	r3, [pc, #492]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7a      	ldr	r2, [pc, #488]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800220c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b78      	ldr	r3, [pc, #480]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a77      	ldr	r2, [pc, #476]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	e01d      	b.n	800225c <HAL_RCC_OscConfig+0xd4>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0xbc>
 800222a:	4b72      	ldr	r3, [pc, #456]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a71      	ldr	r2, [pc, #452]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0xd4>
 8002244:	4b6b      	ldr	r3, [pc, #428]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a6a      	ldr	r2, [pc, #424]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a67      	ldr	r2, [pc, #412]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff fca2 	bl	8001bac <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7ff fc9e 	bl	8001bac <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1fa      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0xe4>
 800228a:	e014      	b.n	80022b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fc8e 	bl	8001bac <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7ff fc8a 	bl	8001bac <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1e6      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x10c>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d063      	beq.n	800238a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00b      	beq.n	80022e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ce:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d11c      	bne.n	8002314 <HAL_RCC_OscConfig+0x18c>
 80022da:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d116      	bne.n	8002314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	4b43      	ldr	r3, [pc, #268]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_RCC_OscConfig+0x176>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d001      	beq.n	80022fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e1ba      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4939      	ldr	r1, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800230e:	4313      	orrs	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	e03a      	b.n	800238a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d020      	beq.n	800235e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800231c:	4b36      	ldr	r3, [pc, #216]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7ff fc43 	bl	8001bac <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800232a:	f7ff fc3f 	bl	8001bac <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e19b      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002348:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4927      	ldr	r1, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]
 800235c:	e015      	b.n	800238a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235e:	4b26      	ldr	r3, [pc, #152]	; (80023f8 <HAL_RCC_OscConfig+0x270>)
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002364:	f7ff fc22 	bl	8001bac <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236c:	f7ff fc1e 	bl	8001bac <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e17a      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d03a      	beq.n	800240c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d019      	beq.n	80023d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_RCC_OscConfig+0x274>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fc02 	bl	8001bac <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ac:	f7ff fbfe 	bl	8001bac <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e15a      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f000 fad8 	bl	8002980 <RCC_Delay>
 80023d0:	e01c      	b.n	800240c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_RCC_OscConfig+0x274>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff fbe8 	bl	8001bac <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023de:	e00f      	b.n	8002400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff fbe4 	bl	8001bac <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d908      	bls.n	8002400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e140      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	42420000 	.word	0x42420000
 80023fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	4b9e      	ldr	r3, [pc, #632]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1e9      	bne.n	80023e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a6 	beq.w	8002566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241e:	4b97      	ldr	r3, [pc, #604]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10d      	bne.n	8002446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242a:	4b94      	ldr	r3, [pc, #592]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	4a93      	ldr	r2, [pc, #588]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	61d3      	str	r3, [r2, #28]
 8002436:	4b91      	ldr	r3, [pc, #580]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002442:	2301      	movs	r3, #1
 8002444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	4b8e      	ldr	r3, [pc, #568]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d118      	bne.n	8002484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a8a      	ldr	r2, [pc, #552]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245e:	f7ff fba5 	bl	8001bac <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002466:	f7ff fba1 	bl	8001bac <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	; 0x64
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0fd      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	4b81      	ldr	r3, [pc, #516]	; (8002680 <HAL_RCC_OscConfig+0x4f8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x312>
 800248c:	4b7b      	ldr	r3, [pc, #492]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4a7a      	ldr	r2, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6213      	str	r3, [r2, #32]
 8002498:	e02d      	b.n	80024f6 <HAL_RCC_OscConfig+0x36e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x334>
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4a75      	ldr	r2, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	6213      	str	r3, [r2, #32]
 80024ae:	4b73      	ldr	r3, [pc, #460]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4a72      	ldr	r2, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	6213      	str	r3, [r2, #32]
 80024ba:	e01c      	b.n	80024f6 <HAL_RCC_OscConfig+0x36e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d10c      	bne.n	80024de <HAL_RCC_OscConfig+0x356>
 80024c4:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4a6c      	ldr	r2, [pc, #432]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	6213      	str	r3, [r2, #32]
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4a69      	ldr	r2, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6213      	str	r3, [r2, #32]
 80024dc:	e00b      	b.n	80024f6 <HAL_RCC_OscConfig+0x36e>
 80024de:	4b67      	ldr	r3, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4a66      	ldr	r2, [pc, #408]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6213      	str	r3, [r2, #32]
 80024ea:	4b64      	ldr	r3, [pc, #400]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	4a63      	ldr	r2, [pc, #396]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d015      	beq.n	800252a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fe:	f7ff fb55 	bl	8001bac <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7ff fb51 	bl	8001bac <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	; 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0ab      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251c:	4b57      	ldr	r3, [pc, #348]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ee      	beq.n	8002506 <HAL_RCC_OscConfig+0x37e>
 8002528:	e014      	b.n	8002554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7ff fb3f 	bl	8001bac <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7ff fb3b 	bl	8001bac <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e095      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002548:	4b4c      	ldr	r3, [pc, #304]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1ee      	bne.n	8002532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002554:	7dfb      	ldrb	r3, [r7, #23]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d105      	bne.n	8002566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255a:	4b48      	ldr	r3, [pc, #288]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a47      	ldr	r2, [pc, #284]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8081 	beq.w	8002672 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002570:	4b42      	ldr	r3, [pc, #264]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d061      	beq.n	8002640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d146      	bne.n	8002612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002584:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_OscConfig+0x4fc>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff fb0f 	bl	8001bac <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002592:	f7ff fb0b 	bl	8001bac <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e067      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1f0      	bne.n	8002592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b8:	d108      	bne.n	80025cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ba:	4b30      	ldr	r3, [pc, #192]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	492d      	ldr	r1, [pc, #180]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a19      	ldr	r1, [r3, #32]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	430b      	orrs	r3, r1
 80025de:	4927      	ldr	r1, [pc, #156]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e4:	4b27      	ldr	r3, [pc, #156]	; (8002684 <HAL_RCC_OscConfig+0x4fc>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ea:	f7ff fadf 	bl	8001bac <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f2:	f7ff fadb 	bl	8001bac <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e037      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x46a>
 8002610:	e02f      	b.n	8002672 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <HAL_RCC_OscConfig+0x4fc>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fac8 	bl	8001bac <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff fac4 	bl	8001bac <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e020      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x498>
 800263e:	e018      	b.n	8002672 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e013      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_OscConfig+0x4f4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	429a      	cmp	r2, r3
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40021000 	.word	0x40021000
 8002680:	40007000 	.word	0x40007000
 8002684:	42420060 	.word	0x42420060

08002688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d0      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d910      	bls.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	4965      	ldr	r1, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d040      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d115      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e073      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e06b      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4936      	ldr	r1, [pc, #216]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002778:	f7ff fa18 	bl	8001bac <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7ff fa14 	bl	8001bac <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e053      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d210      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4922      	ldr	r1, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490a      	ldr	r1, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1cc>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f976 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	08004620 	.word	0x08004620
 8002854:	20000000 	.word	0x20000000
 8002858:	20000060 	.word	0x20000060

0800285c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b490      	push	{r4, r7}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002862:	4b2a      	ldr	r3, [pc, #168]	; (800290c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002864:	1d3c      	adds	r4, r7, #4
 8002866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800286c:	f240 2301 	movw	r3, #513	; 0x201
 8002870:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	2300      	movs	r3, #0
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	2300      	movs	r3, #0
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002886:	4b22      	ldr	r3, [pc, #136]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b04      	cmp	r3, #4
 8002894:	d002      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x40>
 8002896:	2b08      	cmp	r3, #8
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x46>
 800289a:	e02d      	b.n	80028f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289e:	623b      	str	r3, [r7, #32]
      break;
 80028a0:	e02d      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	0c9b      	lsrs	r3, r3, #18
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ae:	4413      	add	r3, r2
 80028b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c5b      	lsrs	r3, r3, #17
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ce:	4413      	add	r3, r2
 80028d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028da:	fb02 f203 	mul.w	r2, r2, r3
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	e004      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028ec:	fb02 f303 	mul.w	r3, r2, r3
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	623b      	str	r3, [r7, #32]
      break;
 80028f6:	e002      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fa:	623b      	str	r3, [r7, #32]
      break;
 80028fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3728      	adds	r7, #40	; 0x28
 8002904:	46bd      	mov	sp, r7
 8002906:	bc90      	pop	{r4, r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	08004610 	.word	0x08004610
 8002910:	40021000 	.word	0x40021000
 8002914:	007a1200 	.word	0x007a1200
 8002918:	003d0900 	.word	0x003d0900

0800291c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002920:	4b02      	ldr	r3, [pc, #8]	; (800292c <HAL_RCC_GetHCLKFreq+0x10>)
 8002922:	681b      	ldr	r3, [r3, #0]
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	20000000 	.word	0x20000000

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002934:	f7ff fff2 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4903      	ldr	r1, [pc, #12]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	08004630 	.word	0x08004630

08002958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800295c:	f7ff ffde 	bl	800291c <HAL_RCC_GetHCLKFreq>
 8002960:	4602      	mov	r2, r0
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	0adb      	lsrs	r3, r3, #11
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	4903      	ldr	r1, [pc, #12]	; (800297c <HAL_RCC_GetPCLK2Freq+0x24>)
 800296e:	5ccb      	ldrb	r3, [r1, r3]
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	08004630 	.word	0x08004630

08002980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <RCC_Delay+0x34>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <RCC_Delay+0x38>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	0a5b      	lsrs	r3, r3, #9
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800299c:	bf00      	nop
  }
  while (Delay --);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	1e5a      	subs	r2, r3, #1
 80029a2:	60fa      	str	r2, [r7, #12]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f9      	bne.n	800299c <RCC_Delay+0x1c>
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	20000000 	.word	0x20000000
 80029b8:	10624dd3 	.word	0x10624dd3

080029bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e041      	b.n	8002a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d106      	bne.n	80029e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7fd fdea 	bl	80005bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 fc28 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d001      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e03a      	b.n	8002aea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_TIM_Base_Start_IT+0x98>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00e      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x58>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9e:	d009      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x58>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a14      	ldr	r2, [pc, #80]	; (8002af8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x58>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a13      	ldr	r2, [pc, #76]	; (8002afc <HAL_TIM_Base_Start_IT+0xa0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d111      	bne.n	8002ad8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b06      	cmp	r3, #6
 8002ac4:	d010      	beq.n	8002ae8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad6:	e007      	b.n	8002ae8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40012c00 	.word	0x40012c00
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000800 	.word	0x40000800

08002b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e041      	b.n	8002b96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f839 	bl	8002b9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f000 fb86 	bl	8003250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d109      	bne.n	8002bd4 <HAL_TIM_PWM_Start+0x24>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	e022      	b.n	8002c1a <HAL_TIM_PWM_Start+0x6a>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d109      	bne.n	8002bee <HAL_TIM_PWM_Start+0x3e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	e015      	b.n	8002c1a <HAL_TIM_PWM_Start+0x6a>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d109      	bne.n	8002c08 <HAL_TIM_PWM_Start+0x58>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e008      	b.n	8002c1a <HAL_TIM_PWM_Start+0x6a>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e05e      	b.n	8002ce0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d104      	bne.n	8002c32 <HAL_TIM_PWM_Start+0x82>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c30:	e013      	b.n	8002c5a <HAL_TIM_PWM_Start+0xaa>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0x92>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c40:	e00b      	b.n	8002c5a <HAL_TIM_PWM_Start+0xaa>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_PWM_Start+0xa2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c50:	e003      	b.n	8002c5a <HAL_TIM_PWM_Start+0xaa>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	6839      	ldr	r1, [r7, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fd74 	bl	8003750 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_TIM_PWM_Start+0x138>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d107      	bne.n	8002c82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a18      	ldr	r2, [pc, #96]	; (8002ce8 <HAL_TIM_PWM_Start+0x138>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00e      	beq.n	8002caa <HAL_TIM_PWM_Start+0xfa>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d009      	beq.n	8002caa <HAL_TIM_PWM_Start+0xfa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a14      	ldr	r2, [pc, #80]	; (8002cec <HAL_TIM_PWM_Start+0x13c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d004      	beq.n	8002caa <HAL_TIM_PWM_Start+0xfa>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <HAL_TIM_PWM_Start+0x140>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d111      	bne.n	8002cce <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b06      	cmp	r3, #6
 8002cba:	d010      	beq.n	8002cde <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ccc:	e007      	b.n	8002cde <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40012c00 	.word	0x40012c00
 8002cec:	40000400 	.word	0x40000400
 8002cf0:	40000800 	.word	0x40000800

08002cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d122      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d11b      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0202 	mvn.w	r2, #2
 8002d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa6f 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fa62 	bl	8003208 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fa71 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d122      	bne.n	8002da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d11b      	bne.n	8002da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0204 	mvn.w	r2, #4
 8002d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa45 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa38 	bl	8003208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fa47 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d122      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d11b      	bne.n	8002df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0208 	mvn.w	r2, #8
 8002dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fa1b 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8002de4:	e005      	b.n	8002df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa0e 	bl	8003208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fa1d 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d122      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d11b      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f06f 0210 	mvn.w	r2, #16
 8002e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2208      	movs	r2, #8
 8002e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9f1 	bl	800321a <HAL_TIM_IC_CaptureCallback>
 8002e38:	e005      	b.n	8002e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f9e4 	bl	8003208 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f9f3 	bl	800322c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d10e      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d107      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0201 	mvn.w	r2, #1
 8002e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fd fb5c 	bl	8000530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b80      	cmp	r3, #128	; 0x80
 8002e84:	d10e      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d107      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fce1 	bl	8003866 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b40      	cmp	r3, #64	; 0x40
 8002ebe:	d107      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f9b7 	bl	800323e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	d10e      	bne.n	8002efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d107      	bne.n	8002efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0220 	mvn.w	r2, #32
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fcac 	bl	8003854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0ac      	b.n	8003078 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	f200 809f 	bhi.w	800306c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	0800306d 	.word	0x0800306d
 8002f3c:	0800306d 	.word	0x0800306d
 8002f40:	0800306d 	.word	0x0800306d
 8002f44:	08002fa9 	.word	0x08002fa9
 8002f48:	0800306d 	.word	0x0800306d
 8002f4c:	0800306d 	.word	0x0800306d
 8002f50:	0800306d 	.word	0x0800306d
 8002f54:	08002feb 	.word	0x08002feb
 8002f58:	0800306d 	.word	0x0800306d
 8002f5c:	0800306d 	.word	0x0800306d
 8002f60:	0800306d 	.word	0x0800306d
 8002f64:	0800302b 	.word	0x0800302b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f9d0 	bl	8003314 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0208 	orr.w	r2, r2, #8
 8002f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699a      	ldr	r2, [r3, #24]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0204 	bic.w	r2, r2, #4
 8002f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6999      	ldr	r1, [r3, #24]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	619a      	str	r2, [r3, #24]
      break;
 8002fa6:	e062      	b.n	800306e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fa16 	bl	80033e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6999      	ldr	r1, [r3, #24]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	021a      	lsls	r2, r3, #8
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	619a      	str	r2, [r3, #24]
      break;
 8002fe8:	e041      	b.n	800306e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fa5f 	bl	80034b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0208 	orr.w	r2, r2, #8
 8003004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0204 	bic.w	r2, r2, #4
 8003014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	69d9      	ldr	r1, [r3, #28]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	61da      	str	r2, [r3, #28]
      break;
 8003028:	e021      	b.n	800306e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	4618      	mov	r0, r3
 8003032:	f000 faa9 	bl	8003588 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69d9      	ldr	r1, [r3, #28]
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	021a      	lsls	r2, r3, #8
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	61da      	str	r2, [r3, #28]
      break;
 800306a:	e000      	b.n	800306e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800306c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_TIM_ConfigClockSource+0x18>
 8003094:	2302      	movs	r3, #2
 8003096:	e0b3      	b.n	8003200 <HAL_TIM_ConfigClockSource+0x180>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d0:	d03e      	beq.n	8003150 <HAL_TIM_ConfigClockSource+0xd0>
 80030d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d6:	f200 8087 	bhi.w	80031e8 <HAL_TIM_ConfigClockSource+0x168>
 80030da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030de:	f000 8085 	beq.w	80031ec <HAL_TIM_ConfigClockSource+0x16c>
 80030e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e6:	d87f      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x168>
 80030e8:	2b70      	cmp	r3, #112	; 0x70
 80030ea:	d01a      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0xa2>
 80030ec:	2b70      	cmp	r3, #112	; 0x70
 80030ee:	d87b      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x168>
 80030f0:	2b60      	cmp	r3, #96	; 0x60
 80030f2:	d050      	beq.n	8003196 <HAL_TIM_ConfigClockSource+0x116>
 80030f4:	2b60      	cmp	r3, #96	; 0x60
 80030f6:	d877      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x168>
 80030f8:	2b50      	cmp	r3, #80	; 0x50
 80030fa:	d03c      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0xf6>
 80030fc:	2b50      	cmp	r3, #80	; 0x50
 80030fe:	d873      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x168>
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d058      	beq.n	80031b6 <HAL_TIM_ConfigClockSource+0x136>
 8003104:	2b40      	cmp	r3, #64	; 0x40
 8003106:	d86f      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x168>
 8003108:	2b30      	cmp	r3, #48	; 0x30
 800310a:	d064      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x156>
 800310c:	2b30      	cmp	r3, #48	; 0x30
 800310e:	d86b      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x168>
 8003110:	2b20      	cmp	r3, #32
 8003112:	d060      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x156>
 8003114:	2b20      	cmp	r3, #32
 8003116:	d867      	bhi.n	80031e8 <HAL_TIM_ConfigClockSource+0x168>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05c      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x156>
 800311c:	2b10      	cmp	r3, #16
 800311e:	d05a      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003120:	e062      	b.n	80031e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6899      	ldr	r1, [r3, #8]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f000 faee 	bl	8003712 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003144:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	609a      	str	r2, [r3, #8]
      break;
 800314e:	e04e      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	6899      	ldr	r1, [r3, #8]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f000 fad7 	bl	8003712 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003172:	609a      	str	r2, [r3, #8]
      break;
 8003174:	e03b      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6859      	ldr	r1, [r3, #4]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	461a      	mov	r2, r3
 8003184:	f000 fa4e 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2150      	movs	r1, #80	; 0x50
 800318e:	4618      	mov	r0, r3
 8003190:	f000 faa5 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 8003194:	e02b      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	461a      	mov	r2, r3
 80031a4:	f000 fa6c 	bl	8003680 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2160      	movs	r1, #96	; 0x60
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fa95 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80031b4:	e01b      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f000 fa2e 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2140      	movs	r1, #64	; 0x40
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fa85 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 80031d4:	e00b      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	4610      	mov	r0, r2
 80031e2:	f000 fa7c 	bl	80036de <TIM_ITRx_SetConfig>
        break;
 80031e6:	e002      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a29      	ldr	r2, [pc, #164]	; (8003308 <TIM_Base_SetConfig+0xb8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00b      	beq.n	8003280 <TIM_Base_SetConfig+0x30>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d007      	beq.n	8003280 <TIM_Base_SetConfig+0x30>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a26      	ldr	r2, [pc, #152]	; (800330c <TIM_Base_SetConfig+0xbc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d003      	beq.n	8003280 <TIM_Base_SetConfig+0x30>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a25      	ldr	r2, [pc, #148]	; (8003310 <TIM_Base_SetConfig+0xc0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a1c      	ldr	r2, [pc, #112]	; (8003308 <TIM_Base_SetConfig+0xb8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00b      	beq.n	80032b2 <TIM_Base_SetConfig+0x62>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d007      	beq.n	80032b2 <TIM_Base_SetConfig+0x62>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a19      	ldr	r2, [pc, #100]	; (800330c <TIM_Base_SetConfig+0xbc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <TIM_Base_SetConfig+0x62>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a18      	ldr	r2, [pc, #96]	; (8003310 <TIM_Base_SetConfig+0xc0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d108      	bne.n	80032c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a07      	ldr	r2, [pc, #28]	; (8003308 <TIM_Base_SetConfig+0xb8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	615a      	str	r2, [r3, #20]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr
 8003308:	40012c00 	.word	0x40012c00
 800330c:	40000400 	.word	0x40000400
 8003310:	40000800 	.word	0x40000800

08003314 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f023 0201 	bic.w	r2, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f023 0302 	bic.w	r3, r3, #2
 800335c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <TIM_OC1_SetConfig+0xc8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d10c      	bne.n	800338a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f023 0308 	bic.w	r3, r3, #8
 8003376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <TIM_OC1_SetConfig+0xc8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d111      	bne.n	80033b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	621a      	str	r2, [r3, #32]
}
 80033d0:	bf00      	nop
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40012c00 	.word	0x40012c00

080033e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b087      	sub	sp, #28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f023 0210 	bic.w	r2, r3, #16
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f023 0320 	bic.w	r3, r3, #32
 800342a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <TIM_OC2_SetConfig+0xd0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10d      	bne.n	800345c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800345a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a14      	ldr	r2, [pc, #80]	; (80034b0 <TIM_OC2_SetConfig+0xd0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d113      	bne.n	800348c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800346a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	621a      	str	r2, [r3, #32]
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	40012c00 	.word	0x40012c00

080034b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <TIM_OC3_SetConfig+0xd0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10d      	bne.n	800352e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800352c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <TIM_OC3_SetConfig+0xd0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d113      	bne.n	800355e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800353c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	621a      	str	r2, [r3, #32]
}
 8003578:	bf00      	nop
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40012c00 	.word	0x40012c00

08003588 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	031b      	lsls	r3, r3, #12
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0f      	ldr	r2, [pc, #60]	; (8003620 <TIM_OC4_SetConfig+0x98>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d109      	bne.n	80035fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	019b      	lsls	r3, r3, #6
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40012c00 	.word	0x40012c00

08003624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 030a 	bic.w	r3, r3, #10
 8003660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b087      	sub	sp, #28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f023 0210 	bic.w	r2, r3, #16
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	031b      	lsls	r3, r3, #12
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	621a      	str	r2, [r3, #32]
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f043 0307 	orr.w	r3, r3, #7
 8003700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr

08003712 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003712:	b480      	push	{r7}
 8003714:	b087      	sub	sp, #28
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800372c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	021a      	lsls	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	431a      	orrs	r2, r3
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	4313      	orrs	r3, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	609a      	str	r2, [r3, #8]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2201      	movs	r2, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a1a      	ldr	r2, [r3, #32]
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	43db      	mvns	r3, r3
 8003772:	401a      	ands	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	431a      	orrs	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	621a      	str	r2, [r3, #32]
}
 800378e:	bf00      	nop
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e046      	b.n	800383e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d009      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a12      	ldr	r2, [pc, #72]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a10      	ldr	r2, [pc, #64]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10c      	bne.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	4313      	orrs	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr
 8003848:	40012c00 	.word	0x40012c00
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800

08003854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr

08003866 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e03f      	b.n	800390a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fc fef6 	bl	8000690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2224      	movs	r2, #36	; 0x24
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f96d 	bl	8003b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b08a      	sub	sp, #40	; 0x28
 8003916:	af02      	add	r7, sp, #8
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b20      	cmp	r3, #32
 8003930:	d17c      	bne.n	8003a2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d002      	beq.n	800393e <HAL_UART_Transmit+0x2c>
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e075      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_UART_Transmit+0x3e>
 800394c:	2302      	movs	r3, #2
 800394e:	e06e      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2221      	movs	r2, #33	; 0x21
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003966:	f7fe f921 	bl	8001bac <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	88fa      	ldrh	r2, [r7, #6]
 8003976:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003980:	d108      	bne.n	8003994 <HAL_UART_Transmit+0x82>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	e003      	b.n	800399c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039a4:	e02a      	b.n	80039fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2200      	movs	r2, #0
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f870 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e036      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10b      	bne.n	80039de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	3302      	adds	r3, #2
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	e007      	b.n	80039ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	3301      	adds	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1cf      	bne.n	80039a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2140      	movs	r1, #64	; 0x40
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f840 	bl	8003a96 <UART_WaitOnFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e006      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	4613      	mov	r3, r2
 8003a42:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d11d      	bne.n	8003a8c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_UART_Receive_IT+0x26>
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e016      	b.n	8003a8e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Receive_IT+0x38>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e00f      	b.n	8003a8e <HAL_UART_Receive_IT+0x58>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 f851 	bl	8003b2a <UART_Start_Receive_IT>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	e000      	b.n	8003a8e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	603b      	str	r3, [r7, #0]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa6:	e02c      	b.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aae:	d028      	beq.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab6:	f7fe f879 	bl	8001bac <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d21d      	bcs.n	8003b02 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ad4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0201 	bic.w	r2, r2, #1
 8003ae4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e00f      	b.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d0c3      	beq.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	4613      	mov	r3, r2
 8003b36:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	88fa      	ldrh	r2, [r7, #6]
 8003b42:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	88fa      	ldrh	r2, [r7, #6]
 8003b48:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2222      	movs	r2, #34	; 0x22
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0220 	orr.w	r2, r2, #32
 8003b8e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bd6:	f023 030c 	bic.w	r3, r3, #12
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2c      	ldr	r2, [pc, #176]	; (8003cb0 <UART_SetConfig+0x114>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d103      	bne.n	8003c0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c04:	f7fe fea8 	bl	8002958 <HAL_RCC_GetPCLK2Freq>
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	e002      	b.n	8003c12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c0c:	f7fe fe90 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8003c10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	009a      	lsls	r2, r3, #2
 8003c1c:	441a      	add	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <UART_SetConfig+0x118>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	0119      	lsls	r1, r3, #4
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	009a      	lsls	r2, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <UART_SetConfig+0x118>)
 8003c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	2064      	movs	r0, #100	; 0x64
 8003c52:	fb00 f303 	mul.w	r3, r0, r3
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	3332      	adds	r3, #50	; 0x32
 8003c5c:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <UART_SetConfig+0x118>)
 8003c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c68:	4419      	add	r1, r3
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009a      	lsls	r2, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <UART_SetConfig+0x118>)
 8003c82:	fba3 0302 	umull	r0, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2064      	movs	r0, #100	; 0x64
 8003c8a:	fb00 f303 	mul.w	r3, r0, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	3332      	adds	r3, #50	; 0x32
 8003c94:	4a07      	ldr	r2, [pc, #28]	; (8003cb4 <UART_SetConfig+0x118>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	f003 020f 	and.w	r2, r3, #15
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40013800 	.word	0x40013800
 8003cb4:	51eb851f 	.word	0x51eb851f

08003cb8 <__errno>:
 8003cb8:	4b01      	ldr	r3, [pc, #4]	; (8003cc0 <__errno+0x8>)
 8003cba:	6818      	ldr	r0, [r3, #0]
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000068 	.word	0x20000068

08003cc4 <__libc_init_array>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	4d0c      	ldr	r5, [pc, #48]	; (8003cfc <__libc_init_array+0x38>)
 8003cca:	4c0d      	ldr	r4, [pc, #52]	; (8003d00 <__libc_init_array+0x3c>)
 8003ccc:	1b64      	subs	r4, r4, r5
 8003cce:	10a4      	asrs	r4, r4, #2
 8003cd0:	42a6      	cmp	r6, r4
 8003cd2:	d109      	bne.n	8003ce8 <__libc_init_array+0x24>
 8003cd4:	f000 fc6c 	bl	80045b0 <_init>
 8003cd8:	2600      	movs	r6, #0
 8003cda:	4d0a      	ldr	r5, [pc, #40]	; (8003d04 <__libc_init_array+0x40>)
 8003cdc:	4c0a      	ldr	r4, [pc, #40]	; (8003d08 <__libc_init_array+0x44>)
 8003cde:	1b64      	subs	r4, r4, r5
 8003ce0:	10a4      	asrs	r4, r4, #2
 8003ce2:	42a6      	cmp	r6, r4
 8003ce4:	d105      	bne.n	8003cf2 <__libc_init_array+0x2e>
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cec:	4798      	blx	r3
 8003cee:	3601      	adds	r6, #1
 8003cf0:	e7ee      	b.n	8003cd0 <__libc_init_array+0xc>
 8003cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf6:	4798      	blx	r3
 8003cf8:	3601      	adds	r6, #1
 8003cfa:	e7f2      	b.n	8003ce2 <__libc_init_array+0x1e>
 8003cfc:	0800466c 	.word	0x0800466c
 8003d00:	0800466c 	.word	0x0800466c
 8003d04:	0800466c 	.word	0x0800466c
 8003d08:	08004670 	.word	0x08004670

08003d0c <malloc>:
 8003d0c:	4b02      	ldr	r3, [pc, #8]	; (8003d18 <malloc+0xc>)
 8003d0e:	4601      	mov	r1, r0
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	f000 b85f 	b.w	8003dd4 <_malloc_r>
 8003d16:	bf00      	nop
 8003d18:	20000068 	.word	0x20000068

08003d1c <free>:
 8003d1c:	4b02      	ldr	r3, [pc, #8]	; (8003d28 <free+0xc>)
 8003d1e:	4601      	mov	r1, r0
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	f000 b80b 	b.w	8003d3c <_free_r>
 8003d26:	bf00      	nop
 8003d28:	20000068 	.word	0x20000068

08003d2c <memset>:
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4402      	add	r2, r0
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d100      	bne.n	8003d36 <memset+0xa>
 8003d34:	4770      	bx	lr
 8003d36:	f803 1b01 	strb.w	r1, [r3], #1
 8003d3a:	e7f9      	b.n	8003d30 <memset+0x4>

08003d3c <_free_r>:
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4605      	mov	r5, r0
 8003d40:	2900      	cmp	r1, #0
 8003d42:	d043      	beq.n	8003dcc <_free_r+0x90>
 8003d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d48:	1f0c      	subs	r4, r1, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bfb8      	it	lt
 8003d4e:	18e4      	addlt	r4, r4, r3
 8003d50:	f000 f8ca 	bl	8003ee8 <__malloc_lock>
 8003d54:	4a1e      	ldr	r2, [pc, #120]	; (8003dd0 <_free_r+0x94>)
 8003d56:	6813      	ldr	r3, [r2, #0]
 8003d58:	4610      	mov	r0, r2
 8003d5a:	b933      	cbnz	r3, 8003d6a <_free_r+0x2e>
 8003d5c:	6063      	str	r3, [r4, #4]
 8003d5e:	6014      	str	r4, [r2, #0]
 8003d60:	4628      	mov	r0, r5
 8003d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d66:	f000 b8c5 	b.w	8003ef4 <__malloc_unlock>
 8003d6a:	42a3      	cmp	r3, r4
 8003d6c:	d90a      	bls.n	8003d84 <_free_r+0x48>
 8003d6e:	6821      	ldr	r1, [r4, #0]
 8003d70:	1862      	adds	r2, r4, r1
 8003d72:	4293      	cmp	r3, r2
 8003d74:	bf01      	itttt	eq
 8003d76:	681a      	ldreq	r2, [r3, #0]
 8003d78:	685b      	ldreq	r3, [r3, #4]
 8003d7a:	1852      	addeq	r2, r2, r1
 8003d7c:	6022      	streq	r2, [r4, #0]
 8003d7e:	6063      	str	r3, [r4, #4]
 8003d80:	6004      	str	r4, [r0, #0]
 8003d82:	e7ed      	b.n	8003d60 <_free_r+0x24>
 8003d84:	461a      	mov	r2, r3
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	b10b      	cbz	r3, 8003d8e <_free_r+0x52>
 8003d8a:	42a3      	cmp	r3, r4
 8003d8c:	d9fa      	bls.n	8003d84 <_free_r+0x48>
 8003d8e:	6811      	ldr	r1, [r2, #0]
 8003d90:	1850      	adds	r0, r2, r1
 8003d92:	42a0      	cmp	r0, r4
 8003d94:	d10b      	bne.n	8003dae <_free_r+0x72>
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	4401      	add	r1, r0
 8003d9a:	1850      	adds	r0, r2, r1
 8003d9c:	4283      	cmp	r3, r0
 8003d9e:	6011      	str	r1, [r2, #0]
 8003da0:	d1de      	bne.n	8003d60 <_free_r+0x24>
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	4401      	add	r1, r0
 8003da8:	6011      	str	r1, [r2, #0]
 8003daa:	6053      	str	r3, [r2, #4]
 8003dac:	e7d8      	b.n	8003d60 <_free_r+0x24>
 8003dae:	d902      	bls.n	8003db6 <_free_r+0x7a>
 8003db0:	230c      	movs	r3, #12
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	e7d4      	b.n	8003d60 <_free_r+0x24>
 8003db6:	6820      	ldr	r0, [r4, #0]
 8003db8:	1821      	adds	r1, r4, r0
 8003dba:	428b      	cmp	r3, r1
 8003dbc:	bf01      	itttt	eq
 8003dbe:	6819      	ldreq	r1, [r3, #0]
 8003dc0:	685b      	ldreq	r3, [r3, #4]
 8003dc2:	1809      	addeq	r1, r1, r0
 8003dc4:	6021      	streq	r1, [r4, #0]
 8003dc6:	6063      	str	r3, [r4, #4]
 8003dc8:	6054      	str	r4, [r2, #4]
 8003dca:	e7c9      	b.n	8003d60 <_free_r+0x24>
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000144 	.word	0x20000144

08003dd4 <_malloc_r>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	1ccd      	adds	r5, r1, #3
 8003dd8:	f025 0503 	bic.w	r5, r5, #3
 8003ddc:	3508      	adds	r5, #8
 8003dde:	2d0c      	cmp	r5, #12
 8003de0:	bf38      	it	cc
 8003de2:	250c      	movcc	r5, #12
 8003de4:	2d00      	cmp	r5, #0
 8003de6:	4606      	mov	r6, r0
 8003de8:	db01      	blt.n	8003dee <_malloc_r+0x1a>
 8003dea:	42a9      	cmp	r1, r5
 8003dec:	d903      	bls.n	8003df6 <_malloc_r+0x22>
 8003dee:	230c      	movs	r3, #12
 8003df0:	6033      	str	r3, [r6, #0]
 8003df2:	2000      	movs	r0, #0
 8003df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df6:	f000 f877 	bl	8003ee8 <__malloc_lock>
 8003dfa:	4921      	ldr	r1, [pc, #132]	; (8003e80 <_malloc_r+0xac>)
 8003dfc:	680a      	ldr	r2, [r1, #0]
 8003dfe:	4614      	mov	r4, r2
 8003e00:	b99c      	cbnz	r4, 8003e2a <_malloc_r+0x56>
 8003e02:	4f20      	ldr	r7, [pc, #128]	; (8003e84 <_malloc_r+0xb0>)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	b923      	cbnz	r3, 8003e12 <_malloc_r+0x3e>
 8003e08:	4621      	mov	r1, r4
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f000 f83c 	bl	8003e88 <_sbrk_r>
 8003e10:	6038      	str	r0, [r7, #0]
 8003e12:	4629      	mov	r1, r5
 8003e14:	4630      	mov	r0, r6
 8003e16:	f000 f837 	bl	8003e88 <_sbrk_r>
 8003e1a:	1c43      	adds	r3, r0, #1
 8003e1c:	d123      	bne.n	8003e66 <_malloc_r+0x92>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	4630      	mov	r0, r6
 8003e22:	6033      	str	r3, [r6, #0]
 8003e24:	f000 f866 	bl	8003ef4 <__malloc_unlock>
 8003e28:	e7e3      	b.n	8003df2 <_malloc_r+0x1e>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	1b5b      	subs	r3, r3, r5
 8003e2e:	d417      	bmi.n	8003e60 <_malloc_r+0x8c>
 8003e30:	2b0b      	cmp	r3, #11
 8003e32:	d903      	bls.n	8003e3c <_malloc_r+0x68>
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	441c      	add	r4, r3
 8003e38:	6025      	str	r5, [r4, #0]
 8003e3a:	e004      	b.n	8003e46 <_malloc_r+0x72>
 8003e3c:	6863      	ldr	r3, [r4, #4]
 8003e3e:	42a2      	cmp	r2, r4
 8003e40:	bf0c      	ite	eq
 8003e42:	600b      	streq	r3, [r1, #0]
 8003e44:	6053      	strne	r3, [r2, #4]
 8003e46:	4630      	mov	r0, r6
 8003e48:	f000 f854 	bl	8003ef4 <__malloc_unlock>
 8003e4c:	f104 000b 	add.w	r0, r4, #11
 8003e50:	1d23      	adds	r3, r4, #4
 8003e52:	f020 0007 	bic.w	r0, r0, #7
 8003e56:	1ac2      	subs	r2, r0, r3
 8003e58:	d0cc      	beq.n	8003df4 <_malloc_r+0x20>
 8003e5a:	1a1b      	subs	r3, r3, r0
 8003e5c:	50a3      	str	r3, [r4, r2]
 8003e5e:	e7c9      	b.n	8003df4 <_malloc_r+0x20>
 8003e60:	4622      	mov	r2, r4
 8003e62:	6864      	ldr	r4, [r4, #4]
 8003e64:	e7cc      	b.n	8003e00 <_malloc_r+0x2c>
 8003e66:	1cc4      	adds	r4, r0, #3
 8003e68:	f024 0403 	bic.w	r4, r4, #3
 8003e6c:	42a0      	cmp	r0, r4
 8003e6e:	d0e3      	beq.n	8003e38 <_malloc_r+0x64>
 8003e70:	1a21      	subs	r1, r4, r0
 8003e72:	4630      	mov	r0, r6
 8003e74:	f000 f808 	bl	8003e88 <_sbrk_r>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d1dd      	bne.n	8003e38 <_malloc_r+0x64>
 8003e7c:	e7cf      	b.n	8003e1e <_malloc_r+0x4a>
 8003e7e:	bf00      	nop
 8003e80:	20000144 	.word	0x20000144
 8003e84:	20000148 	.word	0x20000148

08003e88 <_sbrk_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	4d05      	ldr	r5, [pc, #20]	; (8003ea4 <_sbrk_r+0x1c>)
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4608      	mov	r0, r1
 8003e92:	602b      	str	r3, [r5, #0]
 8003e94:	f7fc fc74 	bl	8000780 <_sbrk>
 8003e98:	1c43      	adds	r3, r0, #1
 8003e9a:	d102      	bne.n	8003ea2 <_sbrk_r+0x1a>
 8003e9c:	682b      	ldr	r3, [r5, #0]
 8003e9e:	b103      	cbz	r3, 8003ea2 <_sbrk_r+0x1a>
 8003ea0:	6023      	str	r3, [r4, #0]
 8003ea2:	bd38      	pop	{r3, r4, r5, pc}
 8003ea4:	20000260 	.word	0x20000260

08003ea8 <siprintf>:
 8003ea8:	b40e      	push	{r1, r2, r3}
 8003eaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003eae:	b500      	push	{lr}
 8003eb0:	b09c      	sub	sp, #112	; 0x70
 8003eb2:	ab1d      	add	r3, sp, #116	; 0x74
 8003eb4:	9002      	str	r0, [sp, #8]
 8003eb6:	9006      	str	r0, [sp, #24]
 8003eb8:	9107      	str	r1, [sp, #28]
 8003eba:	9104      	str	r1, [sp, #16]
 8003ebc:	4808      	ldr	r0, [pc, #32]	; (8003ee0 <siprintf+0x38>)
 8003ebe:	4909      	ldr	r1, [pc, #36]	; (8003ee4 <siprintf+0x3c>)
 8003ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ec4:	9105      	str	r1, [sp, #20]
 8003ec6:	6800      	ldr	r0, [r0, #0]
 8003ec8:	a902      	add	r1, sp, #8
 8003eca:	9301      	str	r3, [sp, #4]
 8003ecc:	f000 f874 	bl	8003fb8 <_svfiprintf_r>
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	9b02      	ldr	r3, [sp, #8]
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	b01c      	add	sp, #112	; 0x70
 8003ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003edc:	b003      	add	sp, #12
 8003ede:	4770      	bx	lr
 8003ee0:	20000068 	.word	0x20000068
 8003ee4:	ffff0208 	.word	0xffff0208

08003ee8 <__malloc_lock>:
 8003ee8:	4801      	ldr	r0, [pc, #4]	; (8003ef0 <__malloc_lock+0x8>)
 8003eea:	f000 bafb 	b.w	80044e4 <__retarget_lock_acquire_recursive>
 8003eee:	bf00      	nop
 8003ef0:	20000268 	.word	0x20000268

08003ef4 <__malloc_unlock>:
 8003ef4:	4801      	ldr	r0, [pc, #4]	; (8003efc <__malloc_unlock+0x8>)
 8003ef6:	f000 baf6 	b.w	80044e6 <__retarget_lock_release_recursive>
 8003efa:	bf00      	nop
 8003efc:	20000268 	.word	0x20000268

08003f00 <__ssputs_r>:
 8003f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f04:	688e      	ldr	r6, [r1, #8]
 8003f06:	4682      	mov	sl, r0
 8003f08:	429e      	cmp	r6, r3
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	4690      	mov	r8, r2
 8003f0e:	461f      	mov	r7, r3
 8003f10:	d838      	bhi.n	8003f84 <__ssputs_r+0x84>
 8003f12:	898a      	ldrh	r2, [r1, #12]
 8003f14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f18:	d032      	beq.n	8003f80 <__ssputs_r+0x80>
 8003f1a:	6825      	ldr	r5, [r4, #0]
 8003f1c:	6909      	ldr	r1, [r1, #16]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	eba5 0901 	sub.w	r9, r5, r1
 8003f24:	6965      	ldr	r5, [r4, #20]
 8003f26:	444b      	add	r3, r9
 8003f28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f30:	106d      	asrs	r5, r5, #1
 8003f32:	429d      	cmp	r5, r3
 8003f34:	bf38      	it	cc
 8003f36:	461d      	movcc	r5, r3
 8003f38:	0553      	lsls	r3, r2, #21
 8003f3a:	d531      	bpl.n	8003fa0 <__ssputs_r+0xa0>
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	f7ff ff49 	bl	8003dd4 <_malloc_r>
 8003f42:	4606      	mov	r6, r0
 8003f44:	b950      	cbnz	r0, 8003f5c <__ssputs_r+0x5c>
 8003f46:	230c      	movs	r3, #12
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	f8ca 3000 	str.w	r3, [sl]
 8003f50:	89a3      	ldrh	r3, [r4, #12]
 8003f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f56:	81a3      	strh	r3, [r4, #12]
 8003f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5c:	464a      	mov	r2, r9
 8003f5e:	6921      	ldr	r1, [r4, #16]
 8003f60:	f000 fad0 	bl	8004504 <memcpy>
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6e:	81a3      	strh	r3, [r4, #12]
 8003f70:	6126      	str	r6, [r4, #16]
 8003f72:	444e      	add	r6, r9
 8003f74:	6026      	str	r6, [r4, #0]
 8003f76:	463e      	mov	r6, r7
 8003f78:	6165      	str	r5, [r4, #20]
 8003f7a:	eba5 0509 	sub.w	r5, r5, r9
 8003f7e:	60a5      	str	r5, [r4, #8]
 8003f80:	42be      	cmp	r6, r7
 8003f82:	d900      	bls.n	8003f86 <__ssputs_r+0x86>
 8003f84:	463e      	mov	r6, r7
 8003f86:	4632      	mov	r2, r6
 8003f88:	4641      	mov	r1, r8
 8003f8a:	6820      	ldr	r0, [r4, #0]
 8003f8c:	f000 fac8 	bl	8004520 <memmove>
 8003f90:	68a3      	ldr	r3, [r4, #8]
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	1b9b      	subs	r3, r3, r6
 8003f96:	4432      	add	r2, r6
 8003f98:	2000      	movs	r0, #0
 8003f9a:	60a3      	str	r3, [r4, #8]
 8003f9c:	6022      	str	r2, [r4, #0]
 8003f9e:	e7db      	b.n	8003f58 <__ssputs_r+0x58>
 8003fa0:	462a      	mov	r2, r5
 8003fa2:	f000 fad7 	bl	8004554 <_realloc_r>
 8003fa6:	4606      	mov	r6, r0
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d1e1      	bne.n	8003f70 <__ssputs_r+0x70>
 8003fac:	4650      	mov	r0, sl
 8003fae:	6921      	ldr	r1, [r4, #16]
 8003fb0:	f7ff fec4 	bl	8003d3c <_free_r>
 8003fb4:	e7c7      	b.n	8003f46 <__ssputs_r+0x46>
	...

08003fb8 <_svfiprintf_r>:
 8003fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fbc:	4698      	mov	r8, r3
 8003fbe:	898b      	ldrh	r3, [r1, #12]
 8003fc0:	4607      	mov	r7, r0
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	460d      	mov	r5, r1
 8003fc6:	4614      	mov	r4, r2
 8003fc8:	b09d      	sub	sp, #116	; 0x74
 8003fca:	d50e      	bpl.n	8003fea <_svfiprintf_r+0x32>
 8003fcc:	690b      	ldr	r3, [r1, #16]
 8003fce:	b963      	cbnz	r3, 8003fea <_svfiprintf_r+0x32>
 8003fd0:	2140      	movs	r1, #64	; 0x40
 8003fd2:	f7ff feff 	bl	8003dd4 <_malloc_r>
 8003fd6:	6028      	str	r0, [r5, #0]
 8003fd8:	6128      	str	r0, [r5, #16]
 8003fda:	b920      	cbnz	r0, 8003fe6 <_svfiprintf_r+0x2e>
 8003fdc:	230c      	movs	r3, #12
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe4:	e0d1      	b.n	800418a <_svfiprintf_r+0x1d2>
 8003fe6:	2340      	movs	r3, #64	; 0x40
 8003fe8:	616b      	str	r3, [r5, #20]
 8003fea:	2300      	movs	r3, #0
 8003fec:	9309      	str	r3, [sp, #36]	; 0x24
 8003fee:	2320      	movs	r3, #32
 8003ff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ff4:	2330      	movs	r3, #48	; 0x30
 8003ff6:	f04f 0901 	mov.w	r9, #1
 8003ffa:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ffe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80041a4 <_svfiprintf_r+0x1ec>
 8004002:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004006:	4623      	mov	r3, r4
 8004008:	469a      	mov	sl, r3
 800400a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800400e:	b10a      	cbz	r2, 8004014 <_svfiprintf_r+0x5c>
 8004010:	2a25      	cmp	r2, #37	; 0x25
 8004012:	d1f9      	bne.n	8004008 <_svfiprintf_r+0x50>
 8004014:	ebba 0b04 	subs.w	fp, sl, r4
 8004018:	d00b      	beq.n	8004032 <_svfiprintf_r+0x7a>
 800401a:	465b      	mov	r3, fp
 800401c:	4622      	mov	r2, r4
 800401e:	4629      	mov	r1, r5
 8004020:	4638      	mov	r0, r7
 8004022:	f7ff ff6d 	bl	8003f00 <__ssputs_r>
 8004026:	3001      	adds	r0, #1
 8004028:	f000 80aa 	beq.w	8004180 <_svfiprintf_r+0x1c8>
 800402c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800402e:	445a      	add	r2, fp
 8004030:	9209      	str	r2, [sp, #36]	; 0x24
 8004032:	f89a 3000 	ldrb.w	r3, [sl]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80a2 	beq.w	8004180 <_svfiprintf_r+0x1c8>
 800403c:	2300      	movs	r3, #0
 800403e:	f04f 32ff 	mov.w	r2, #4294967295
 8004042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004046:	f10a 0a01 	add.w	sl, sl, #1
 800404a:	9304      	str	r3, [sp, #16]
 800404c:	9307      	str	r3, [sp, #28]
 800404e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004052:	931a      	str	r3, [sp, #104]	; 0x68
 8004054:	4654      	mov	r4, sl
 8004056:	2205      	movs	r2, #5
 8004058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800405c:	4851      	ldr	r0, [pc, #324]	; (80041a4 <_svfiprintf_r+0x1ec>)
 800405e:	f000 fa43 	bl	80044e8 <memchr>
 8004062:	9a04      	ldr	r2, [sp, #16]
 8004064:	b9d8      	cbnz	r0, 800409e <_svfiprintf_r+0xe6>
 8004066:	06d0      	lsls	r0, r2, #27
 8004068:	bf44      	itt	mi
 800406a:	2320      	movmi	r3, #32
 800406c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004070:	0711      	lsls	r1, r2, #28
 8004072:	bf44      	itt	mi
 8004074:	232b      	movmi	r3, #43	; 0x2b
 8004076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800407a:	f89a 3000 	ldrb.w	r3, [sl]
 800407e:	2b2a      	cmp	r3, #42	; 0x2a
 8004080:	d015      	beq.n	80040ae <_svfiprintf_r+0xf6>
 8004082:	4654      	mov	r4, sl
 8004084:	2000      	movs	r0, #0
 8004086:	f04f 0c0a 	mov.w	ip, #10
 800408a:	9a07      	ldr	r2, [sp, #28]
 800408c:	4621      	mov	r1, r4
 800408e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004092:	3b30      	subs	r3, #48	; 0x30
 8004094:	2b09      	cmp	r3, #9
 8004096:	d94e      	bls.n	8004136 <_svfiprintf_r+0x17e>
 8004098:	b1b0      	cbz	r0, 80040c8 <_svfiprintf_r+0x110>
 800409a:	9207      	str	r2, [sp, #28]
 800409c:	e014      	b.n	80040c8 <_svfiprintf_r+0x110>
 800409e:	eba0 0308 	sub.w	r3, r0, r8
 80040a2:	fa09 f303 	lsl.w	r3, r9, r3
 80040a6:	4313      	orrs	r3, r2
 80040a8:	46a2      	mov	sl, r4
 80040aa:	9304      	str	r3, [sp, #16]
 80040ac:	e7d2      	b.n	8004054 <_svfiprintf_r+0x9c>
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	1d19      	adds	r1, r3, #4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	9103      	str	r1, [sp, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bfbb      	ittet	lt
 80040ba:	425b      	neglt	r3, r3
 80040bc:	f042 0202 	orrlt.w	r2, r2, #2
 80040c0:	9307      	strge	r3, [sp, #28]
 80040c2:	9307      	strlt	r3, [sp, #28]
 80040c4:	bfb8      	it	lt
 80040c6:	9204      	strlt	r2, [sp, #16]
 80040c8:	7823      	ldrb	r3, [r4, #0]
 80040ca:	2b2e      	cmp	r3, #46	; 0x2e
 80040cc:	d10c      	bne.n	80040e8 <_svfiprintf_r+0x130>
 80040ce:	7863      	ldrb	r3, [r4, #1]
 80040d0:	2b2a      	cmp	r3, #42	; 0x2a
 80040d2:	d135      	bne.n	8004140 <_svfiprintf_r+0x188>
 80040d4:	9b03      	ldr	r3, [sp, #12]
 80040d6:	3402      	adds	r4, #2
 80040d8:	1d1a      	adds	r2, r3, #4
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	9203      	str	r2, [sp, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bfb8      	it	lt
 80040e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80040e6:	9305      	str	r3, [sp, #20]
 80040e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041b4 <_svfiprintf_r+0x1fc>
 80040ec:	2203      	movs	r2, #3
 80040ee:	4650      	mov	r0, sl
 80040f0:	7821      	ldrb	r1, [r4, #0]
 80040f2:	f000 f9f9 	bl	80044e8 <memchr>
 80040f6:	b140      	cbz	r0, 800410a <_svfiprintf_r+0x152>
 80040f8:	2340      	movs	r3, #64	; 0x40
 80040fa:	eba0 000a 	sub.w	r0, r0, sl
 80040fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004102:	9b04      	ldr	r3, [sp, #16]
 8004104:	3401      	adds	r4, #1
 8004106:	4303      	orrs	r3, r0
 8004108:	9304      	str	r3, [sp, #16]
 800410a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800410e:	2206      	movs	r2, #6
 8004110:	4825      	ldr	r0, [pc, #148]	; (80041a8 <_svfiprintf_r+0x1f0>)
 8004112:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004116:	f000 f9e7 	bl	80044e8 <memchr>
 800411a:	2800      	cmp	r0, #0
 800411c:	d038      	beq.n	8004190 <_svfiprintf_r+0x1d8>
 800411e:	4b23      	ldr	r3, [pc, #140]	; (80041ac <_svfiprintf_r+0x1f4>)
 8004120:	bb1b      	cbnz	r3, 800416a <_svfiprintf_r+0x1b2>
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	3307      	adds	r3, #7
 8004126:	f023 0307 	bic.w	r3, r3, #7
 800412a:	3308      	adds	r3, #8
 800412c:	9303      	str	r3, [sp, #12]
 800412e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004130:	4433      	add	r3, r6
 8004132:	9309      	str	r3, [sp, #36]	; 0x24
 8004134:	e767      	b.n	8004006 <_svfiprintf_r+0x4e>
 8004136:	460c      	mov	r4, r1
 8004138:	2001      	movs	r0, #1
 800413a:	fb0c 3202 	mla	r2, ip, r2, r3
 800413e:	e7a5      	b.n	800408c <_svfiprintf_r+0xd4>
 8004140:	2300      	movs	r3, #0
 8004142:	f04f 0c0a 	mov.w	ip, #10
 8004146:	4619      	mov	r1, r3
 8004148:	3401      	adds	r4, #1
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	4620      	mov	r0, r4
 800414e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004152:	3a30      	subs	r2, #48	; 0x30
 8004154:	2a09      	cmp	r2, #9
 8004156:	d903      	bls.n	8004160 <_svfiprintf_r+0x1a8>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0c5      	beq.n	80040e8 <_svfiprintf_r+0x130>
 800415c:	9105      	str	r1, [sp, #20]
 800415e:	e7c3      	b.n	80040e8 <_svfiprintf_r+0x130>
 8004160:	4604      	mov	r4, r0
 8004162:	2301      	movs	r3, #1
 8004164:	fb0c 2101 	mla	r1, ip, r1, r2
 8004168:	e7f0      	b.n	800414c <_svfiprintf_r+0x194>
 800416a:	ab03      	add	r3, sp, #12
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	462a      	mov	r2, r5
 8004170:	4638      	mov	r0, r7
 8004172:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <_svfiprintf_r+0x1f8>)
 8004174:	a904      	add	r1, sp, #16
 8004176:	f3af 8000 	nop.w
 800417a:	1c42      	adds	r2, r0, #1
 800417c:	4606      	mov	r6, r0
 800417e:	d1d6      	bne.n	800412e <_svfiprintf_r+0x176>
 8004180:	89ab      	ldrh	r3, [r5, #12]
 8004182:	065b      	lsls	r3, r3, #25
 8004184:	f53f af2c 	bmi.w	8003fe0 <_svfiprintf_r+0x28>
 8004188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800418a:	b01d      	add	sp, #116	; 0x74
 800418c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004190:	ab03      	add	r3, sp, #12
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	462a      	mov	r2, r5
 8004196:	4638      	mov	r0, r7
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <_svfiprintf_r+0x1f8>)
 800419a:	a904      	add	r1, sp, #16
 800419c:	f000 f87c 	bl	8004298 <_printf_i>
 80041a0:	e7eb      	b.n	800417a <_svfiprintf_r+0x1c2>
 80041a2:	bf00      	nop
 80041a4:	08004638 	.word	0x08004638
 80041a8:	08004642 	.word	0x08004642
 80041ac:	00000000 	.word	0x00000000
 80041b0:	08003f01 	.word	0x08003f01
 80041b4:	0800463e 	.word	0x0800463e

080041b8 <_printf_common>:
 80041b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041bc:	4616      	mov	r6, r2
 80041be:	4699      	mov	r9, r3
 80041c0:	688a      	ldr	r2, [r1, #8]
 80041c2:	690b      	ldr	r3, [r1, #16]
 80041c4:	4607      	mov	r7, r0
 80041c6:	4293      	cmp	r3, r2
 80041c8:	bfb8      	it	lt
 80041ca:	4613      	movlt	r3, r2
 80041cc:	6033      	str	r3, [r6, #0]
 80041ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041d2:	460c      	mov	r4, r1
 80041d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041d8:	b10a      	cbz	r2, 80041de <_printf_common+0x26>
 80041da:	3301      	adds	r3, #1
 80041dc:	6033      	str	r3, [r6, #0]
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	0699      	lsls	r1, r3, #26
 80041e2:	bf42      	ittt	mi
 80041e4:	6833      	ldrmi	r3, [r6, #0]
 80041e6:	3302      	addmi	r3, #2
 80041e8:	6033      	strmi	r3, [r6, #0]
 80041ea:	6825      	ldr	r5, [r4, #0]
 80041ec:	f015 0506 	ands.w	r5, r5, #6
 80041f0:	d106      	bne.n	8004200 <_printf_common+0x48>
 80041f2:	f104 0a19 	add.w	sl, r4, #25
 80041f6:	68e3      	ldr	r3, [r4, #12]
 80041f8:	6832      	ldr	r2, [r6, #0]
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	42ab      	cmp	r3, r5
 80041fe:	dc28      	bgt.n	8004252 <_printf_common+0x9a>
 8004200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004204:	1e13      	subs	r3, r2, #0
 8004206:	6822      	ldr	r2, [r4, #0]
 8004208:	bf18      	it	ne
 800420a:	2301      	movne	r3, #1
 800420c:	0692      	lsls	r2, r2, #26
 800420e:	d42d      	bmi.n	800426c <_printf_common+0xb4>
 8004210:	4649      	mov	r1, r9
 8004212:	4638      	mov	r0, r7
 8004214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004218:	47c0      	blx	r8
 800421a:	3001      	adds	r0, #1
 800421c:	d020      	beq.n	8004260 <_printf_common+0xa8>
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	68e5      	ldr	r5, [r4, #12]
 8004222:	f003 0306 	and.w	r3, r3, #6
 8004226:	2b04      	cmp	r3, #4
 8004228:	bf18      	it	ne
 800422a:	2500      	movne	r5, #0
 800422c:	6832      	ldr	r2, [r6, #0]
 800422e:	f04f 0600 	mov.w	r6, #0
 8004232:	68a3      	ldr	r3, [r4, #8]
 8004234:	bf08      	it	eq
 8004236:	1aad      	subeq	r5, r5, r2
 8004238:	6922      	ldr	r2, [r4, #16]
 800423a:	bf08      	it	eq
 800423c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004240:	4293      	cmp	r3, r2
 8004242:	bfc4      	itt	gt
 8004244:	1a9b      	subgt	r3, r3, r2
 8004246:	18ed      	addgt	r5, r5, r3
 8004248:	341a      	adds	r4, #26
 800424a:	42b5      	cmp	r5, r6
 800424c:	d11a      	bne.n	8004284 <_printf_common+0xcc>
 800424e:	2000      	movs	r0, #0
 8004250:	e008      	b.n	8004264 <_printf_common+0xac>
 8004252:	2301      	movs	r3, #1
 8004254:	4652      	mov	r2, sl
 8004256:	4649      	mov	r1, r9
 8004258:	4638      	mov	r0, r7
 800425a:	47c0      	blx	r8
 800425c:	3001      	adds	r0, #1
 800425e:	d103      	bne.n	8004268 <_printf_common+0xb0>
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004268:	3501      	adds	r5, #1
 800426a:	e7c4      	b.n	80041f6 <_printf_common+0x3e>
 800426c:	2030      	movs	r0, #48	; 0x30
 800426e:	18e1      	adds	r1, r4, r3
 8004270:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800427a:	4422      	add	r2, r4
 800427c:	3302      	adds	r3, #2
 800427e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004282:	e7c5      	b.n	8004210 <_printf_common+0x58>
 8004284:	2301      	movs	r3, #1
 8004286:	4622      	mov	r2, r4
 8004288:	4649      	mov	r1, r9
 800428a:	4638      	mov	r0, r7
 800428c:	47c0      	blx	r8
 800428e:	3001      	adds	r0, #1
 8004290:	d0e6      	beq.n	8004260 <_printf_common+0xa8>
 8004292:	3601      	adds	r6, #1
 8004294:	e7d9      	b.n	800424a <_printf_common+0x92>
	...

08004298 <_printf_i>:
 8004298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800429c:	460c      	mov	r4, r1
 800429e:	7e27      	ldrb	r7, [r4, #24]
 80042a0:	4691      	mov	r9, r2
 80042a2:	2f78      	cmp	r7, #120	; 0x78
 80042a4:	4680      	mov	r8, r0
 80042a6:	469a      	mov	sl, r3
 80042a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042ae:	d807      	bhi.n	80042c0 <_printf_i+0x28>
 80042b0:	2f62      	cmp	r7, #98	; 0x62
 80042b2:	d80a      	bhi.n	80042ca <_printf_i+0x32>
 80042b4:	2f00      	cmp	r7, #0
 80042b6:	f000 80d9 	beq.w	800446c <_printf_i+0x1d4>
 80042ba:	2f58      	cmp	r7, #88	; 0x58
 80042bc:	f000 80a4 	beq.w	8004408 <_printf_i+0x170>
 80042c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042c8:	e03a      	b.n	8004340 <_printf_i+0xa8>
 80042ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ce:	2b15      	cmp	r3, #21
 80042d0:	d8f6      	bhi.n	80042c0 <_printf_i+0x28>
 80042d2:	a001      	add	r0, pc, #4	; (adr r0, 80042d8 <_printf_i+0x40>)
 80042d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042d8:	08004331 	.word	0x08004331
 80042dc:	08004345 	.word	0x08004345
 80042e0:	080042c1 	.word	0x080042c1
 80042e4:	080042c1 	.word	0x080042c1
 80042e8:	080042c1 	.word	0x080042c1
 80042ec:	080042c1 	.word	0x080042c1
 80042f0:	08004345 	.word	0x08004345
 80042f4:	080042c1 	.word	0x080042c1
 80042f8:	080042c1 	.word	0x080042c1
 80042fc:	080042c1 	.word	0x080042c1
 8004300:	080042c1 	.word	0x080042c1
 8004304:	08004453 	.word	0x08004453
 8004308:	08004375 	.word	0x08004375
 800430c:	08004435 	.word	0x08004435
 8004310:	080042c1 	.word	0x080042c1
 8004314:	080042c1 	.word	0x080042c1
 8004318:	08004475 	.word	0x08004475
 800431c:	080042c1 	.word	0x080042c1
 8004320:	08004375 	.word	0x08004375
 8004324:	080042c1 	.word	0x080042c1
 8004328:	080042c1 	.word	0x080042c1
 800432c:	0800443d 	.word	0x0800443d
 8004330:	680b      	ldr	r3, [r1, #0]
 8004332:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	600a      	str	r2, [r1, #0]
 800433c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004340:	2301      	movs	r3, #1
 8004342:	e0a4      	b.n	800448e <_printf_i+0x1f6>
 8004344:	6825      	ldr	r5, [r4, #0]
 8004346:	6808      	ldr	r0, [r1, #0]
 8004348:	062e      	lsls	r6, r5, #24
 800434a:	f100 0304 	add.w	r3, r0, #4
 800434e:	d50a      	bpl.n	8004366 <_printf_i+0xce>
 8004350:	6805      	ldr	r5, [r0, #0]
 8004352:	600b      	str	r3, [r1, #0]
 8004354:	2d00      	cmp	r5, #0
 8004356:	da03      	bge.n	8004360 <_printf_i+0xc8>
 8004358:	232d      	movs	r3, #45	; 0x2d
 800435a:	426d      	negs	r5, r5
 800435c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004360:	230a      	movs	r3, #10
 8004362:	485e      	ldr	r0, [pc, #376]	; (80044dc <_printf_i+0x244>)
 8004364:	e019      	b.n	800439a <_printf_i+0x102>
 8004366:	f015 0f40 	tst.w	r5, #64	; 0x40
 800436a:	6805      	ldr	r5, [r0, #0]
 800436c:	600b      	str	r3, [r1, #0]
 800436e:	bf18      	it	ne
 8004370:	b22d      	sxthne	r5, r5
 8004372:	e7ef      	b.n	8004354 <_printf_i+0xbc>
 8004374:	680b      	ldr	r3, [r1, #0]
 8004376:	6825      	ldr	r5, [r4, #0]
 8004378:	1d18      	adds	r0, r3, #4
 800437a:	6008      	str	r0, [r1, #0]
 800437c:	0628      	lsls	r0, r5, #24
 800437e:	d501      	bpl.n	8004384 <_printf_i+0xec>
 8004380:	681d      	ldr	r5, [r3, #0]
 8004382:	e002      	b.n	800438a <_printf_i+0xf2>
 8004384:	0669      	lsls	r1, r5, #25
 8004386:	d5fb      	bpl.n	8004380 <_printf_i+0xe8>
 8004388:	881d      	ldrh	r5, [r3, #0]
 800438a:	2f6f      	cmp	r7, #111	; 0x6f
 800438c:	bf0c      	ite	eq
 800438e:	2308      	moveq	r3, #8
 8004390:	230a      	movne	r3, #10
 8004392:	4852      	ldr	r0, [pc, #328]	; (80044dc <_printf_i+0x244>)
 8004394:	2100      	movs	r1, #0
 8004396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800439a:	6866      	ldr	r6, [r4, #4]
 800439c:	2e00      	cmp	r6, #0
 800439e:	bfa8      	it	ge
 80043a0:	6821      	ldrge	r1, [r4, #0]
 80043a2:	60a6      	str	r6, [r4, #8]
 80043a4:	bfa4      	itt	ge
 80043a6:	f021 0104 	bicge.w	r1, r1, #4
 80043aa:	6021      	strge	r1, [r4, #0]
 80043ac:	b90d      	cbnz	r5, 80043b2 <_printf_i+0x11a>
 80043ae:	2e00      	cmp	r6, #0
 80043b0:	d04d      	beq.n	800444e <_printf_i+0x1b6>
 80043b2:	4616      	mov	r6, r2
 80043b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80043b8:	fb03 5711 	mls	r7, r3, r1, r5
 80043bc:	5dc7      	ldrb	r7, [r0, r7]
 80043be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043c2:	462f      	mov	r7, r5
 80043c4:	42bb      	cmp	r3, r7
 80043c6:	460d      	mov	r5, r1
 80043c8:	d9f4      	bls.n	80043b4 <_printf_i+0x11c>
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d10b      	bne.n	80043e6 <_printf_i+0x14e>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	07df      	lsls	r7, r3, #31
 80043d2:	d508      	bpl.n	80043e6 <_printf_i+0x14e>
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	6861      	ldr	r1, [r4, #4]
 80043d8:	4299      	cmp	r1, r3
 80043da:	bfde      	ittt	le
 80043dc:	2330      	movle	r3, #48	; 0x30
 80043de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043e6:	1b92      	subs	r2, r2, r6
 80043e8:	6122      	str	r2, [r4, #16]
 80043ea:	464b      	mov	r3, r9
 80043ec:	4621      	mov	r1, r4
 80043ee:	4640      	mov	r0, r8
 80043f0:	f8cd a000 	str.w	sl, [sp]
 80043f4:	aa03      	add	r2, sp, #12
 80043f6:	f7ff fedf 	bl	80041b8 <_printf_common>
 80043fa:	3001      	adds	r0, #1
 80043fc:	d14c      	bne.n	8004498 <_printf_i+0x200>
 80043fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004402:	b004      	add	sp, #16
 8004404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004408:	4834      	ldr	r0, [pc, #208]	; (80044dc <_printf_i+0x244>)
 800440a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800440e:	680e      	ldr	r6, [r1, #0]
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	f856 5b04 	ldr.w	r5, [r6], #4
 8004416:	061f      	lsls	r7, r3, #24
 8004418:	600e      	str	r6, [r1, #0]
 800441a:	d514      	bpl.n	8004446 <_printf_i+0x1ae>
 800441c:	07d9      	lsls	r1, r3, #31
 800441e:	bf44      	itt	mi
 8004420:	f043 0320 	orrmi.w	r3, r3, #32
 8004424:	6023      	strmi	r3, [r4, #0]
 8004426:	b91d      	cbnz	r5, 8004430 <_printf_i+0x198>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	f023 0320 	bic.w	r3, r3, #32
 800442e:	6023      	str	r3, [r4, #0]
 8004430:	2310      	movs	r3, #16
 8004432:	e7af      	b.n	8004394 <_printf_i+0xfc>
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	f043 0320 	orr.w	r3, r3, #32
 800443a:	6023      	str	r3, [r4, #0]
 800443c:	2378      	movs	r3, #120	; 0x78
 800443e:	4828      	ldr	r0, [pc, #160]	; (80044e0 <_printf_i+0x248>)
 8004440:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004444:	e7e3      	b.n	800440e <_printf_i+0x176>
 8004446:	065e      	lsls	r6, r3, #25
 8004448:	bf48      	it	mi
 800444a:	b2ad      	uxthmi	r5, r5
 800444c:	e7e6      	b.n	800441c <_printf_i+0x184>
 800444e:	4616      	mov	r6, r2
 8004450:	e7bb      	b.n	80043ca <_printf_i+0x132>
 8004452:	680b      	ldr	r3, [r1, #0]
 8004454:	6826      	ldr	r6, [r4, #0]
 8004456:	1d1d      	adds	r5, r3, #4
 8004458:	6960      	ldr	r0, [r4, #20]
 800445a:	600d      	str	r5, [r1, #0]
 800445c:	0635      	lsls	r5, r6, #24
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	d501      	bpl.n	8004466 <_printf_i+0x1ce>
 8004462:	6018      	str	r0, [r3, #0]
 8004464:	e002      	b.n	800446c <_printf_i+0x1d4>
 8004466:	0671      	lsls	r1, r6, #25
 8004468:	d5fb      	bpl.n	8004462 <_printf_i+0x1ca>
 800446a:	8018      	strh	r0, [r3, #0]
 800446c:	2300      	movs	r3, #0
 800446e:	4616      	mov	r6, r2
 8004470:	6123      	str	r3, [r4, #16]
 8004472:	e7ba      	b.n	80043ea <_printf_i+0x152>
 8004474:	680b      	ldr	r3, [r1, #0]
 8004476:	1d1a      	adds	r2, r3, #4
 8004478:	600a      	str	r2, [r1, #0]
 800447a:	681e      	ldr	r6, [r3, #0]
 800447c:	2100      	movs	r1, #0
 800447e:	4630      	mov	r0, r6
 8004480:	6862      	ldr	r2, [r4, #4]
 8004482:	f000 f831 	bl	80044e8 <memchr>
 8004486:	b108      	cbz	r0, 800448c <_printf_i+0x1f4>
 8004488:	1b80      	subs	r0, r0, r6
 800448a:	6060      	str	r0, [r4, #4]
 800448c:	6863      	ldr	r3, [r4, #4]
 800448e:	6123      	str	r3, [r4, #16]
 8004490:	2300      	movs	r3, #0
 8004492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004496:	e7a8      	b.n	80043ea <_printf_i+0x152>
 8004498:	4632      	mov	r2, r6
 800449a:	4649      	mov	r1, r9
 800449c:	4640      	mov	r0, r8
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	47d0      	blx	sl
 80044a2:	3001      	adds	r0, #1
 80044a4:	d0ab      	beq.n	80043fe <_printf_i+0x166>
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	079b      	lsls	r3, r3, #30
 80044aa:	d413      	bmi.n	80044d4 <_printf_i+0x23c>
 80044ac:	68e0      	ldr	r0, [r4, #12]
 80044ae:	9b03      	ldr	r3, [sp, #12]
 80044b0:	4298      	cmp	r0, r3
 80044b2:	bfb8      	it	lt
 80044b4:	4618      	movlt	r0, r3
 80044b6:	e7a4      	b.n	8004402 <_printf_i+0x16a>
 80044b8:	2301      	movs	r3, #1
 80044ba:	4632      	mov	r2, r6
 80044bc:	4649      	mov	r1, r9
 80044be:	4640      	mov	r0, r8
 80044c0:	47d0      	blx	sl
 80044c2:	3001      	adds	r0, #1
 80044c4:	d09b      	beq.n	80043fe <_printf_i+0x166>
 80044c6:	3501      	adds	r5, #1
 80044c8:	68e3      	ldr	r3, [r4, #12]
 80044ca:	9903      	ldr	r1, [sp, #12]
 80044cc:	1a5b      	subs	r3, r3, r1
 80044ce:	42ab      	cmp	r3, r5
 80044d0:	dcf2      	bgt.n	80044b8 <_printf_i+0x220>
 80044d2:	e7eb      	b.n	80044ac <_printf_i+0x214>
 80044d4:	2500      	movs	r5, #0
 80044d6:	f104 0619 	add.w	r6, r4, #25
 80044da:	e7f5      	b.n	80044c8 <_printf_i+0x230>
 80044dc:	08004649 	.word	0x08004649
 80044e0:	0800465a 	.word	0x0800465a

080044e4 <__retarget_lock_acquire_recursive>:
 80044e4:	4770      	bx	lr

080044e6 <__retarget_lock_release_recursive>:
 80044e6:	4770      	bx	lr

080044e8 <memchr>:
 80044e8:	4603      	mov	r3, r0
 80044ea:	b510      	push	{r4, lr}
 80044ec:	b2c9      	uxtb	r1, r1
 80044ee:	4402      	add	r2, r0
 80044f0:	4293      	cmp	r3, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	d101      	bne.n	80044fa <memchr+0x12>
 80044f6:	2000      	movs	r0, #0
 80044f8:	e003      	b.n	8004502 <memchr+0x1a>
 80044fa:	7804      	ldrb	r4, [r0, #0]
 80044fc:	3301      	adds	r3, #1
 80044fe:	428c      	cmp	r4, r1
 8004500:	d1f6      	bne.n	80044f0 <memchr+0x8>
 8004502:	bd10      	pop	{r4, pc}

08004504 <memcpy>:
 8004504:	440a      	add	r2, r1
 8004506:	4291      	cmp	r1, r2
 8004508:	f100 33ff 	add.w	r3, r0, #4294967295
 800450c:	d100      	bne.n	8004510 <memcpy+0xc>
 800450e:	4770      	bx	lr
 8004510:	b510      	push	{r4, lr}
 8004512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004516:	4291      	cmp	r1, r2
 8004518:	f803 4f01 	strb.w	r4, [r3, #1]!
 800451c:	d1f9      	bne.n	8004512 <memcpy+0xe>
 800451e:	bd10      	pop	{r4, pc}

08004520 <memmove>:
 8004520:	4288      	cmp	r0, r1
 8004522:	b510      	push	{r4, lr}
 8004524:	eb01 0402 	add.w	r4, r1, r2
 8004528:	d902      	bls.n	8004530 <memmove+0x10>
 800452a:	4284      	cmp	r4, r0
 800452c:	4623      	mov	r3, r4
 800452e:	d807      	bhi.n	8004540 <memmove+0x20>
 8004530:	1e43      	subs	r3, r0, #1
 8004532:	42a1      	cmp	r1, r4
 8004534:	d008      	beq.n	8004548 <memmove+0x28>
 8004536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800453a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800453e:	e7f8      	b.n	8004532 <memmove+0x12>
 8004540:	4601      	mov	r1, r0
 8004542:	4402      	add	r2, r0
 8004544:	428a      	cmp	r2, r1
 8004546:	d100      	bne.n	800454a <memmove+0x2a>
 8004548:	bd10      	pop	{r4, pc}
 800454a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800454e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004552:	e7f7      	b.n	8004544 <memmove+0x24>

08004554 <_realloc_r>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	4607      	mov	r7, r0
 8004558:	4614      	mov	r4, r2
 800455a:	460e      	mov	r6, r1
 800455c:	b921      	cbnz	r1, 8004568 <_realloc_r+0x14>
 800455e:	4611      	mov	r1, r2
 8004560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004564:	f7ff bc36 	b.w	8003dd4 <_malloc_r>
 8004568:	b922      	cbnz	r2, 8004574 <_realloc_r+0x20>
 800456a:	f7ff fbe7 	bl	8003d3c <_free_r>
 800456e:	4625      	mov	r5, r4
 8004570:	4628      	mov	r0, r5
 8004572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004574:	f000 f814 	bl	80045a0 <_malloc_usable_size_r>
 8004578:	42a0      	cmp	r0, r4
 800457a:	d20f      	bcs.n	800459c <_realloc_r+0x48>
 800457c:	4621      	mov	r1, r4
 800457e:	4638      	mov	r0, r7
 8004580:	f7ff fc28 	bl	8003dd4 <_malloc_r>
 8004584:	4605      	mov	r5, r0
 8004586:	2800      	cmp	r0, #0
 8004588:	d0f2      	beq.n	8004570 <_realloc_r+0x1c>
 800458a:	4631      	mov	r1, r6
 800458c:	4622      	mov	r2, r4
 800458e:	f7ff ffb9 	bl	8004504 <memcpy>
 8004592:	4631      	mov	r1, r6
 8004594:	4638      	mov	r0, r7
 8004596:	f7ff fbd1 	bl	8003d3c <_free_r>
 800459a:	e7e9      	b.n	8004570 <_realloc_r+0x1c>
 800459c:	4635      	mov	r5, r6
 800459e:	e7e7      	b.n	8004570 <_realloc_r+0x1c>

080045a0 <_malloc_usable_size_r>:
 80045a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a4:	1f18      	subs	r0, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	bfbc      	itt	lt
 80045aa:	580b      	ldrlt	r3, [r1, r0]
 80045ac:	18c0      	addlt	r0, r0, r3
 80045ae:	4770      	bx	lr

080045b0 <_init>:
 80045b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b2:	bf00      	nop
 80045b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b6:	bc08      	pop	{r3}
 80045b8:	469e      	mov	lr, r3
 80045ba:	4770      	bx	lr

080045bc <_fini>:
 80045bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045be:	bf00      	nop
 80045c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c2:	bc08      	pop	{r3}
 80045c4:	469e      	mov	lr, r3
 80045c6:	4770      	bx	lr
