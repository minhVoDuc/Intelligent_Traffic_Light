
Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004160  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004310  08004310  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004310  08004310  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004310  08004310  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004310  08004310  00014310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200000cc  080043e4  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080043e4  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f14  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a78  00000000  00000000  00032009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00034a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  000357f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198b8  00000000  00000000  00036450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe82  00000000  00000000  0004fd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b36b  00000000  00000000  0005fb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eaef5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039b8  00000000  00000000  000eaf48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000cc 	.word	0x200000cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004254 	.word	0x08004254

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d0 	.word	0x200000d0
 8000148:	08004254 	.word	0x08004254

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 fbf4 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f816 	bl	8000184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f926 	bl	80003a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f8fa 	bl	8000354 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000160:	f000 f852 	bl	8000208 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 f89c 	bl	80002a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000168:	4805      	ldr	r0, [pc, #20]	; (8000180 <main+0x34>)
 800016a:	f002 fb97 	bl	800289c <HAL_TIM_Base_Start_IT>
  timer_init();
 800016e:	f001 fadf 	bl	8001730 <timer_init>
  traffic_init();
 8000172:	f000 fbed 	bl	8000950 <traffic_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  traffic_fsm();
 8000176:	f000 fe7f 	bl	8000e78 <traffic_fsm>
	  pedestrian_fsm();
 800017a:	f000 fb9d 	bl	80008b8 <pedestrian_fsm>
	  traffic_fsm();
 800017e:	e7fa      	b.n	8000176 <main+0x2a>
 8000180:	2000019c 	.word	0x2000019c

08000184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b090      	sub	sp, #64	; 0x40
 8000188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018a:	f107 0318 	add.w	r3, r7, #24
 800018e:	2228      	movs	r2, #40	; 0x28
 8000190:	2100      	movs	r1, #0
 8000192:	4618      	mov	r0, r3
 8000194:	f003 fc1c 	bl	80039d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]
 80001a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a6:	2302      	movs	r3, #2
 80001a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001aa:	2301      	movs	r3, #1
 80001ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ae:	2310      	movs	r3, #16
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b2:	2302      	movs	r3, #2
 80001b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b6:	2300      	movs	r3, #0
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ba:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0318 	add.w	r3, r7, #24
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 feff 	bl	8001fc8 <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001d0:	f000 f998 	bl	8000504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d8:	2302      	movs	r3, #2
 80001da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2102      	movs	r1, #2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 f96a 	bl	80024c8 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001fa:	f000 f983 	bl	8000504 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	; 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b086      	sub	sp, #24
 800020c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800020e:	f107 0308 	add.w	r3, r7, #8
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800021c:	463b      	mov	r3, r7
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <MX_TIM2_Init+0x94>)
 8000226:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800022a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 800022c:	4b1b      	ldr	r3, [pc, #108]	; (800029c <MX_TIM2_Init+0x94>)
 800022e:	223f      	movs	r2, #63	; 0x3f
 8000230:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000232:	4b1a      	ldr	r3, [pc, #104]	; (800029c <MX_TIM2_Init+0x94>)
 8000234:	2200      	movs	r2, #0
 8000236:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000238:	4b18      	ldr	r3, [pc, #96]	; (800029c <MX_TIM2_Init+0x94>)
 800023a:	f242 720f 	movw	r2, #9999	; 0x270f
 800023e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <MX_TIM2_Init+0x94>)
 8000242:	2200      	movs	r2, #0
 8000244:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <MX_TIM2_Init+0x94>)
 8000248:	2200      	movs	r2, #0
 800024a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800024c:	4813      	ldr	r0, [pc, #76]	; (800029c <MX_TIM2_Init+0x94>)
 800024e:	f002 fad5 	bl	80027fc <HAL_TIM_Base_Init>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000258:	f000 f954 	bl	8000504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800025c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000260:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000262:	f107 0308 	add.w	r3, r7, #8
 8000266:	4619      	mov	r1, r3
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <MX_TIM2_Init+0x94>)
 800026a:	f002 fd7f 	bl	8002d6c <HAL_TIM_ConfigClockSource>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000274:	f000 f946 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000278:	2300      	movs	r3, #0
 800027a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_TIM2_Init+0x94>)
 8000286:	f003 f8d9 	bl	800343c <HAL_TIMEx_MasterConfigSynchronization>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000290:	f000 f938 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000294:	bf00      	nop
 8000296:	3718      	adds	r7, #24
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000019c 	.word	0x2000019c

080002a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a6:	f107 0320 	add.w	r3, r7, #32
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]
 80002be:	615a      	str	r2, [r3, #20]
 80002c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002c2:	4b22      	ldr	r3, [pc, #136]	; (800034c <MX_TIM3_Init+0xac>)
 80002c4:	4a22      	ldr	r2, [pc, #136]	; (8000350 <MX_TIM3_Init+0xb0>)
 80002c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80002c8:	4b20      	ldr	r3, [pc, #128]	; (800034c <MX_TIM3_Init+0xac>)
 80002ca:	223f      	movs	r2, #63	; 0x3f
 80002cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <MX_TIM3_Init+0xac>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80002d4:	4b1d      	ldr	r3, [pc, #116]	; (800034c <MX_TIM3_Init+0xac>)
 80002d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_TIM3_Init+0xac>)
 80002de:	2200      	movs	r2, #0
 80002e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	; (800034c <MX_TIM3_Init+0xac>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80002e8:	4818      	ldr	r0, [pc, #96]	; (800034c <MX_TIM3_Init+0xac>)
 80002ea:	f002 fb29 	bl	8002940 <HAL_TIM_PWM_Init>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80002f4:	f000 f906 	bl	8000504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f8:	2300      	movs	r3, #0
 80002fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000300:	f107 0320 	add.w	r3, r7, #32
 8000304:	4619      	mov	r1, r3
 8000306:	4811      	ldr	r0, [pc, #68]	; (800034c <MX_TIM3_Init+0xac>)
 8000308:	f003 f898 	bl	800343c <HAL_TIMEx_MasterConfigSynchronization>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000312:	f000 f8f7 	bl	8000504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000316:	2360      	movs	r3, #96	; 0x60
 8000318:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2200      	movs	r2, #0
 800032a:	4619      	mov	r1, r3
 800032c:	4807      	ldr	r0, [pc, #28]	; (800034c <MX_TIM3_Init+0xac>)
 800032e:	f002 fc5f 	bl	8002bf0 <HAL_TIM_PWM_ConfigChannel>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000338:	f000 f8e4 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800033c:	4803      	ldr	r0, [pc, #12]	; (800034c <MX_TIM3_Init+0xac>)
 800033e:	f000 f95b 	bl	80005f8 <HAL_TIM_MspPostInit>

}
 8000342:	bf00      	nop
 8000344:	3728      	adds	r7, #40	; 0x28
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000148 	.word	0x20000148
 8000350:	40000400 	.word	0x40000400

08000354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800035a:	4a12      	ldr	r2, [pc, #72]	; (80003a4 <MX_USART2_UART_Init+0x50>)
 800035c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800037a:	220c      	movs	r2, #12
 800037c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800037e:	4b08      	ldr	r3, [pc, #32]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 8000386:	2200      	movs	r2, #0
 8000388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	; (80003a0 <MX_USART2_UART_Init+0x4c>)
 800038c:	f003 f8c6 	bl	800351c <HAL_UART_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000396:	f000 f8b5 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000218 	.word	0x20000218
 80003a4:	40004400 	.word	0x40004400

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003bc:	4b45      	ldr	r3, [pc, #276]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a44      	ldr	r2, [pc, #272]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b42      	ldr	r3, [pc, #264]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0310 	and.w	r3, r3, #16
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d4:	4b3f      	ldr	r3, [pc, #252]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a3e      	ldr	r2, [pc, #248]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b3c      	ldr	r3, [pc, #240]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0320 	and.w	r3, r3, #32
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b39      	ldr	r3, [pc, #228]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a38      	ldr	r2, [pc, #224]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <MX_GPIO_Init+0x12c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000404:	4b33      	ldr	r3, [pc, #204]	; (80004d4 <MX_GPIO_Init+0x12c>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a32      	ldr	r2, [pc, #200]	; (80004d4 <MX_GPIO_Init+0x12c>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b30      	ldr	r3, [pc, #192]	; (80004d4 <MX_GPIO_Init+0x12c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0308 	and.w	r3, r3, #8
 8000418:	603b      	str	r3, [r7, #0]
 800041a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8000422:	482d      	ldr	r0, [pc, #180]	; (80004d8 <MX_GPIO_Init+0x130>)
 8000424:	f001 fd95 	bl	8001f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800042e:	482b      	ldr	r0, [pc, #172]	; (80004dc <MX_GPIO_Init+0x134>)
 8000430:	f001 fd8f 	bl	8001f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_GPIO_Init+0x138>)
 800043c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043e:	2300      	movs	r3, #0
 8000440:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000442:	f107 0310 	add.w	r3, r7, #16
 8000446:	4619      	mov	r1, r3
 8000448:	4826      	ldr	r0, [pc, #152]	; (80004e4 <MX_GPIO_Init+0x13c>)
 800044a:	f001 fbe7 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_BTN_Pin BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = PD_BTN_Pin|BTN_1_Pin|BTN_2_Pin;
 800044e:	2313      	movs	r3, #19
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000456:	2301      	movs	r3, #1
 8000458:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045a:	f107 0310 	add.w	r3, r7, #16
 800045e:	4619      	mov	r1, r3
 8000460:	481d      	ldr	r0, [pc, #116]	; (80004d8 <MX_GPIO_Init+0x130>)
 8000462:	f001 fbdb 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PD_LED_1_Pin TR_LED_A_0_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PD_LED_1_Pin|TR_LED_A_0_Pin;
 8000466:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 800046a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046c:	2301      	movs	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	2300      	movs	r3, #0
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000474:	2302      	movs	r3, #2
 8000476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4816      	ldr	r0, [pc, #88]	; (80004d8 <MX_GPIO_Init+0x130>)
 8000480:	f001 fbcc 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_3_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin;
 8000484:	2301      	movs	r3, #1
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800048c:	2301      	movs	r3, #1
 800048e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_3_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	4619      	mov	r1, r3
 8000496:	4811      	ldr	r0, [pc, #68]	; (80004dc <MX_GPIO_Init+0x134>)
 8000498:	f001 fbc0 	bl	8001c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD_LED_0_Pin TR_LED_A_1_Pin TR_LED_B_1_Pin TR_LED_B_0_Pin */
  GPIO_InitStruct.Pin = PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin;
 800049c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	4619      	mov	r1, r3
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <MX_GPIO_Init+0x134>)
 80004b6:	f001 fbb1 	bl	8001c1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2100      	movs	r1, #0
 80004be:	2028      	movs	r0, #40	; 0x28
 80004c0:	f001 fb75 	bl	8001bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004c4:	2028      	movs	r0, #40	; 0x28
 80004c6:	f001 fb8e 	bl	8001be6 <HAL_NVIC_EnableIRQ>

}
 80004ca:	bf00      	nop
 80004cc:	3720      	adds	r7, #32
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010800 	.word	0x40010800
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	10110000 	.word	0x10110000
 80004e4:	40011000 	.word	0x40011000

080004e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	timer_run();
 80004f0:	f001 f92c 	bl	800174c <timer_run>
	button_reading();
 80004f4:	f000 fdd4 	bl	80010a0 <button_reading>
	duration_run();
 80004f8:	f000 ff3c 	bl	8001374 <duration_run>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_MspInit+0x5c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x5c>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_MspInit+0x60>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_MspInit+0x60>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	40010000 	.word	0x40010000

08000574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000584:	d113      	bne.n	80005ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	61d3      	str	r3, [r2, #28]
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_TIM_Base_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	201c      	movs	r0, #28
 80005a4:	f001 fb03 	bl	8001bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005a8:	201c      	movs	r0, #28
 80005aa:	f001 fb1c 	bl	8001be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a09      	ldr	r2, [pc, #36]	; (80005f0 <HAL_TIM_PWM_MspInit+0x34>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d10b      	bne.n	80005e6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <HAL_TIM_PWM_MspInit+0x38>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <HAL_TIM_PWM_MspInit+0x38>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <HAL_TIM_PWM_MspInit+0x38>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40000400 	.word	0x40000400
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <HAL_TIM_MspPostInit+0x58>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d117      	bne.n	8000648 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_TIM_MspPostInit+0x5c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <HAL_TIM_MspPostInit+0x5c>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <HAL_TIM_MspPostInit+0x5c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PD_BUZZER_Pin;
 8000630:	2340      	movs	r3, #64	; 0x40
 8000632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PD_BUZZER_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <HAL_TIM_MspPostInit+0x60>)
 8000644:	f001 faea 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40000400 	.word	0x40000400
 8000654:	40021000 	.word	0x40021000
 8000658:	40010800 	.word	0x40010800

0800065c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a15      	ldr	r2, [pc, #84]	; (80006cc <HAL_UART_MspInit+0x70>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d123      	bne.n	80006c4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <HAL_UART_MspInit+0x74>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <HAL_UART_MspInit+0x74>)
 8000682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000686:	61d3      	str	r3, [r2, #28]
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <HAL_UART_MspInit+0x74>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <HAL_UART_MspInit+0x74>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a0d      	ldr	r2, [pc, #52]	; (80006d0 <HAL_UART_MspInit+0x74>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <HAL_UART_MspInit+0x74>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0304 	and.w	r3, r3, #4
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80006ac:	230c      	movs	r3, #12
 80006ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <HAL_UART_MspInit+0x78>)
 80006c0:	f001 faac 	bl	8001c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40004400 	.word	0x40004400
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler+0x4>

080006de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <HardFault_Handler+0x4>

080006e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <MemManage_Handler+0x4>

080006ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <BusFault_Handler+0x4>

080006f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <UsageFault_Handler+0x4>

080006f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800071e:	f001 f953 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <TIM2_IRQHandler+0x10>)
 800072e:	f002 f956 	bl	80029de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000019c 	.word	0x2000019c

0800073c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000740:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000744:	f001 fc1e 	bl	8001f84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000754:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <_sbrk+0x5c>)
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <_sbrk+0x60>)
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000760:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <_sbrk+0x64>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d102      	bne.n	800076e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <_sbrk+0x64>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <_sbrk+0x68>)
 800076c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <_sbrk+0x64>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4413      	add	r3, r2
 8000776:	693a      	ldr	r2, [r7, #16]
 8000778:	429a      	cmp	r2, r3
 800077a:	d207      	bcs.n	800078c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800077c:	f003 f8ee 	bl	800395c <__errno>
 8000780:	4603      	mov	r3, r0
 8000782:	220c      	movs	r2, #12
 8000784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	e009      	b.n	80007a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800078c:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <_sbrk+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <_sbrk+0x64>)
 800079c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800079e:	68fb      	ldr	r3, [r7, #12]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20005000 	.word	0x20005000
 80007ac:	00000400 	.word	0x00000400
 80007b0:	200000e8 	.word	0x200000e8
 80007b4:	20000270 	.word	0x20000270

080007b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <pedestrian_send_duration>:
void pedestrian_init() {
	pd_state = PD_INIT;
	pd_active_state = PD_A_INIT;
}

void pedestrian_send_duration() { //send duration to uart
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	pedestrian_currDur = duration_get(DUR_PEDESTRIAN);
 80007c8:	2001      	movs	r0, #1
 80007ca:	f000 fd9d 	bl	8001308 <duration_get>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007d2:	6013      	str	r3, [r2, #0]
	if (pedestrian_currDur != pedestrian_prevDur) {
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <pedestrian_send_duration+0x38>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d005      	beq.n	80007ec <pedestrian_send_duration+0x28>
		uart_send_num("Pedestrian duration: ", pedestrian_currDur);
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <pedestrian_send_duration+0x3c>)
 80007e8:	f001 f85e 	bl	80018a8 <uart_send_num>
	}
	pedestrian_prevDur = pedestrian_currDur;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <pedestrian_send_duration+0x34>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a02      	ldr	r2, [pc, #8]	; (80007fc <pedestrian_send_duration+0x38>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	200000f4 	.word	0x200000f4
 80007fc:	200000f0 	.word	0x200000f0
 8000800:	0800426c 	.word	0x0800426c

08000804 <pedestrian_active_fsm>:

void pedestrian_active_fsm() {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	pd_duration = global_get_totalDuration();
 8000808:	f000 fc3a 	bl	8001080 <global_get_totalDuration>
 800080c:	4603      	mov	r3, r0
 800080e:	4a28      	ldr	r2, [pc, #160]	; (80008b0 <pedestrian_active_fsm+0xac>)
 8000810:	6013      	str	r3, [r2, #0]
	switch (pd_active_state) {
 8000812:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <pedestrian_active_fsm+0xb0>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b3e      	cmp	r3, #62	; 0x3e
 8000818:	d026      	beq.n	8000868 <pedestrian_active_fsm+0x64>
 800081a:	2b3e      	cmp	r3, #62	; 0x3e
 800081c:	dc40      	bgt.n	80008a0 <pedestrian_active_fsm+0x9c>
 800081e:	2b3c      	cmp	r3, #60	; 0x3c
 8000820:	d002      	beq.n	8000828 <pedestrian_active_fsm+0x24>
 8000822:	2b3d      	cmp	r3, #61	; 0x3d
 8000824:	d004      	beq.n	8000830 <pedestrian_active_fsm+0x2c>
		//change mode
		break;

	///////////////////////////////////////////
	default:
		break;
 8000826:	e03b      	b.n	80008a0 <pedestrian_active_fsm+0x9c>
		pd_active_state = PD_A_RED;
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <pedestrian_active_fsm+0xb0>)
 800082a:	223d      	movs	r2, #61	; 0x3d
 800082c:	701a      	strb	r2, [r3, #0]
		break;
 800082e:	e03c      	b.n	80008aa <pedestrian_active_fsm+0xa6>
		led_turn_on(PEDESTRIAN, LED_RED); //turn led red on
 8000830:	2100      	movs	r1, #0
 8000832:	2007      	movs	r0, #7
 8000834:	f000 fdd0 	bl	80013d8 <led_turn_on>
		pedestrian_send_duration();
 8000838:	f7ff ffc4 	bl	80007c4 <pedestrian_send_duration>
		if (button_isPressed(BTN_PD)) { //reset duration for pedestrian led
 800083c:	2003      	movs	r0, #3
 800083e:	f000 fd1d 	bl	800127c <button_isPressed>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d02d      	beq.n	80008a4 <pedestrian_active_fsm+0xa0>
			timer_clear(TIMER_PD);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 ffe1 	bl	8001810 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <pedestrian_active_fsm+0xac>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4619      	mov	r1, r3
 8000854:	2003      	movs	r0, #3
 8000856:	f000 ffa9 	bl	80017ac <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <pedestrian_active_fsm+0xac>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4619      	mov	r1, r3
 8000860:	2001      	movs	r0, #1
 8000862:	f000 fd39 	bl	80012d8 <duration_set>
		break;
 8000866:	e01d      	b.n	80008a4 <pedestrian_active_fsm+0xa0>
		led_turn_on(PEDESTRIAN, LED_GREEN); //turn led green on
 8000868:	2101      	movs	r1, #1
 800086a:	2007      	movs	r0, #7
 800086c:	f000 fdb4 	bl	80013d8 <led_turn_on>
		pedestrian_send_duration();
 8000870:	f7ff ffa8 	bl	80007c4 <pedestrian_send_duration>
		if (button_isPressed(BTN_PD)) { //reset duration for pedestrian led
 8000874:	2003      	movs	r0, #3
 8000876:	f000 fd01 	bl	800127c <button_isPressed>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d013      	beq.n	80008a8 <pedestrian_active_fsm+0xa4>
			timer_clear(TIMER_PD);
 8000880:	2003      	movs	r0, #3
 8000882:	f000 ffc5 	bl	8001810 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <pedestrian_active_fsm+0xac>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4619      	mov	r1, r3
 800088c:	2003      	movs	r0, #3
 800088e:	f000 ff8d 	bl	80017ac <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <pedestrian_active_fsm+0xac>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	2001      	movs	r0, #1
 800089a:	f000 fd1d 	bl	80012d8 <duration_set>
		break;
 800089e:	e003      	b.n	80008a8 <pedestrian_active_fsm+0xa4>
		break;
 80008a0:	bf00      	nop
 80008a2:	e002      	b.n	80008aa <pedestrian_active_fsm+0xa6>
		break;
 80008a4:	bf00      	nop
 80008a6:	e000      	b.n	80008aa <pedestrian_active_fsm+0xa6>
		break;
 80008a8:	bf00      	nop
	}
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000ec 	.word	0x200000ec
 80008b4:	20000105 	.word	0x20000105

080008b8 <pedestrian_fsm>:

void pedestrian_fsm() {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	//check state of pd_state
	switch (pd_state) {
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <pedestrian_fsm+0x90>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b34      	cmp	r3, #52	; 0x34
 80008c2:	d02e      	beq.n	8000922 <pedestrian_fsm+0x6a>
 80008c4:	2b34      	cmp	r3, #52	; 0x34
 80008c6:	dc38      	bgt.n	800093a <pedestrian_fsm+0x82>
 80008c8:	2b32      	cmp	r3, #50	; 0x32
 80008ca:	d002      	beq.n	80008d2 <pedestrian_fsm+0x1a>
 80008cc:	2b33      	cmp	r3, #51	; 0x33
 80008ce:	d007      	beq.n	80008e0 <pedestrian_fsm+0x28>
		break;

	//////////////////////////////////////////////////////

	default:
		break;
 80008d0:	e033      	b.n	800093a <pedestrian_fsm+0x82>
		led_turn_off(PEDESTRIAN);
 80008d2:	2007      	movs	r0, #7
 80008d4:	f000 fe30 	bl	8001538 <led_turn_off>
		pd_state = PD_IDLE;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <pedestrian_fsm+0x90>)
 80008da:	2233      	movs	r2, #51	; 0x33
 80008dc:	701a      	strb	r2, [r3, #0]
		break;
 80008de:	e031      	b.n	8000944 <pedestrian_fsm+0x8c>
		led_turn_off(PEDESTRIAN);
 80008e0:	2007      	movs	r0, #7
 80008e2:	f000 fe29 	bl	8001538 <led_turn_off>
		if (button_isPressed(BTN_PD)) {
 80008e6:	2003      	movs	r0, #3
 80008e8:	f000 fcc8 	bl	800127c <button_isPressed>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d025      	beq.n	800093e <pedestrian_fsm+0x86>
			pd_state = PD_ACTIVE;
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <pedestrian_fsm+0x90>)
 80008f4:	2234      	movs	r2, #52	; 0x34
 80008f6:	701a      	strb	r2, [r3, #0]
			pd_duration = global_get_totalDuration();
 80008f8:	f000 fbc2 	bl	8001080 <global_get_totalDuration>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a13      	ldr	r2, [pc, #76]	; (800094c <pedestrian_fsm+0x94>)
 8000900:	6013      	str	r3, [r2, #0]
			timer_clear(TIMER_PD);
 8000902:	2003      	movs	r0, #3
 8000904:	f000 ff84 	bl	8001810 <timer_clear>
			timer_setDuration(TIMER_PD, pd_duration);
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <pedestrian_fsm+0x94>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4619      	mov	r1, r3
 800090e:	2003      	movs	r0, #3
 8000910:	f000 ff4c 	bl	80017ac <timer_setDuration>
			duration_set(DUR_PEDESTRIAN, pd_duration);
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <pedestrian_fsm+0x94>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	2001      	movs	r0, #1
 800091c:	f000 fcdc 	bl	80012d8 <duration_set>
		break;
 8000920:	e00d      	b.n	800093e <pedestrian_fsm+0x86>
		pedestrian_active_fsm();
 8000922:	f7ff ff6f 	bl	8000804 <pedestrian_active_fsm>
		if (timer_checkFlag(TIMER_PD)) {
 8000926:	2003      	movs	r0, #3
 8000928:	f000 ff5a 	bl	80017e0 <timer_checkFlag>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d007      	beq.n	8000942 <pedestrian_fsm+0x8a>
			pd_state = PD_IDLE;
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <pedestrian_fsm+0x90>)
 8000934:	2233      	movs	r2, #51	; 0x33
 8000936:	701a      	strb	r2, [r3, #0]
		break;
 8000938:	e003      	b.n	8000942 <pedestrian_fsm+0x8a>
		break;
 800093a:	bf00      	nop
 800093c:	e002      	b.n	8000944 <pedestrian_fsm+0x8c>
		break;
 800093e:	bf00      	nop
 8000940:	e000      	b.n	8000944 <pedestrian_fsm+0x8c>
		break;
 8000942:	bf00      	nop
	}
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000020c 	.word	0x2000020c
 800094c:	200000ec 	.word	0x200000ec

08000950 <traffic_init>:
/*-------------------- init setting --------------------*/
//uint32_t	trafficDuration[3] = {5000, 3000, 2000};
uint32_t traffic_prevDur = 0,
         traffic_currDur = 0; //previous and current duration of traffic

void traffic_init() {
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	global_state = INIT_MODE;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <traffic_init+0x2c>)
 8000956:	220a      	movs	r2, #10
 8000958:	701a      	strb	r2, [r3, #0]
	auto_A_state = AUTO_INIT;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <traffic_init+0x30>)
 800095c:	2214      	movs	r2, #20
 800095e:	701a      	strb	r2, [r3, #0]
	auto_B_state = AUTO_INIT;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <traffic_init+0x34>)
 8000962:	2214      	movs	r2, #20
 8000964:	701a      	strb	r2, [r3, #0]
	manual_state = MN_INIT;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <traffic_init+0x38>)
 8000968:	221e      	movs	r2, #30
 800096a:	701a      	strb	r2, [r3, #0]
	set_state = SET_INIT;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <traffic_init+0x3c>)
 800096e:	2228      	movs	r2, #40	; 0x28
 8000970:	701a      	strb	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000100 	.word	0x20000100
 8000980:	20000101 	.word	0x20000101
 8000984:	20000102 	.word	0x20000102
 8000988:	20000103 	.word	0x20000103
 800098c:	20000104 	.word	0x20000104

08000990 <traffic_send_duration>:

/*------------------- auto fsm -------------------------*/
void traffic_send_duration() {  //send duration to uart
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	traffic_currDur = duration_get(DUR_TRAFFIC);
 8000994:	2000      	movs	r0, #0
 8000996:	f000 fcb7 	bl	8001308 <duration_get>
 800099a:	4603      	mov	r3, r0
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <traffic_send_duration+0x3c>)
 800099e:	6013      	str	r3, [r2, #0]
	if (traffic_currDur && traffic_currDur != traffic_prevDur) {
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <traffic_send_duration+0x3c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00b      	beq.n	80009c0 <traffic_send_duration+0x30>
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <traffic_send_duration+0x3c>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <traffic_send_duration+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d005      	beq.n	80009c0 <traffic_send_duration+0x30>
		uart_send_num("Traffic duration: ", traffic_currDur);
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <traffic_send_duration+0x3c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <traffic_send_duration+0x44>)
 80009bc:	f000 ff74 	bl	80018a8 <uart_send_num>
	}
	traffic_prevDur = traffic_currDur;
 80009c0:	4b02      	ldr	r3, [pc, #8]	; (80009cc <traffic_send_duration+0x3c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a02      	ldr	r2, [pc, #8]	; (80009d0 <traffic_send_duration+0x40>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200000fc 	.word	0x200000fc
 80009d0:	200000f8 	.word	0x200000f8
 80009d4:	08004284 	.word	0x08004284

080009d8 <traffic_auto_fsm_A>:

void traffic_auto_fsm_A() {
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
	switch(auto_A_state) {
 80009dc:	4b41      	ldr	r3, [pc, #260]	; (8000ae4 <traffic_auto_fsm_A+0x10c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	3b14      	subs	r3, #20
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d874      	bhi.n	8000ad0 <traffic_auto_fsm_A+0xf8>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <traffic_auto_fsm_A+0x14>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	080009fd 	.word	0x080009fd
 80009f0:	08000a1d 	.word	0x08000a1d
 80009f4:	08000a5b 	.word	0x08000a5b
 80009f8:	08000a93 	.word	0x08000a93
	case AUTO_INIT:
		//change mode
		auto_A_state = AUTO_RED;
 80009fc:	4b39      	ldr	r3, [pc, #228]	; (8000ae4 <traffic_auto_fsm_A+0x10c>)
 80009fe:	2215      	movs	r2, #21
 8000a00:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000a02:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <traffic_auto_fsm_A+0x110>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4619      	mov	r1, r3
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 fecf 	bl	80017ac <timer_setDuration>
		duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000a0e:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <traffic_auto_fsm_A+0x110>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4619      	mov	r1, r3
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 fc5f 	bl	80012d8 <duration_set>
		break;
 8000a1a:	e060      	b.n	8000ade <traffic_auto_fsm_A+0x106>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2005      	movs	r0, #5
 8000a20:	f000 fcda 	bl	80013d8 <led_turn_on>
		traffic_send_duration();
 8000a24:	f7ff ffb4 	bl	8000990 <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 fed9 	bl	80017e0 <timer_checkFlag>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d04f      	beq.n	8000ad4 <traffic_auto_fsm_A+0xfc>
			auto_A_state = AUTO_GREEN;
 8000a34:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <traffic_auto_fsm_A+0x10c>)
 8000a36:	2216      	movs	r2, #22
 8000a38:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8000a3a:	4b2c      	ldr	r3, [pc, #176]	; (8000aec <traffic_auto_fsm_A+0x114>)
 8000a3c:	223d      	movs	r2, #61	; 0x3d
 8000a3e:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000a40:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <traffic_auto_fsm_A+0x110>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	4619      	mov	r1, r3
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 feb0 	bl	80017ac <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 8000a4c:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <traffic_auto_fsm_A+0x110>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	4619      	mov	r1, r3
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fc40 	bl	80012d8 <duration_set>
		}
		break;
 8000a58:	e03c      	b.n	8000ad4 <traffic_auto_fsm_A+0xfc>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	2005      	movs	r0, #5
 8000a5e:	f000 fcbb 	bl	80013d8 <led_turn_on>
		traffic_send_duration();
 8000a62:	f7ff ff95 	bl	8000990 <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 feba 	bl	80017e0 <timer_checkFlag>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d032      	beq.n	8000ad8 <traffic_auto_fsm_A+0x100>
			auto_A_state = AUTO_YELLOW;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <traffic_auto_fsm_A+0x10c>)
 8000a74:	2217      	movs	r2, #23
 8000a76:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <traffic_auto_fsm_A+0x110>)
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 fe94 	bl	80017ac <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <traffic_auto_fsm_A+0x110>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 fc24 	bl	80012d8 <duration_set>
		}
		break;
 8000a90:	e022      	b.n	8000ad8 <traffic_auto_fsm_A+0x100>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000a92:	2102      	movs	r1, #2
 8000a94:	2005      	movs	r0, #5
 8000a96:	f000 fc9f 	bl	80013d8 <led_turn_on>
		traffic_send_duration();
 8000a9a:	f7ff ff79 	bl	8000990 <traffic_send_duration>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_A)) { //change led
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 fe9e 	bl	80017e0 <timer_checkFlag>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d018      	beq.n	8000adc <traffic_auto_fsm_A+0x104>
			auto_A_state = AUTO_RED;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <traffic_auto_fsm_A+0x10c>)
 8000aac:	2215      	movs	r2, #21
 8000aae:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <traffic_auto_fsm_A+0x114>)
 8000ab2:	223e      	movs	r2, #62	; 0x3e
 8000ab4:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <traffic_auto_fsm_A+0x110>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4619      	mov	r1, r3
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 fe75 	bl	80017ac <timer_setDuration>
			duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <traffic_auto_fsm_A+0x110>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 fc05 	bl	80012d8 <duration_set>
		}
		break;
 8000ace:	e005      	b.n	8000adc <traffic_auto_fsm_A+0x104>

	/////////////////////////////////////////////////////
	default:
		break;
 8000ad0:	bf00      	nop
 8000ad2:	e004      	b.n	8000ade <traffic_auto_fsm_A+0x106>
		break;
 8000ad4:	bf00      	nop
 8000ad6:	e002      	b.n	8000ade <traffic_auto_fsm_A+0x106>
		break;
 8000ad8:	bf00      	nop
 8000ada:	e000      	b.n	8000ade <traffic_auto_fsm_A+0x106>
		break;
 8000adc:	bf00      	nop
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000101 	.word	0x20000101
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	20000105 	.word	0x20000105

08000af0 <traffic_auto_fsm_B>:

void traffic_auto_fsm_B() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	switch(auto_B_state) {
 8000af4:	4b2f      	ldr	r3, [pc, #188]	; (8000bb4 <traffic_auto_fsm_B+0xc4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3b14      	subs	r3, #20
 8000afa:	2b03      	cmp	r3, #3
 8000afc:	d850      	bhi.n	8000ba0 <traffic_auto_fsm_B+0xb0>
 8000afe:	a201      	add	r2, pc, #4	; (adr r2, 8000b04 <traffic_auto_fsm_B+0x14>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b15 	.word	0x08000b15
 8000b08:	08000b29 	.word	0x08000b29
 8000b0c:	08000b51 	.word	0x08000b51
 8000b10:	08000b79 	.word	0x08000b79
	case AUTO_INIT:
		//change mode
		auto_B_state = AUTO_GREEN;
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <traffic_auto_fsm_B+0xc4>)
 8000b16:	2216      	movs	r2, #22
 8000b18:	701a      	strb	r2, [r3, #0]
		timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <traffic_auto_fsm_B+0xc8>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	2001      	movs	r0, #1
 8000b22:	f000 fe43 	bl	80017ac <timer_setDuration>
		break;
 8000b26:	e042      	b.n	8000bae <traffic_auto_fsm_B+0xbe>

	/////////////////////////////////////////////////////
	case AUTO_RED:
		//TODO
		led_turn_on(TRAFFIC_2, LED_RED);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	2006      	movs	r0, #6
 8000b2c:	f000 fc54 	bl	80013d8 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000b30:	2001      	movs	r0, #1
 8000b32:	f000 fe55 	bl	80017e0 <timer_checkFlag>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d033      	beq.n	8000ba4 <traffic_auto_fsm_B+0xb4>
			auto_B_state = AUTO_GREEN;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <traffic_auto_fsm_B+0xc4>)
 8000b3e:	2216      	movs	r2, #22
 8000b40:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <traffic_auto_fsm_B+0xc8>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4619      	mov	r1, r3
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f000 fe2f 	bl	80017ac <timer_setDuration>
		}
		break;
 8000b4e:	e029      	b.n	8000ba4 <traffic_auto_fsm_B+0xb4>

	/////////////////////////////////////////////////////
	case AUTO_GREEN:
		//TODO
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000b50:	2101      	movs	r1, #1
 8000b52:	2006      	movs	r0, #6
 8000b54:	f000 fc40 	bl	80013d8 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f000 fe41 	bl	80017e0 <timer_checkFlag>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d021      	beq.n	8000ba8 <traffic_auto_fsm_B+0xb8>
			auto_B_state = AUTO_YELLOW;
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <traffic_auto_fsm_B+0xc4>)
 8000b66:	2217      	movs	r2, #23
 8000b68:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <traffic_auto_fsm_B+0xc8>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	2001      	movs	r0, #1
 8000b72:	f000 fe1b 	bl	80017ac <timer_setDuration>
		}
		break;
 8000b76:	e017      	b.n	8000ba8 <traffic_auto_fsm_B+0xb8>

	/////////////////////////////////////////////////////
	case AUTO_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000b78:	2102      	movs	r1, #2
 8000b7a:	2006      	movs	r0, #6
 8000b7c:	f000 fc2c 	bl	80013d8 <led_turn_on>

		//change mode
		if (timer_checkFlag(TIMER_AUTO_B)) { //change led
 8000b80:	2001      	movs	r0, #1
 8000b82:	f000 fe2d 	bl	80017e0 <timer_checkFlag>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00f      	beq.n	8000bac <traffic_auto_fsm_B+0xbc>
			auto_B_state = AUTO_RED;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <traffic_auto_fsm_B+0xc4>)
 8000b8e:	2215      	movs	r2, #21
 8000b90:	701a      	strb	r2, [r3, #0]
			timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <traffic_auto_fsm_B+0xc8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4619      	mov	r1, r3
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f000 fe07 	bl	80017ac <timer_setDuration>
		}
		break;
 8000b9e:	e005      	b.n	8000bac <traffic_auto_fsm_B+0xbc>

	/////////////////////////////////////////////////////
	default:
		break;
 8000ba0:	bf00      	nop
 8000ba2:	e004      	b.n	8000bae <traffic_auto_fsm_B+0xbe>
		break;
 8000ba4:	bf00      	nop
 8000ba6:	e002      	b.n	8000bae <traffic_auto_fsm_B+0xbe>
		break;
 8000ba8:	bf00      	nop
 8000baa:	e000      	b.n	8000bae <traffic_auto_fsm_B+0xbe>
		break;
 8000bac:	bf00      	nop
	}
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000102 	.word	0x20000102
 8000bb8:	20000004 	.word	0x20000004

08000bbc <traffic_manual_fsm>:

/*----------------- manual fsm -------------------------*/
void traffic_manual_fsm() {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	switch(manual_state) {
 8000bc0:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <traffic_manual_fsm+0xd4>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	3b1e      	subs	r3, #30
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d856      	bhi.n	8000c78 <traffic_manual_fsm+0xbc>
 8000bca:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <traffic_manual_fsm+0x14>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000be5 	.word	0x08000be5
 8000bd4:	08000bed 	.word	0x08000bed
 8000bd8:	08000c11 	.word	0x08000c11
 8000bdc:	08000c33 	.word	0x08000c33
 8000be0:	08000c57 	.word	0x08000c57
	case MN_INIT:
		//change mode
		manual_state = MN_RED0;
 8000be4:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <traffic_manual_fsm+0xd4>)
 8000be6:	221f      	movs	r2, #31
 8000be8:	701a      	strb	r2, [r3, #0]
		break;
 8000bea:	e04e      	b.n	8000c8a <traffic_manual_fsm+0xce>

	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - green
	case MN_RED0:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f000 fbf2 	bl	80013d8 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2006      	movs	r0, #6
 8000bf8:	f000 fbee 	bl	80013d8 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 fb3d 	bl	800127c <button_isPressed>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d039      	beq.n	8000c7c <traffic_manual_fsm+0xc0>
			manual_state = MN_RED1;
 8000c08:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <traffic_manual_fsm+0xd4>)
 8000c0a:	2220      	movs	r2, #32
 8000c0c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c0e:	e035      	b.n	8000c7c <traffic_manual_fsm+0xc0>
	///////////////////////////////////////////////////////////
	// traffic A - red; traffic B - yellow
	case MN_RED1:
		//TODO
//		led_turn_on(TRAFFIC_1, LED_RED);
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000c10:	2102      	movs	r1, #2
 8000c12:	2006      	movs	r0, #6
 8000c14:	f000 fbe0 	bl	80013d8 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 fb2f 	bl	800127c <button_isPressed>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d02d      	beq.n	8000c80 <traffic_manual_fsm+0xc4>
			manual_state = MN_GREEN;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <traffic_manual_fsm+0xd4>)
 8000c26:	2221      	movs	r2, #33	; 0x21
 8000c28:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_RED; //change pedestrian led to red
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <traffic_manual_fsm+0xd8>)
 8000c2c:	223d      	movs	r2, #61	; 0x3d
 8000c2e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c30:	e026      	b.n	8000c80 <traffic_manual_fsm+0xc4>

	///////////////////////////////////////////////////////////
	// traffic A - green; traffic B - red
	case MN_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000c32:	2101      	movs	r1, #1
 8000c34:	2005      	movs	r0, #5
 8000c36:	f000 fbcf 	bl	80013d8 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2006      	movs	r0, #6
 8000c3e:	f000 fbcb 	bl	80013d8 <led_turn_on>

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000c42:	2001      	movs	r0, #1
 8000c44:	f000 fb1a 	bl	800127c <button_isPressed>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01a      	beq.n	8000c84 <traffic_manual_fsm+0xc8>
			manual_state = MN_YELLOW;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <traffic_manual_fsm+0xd4>)
 8000c50:	2222      	movs	r2, #34	; 0x22
 8000c52:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c54:	e016      	b.n	8000c84 <traffic_manual_fsm+0xc8>

	///////////////////////////////////////////////////////////
	// traffic A - yellow; traffic B - red
	case MN_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000c56:	2102      	movs	r1, #2
 8000c58:	2005      	movs	r0, #5
 8000c5a:	f000 fbbd 	bl	80013d8 <led_turn_on>
//		led_turn_on(TRAFFIC_2, LED_RED);

		//change mode
		if (button_isPressed(BTN_2)) { //when pressing button 2
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 fb0c 	bl	800127c <button_isPressed>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00e      	beq.n	8000c88 <traffic_manual_fsm+0xcc>
			manual_state = MN_RED0;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <traffic_manual_fsm+0xd4>)
 8000c6c:	221f      	movs	r2, #31
 8000c6e:	701a      	strb	r2, [r3, #0]
			pd_active_state = PD_A_GREEN; //change pedestrian led to green
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <traffic_manual_fsm+0xd8>)
 8000c72:	223e      	movs	r2, #62	; 0x3e
 8000c74:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c76:	e007      	b.n	8000c88 <traffic_manual_fsm+0xcc>

	///////////////////////////////////////////////////////////
	default:
		break;
 8000c78:	bf00      	nop
 8000c7a:	e006      	b.n	8000c8a <traffic_manual_fsm+0xce>
		break;
 8000c7c:	bf00      	nop
 8000c7e:	e004      	b.n	8000c8a <traffic_manual_fsm+0xce>
		break;
 8000c80:	bf00      	nop
 8000c82:	e002      	b.n	8000c8a <traffic_manual_fsm+0xce>
		break;
 8000c84:	bf00      	nop
 8000c86:	e000      	b.n	8000c8a <traffic_manual_fsm+0xce>
		break;
 8000c88:	bf00      	nop
	}
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000103 	.word	0x20000103
 8000c94:	20000105 	.word	0x20000105

08000c98 <duration_inc>:

/*-------------------- set fsm -------------------------*/
void duration_inc(uint8_t led_type) {
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	// increase specific duration by 1 unit
	trafficDuration[led_type] += DURATION_UNIT;
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <duration_inc+0x50>)
 8000ca6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8000cb0:	490d      	ldr	r1, [pc, #52]	; (8000ce8 <duration_inc+0x50>)
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (trafficDuration[led_type] > DURATION_MAX) { //if duration over max, reset to DURATION_UNIT
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <duration_inc+0x50>)
 8000cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d90a      	bls.n	8000cdc <duration_inc+0x44>
		trafficDuration[led_type] -= DURATION_MAX;
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <duration_inc+0x50>)
 8000cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cce:	79fa      	ldrb	r2, [r7, #7]
 8000cd0:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000cd4:	3b10      	subs	r3, #16
 8000cd6:	4904      	ldr	r1, [pc, #16]	; (8000ce8 <duration_inc+0x50>)
 8000cd8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	}
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000004 	.word	0x20000004

08000cec <traffic_set_fsm>:

void traffic_set_fsm() {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
	switch(set_state) {
 8000cf0:	4b60      	ldr	r3, [pc, #384]	; (8000e74 <traffic_set_fsm+0x188>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3b28      	subs	r3, #40	; 0x28
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	f200 80b2 	bhi.w	8000e60 <traffic_set_fsm+0x174>
 8000cfc:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <traffic_set_fsm+0x18>)
 8000cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d02:	bf00      	nop
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000d1d 	.word	0x08000d1d
 8000d0c:	08000d89 	.word	0x08000d89
 8000d10:	08000df5 	.word	0x08000df5
	case SET_INIT:
		set_state = SET_RED;
 8000d14:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <traffic_set_fsm+0x188>)
 8000d16:	2229      	movs	r2, #41	; 0x29
 8000d18:	701a      	strb	r2, [r3, #0]
		break;
 8000d1a:	e0a8      	b.n	8000e6e <traffic_set_fsm+0x182>

	//////////////////////////////////////////////////////////////
	case SET_RED:
		//TODO
		led_turn_on(TRAFFIC_1, LED_RED);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2005      	movs	r0, #5
 8000d20:	f000 fb5a 	bl	80013d8 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_RED);
 8000d24:	2100      	movs	r1, #0
 8000d26:	2006      	movs	r0, #6
 8000d28:	f000 fb56 	bl	80013d8 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f000 faa5 	bl	800127c <button_isPressed>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <traffic_set_fsm+0x60>
			duration_inc(LED_RED);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff ffad 	bl	8000c98 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f000 fd66 	bl	8001810 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000d44:	210a      	movs	r1, #10
 8000d46:	2002      	movs	r0, #2
 8000d48:	f000 fd30 	bl	80017ac <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f000 faaf 	bl	80012b0 <button_isLongPressed>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00d      	beq.n	8000d74 <traffic_set_fsm+0x88>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f000 fd41 	bl	80017e0 <timer_checkFlag>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d007      	beq.n	8000d74 <traffic_set_fsm+0x88>
				duration_inc(LED_RED);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff ff97 	bl	8000c98 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000d6a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f000 fd1c 	bl	80017ac <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)) {
 8000d74:	2001      	movs	r0, #1
 8000d76:	f000 fa81 	bl	800127c <button_isPressed>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d071      	beq.n	8000e64 <traffic_set_fsm+0x178>
			set_state = SET_GREEN;
 8000d80:	4b3c      	ldr	r3, [pc, #240]	; (8000e74 <traffic_set_fsm+0x188>)
 8000d82:	222a      	movs	r2, #42	; 0x2a
 8000d84:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d86:	e06d      	b.n	8000e64 <traffic_set_fsm+0x178>

	//////////////////////////////////////////////////////////////
	case SET_GREEN:
		//TODO
		led_turn_on(TRAFFIC_1, LED_GREEN);
 8000d88:	2101      	movs	r1, #1
 8000d8a:	2005      	movs	r0, #5
 8000d8c:	f000 fb24 	bl	80013d8 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_GREEN);
 8000d90:	2101      	movs	r1, #1
 8000d92:	2006      	movs	r0, #6
 8000d94:	f000 fb20 	bl	80013d8 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000d98:	2002      	movs	r0, #2
 8000d9a:	f000 fa6f 	bl	800127c <button_isPressed>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d009      	beq.n	8000db8 <traffic_set_fsm+0xcc>
			duration_inc(LED_GREEN);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f7ff ff77 	bl	8000c98 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000daa:	2002      	movs	r0, #2
 8000dac:	f000 fd30 	bl	8001810 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000db0:	210a      	movs	r1, #10
 8000db2:	2002      	movs	r0, #2
 8000db4:	f000 fcfa 	bl	80017ac <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000db8:	2002      	movs	r0, #2
 8000dba:	f000 fa79 	bl	80012b0 <button_isLongPressed>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d00d      	beq.n	8000de0 <traffic_set_fsm+0xf4>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	f000 fd0b 	bl	80017e0 <timer_checkFlag>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d007      	beq.n	8000de0 <traffic_set_fsm+0xf4>
				duration_inc(LED_GREEN);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff ff61 	bl	8000c98 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000dd6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000dda:	2002      	movs	r0, #2
 8000ddc:	f000 fce6 	bl	80017ac <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 fa4b 	bl	800127c <button_isPressed>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d03d      	beq.n	8000e68 <traffic_set_fsm+0x17c>
			set_state = SET_YELLOW;
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <traffic_set_fsm+0x188>)
 8000dee:	222b      	movs	r2, #43	; 0x2b
 8000df0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000df2:	e039      	b.n	8000e68 <traffic_set_fsm+0x17c>

	//////////////////////////////////////////////////////////////
	case SET_YELLOW:
		//TODO
		led_turn_on(TRAFFIC_1, LED_YELLOW);
 8000df4:	2102      	movs	r1, #2
 8000df6:	2005      	movs	r0, #5
 8000df8:	f000 faee 	bl	80013d8 <led_turn_on>
		led_turn_on(TRAFFIC_2, LED_YELLOW);
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	2006      	movs	r0, #6
 8000e00:	f000 faea 	bl	80013d8 <led_turn_on>
		//increase duration; max: 10000ms
		if (button_isPressed(BTN_3)) { //for one-pressed button
 8000e04:	2002      	movs	r0, #2
 8000e06:	f000 fa39 	bl	800127c <button_isPressed>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d009      	beq.n	8000e24 <traffic_set_fsm+0x138>
			duration_inc(LED_YELLOW);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff ff41 	bl	8000c98 <duration_inc>
			timer_clear(TIMER_SET_LONG);
 8000e16:	2002      	movs	r0, #2
 8000e18:	f000 fcfa 	bl	8001810 <timer_clear>
			timer_setDuration(TIMER_SET_LONG, 10); //set timer for long press
 8000e1c:	210a      	movs	r1, #10
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f000 fcc4 	bl	80017ac <timer_setDuration>
		}
		if (button_isLongPressed(BTN_3)) { //for long-pressed button
 8000e24:	2002      	movs	r0, #2
 8000e26:	f000 fa43 	bl	80012b0 <button_isLongPressed>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00d      	beq.n	8000e4c <traffic_set_fsm+0x160>
			if (timer_checkFlag(TIMER_SET_LONG)) {
 8000e30:	2002      	movs	r0, #2
 8000e32:	f000 fcd5 	bl	80017e0 <timer_checkFlag>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d007      	beq.n	8000e4c <traffic_set_fsm+0x160>
				duration_inc(LED_YELLOW);
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f7ff ff2b 	bl	8000c98 <duration_inc>
				timer_setDuration(TIMER_SET_LONG, 500);
 8000e42:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000e46:	2002      	movs	r0, #2
 8000e48:	f000 fcb0 	bl	80017ac <timer_setDuration>
			}
		}

		//change led
		if (button_isPressed(BTN_2)){
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f000 fa15 	bl	800127c <button_isPressed>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d009      	beq.n	8000e6c <traffic_set_fsm+0x180>
			set_state = SET_RED;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <traffic_set_fsm+0x188>)
 8000e5a:	2229      	movs	r2, #41	; 0x29
 8000e5c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000e5e:	e005      	b.n	8000e6c <traffic_set_fsm+0x180>

	//////////////////////////////////////////////////////////////
	default:
		break;
 8000e60:	bf00      	nop
 8000e62:	e004      	b.n	8000e6e <traffic_set_fsm+0x182>
		break;
 8000e64:	bf00      	nop
 8000e66:	e002      	b.n	8000e6e <traffic_set_fsm+0x182>
		break;
 8000e68:	bf00      	nop
 8000e6a:	e000      	b.n	8000e6e <traffic_set_fsm+0x182>
		break;
 8000e6c:	bf00      	nop
	}
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000104 	.word	0x20000104

08000e78 <traffic_fsm>:

/*----------------- global fsm -------------------------*/
void traffic_fsm() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	switch(global_state) {
 8000e7c:	4b7a      	ldr	r3, [pc, #488]	; (8001068 <traffic_fsm+0x1f0>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	3b0a      	subs	r3, #10
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	f200 80e6 	bhi.w	8001054 <traffic_fsm+0x1dc>
 8000e88:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <traffic_fsm+0x18>)
 8000e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e8e:	bf00      	nop
 8000e90:	08000ea1 	.word	0x08000ea1
 8000e94:	08000ead 	.word	0x08000ead
 8000e98:	08000f1f 	.word	0x08000f1f
 8000e9c:	08000f43 	.word	0x08000f43
	case INIT_MODE:
		led_clear_all();
 8000ea0:	f000 fa86 	bl	80013b0 <led_clear_all>
		global_state = AUTO_MODE;
 8000ea4:	4b70      	ldr	r3, [pc, #448]	; (8001068 <traffic_fsm+0x1f0>)
 8000ea6:	220b      	movs	r2, #11
 8000ea8:	701a      	strb	r2, [r3, #0]
		break;
 8000eaa:	e0da      	b.n	8001062 <traffic_fsm+0x1ea>

	//////////////////////////////////////////////////////
	case AUTO_MODE: //automatically control traffic light
		//TODO
		traffic_auto_fsm_A();
 8000eac:	f7ff fd94 	bl	80009d8 <traffic_auto_fsm_A>
		traffic_auto_fsm_B();
 8000eb0:	f7ff fe1e 	bl	8000af0 <traffic_auto_fsm_B>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 f9e1 	bl	800127c <button_isPressed>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d02c      	beq.n	8000f1a <traffic_fsm+0xa2>
			led_clear_all();
 8000ec0:	f000 fa76 	bl	80013b0 <led_clear_all>
			global_state = MANUAL_MODE;
 8000ec4:	4b68      	ldr	r3, [pc, #416]	; (8001068 <traffic_fsm+0x1f0>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	701a      	strb	r2, [r3, #0]
			duration_set(DUR_TRAFFIC, 0);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 fa03 	bl	80012d8 <duration_set>
			switch (auto_A_state) { //manual mode with previous auto state
 8000ed2:	4b66      	ldr	r3, [pc, #408]	; (800106c <traffic_fsm+0x1f4>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b17      	cmp	r3, #23
 8000ed8:	d01b      	beq.n	8000f12 <traffic_fsm+0x9a>
 8000eda:	2b17      	cmp	r3, #23
 8000edc:	f300 80bc 	bgt.w	8001058 <traffic_fsm+0x1e0>
 8000ee0:	2b15      	cmp	r3, #21
 8000ee2:	d002      	beq.n	8000eea <traffic_fsm+0x72>
 8000ee4:	2b16      	cmp	r3, #22
 8000ee6:	d010      	beq.n	8000f0a <traffic_fsm+0x92>
			case AUTO_YELLOW: // traffic A = yellow
				manual_state = MN_YELLOW;
				break;
			}
		}
		break;
 8000ee8:	e0b6      	b.n	8001058 <traffic_fsm+0x1e0>
				switch (auto_B_state){
 8000eea:	4b61      	ldr	r3, [pc, #388]	; (8001070 <traffic_fsm+0x1f8>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b16      	cmp	r3, #22
 8000ef0:	d002      	beq.n	8000ef8 <traffic_fsm+0x80>
 8000ef2:	2b17      	cmp	r3, #23
 8000ef4:	d004      	beq.n	8000f00 <traffic_fsm+0x88>
				break;
 8000ef6:	e011      	b.n	8000f1c <traffic_fsm+0xa4>
					manual_state = MN_RED0;
 8000ef8:	4b5e      	ldr	r3, [pc, #376]	; (8001074 <traffic_fsm+0x1fc>)
 8000efa:	221f      	movs	r2, #31
 8000efc:	701a      	strb	r2, [r3, #0]
					break;
 8000efe:	e003      	b.n	8000f08 <traffic_fsm+0x90>
					manual_state = MN_RED1;
 8000f00:	4b5c      	ldr	r3, [pc, #368]	; (8001074 <traffic_fsm+0x1fc>)
 8000f02:	2220      	movs	r2, #32
 8000f04:	701a      	strb	r2, [r3, #0]
					break;
 8000f06:	bf00      	nop
				break;
 8000f08:	e008      	b.n	8000f1c <traffic_fsm+0xa4>
				manual_state = MN_GREEN;
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	; (8001074 <traffic_fsm+0x1fc>)
 8000f0c:	2221      	movs	r2, #33	; 0x21
 8000f0e:	701a      	strb	r2, [r3, #0]
				break;
 8000f10:	e004      	b.n	8000f1c <traffic_fsm+0xa4>
				manual_state = MN_YELLOW;
 8000f12:	4b58      	ldr	r3, [pc, #352]	; (8001074 <traffic_fsm+0x1fc>)
 8000f14:	2222      	movs	r2, #34	; 0x22
 8000f16:	701a      	strb	r2, [r3, #0]
				break;
 8000f18:	e000      	b.n	8000f1c <traffic_fsm+0xa4>
		}
 8000f1a:	bf00      	nop
		break;
 8000f1c:	e09c      	b.n	8001058 <traffic_fsm+0x1e0>

	////////////////////////////////////////////////////
	case MANUAL_MODE: // manually control traffic light
		//TODO
		traffic_manual_fsm();
 8000f1e:	f7ff fe4d 	bl	8000bbc <traffic_manual_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f9aa 	bl	800127c <button_isPressed>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 8096 	beq.w	800105c <traffic_fsm+0x1e4>
			global_state = SET_MODE;
 8000f30:	4b4d      	ldr	r3, [pc, #308]	; (8001068 <traffic_fsm+0x1f0>)
 8000f32:	220d      	movs	r2, #13
 8000f34:	701a      	strb	r2, [r3, #0]
			set_state = SET_INIT;
 8000f36:	4b50      	ldr	r3, [pc, #320]	; (8001078 <traffic_fsm+0x200>)
 8000f38:	2228      	movs	r2, #40	; 0x28
 8000f3a:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8000f3c:	f000 fa38 	bl	80013b0 <led_clear_all>
		}
		break;
 8000f40:	e08c      	b.n	800105c <traffic_fsm+0x1e4>

	//////////////////////////////////////////////////////
	case SET_MODE: //set duration for each led of traffic
		//TODO
		traffic_set_fsm();
 8000f42:	f7ff fed3 	bl	8000cec <traffic_set_fsm>

		//change mode
		if (button_isPressed(BTN_1)) { //when pressing button 1
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f998 	bl	800127c <button_isPressed>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d07e      	beq.n	8001050 <traffic_fsm+0x1d8>
			global_state = AUTO_MODE;
 8000f52:	4b45      	ldr	r3, [pc, #276]	; (8001068 <traffic_fsm+0x1f0>)
 8000f54:	220b      	movs	r2, #11
 8000f56:	701a      	strb	r2, [r3, #0]
			led_clear_all();
 8000f58:	f000 fa2a 	bl	80013b0 <led_clear_all>
			timer_clear(TIMER_AUTO_A); //clear timer, prepare for auto mode
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 fc57 	bl	8001810 <timer_clear>
			timer_clear(TIMER_AUTO_B); //clear timer, prepare for auto mode
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 fc54 	bl	8001810 <timer_clear>
			switch(manual_state) { //auto mode with previous manual state
 8000f68:	4b42      	ldr	r3, [pc, #264]	; (8001074 <traffic_fsm+0x1fc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	3b1f      	subs	r3, #31
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d876      	bhi.n	8001060 <traffic_fsm+0x1e8>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <traffic_fsm+0x100>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f89 	.word	0x08000f89
 8000f7c:	08000fbb 	.word	0x08000fbb
 8000f80:	08000fed 	.word	0x08000fed
 8000f84:	0800101f 	.word	0x0800101f
			///////////////////////////////////////////////////
			case MN_RED0: //traffic A: red; traffic B: green
				auto_A_state = AUTO_RED;
 8000f88:	4b38      	ldr	r3, [pc, #224]	; (800106c <traffic_fsm+0x1f4>)
 8000f8a:	2215      	movs	r2, #21
 8000f8c:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_RED]);
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <traffic_fsm+0x204>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4619      	mov	r1, r3
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 fc09 	bl	80017ac <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_RED]);
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <traffic_fsm+0x204>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f999 	bl	80012d8 <duration_set>

				auto_B_state = AUTO_GREEN;
 8000fa6:	4b32      	ldr	r3, [pc, #200]	; (8001070 <traffic_fsm+0x1f8>)
 8000fa8:	2216      	movs	r2, #22
 8000faa:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_GREEN]);
 8000fac:	4b33      	ldr	r3, [pc, #204]	; (800107c <traffic_fsm+0x204>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f000 fbfa 	bl	80017ac <timer_setDuration>
				break;
 8000fb8:	e04b      	b.n	8001052 <traffic_fsm+0x1da>
			///////////////////////////////////////////////////
			case MN_RED1: //traffic A: red; traffic B: yellow
				auto_A_state = AUTO_RED;
 8000fba:	4b2c      	ldr	r3, [pc, #176]	; (800106c <traffic_fsm+0x1f4>)
 8000fbc:	2215      	movs	r2, #21
 8000fbe:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <traffic_fsm+0x204>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 fbf0 	bl	80017ac <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <traffic_fsm+0x204>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f980 	bl	80012d8 <duration_set>

				auto_B_state = AUTO_YELLOW;
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <traffic_fsm+0x1f8>)
 8000fda:	2217      	movs	r2, #23
 8000fdc:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <traffic_fsm+0x204>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 fbe1 	bl	80017ac <timer_setDuration>
				break;
 8000fea:	e032      	b.n	8001052 <traffic_fsm+0x1da>

			///////////////////////////////////////////////////
			case MN_GREEN: //traffic A: green; traffic B: red
				auto_A_state = AUTO_GREEN;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <traffic_fsm+0x1f4>)
 8000fee:	2216      	movs	r2, #22
 8000ff0:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_GREEN]);
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <traffic_fsm+0x204>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 fbd7 	bl	80017ac <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_GREEN]);
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <traffic_fsm+0x204>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4619      	mov	r1, r3
 8001004:	2000      	movs	r0, #0
 8001006:	f000 f967 	bl	80012d8 <duration_set>

				auto_B_state = AUTO_RED;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <traffic_fsm+0x1f8>)
 800100c:	2215      	movs	r2, #21
 800100e:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_RED]);
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <traffic_fsm+0x204>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4619      	mov	r1, r3
 8001016:	2001      	movs	r0, #1
 8001018:	f000 fbc8 	bl	80017ac <timer_setDuration>
				break;
 800101c:	e019      	b.n	8001052 <traffic_fsm+0x1da>
			///////////////////////////////////////////////////
			case MN_YELLOW: //traffic A: yellow; traffic B: red
				auto_A_state = AUTO_YELLOW;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <traffic_fsm+0x1f4>)
 8001020:	2217      	movs	r2, #23
 8001022:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_A, trafficDuration[LED_YELLOW]);
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <traffic_fsm+0x204>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4619      	mov	r1, r3
 800102a:	2000      	movs	r0, #0
 800102c:	f000 fbbe 	bl	80017ac <timer_setDuration>
				duration_set(DUR_TRAFFIC, trafficDuration[LED_YELLOW]);
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <traffic_fsm+0x204>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4619      	mov	r1, r3
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f94e 	bl	80012d8 <duration_set>

				auto_B_state = AUTO_RED;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <traffic_fsm+0x1f8>)
 800103e:	2215      	movs	r2, #21
 8001040:	701a      	strb	r2, [r3, #0]
				timer_setDuration(TIMER_AUTO_B, trafficDuration[LED_YELLOW]);
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <traffic_fsm+0x204>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4619      	mov	r1, r3
 8001048:	2001      	movs	r0, #1
 800104a:	f000 fbaf 	bl	80017ac <timer_setDuration>
				break;
 800104e:	e000      	b.n	8001052 <traffic_fsm+0x1da>
			}
		}
 8001050:	bf00      	nop
		break;
 8001052:	e005      	b.n	8001060 <traffic_fsm+0x1e8>

	///////////////////////////////////////////////
	default:
		break;
 8001054:	bf00      	nop
 8001056:	e004      	b.n	8001062 <traffic_fsm+0x1ea>
		break;
 8001058:	bf00      	nop
 800105a:	e002      	b.n	8001062 <traffic_fsm+0x1ea>
		break;
 800105c:	bf00      	nop
 800105e:	e000      	b.n	8001062 <traffic_fsm+0x1ea>
		break;
 8001060:	bf00      	nop
	}
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000100 	.word	0x20000100
 800106c:	20000101 	.word	0x20000101
 8001070:	20000102 	.word	0x20000102
 8001074:	20000103 	.word	0x20000103
 8001078:	20000104 	.word	0x20000104
 800107c:	20000004 	.word	0x20000004

08001080 <global_get_totalDuration>:
uint8_t pd_active_state = 0;

//function for duration
uint32_t trafficDuration[3] = {5000, 3000, 2000};

uint32_t global_get_totalDuration() {
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	return trafficDuration[0] + trafficDuration[1] + trafficDuration[2];
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <global_get_totalDuration+0x1c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <global_get_totalDuration+0x1c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	441a      	add	r2, r3
 800108e:	4b03      	ldr	r3, [pc, #12]	; (800109c <global_get_totalDuration+0x1c>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	4413      	add	r3, r2
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000004 	.word	0x20000004

080010a0 <button_reading>:

int TimeOutForKeyPress[MAX_BUTTON] = {LONG_DURATION};
int flagBtn[MAX_BUTTON] = {0};
int flagBtnLong[MAX_BUTTON] = {0};

void button_reading(void){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_BUTTON; i++){
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	e0a2      	b.n	80011f2 <button_reading+0x152>
		KeyReg2[i] = KeyReg1[i];
 80010ac:	4a55      	ldr	r2, [pc, #340]	; (8001204 <button_reading+0x164>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010b4:	4954      	ldr	r1, [pc, #336]	; (8001208 <button_reading+0x168>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80010bc:	4a53      	ldr	r2, [pc, #332]	; (800120c <button_reading+0x16c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c4:	494f      	ldr	r1, [pc, #316]	; (8001204 <button_reading+0x164>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d836      	bhi.n	8001140 <button_reading+0xa0>
 80010d2:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <button_reading+0x38>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	080010e9 	.word	0x080010e9
 80010dc:	080010ff 	.word	0x080010ff
 80010e0:	08001115 	.word	0x08001115
 80010e4:	0800112b 	.word	0x0800112b
		switch (i){ //check which button is being read now
		case BTN_1:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_1_Pin);
 80010e8:	2102      	movs	r1, #2
 80010ea:	4849      	ldr	r0, [pc, #292]	; (8001210 <button_reading+0x170>)
 80010ec:	f000 ff1a 	bl	8001f24 <HAL_GPIO_ReadPin>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4619      	mov	r1, r3
 80010f4:	4a45      	ldr	r2, [pc, #276]	; (800120c <button_reading+0x16c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80010fc:	e021      	b.n	8001142 <button_reading+0xa2>
		case BTN_2:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, BTN_2_Pin);
 80010fe:	2110      	movs	r1, #16
 8001100:	4843      	ldr	r0, [pc, #268]	; (8001210 <button_reading+0x170>)
 8001102:	f000 ff0f 	bl	8001f24 <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	4619      	mov	r1, r3
 800110a:	4a40      	ldr	r2, [pc, #256]	; (800120c <button_reading+0x16c>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8001112:	e016      	b.n	8001142 <button_reading+0xa2>
		case BTN_3:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, BTN_3_Pin);
 8001114:	2101      	movs	r1, #1
 8001116:	483f      	ldr	r0, [pc, #252]	; (8001214 <button_reading+0x174>)
 8001118:	f000 ff04 	bl	8001f24 <HAL_GPIO_ReadPin>
 800111c:	4603      	mov	r3, r0
 800111e:	4619      	mov	r1, r3
 8001120:	4a3a      	ldr	r2, [pc, #232]	; (800120c <button_reading+0x16c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 8001128:	e00b      	b.n	8001142 <button_reading+0xa2>
		case BTN_PD:
			KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, PD_BTN_Pin);
 800112a:	2101      	movs	r1, #1
 800112c:	4838      	ldr	r0, [pc, #224]	; (8001210 <button_reading+0x170>)
 800112e:	f000 fef9 	bl	8001f24 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	4619      	mov	r1, r3
 8001136:	4a35      	ldr	r2, [pc, #212]	; (800120c <button_reading+0x16c>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 800113e:	e000      	b.n	8001142 <button_reading+0xa2>
		default:
			break;
 8001140:	bf00      	nop
		}
		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8001142:	4a30      	ldr	r2, [pc, #192]	; (8001204 <button_reading+0x164>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800114a:	4930      	ldr	r1, [pc, #192]	; (800120c <button_reading+0x16c>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001152:	429a      	cmp	r2, r3
 8001154:	d14a      	bne.n	80011ec <button_reading+0x14c>
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <button_reading+0x164>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800115e:	492a      	ldr	r1, [pc, #168]	; (8001208 <button_reading+0x168>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001166:	429a      	cmp	r2, r3
 8001168:	d140      	bne.n	80011ec <button_reading+0x14c>
			if (KeyReg2[i] != KeyReg3[i]){
 800116a:	4a27      	ldr	r2, [pc, #156]	; (8001208 <button_reading+0x168>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001172:	4929      	ldr	r1, [pc, #164]	; (8001218 <button_reading+0x178>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800117a:	429a      	cmp	r2, r3
 800117c:	d022      	beq.n	80011c4 <button_reading+0x124>
				KeyReg3[i] = KeyReg2[i];
 800117e:	4a22      	ldr	r2, [pc, #136]	; (8001208 <button_reading+0x168>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001186:	4924      	ldr	r1, [pc, #144]	; (8001218 <button_reading+0x178>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (KeyReg3[i] == IS_PRESSED){
 800118e:	4a22      	ldr	r2, [pc, #136]	; (8001218 <button_reading+0x178>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <button_reading+0x10e>
					TimeOutForKeyPress[i] = LONG_DURATION;
 800119a:	4a20      	ldr	r2, [pc, #128]	; (800121c <button_reading+0x17c>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80011a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f83e 	bl	8001228 <subKeyProcess>
 80011ac:	e01e      	b.n	80011ec <button_reading+0x14c>
				}
				else{
					flagBtnLong[i] = 0;
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <button_reading+0x180>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2100      	movs	r1, #0
 80011b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					Over1Sec[i] = 0;
 80011b8:	4a1a      	ldr	r2, [pc, #104]	; (8001224 <button_reading+0x184>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2100      	movs	r1, #0
 80011be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80011c2:	e013      	b.n	80011ec <button_reading+0x14c>
				}
			} else {
				TimeOutForKeyPress[i] --;
 80011c4:	4a15      	ldr	r2, [pc, #84]	; (800121c <button_reading+0x17c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	4913      	ldr	r1, [pc, #76]	; (800121c <button_reading+0x17c>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <button_reading+0x17c>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d104      	bne.n	80011ec <button_reading+0x14c>
					KeyReg3[i] = IS_RELEASED;
 80011e2:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <button_reading+0x178>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2101      	movs	r1, #1
 80011e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3301      	adds	r3, #1
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	f77f af59 	ble.w	80010ac <button_reading+0xc>
				}
			}
		}
	}
}
 80011fa:	bf00      	nop
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000020 	.word	0x20000020
 8001208:	20000030 	.word	0x20000030
 800120c:	20000010 	.word	0x20000010
 8001210:	40010800 	.word	0x40010800
 8001214:	40010c00 	.word	0x40010c00
 8001218:	20000040 	.word	0x20000040
 800121c:	20000050 	.word	0x20000050
 8001220:	20000128 	.word	0x20000128
 8001224:	20000108 	.word	0x20000108

08001228 <subKeyProcess>:

void subKeyProcess(int index){
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	flagBtn[index] = 1;
 8001230:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <subKeyProcess+0x48>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2101      	movs	r1, #1
 8001236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (Over1Sec[index] == 0){
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <subKeyProcess+0x4c>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d105      	bne.n	8001252 <subKeyProcess+0x2a>
		Over1Sec[index] = 1;
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <subKeyProcess+0x4c>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2101      	movs	r1, #1
 800124c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else{
		flagBtnLong[index] = 1;
		flagBtn[index] = 0;
	}
}
 8001250:	e009      	b.n	8001266 <subKeyProcess+0x3e>
		flagBtnLong[index] = 1;
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <subKeyProcess+0x50>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2101      	movs	r1, #1
 8001258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		flagBtn[index] = 0;
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <subKeyProcess+0x48>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2100      	movs	r1, #0
 8001262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	20000118 	.word	0x20000118
 8001274:	20000108 	.word	0x20000108
 8001278:	20000128 	.word	0x20000128

0800127c <button_isPressed>:

int button_isPressed(int index){
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	if (flagBtn[index] == 1){
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <button_isPressed+0x30>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d106      	bne.n	800129e <button_isPressed+0x22>
		flagBtn[index] = 0;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <button_isPressed+0x30>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2100      	movs	r1, #0
 8001296:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800129a:	2301      	movs	r3, #1
 800129c:	e000      	b.n	80012a0 <button_isPressed+0x24>
	}
	return 0;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000118 	.word	0x20000118

080012b0 <button_isLongPressed>:

int button_isLongPressed(int index){
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	return (flagBtnLong[index] == 1);
 80012b8:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <button_isLongPressed+0x24>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	bf0c      	ite	eq
 80012c4:	2301      	moveq	r3, #1
 80012c6:	2300      	movne	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	20000128 	.word	0x20000128

080012d8 <duration_set>:

void duration_init() {
	timer_setDuration(TIMER_DUR, 10);
	durationList[0] = durationList[1] = 0; //0s
}
void duration_set(uint8_t index, uint32_t duration_ms) {
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	71fb      	strb	r3, [r7, #7]
	durationList[index] = duration_ms / DUR_CYCLE; //unit of time: milisecond
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	4905      	ldr	r1, [pc, #20]	; (8001300 <duration_set+0x28>)
 80012ea:	fba1 1202 	umull	r1, r2, r1, r2
 80012ee:	08d2      	lsrs	r2, r2, #3
 80012f0:	4904      	ldr	r1, [pc, #16]	; (8001304 <duration_set+0x2c>)
 80012f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr
 8001300:	cccccccd 	.word	0xcccccccd
 8001304:	20000190 	.word	0x20000190

08001308 <duration_get>:

uint32_t duration_get(uint8_t index) { //return value of duration in second (not in milisecond)
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	uint32_t extra_duration = ((durationList[index] * DUR_CYCLE) % (DUR_UNIT)) ? 1 : 0;
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4a15      	ldr	r2, [pc, #84]	; (800136c <duration_get+0x64>)
 8001316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	461a      	mov	r2, r3
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <duration_get+0x68>)
 8001326:	fba3 1302 	umull	r1, r3, r3, r2
 800132a:	099b      	lsrs	r3, r3, #6
 800132c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001330:	fb01 f303 	mul.w	r3, r1, r3
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf14      	ite	ne
 800133a:	2301      	movne	r3, #1
 800133c:	2300      	moveq	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	60fb      	str	r3, [r7, #12]
	return (durationList[index] * DUR_CYCLE / DUR_UNIT) + extra_duration;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4a09      	ldr	r2, [pc, #36]	; (800136c <duration_get+0x64>)
 8001346:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	461a      	mov	r2, r3
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <duration_get+0x68>)
 8001356:	fba3 2302 	umull	r2, r3, r3, r2
 800135a:	099a      	lsrs	r2, r3, #6
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000190 	.word	0x20000190
 8001370:	10624dd3 	.word	0x10624dd3

08001374 <duration_run>:

void duration_run() { //use timer interupt to auto increase
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
	durationList[0] = (durationList[0] == 0) ? 0 : durationList[0] - 1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <duration_run+0x38>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <duration_run+0x14>
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <duration_run+0x38>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3b01      	subs	r3, #1
 8001386:	e000      	b.n	800138a <duration_run+0x16>
 8001388:	2300      	movs	r3, #0
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <duration_run+0x38>)
 800138c:	6013      	str	r3, [r2, #0]
	durationList[1] = (durationList[1] == 0) ? 0 : durationList[1] - 1;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <duration_run+0x38>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <duration_run+0x2a>
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <duration_run+0x38>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	e000      	b.n	80013a0 <duration_run+0x2c>
 800139e:	2300      	movs	r3, #0
 80013a0:	4a02      	ldr	r2, [pc, #8]	; (80013ac <duration_run+0x38>)
 80013a2:	6053      	str	r3, [r2, #4]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	20000190 	.word	0x20000190

080013b0 <led_clear_all>:
#include "u_i_led.h"
#include "main.h"

#ifdef BOARD
//clear all led
void led_clear_all() { //00
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin|TR_LED_A_0_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <led_clear_all+0x20>)
 80013bc:	f000 fdc9 	bl	8001f52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin|TR_LED_A_1_Pin|TR_LED_B_1_Pin|TR_LED_B_0_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <led_clear_all+0x24>)
 80013c8:	f000 fdc3 	bl	8001f52 <HAL_GPIO_WritePin>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010800 	.word	0x40010800
 80013d4:	40010c00 	.word	0x40010c00

080013d8 <led_turn_on>:

//turn specific led with specific color
void led_turn_on(uint8_t led_index, uint8_t led_type) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	460a      	mov	r2, r1
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	71bb      	strb	r3, [r7, #6]
	switch (led_index) {
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	2b07      	cmp	r3, #7
 80013ec:	d063      	beq.n	80014b6 <led_turn_on+0xde>
 80013ee:	2b07      	cmp	r3, #7
 80013f0:	f300 8093 	bgt.w	800151a <led_turn_on+0x142>
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d002      	beq.n	80013fe <led_turn_on+0x26>
 80013f8:	2b06      	cmp	r3, #6
 80013fa:	d030      	beq.n	800145e <led_turn_on+0x86>
			break;
		}
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 80013fc:	e08d      	b.n	800151a <led_turn_on+0x142>
		switch (led_type) {
 80013fe:	79bb      	ldrb	r3, [r7, #6]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d01f      	beq.n	8001444 <led_turn_on+0x6c>
 8001404:	2b02      	cmp	r3, #2
 8001406:	f300 808a 	bgt.w	800151e <led_turn_on+0x146>
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <led_turn_on+0x3c>
 800140e:	2b01      	cmp	r3, #1
 8001410:	d00c      	beq.n	800142c <led_turn_on+0x54>
		break;
 8001412:	e084      	b.n	800151e <led_turn_on+0x146>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141a:	4845      	ldr	r0, [pc, #276]	; (8001530 <led_turn_on+0x158>)
 800141c:	f000 fd99 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2108      	movs	r1, #8
 8001424:	4843      	ldr	r0, [pc, #268]	; (8001534 <led_turn_on+0x15c>)
 8001426:	f000 fd94 	bl	8001f52 <HAL_GPIO_WritePin>
			break;
 800142a:	e017      	b.n	800145c <led_turn_on+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001432:	483f      	ldr	r0, [pc, #252]	; (8001530 <led_turn_on+0x158>)
 8001434:	f000 fd8d 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2108      	movs	r1, #8
 800143c:	483d      	ldr	r0, [pc, #244]	; (8001534 <led_turn_on+0x15c>)
 800143e:	f000 fd88 	bl	8001f52 <HAL_GPIO_WritePin>
			break;
 8001442:	e00b      	b.n	800145c <led_turn_on+0x84>
			HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_SET);
 8001444:	2201      	movs	r2, #1
 8001446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800144a:	4839      	ldr	r0, [pc, #228]	; (8001530 <led_turn_on+0x158>)
 800144c:	f000 fd81 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2108      	movs	r1, #8
 8001454:	4837      	ldr	r0, [pc, #220]	; (8001534 <led_turn_on+0x15c>)
 8001456:	f000 fd7c 	bl	8001f52 <HAL_GPIO_WritePin>
			break;
 800145a:	bf00      	nop
		break;
 800145c:	e05f      	b.n	800151e <led_turn_on+0x146>
		switch (led_type) {
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d01c      	beq.n	800149e <led_turn_on+0xc6>
 8001464:	2b02      	cmp	r3, #2
 8001466:	dc5c      	bgt.n	8001522 <led_turn_on+0x14a>
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <led_turn_on+0x9a>
 800146c:	2b01      	cmp	r3, #1
 800146e:	d00b      	beq.n	8001488 <led_turn_on+0xb0>
		break;
 8001470:	e057      	b.n	8001522 <led_turn_on+0x14a>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_SET);
 8001472:	2201      	movs	r2, #1
 8001474:	2120      	movs	r1, #32
 8001476:	482f      	ldr	r0, [pc, #188]	; (8001534 <led_turn_on+0x15c>)
 8001478:	f000 fd6b 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	2110      	movs	r1, #16
 8001480:	482c      	ldr	r0, [pc, #176]	; (8001534 <led_turn_on+0x15c>)
 8001482:	f000 fd66 	bl	8001f52 <HAL_GPIO_WritePin>
			break;
 8001486:	e015      	b.n	80014b4 <led_turn_on+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2120      	movs	r1, #32
 800148c:	4829      	ldr	r0, [pc, #164]	; (8001534 <led_turn_on+0x15c>)
 800148e:	f000 fd60 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	2110      	movs	r1, #16
 8001496:	4827      	ldr	r0, [pc, #156]	; (8001534 <led_turn_on+0x15c>)
 8001498:	f000 fd5b 	bl	8001f52 <HAL_GPIO_WritePin>
			break;
 800149c:	e00a      	b.n	80014b4 <led_turn_on+0xdc>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	2120      	movs	r1, #32
 80014a2:	4824      	ldr	r0, [pc, #144]	; (8001534 <led_turn_on+0x15c>)
 80014a4:	f000 fd55 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2110      	movs	r1, #16
 80014ac:	4821      	ldr	r0, [pc, #132]	; (8001534 <led_turn_on+0x15c>)
 80014ae:	f000 fd50 	bl	8001f52 <HAL_GPIO_WritePin>
			break;
 80014b2:	bf00      	nop
		break;
 80014b4:	e035      	b.n	8001522 <led_turn_on+0x14a>
		switch (led_type) {
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d020      	beq.n	80014fe <led_turn_on+0x126>
 80014bc:	2b02      	cmp	r3, #2
 80014be:	dc32      	bgt.n	8001526 <led_turn_on+0x14e>
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <led_turn_on+0xf2>
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d00d      	beq.n	80014e4 <led_turn_on+0x10c>
		break;
 80014c8:	e02d      	b.n	8001526 <led_turn_on+0x14e>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d0:	4818      	ldr	r0, [pc, #96]	; (8001534 <led_turn_on+0x15c>)
 80014d2:	f000 fd3e 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014dc:	4814      	ldr	r0, [pc, #80]	; (8001530 <led_turn_on+0x158>)
 80014de:	f000 fd38 	bl	8001f52 <HAL_GPIO_WritePin>
			break;
 80014e2:	e019      	b.n	8001518 <led_turn_on+0x140>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ea:	4812      	ldr	r0, [pc, #72]	; (8001534 <led_turn_on+0x15c>)
 80014ec:	f000 fd31 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f6:	480e      	ldr	r0, [pc, #56]	; (8001530 <led_turn_on+0x158>)
 80014f8:	f000 fd2b 	bl	8001f52 <HAL_GPIO_WritePin>
			break;
 80014fc:	e00c      	b.n	8001518 <led_turn_on+0x140>
			HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <led_turn_on+0x15c>)
 8001506:	f000 fd24 	bl	8001f52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001510:	4807      	ldr	r0, [pc, #28]	; (8001530 <led_turn_on+0x158>)
 8001512:	f000 fd1e 	bl	8001f52 <HAL_GPIO_WritePin>
			break;
 8001516:	bf00      	nop
		break;
 8001518:	e005      	b.n	8001526 <led_turn_on+0x14e>
		break;
 800151a:	bf00      	nop
 800151c:	e004      	b.n	8001528 <led_turn_on+0x150>
		break;
 800151e:	bf00      	nop
 8001520:	e002      	b.n	8001528 <led_turn_on+0x150>
		break;
 8001522:	bf00      	nop
 8001524:	e000      	b.n	8001528 <led_turn_on+0x150>
		break;
 8001526:	bf00      	nop
	}
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40010800 	.word	0x40010800
 8001534:	40010c00 	.word	0x40010c00

08001538 <led_turn_off>:

//turn of specific led
void led_turn_off(uint8_t led_index) { // 00
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
	switch (led_index) {
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	2b07      	cmp	r3, #7
 8001546:	d01d      	beq.n	8001584 <led_turn_off+0x4c>
 8001548:	2b07      	cmp	r3, #7
 800154a:	dc28      	bgt.n	800159e <led_turn_off+0x66>
 800154c:	2b05      	cmp	r3, #5
 800154e:	d002      	beq.n	8001556 <led_turn_off+0x1e>
 8001550:	2b06      	cmp	r3, #6
 8001552:	d00c      	beq.n	800156e <led_turn_off+0x36>
		HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
		break;
	//////////////////////////////////////////////////////////////////
	default:
		break;
 8001554:	e023      	b.n	800159e <led_turn_off+0x66>
		HAL_GPIO_WritePin(GPIOA, TR_LED_A_0_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <led_turn_off+0x70>)
 800155e:	f000 fcf8 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TR_LED_A_1_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2108      	movs	r1, #8
 8001566:	4811      	ldr	r0, [pc, #68]	; (80015ac <led_turn_off+0x74>)
 8001568:	f000 fcf3 	bl	8001f52 <HAL_GPIO_WritePin>
		break;
 800156c:	e018      	b.n	80015a0 <led_turn_off+0x68>
		HAL_GPIO_WritePin(GPIOB, TR_LED_B_0_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2120      	movs	r1, #32
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <led_turn_off+0x74>)
 8001574:	f000 fced 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, TR_LED_B_1_Pin, GPIO_PIN_RESET);
 8001578:	2200      	movs	r2, #0
 800157a:	2110      	movs	r1, #16
 800157c:	480b      	ldr	r0, [pc, #44]	; (80015ac <led_turn_off+0x74>)
 800157e:	f000 fce8 	bl	8001f52 <HAL_GPIO_WritePin>
		break;
 8001582:	e00d      	b.n	80015a0 <led_turn_off+0x68>
		HAL_GPIO_WritePin(GPIOB, PD_LED_0_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158a:	4808      	ldr	r0, [pc, #32]	; (80015ac <led_turn_off+0x74>)
 800158c:	f000 fce1 	bl	8001f52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, PD_LED_1_Pin, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001596:	4804      	ldr	r0, [pc, #16]	; (80015a8 <led_turn_off+0x70>)
 8001598:	f000 fcdb 	bl	8001f52 <HAL_GPIO_WritePin>
		break;
 800159c:	e000      	b.n	80015a0 <led_turn_off+0x68>
		break;
 800159e:	bf00      	nop
	}
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40010800 	.word	0x40010800
 80015ac:	40010c00 	.word	0x40010c00

080015b0 <timer_unit_construct>:

struct timer_list timerList;
uint8_t	timerFlag[MAX_TIMER] = {0};

/*-------------- unit function -------------------*/
struct timer_unit* timer_unit_construct(uint8_t index, uint32_t duration) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = malloc(sizeof (struct timer_unit)); //dynamic allocating a timer unit
 80015bc:	200c      	movs	r0, #12
 80015be:	f002 f9f7 	bl	80039b0 <malloc>
 80015c2:	4603      	mov	r3, r0
 80015c4:	60fb      	str	r3, [r7, #12]
	if (newUnit == NULL) {
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <timer_unit_construct+0x20>
		return NULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	e009      	b.n	80015e4 <timer_unit_construct+0x34>
	}
	newUnit->index = index;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	79fa      	ldrb	r2, [r7, #7]
 80015d4:	701a      	strb	r2, [r3, #0]
	newUnit->duration = duration;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	605a      	str	r2, [r3, #4]
	newUnit->nextTimer = NULL;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
	return newUnit;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <timer_unit_destruct>:

void timer_unit_destruct(struct timer_unit *unit) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	free(unit);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f002 f9e3 	bl	80039c0 <free>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <timer_list_add>:

/*-------------- list function -------------------*/
void timer_list_add(struct timer_unit *unit){
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	//list full
	if (timerList.size == MAX_TIMER) return;
 800160c:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <timer_list_add+0xec>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b05      	cmp	r3, #5
 8001612:	d068      	beq.n	80016e6 <timer_list_add+0xe2>

	//list empty
	if (timerList.size == 0) {
 8001614:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <timer_list_add+0xec>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d109      	bne.n	8001630 <timer_list_add+0x2c>
		timerList.head = unit;
 800161c:	4a34      	ldr	r2, [pc, #208]	; (80016f0 <timer_list_add+0xec>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6053      	str	r3, [r2, #4]
		timerList.size++;
 8001622:	4b33      	ldr	r3, [pc, #204]	; (80016f0 <timer_list_add+0xec>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b31      	ldr	r3, [pc, #196]	; (80016f0 <timer_list_add+0xec>)
 800162c:	701a      	strb	r2, [r3, #0]
		return;
 800162e:	e05b      	b.n	80016e8 <timer_list_add+0xe4>
	}

	//list has at least 1 item
	struct timer_unit *curr = timerList.head,
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <timer_list_add+0xec>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	617b      	str	r3, [r7, #20]
					  *prev = NULL;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
	uint32_t totalDuration = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
	while(curr != NULL) { //iterating the list
 800163e:	e00e      	b.n	800165e <timer_list_add+0x5a>
		totalDuration += curr->duration;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
		if (unit->duration < totalDuration) break;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d808      	bhi.n	8001666 <timer_list_add+0x62>
		prev = curr;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	613b      	str	r3, [r7, #16]
		curr = curr->nextTimer;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	617b      	str	r3, [r7, #20]
	while(curr != NULL) { //iterating the list
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ed      	bne.n	8001640 <timer_list_add+0x3c>
 8001664:	e000      	b.n	8001668 <timer_list_add+0x64>
		if (unit->duration < totalDuration) break;
 8001666:	bf00      	nop
	}
	if (prev == NULL) { //new unit is added before the head
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d113      	bne.n	8001696 <timer_list_add+0x92>
		unit->nextTimer = curr;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	609a      	str	r2, [r3, #8]
		curr->duration -= unit->duration;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	1ad2      	subs	r2, r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	605a      	str	r2, [r3, #4]
		timerList.head = unit;
 8001682:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <timer_list_add+0xec>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6053      	str	r3, [r2, #4]
		timerList.size++;
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <timer_list_add+0xec>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <timer_list_add+0xec>)
 8001692:	701a      	strb	r2, [r3, #0]
		return;
 8001694:	e028      	b.n	80016e8 <timer_list_add+0xe4>
	}
	prev->nextTimer = unit;
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	609a      	str	r2, [r3, #8]
	unit->nextTimer = curr;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	609a      	str	r2, [r3, #8]
	if (curr == NULL){
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d106      	bne.n	80016b6 <timer_list_add+0xb2>
		unit->duration -= totalDuration;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad2      	subs	r2, r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	e010      	b.n	80016d8 <timer_list_add+0xd4>
	}
	else{
		uint32_t tmp = unit->duration;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	60bb      	str	r3, [r7, #8]
		unit->duration -= (totalDuration - curr->duration);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1acb      	subs	r3, r1, r3
 80016c8:	441a      	add	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	605a      	str	r2, [r3, #4]
		curr->duration = (totalDuration - tmp);
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	1ad2      	subs	r2, r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	605a      	str	r2, [r3, #4]
	}
	timerList.size++;
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <timer_list_add+0xec>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <timer_list_add+0xec>)
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	e000      	b.n	80016e8 <timer_list_add+0xe4>
	if (timerList.size == MAX_TIMER) return;
 80016e6:	bf00      	nop
}
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000210 	.word	0x20000210

080016f4 <timer_list_pop>:

void timer_list_pop(){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
	 //list empty
	if (timerList.size == 0) return;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <timer_list_pop+0x38>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d010      	beq.n	8001724 <timer_list_pop+0x30>

	struct timer_unit *delUnit = timerList.head;
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <timer_list_pop+0x38>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	607b      	str	r3, [r7, #4]
	timerList.head = delUnit->nextTimer;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a07      	ldr	r2, [pc, #28]	; (800172c <timer_list_pop+0x38>)
 800170e:	6053      	str	r3, [r2, #4]
	timer_unit_destruct(delUnit);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff6b 	bl	80015ec <timer_unit_destruct>
	timerList.size--;
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <timer_list_pop+0x38>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	3b01      	subs	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4b03      	ldr	r3, [pc, #12]	; (800172c <timer_list_pop+0x38>)
 8001720:	701a      	strb	r2, [r3, #0]
 8001722:	e000      	b.n	8001726 <timer_list_pop+0x32>
	if (timerList.size == 0) return;
 8001724:	bf00      	nop
}
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000210 	.word	0x20000210

08001730 <timer_init>:

/*-------------- global function -------------------*/
void timer_init(){
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	timerList.head = NULL;
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <timer_init+0x18>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]
	timerList.size = 0;
 800173a:	4b03      	ldr	r3, [pc, #12]	; (8001748 <timer_init+0x18>)
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000210 	.word	0x20000210

0800174c <timer_run>:

void timer_run(){
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
	if (timerList.size == 0) return;
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <timer_run+0x58>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d020      	beq.n	800179c <timer_run+0x50>
	if (timerList.head->duration >= 0) {
		timerList.head->duration--;
 800175a:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <timer_run+0x58>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	3a01      	subs	r2, #1
 8001762:	605a      	str	r2, [r3, #4]
		if (timerList.head->duration <= 0) {
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <timer_run+0x58>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d117      	bne.n	800179e <timer_run+0x52>
			uint8_t index = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]
			while(timerList.size && timerList.head->duration == 0) {
 8001772:	e009      	b.n	8001788 <timer_run+0x3c>
				index = timerList.head->index;
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <timer_run+0x58>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
				timerFlag[index] = 1;
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <timer_run+0x5c>)
 8001780:	2101      	movs	r1, #1
 8001782:	54d1      	strb	r1, [r2, r3]
				timer_list_pop();
 8001784:	f7ff ffb6 	bl	80016f4 <timer_list_pop>
			while(timerList.size && timerList.head->duration == 0) {
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <timer_run+0x58>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <timer_run+0x52>
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <timer_run+0x58>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0ec      	beq.n	8001774 <timer_run+0x28>
 800179a:	e000      	b.n	800179e <timer_run+0x52>
	if (timerList.size == 0) return;
 800179c:	bf00      	nop
			}
		}
	}
}
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000210 	.word	0x20000210
 80017a8:	20000138 	.word	0x20000138

080017ac <timer_setDuration>:

void timer_setDuration(uint8_t index, uint32_t duration) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
	struct timer_unit *newUnit = timer_unit_construct(index, duration/CYCLE);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <timer_setDuration+0x30>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	08da      	lsrs	r2, r3, #3
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fef2 	bl	80015b0 <timer_unit_construct>
 80017cc:	60f8      	str	r0, [r7, #12]
	timer_list_add(newUnit);
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff ff18 	bl	8001604 <timer_list_add>
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	cccccccd 	.word	0xcccccccd

080017e0 <timer_checkFlag>:

uint8_t	timer_checkFlag(uint8_t index) {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	if (timerFlag[index] == 1) {
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	4a07      	ldr	r2, [pc, #28]	; (800180c <timer_checkFlag+0x2c>)
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d105      	bne.n	8001800 <timer_checkFlag+0x20>
		timerFlag[index] = 0;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <timer_checkFlag+0x2c>)
 80017f8:	2100      	movs	r1, #0
 80017fa:	54d1      	strb	r1, [r2, r3]
		return 1;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <timer_checkFlag+0x22>
	}
	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000138 	.word	0x20000138

08001810 <timer_clear>:

void timer_clear(uint8_t index) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
//	uint32_t totalDuration = 0;
	timerFlag[index] = 0;
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4a20      	ldr	r2, [pc, #128]	; (80018a0 <timer_clear+0x90>)
 800181e:	2100      	movs	r1, #0
 8001820:	54d1      	strb	r1, [r2, r3]
	struct timer_unit *curr = timerList.head,
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <timer_clear+0x94>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	60fb      	str	r3, [r7, #12]
			          *prev = NULL;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
	while (curr != NULL) {
 800182c:	e009      	b.n	8001842 <timer_clear+0x32>
		if (curr->index == index) break;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	79fa      	ldrb	r2, [r7, #7]
 8001834:	429a      	cmp	r2, r3
 8001836:	d008      	beq.n	800184a <timer_clear+0x3a>

//		totalDuration += curr->duration;
		prev = curr;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	60bb      	str	r3, [r7, #8]
		curr = curr->nextTimer;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	60fb      	str	r3, [r7, #12]
	while (curr != NULL) {
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f2      	bne.n	800182e <timer_clear+0x1e>
 8001848:	e000      	b.n	800184c <timer_clear+0x3c>
		if (curr->index == index) break;
 800184a:	bf00      	nop
	}

	if (curr == NULL) return;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d022      	beq.n	8001898 <timer_clear+0x88>
	if (prev == NULL) { //item at the head of list
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d104      	bne.n	8001862 <timer_clear+0x52>
		timerList.head = curr->nextTimer;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <timer_clear+0x94>)
 800185e:	6053      	str	r3, [r2, #4]
 8001860:	e003      	b.n	800186a <timer_clear+0x5a>
	}
	else {
		prev->nextTimer = curr->nextTimer;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	609a      	str	r2, [r3, #8]
	}
	if (curr->nextTimer != NULL) curr->nextTimer->duration += curr->duration;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <timer_clear+0x74>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	440a      	add	r2, r1
 8001882:	605a      	str	r2, [r3, #4]
	timer_unit_destruct(curr);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f7ff feb1 	bl	80015ec <timer_unit_destruct>
	timerList.size--;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <timer_clear+0x94>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <timer_clear+0x94>)
 8001894:	701a      	strb	r2, [r3, #0]
 8001896:	e000      	b.n	800189a <timer_clear+0x8a>
	if (curr == NULL) return;
 8001898:	bf00      	nop
}
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000138 	.word	0x20000138
 80018a4:	20000210 	.word	0x20000210

080018a8 <uart_send_num>:
	sprintf(tx_data, "%s\r\n", str);
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
}

void uart_send_num(char str[], uint32_t data) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
	sprintf(tx_data, "%s%ld\r\n", str, data);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <uart_send_num+0x38>)
 80018b8:	480a      	ldr	r0, [pc, #40]	; (80018e4 <uart_send_num+0x3c>)
 80018ba:	f002 f947 	bl	8003b4c <siprintf>
	HAL_UART_Transmit(&huart2, tx_data, sizeof(tx_data), 1000);
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	2228      	movs	r2, #40	; 0x28
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <uart_send_num+0x3c>)
 80018c6:	4808      	ldr	r0, [pc, #32]	; (80018e8 <uart_send_num+0x40>)
 80018c8:	f001 fe75 	bl	80035b6 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80018cc:	2201      	movs	r2, #1
 80018ce:	4907      	ldr	r1, [pc, #28]	; (80018ec <uart_send_num+0x44>)
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <uart_send_num+0x40>)
 80018d2:	f001 ff02 	bl	80036da <HAL_UART_Receive_IT>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	080042ac 	.word	0x080042ac
 80018e4:	200001e4 	.word	0x200001e4
 80018e8:	20000218 	.word	0x20000218
 80018ec:	20000198 	.word	0x20000198

080018f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	; (8001928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	; (8001934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001916:	f7fe ff4f 	bl	80007b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191a:	f002 f825 	bl	8003968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800191e:	f7fe fc15 	bl	800014c <main>
  bx lr
 8001922:	4770      	bx	lr
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 800192c:	08004318 	.word	0x08004318
  ldr r2, =_sbss
 8001930:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8001934:	20000270 	.word	0x20000270

08001938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC1_2_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_Init+0x28>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_Init+0x28>)
 8001946:	f043 0310 	orr.w	r3, r3, #16
 800194a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 f923 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f808 	bl	8001968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7fe fdda 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40022000 	.word	0x40022000

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x54>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 f93b 	bl	8001c02 <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295
 80019a4:	f000 f903 	bl	8001bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_InitTick+0x5c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000064 	.word	0x20000064
 80019c4:	20000060 	.word	0x20000060

080019c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_IncTick+0x1c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_IncTick+0x20>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <HAL_IncTick+0x20>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	20000064 	.word	0x20000064
 80019e8:	2000025c 	.word	0x2000025c

080019ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b02      	ldr	r3, [pc, #8]	; (80019fc <HAL_GetTick+0x10>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	2000025c 	.word	0x2000025c

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4906      	ldr	r1, [pc, #24]	; (8001a98 <__NVIC_EnableIRQ+0x34>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	e000e100 	.word	0xe000e100

08001a9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	6039      	str	r1, [r7, #0]
 8001aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	db0a      	blt.n	8001ac6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	490c      	ldr	r1, [pc, #48]	; (8001ae8 <__NVIC_SetPriority+0x4c>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	0112      	lsls	r2, r2, #4
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	440b      	add	r3, r1
 8001ac0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac4:	e00a      	b.n	8001adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4908      	ldr	r1, [pc, #32]	; (8001aec <__NVIC_SetPriority+0x50>)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	3b04      	subs	r3, #4
 8001ad4:	0112      	lsls	r2, r2, #4
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	440b      	add	r3, r1
 8001ada:	761a      	strb	r2, [r3, #24]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b089      	sub	sp, #36	; 0x24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f1c3 0307 	rsb	r3, r3, #7
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	bf28      	it	cs
 8001b0e:	2304      	movcs	r3, #4
 8001b10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d902      	bls.n	8001b20 <NVIC_EncodePriority+0x30>
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3b03      	subs	r3, #3
 8001b1e:	e000      	b.n	8001b22 <NVIC_EncodePriority+0x32>
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	f04f 32ff 	mov.w	r2, #4294967295
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43da      	mvns	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	401a      	ands	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b38:	f04f 31ff 	mov.w	r1, #4294967295
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b42:	43d9      	mvns	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	4313      	orrs	r3, r2
         );
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3724      	adds	r7, #36	; 0x24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d301      	bcc.n	8001b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SysTick_Config+0x40>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b72:	210f      	movs	r1, #15
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f7ff ff90 	bl	8001a9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SysTick_Config+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x40>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff2d 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc0:	f7ff ff42 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	f7ff ff90 	bl	8001af0 <NVIC_EncodePriority>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff5f 	bl	8001a9c <__NVIC_SetPriority>
}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff35 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffa2 	bl	8001b54 <SysTick_Config>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b08b      	sub	sp, #44	; 0x2c
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2e:	e169      	b.n	8001f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c30:	2201      	movs	r2, #1
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f040 8158 	bne.w	8001efe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4a9a      	ldr	r2, [pc, #616]	; (8001ebc <HAL_GPIO_Init+0x2a0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d05e      	beq.n	8001d16 <HAL_GPIO_Init+0xfa>
 8001c58:	4a98      	ldr	r2, [pc, #608]	; (8001ebc <HAL_GPIO_Init+0x2a0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d875      	bhi.n	8001d4a <HAL_GPIO_Init+0x12e>
 8001c5e:	4a98      	ldr	r2, [pc, #608]	; (8001ec0 <HAL_GPIO_Init+0x2a4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d058      	beq.n	8001d16 <HAL_GPIO_Init+0xfa>
 8001c64:	4a96      	ldr	r2, [pc, #600]	; (8001ec0 <HAL_GPIO_Init+0x2a4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d86f      	bhi.n	8001d4a <HAL_GPIO_Init+0x12e>
 8001c6a:	4a96      	ldr	r2, [pc, #600]	; (8001ec4 <HAL_GPIO_Init+0x2a8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d052      	beq.n	8001d16 <HAL_GPIO_Init+0xfa>
 8001c70:	4a94      	ldr	r2, [pc, #592]	; (8001ec4 <HAL_GPIO_Init+0x2a8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d869      	bhi.n	8001d4a <HAL_GPIO_Init+0x12e>
 8001c76:	4a94      	ldr	r2, [pc, #592]	; (8001ec8 <HAL_GPIO_Init+0x2ac>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d04c      	beq.n	8001d16 <HAL_GPIO_Init+0xfa>
 8001c7c:	4a92      	ldr	r2, [pc, #584]	; (8001ec8 <HAL_GPIO_Init+0x2ac>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d863      	bhi.n	8001d4a <HAL_GPIO_Init+0x12e>
 8001c82:	4a92      	ldr	r2, [pc, #584]	; (8001ecc <HAL_GPIO_Init+0x2b0>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d046      	beq.n	8001d16 <HAL_GPIO_Init+0xfa>
 8001c88:	4a90      	ldr	r2, [pc, #576]	; (8001ecc <HAL_GPIO_Init+0x2b0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d85d      	bhi.n	8001d4a <HAL_GPIO_Init+0x12e>
 8001c8e:	2b12      	cmp	r3, #18
 8001c90:	d82a      	bhi.n	8001ce8 <HAL_GPIO_Init+0xcc>
 8001c92:	2b12      	cmp	r3, #18
 8001c94:	d859      	bhi.n	8001d4a <HAL_GPIO_Init+0x12e>
 8001c96:	a201      	add	r2, pc, #4	; (adr r2, 8001c9c <HAL_GPIO_Init+0x80>)
 8001c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c9c:	08001d17 	.word	0x08001d17
 8001ca0:	08001cf1 	.word	0x08001cf1
 8001ca4:	08001d03 	.word	0x08001d03
 8001ca8:	08001d45 	.word	0x08001d45
 8001cac:	08001d4b 	.word	0x08001d4b
 8001cb0:	08001d4b 	.word	0x08001d4b
 8001cb4:	08001d4b 	.word	0x08001d4b
 8001cb8:	08001d4b 	.word	0x08001d4b
 8001cbc:	08001d4b 	.word	0x08001d4b
 8001cc0:	08001d4b 	.word	0x08001d4b
 8001cc4:	08001d4b 	.word	0x08001d4b
 8001cc8:	08001d4b 	.word	0x08001d4b
 8001ccc:	08001d4b 	.word	0x08001d4b
 8001cd0:	08001d4b 	.word	0x08001d4b
 8001cd4:	08001d4b 	.word	0x08001d4b
 8001cd8:	08001d4b 	.word	0x08001d4b
 8001cdc:	08001d4b 	.word	0x08001d4b
 8001ce0:	08001cf9 	.word	0x08001cf9
 8001ce4:	08001d0d 	.word	0x08001d0d
 8001ce8:	4a79      	ldr	r2, [pc, #484]	; (8001ed0 <HAL_GPIO_Init+0x2b4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cee:	e02c      	b.n	8001d4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	623b      	str	r3, [r7, #32]
          break;
 8001cf6:	e029      	b.n	8001d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	623b      	str	r3, [r7, #32]
          break;
 8001d00:	e024      	b.n	8001d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	3308      	adds	r3, #8
 8001d08:	623b      	str	r3, [r7, #32]
          break;
 8001d0a:	e01f      	b.n	8001d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	330c      	adds	r3, #12
 8001d12:	623b      	str	r3, [r7, #32]
          break;
 8001d14:	e01a      	b.n	8001d4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d102      	bne.n	8001d24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	623b      	str	r3, [r7, #32]
          break;
 8001d22:	e013      	b.n	8001d4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	611a      	str	r2, [r3, #16]
          break;
 8001d36:	e009      	b.n	8001d4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d38:	2308      	movs	r3, #8
 8001d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	615a      	str	r2, [r3, #20]
          break;
 8001d42:	e003      	b.n	8001d4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
          break;
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x130>
          break;
 8001d4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2bff      	cmp	r3, #255	; 0xff
 8001d50:	d801      	bhi.n	8001d56 <HAL_GPIO_Init+0x13a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	e001      	b.n	8001d5a <HAL_GPIO_Init+0x13e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2bff      	cmp	r3, #255	; 0xff
 8001d60:	d802      	bhi.n	8001d68 <HAL_GPIO_Init+0x14c>
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	e002      	b.n	8001d6e <HAL_GPIO_Init+0x152>
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	3b08      	subs	r3, #8
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	210f      	movs	r1, #15
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	401a      	ands	r2, r3
 8001d80:	6a39      	ldr	r1, [r7, #32]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	fa01 f303 	lsl.w	r3, r1, r3
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 80b1 	beq.w	8001efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d9c:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <HAL_GPIO_Init+0x2b8>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	4a4c      	ldr	r2, [pc, #304]	; (8001ed4 <HAL_GPIO_Init+0x2b8>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6193      	str	r3, [r2, #24]
 8001da8:	4b4a      	ldr	r3, [pc, #296]	; (8001ed4 <HAL_GPIO_Init+0x2b8>)
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001db4:	4a48      	ldr	r2, [pc, #288]	; (8001ed8 <HAL_GPIO_Init+0x2bc>)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a40      	ldr	r2, [pc, #256]	; (8001edc <HAL_GPIO_Init+0x2c0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_GPIO_Init+0x1ec>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a3f      	ldr	r2, [pc, #252]	; (8001ee0 <HAL_GPIO_Init+0x2c4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d00d      	beq.n	8001e04 <HAL_GPIO_Init+0x1e8>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a3e      	ldr	r2, [pc, #248]	; (8001ee4 <HAL_GPIO_Init+0x2c8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d007      	beq.n	8001e00 <HAL_GPIO_Init+0x1e4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3d      	ldr	r2, [pc, #244]	; (8001ee8 <HAL_GPIO_Init+0x2cc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_GPIO_Init+0x1e0>
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e006      	b.n	8001e0a <HAL_GPIO_Init+0x1ee>
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	e004      	b.n	8001e0a <HAL_GPIO_Init+0x1ee>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e002      	b.n	8001e0a <HAL_GPIO_Init+0x1ee>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_GPIO_Init+0x1ee>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0c:	f002 0203 	and.w	r2, r2, #3
 8001e10:	0092      	lsls	r2, r2, #2
 8001e12:	4093      	lsls	r3, r2
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e1a:	492f      	ldr	r1, [pc, #188]	; (8001ed8 <HAL_GPIO_Init+0x2bc>)
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e34:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	492c      	ldr	r1, [pc, #176]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	600b      	str	r3, [r1, #0]
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e42:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	4928      	ldr	r1, [pc, #160]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e5c:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	4922      	ldr	r1, [pc, #136]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	491e      	ldr	r1, [pc, #120]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	4918      	ldr	r1, [pc, #96]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	608b      	str	r3, [r1, #8]
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	4914      	ldr	r1, [pc, #80]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d021      	beq.n	8001ef0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	490e      	ldr	r1, [pc, #56]	; (8001eec <HAL_GPIO_Init+0x2d0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	60cb      	str	r3, [r1, #12]
 8001eb8:	e021      	b.n	8001efe <HAL_GPIO_Init+0x2e2>
 8001eba:	bf00      	nop
 8001ebc:	10320000 	.word	0x10320000
 8001ec0:	10310000 	.word	0x10310000
 8001ec4:	10220000 	.word	0x10220000
 8001ec8:	10210000 	.word	0x10210000
 8001ecc:	10120000 	.word	0x10120000
 8001ed0:	10110000 	.word	0x10110000
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40010000 	.word	0x40010000
 8001edc:	40010800 	.word	0x40010800
 8001ee0:	40010c00 	.word	0x40010c00
 8001ee4:	40011000 	.word	0x40011000
 8001ee8:	40011400 	.word	0x40011400
 8001eec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	4909      	ldr	r1, [pc, #36]	; (8001f20 <HAL_GPIO_Init+0x304>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	3301      	adds	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f47f ae8e 	bne.w	8001c30 <HAL_GPIO_Init+0x14>
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	372c      	adds	r7, #44	; 0x2c
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	40010400 	.word	0x40010400

08001f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e001      	b.n	8001f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	807b      	strh	r3, [r7, #2]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f62:	787b      	ldrb	r3, [r7, #1]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f68:	887a      	ldrh	r2, [r7, #2]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f6e:	e003      	b.n	8001f78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f70:	887b      	ldrh	r3, [r7, #2]
 8001f72:	041a      	lsls	r2, r3, #16
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	611a      	str	r2, [r3, #16]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
	...

08001f84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f8e:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f90:	695a      	ldr	r2, [r3, #20]
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f806 	bl	8001fb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e26c      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8087 	beq.w	80020f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe8:	4b92      	ldr	r3, [pc, #584]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d00c      	beq.n	800200e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff4:	4b8f      	ldr	r3, [pc, #572]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d112      	bne.n	8002026 <HAL_RCC_OscConfig+0x5e>
 8002000:	4b8c      	ldr	r3, [pc, #560]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d10b      	bne.n	8002026 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	4b89      	ldr	r3, [pc, #548]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d06c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x12c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d168      	bne.n	80020f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e246      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x76>
 8002030:	4b80      	ldr	r3, [pc, #512]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a7f      	ldr	r2, [pc, #508]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e02e      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x98>
 8002046:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7a      	ldr	r2, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b78      	ldr	r3, [pc, #480]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a77      	ldr	r2, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0xbc>
 800206a:	4b72      	ldr	r3, [pc, #456]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a71      	ldr	r2, [pc, #452]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6e      	ldr	r2, [pc, #440]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 8002084:	4b6b      	ldr	r3, [pc, #428]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6a      	ldr	r2, [pc, #424]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a67      	ldr	r2, [pc, #412]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fca2 	bl	80019ec <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fc9e 	bl	80019ec <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e1fa      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xe4>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff fc8e 	bl	80019ec <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fc8a 	bl	80019ec <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1e6      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x10c>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d063      	beq.n	80021ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002102:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800210e:	4b49      	ldr	r3, [pc, #292]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d11c      	bne.n	8002154 <HAL_RCC_OscConfig+0x18c>
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1ba      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4939      	ldr	r1, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	e03a      	b.n	80021ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215c:	4b36      	ldr	r3, [pc, #216]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7ff fc43 	bl	80019ec <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff fc3f 	bl	80019ec <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e19b      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4927      	ldr	r1, [pc, #156]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
 800219c:	e015      	b.n	80021ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fc22 	bl	80019ec <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ac:	f7ff fc1e 	bl	80019ec <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e17a      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d03a      	beq.n	800224c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d019      	beq.n	8002212 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_RCC_OscConfig+0x274>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7ff fc02 	bl	80019ec <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7ff fbfe 	bl	80019ec <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e15a      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800220a:	2001      	movs	r0, #1
 800220c:	f000 fad8 	bl	80027c0 <RCC_Delay>
 8002210:	e01c      	b.n	800224c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_RCC_OscConfig+0x274>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7ff fbe8 	bl	80019ec <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221e:	e00f      	b.n	8002240 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fbe4 	bl	80019ec <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d908      	bls.n	8002240 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e140      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	42420000 	.word	0x42420000
 800223c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b9e      	ldr	r3, [pc, #632]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e9      	bne.n	8002220 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a6 	beq.w	80023a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b97      	ldr	r3, [pc, #604]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10d      	bne.n	8002286 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b94      	ldr	r3, [pc, #592]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a93      	ldr	r2, [pc, #588]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b91      	ldr	r3, [pc, #580]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b8e      	ldr	r3, [pc, #568]	; (80024c0 <HAL_RCC_OscConfig+0x4f8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4b8b      	ldr	r3, [pc, #556]	; (80024c0 <HAL_RCC_OscConfig+0x4f8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a8a      	ldr	r2, [pc, #552]	; (80024c0 <HAL_RCC_OscConfig+0x4f8>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7ff fba5 	bl	80019ec <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7ff fba1 	bl	80019ec <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	; 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e0fd      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b81      	ldr	r3, [pc, #516]	; (80024c0 <HAL_RCC_OscConfig+0x4f8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x312>
 80022cc:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a7a      	ldr	r2, [pc, #488]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	e02d      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x334>
 80022e2:	4b76      	ldr	r3, [pc, #472]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a75      	ldr	r2, [pc, #468]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6213      	str	r3, [r2, #32]
 80022ee:	4b73      	ldr	r3, [pc, #460]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a72      	ldr	r2, [pc, #456]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	e01c      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d10c      	bne.n	800231e <HAL_RCC_OscConfig+0x356>
 8002304:	4b6d      	ldr	r3, [pc, #436]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4a6c      	ldr	r2, [pc, #432]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6213      	str	r3, [r2, #32]
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a69      	ldr	r2, [pc, #420]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	e00b      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 800231e:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a66      	ldr	r2, [pc, #408]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	4b64      	ldr	r3, [pc, #400]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a63      	ldr	r2, [pc, #396]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d015      	beq.n	800236a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff fb55 	bl	80019ec <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7ff fb51 	bl	80019ec <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	; 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0ab      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	4b57      	ldr	r3, [pc, #348]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ee      	beq.n	8002346 <HAL_RCC_OscConfig+0x37e>
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7ff fb3f 	bl	80019ec <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7ff fb3b 	bl	80019ec <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e095      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ee      	bne.n	8002372 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b48      	ldr	r3, [pc, #288]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a47      	ldr	r2, [pc, #284]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8081 	beq.w	80024b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b0:	4b42      	ldr	r3, [pc, #264]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d061      	beq.n	8002480 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d146      	bne.n	8002452 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c4:	4b3f      	ldr	r3, [pc, #252]	; (80024c4 <HAL_RCC_OscConfig+0x4fc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff fb0f 	bl	80019ec <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff fb0b 	bl	80019ec <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e067      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e4:	4b35      	ldr	r3, [pc, #212]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d108      	bne.n	800240c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023fa:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	492d      	ldr	r1, [pc, #180]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a19      	ldr	r1, [r3, #32]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	430b      	orrs	r3, r1
 800241e:	4927      	ldr	r1, [pc, #156]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_RCC_OscConfig+0x4fc>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff fadf 	bl	80019ec <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff fadb 	bl	80019ec <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e037      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x46a>
 8002450:	e02f      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_RCC_OscConfig+0x4fc>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff fac8 	bl	80019ec <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff fac4 	bl	80019ec <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e020      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x498>
 800247e:	e018      	b.n	80024b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e013      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_OscConfig+0x4f4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	429a      	cmp	r2, r3
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40007000 	.word	0x40007000
 80024c4:	42420060 	.word	0x42420060

080024c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0d0      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d910      	bls.n	800250c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b67      	ldr	r3, [pc, #412]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4965      	ldr	r1, [pc, #404]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b63      	ldr	r3, [pc, #396]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0b8      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800252e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800253c:	4b53      	ldr	r3, [pc, #332]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002546:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	494d      	ldr	r1, [pc, #308]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d040      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	4b47      	ldr	r3, [pc, #284]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d115      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07f      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002586:	4b41      	ldr	r3, [pc, #260]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e073      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e06b      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b39      	ldr	r3, [pc, #228]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4936      	ldr	r1, [pc, #216]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b8:	f7ff fa18 	bl	80019ec <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7ff fa14 	bl	80019ec <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e053      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b2d      	ldr	r3, [pc, #180]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e8:	4b27      	ldr	r3, [pc, #156]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d210      	bcs.n	8002618 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f6:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 0207 	bic.w	r2, r3, #7
 80025fe:	4922      	ldr	r1, [pc, #136]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e032      	b.n	800267e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4916      	ldr	r1, [pc, #88]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	490e      	ldr	r1, [pc, #56]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002656:	f000 f821 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800265a:	4602      	mov	r2, r0
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	490a      	ldr	r1, [pc, #40]	; (8002690 <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	5ccb      	ldrb	r3, [r1, r3]
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	4a09      	ldr	r2, [pc, #36]	; (8002694 <HAL_RCC_ClockConfig+0x1cc>)
 8002670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002672:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1d0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff f976 	bl	8001968 <HAL_InitTick>

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40022000 	.word	0x40022000
 800268c:	40021000 	.word	0x40021000
 8002690:	080042c4 	.word	0x080042c4
 8002694:	20000000 	.word	0x20000000
 8002698:	20000060 	.word	0x20000060

0800269c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b490      	push	{r4, r7}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026a2:	4b2a      	ldr	r3, [pc, #168]	; (800274c <HAL_RCC_GetSysClockFreq+0xb0>)
 80026a4:	1d3c      	adds	r4, r7, #4
 80026a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026ac:	f240 2301 	movw	r3, #513	; 0x201
 80026b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	2300      	movs	r3, #0
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f003 030c 	and.w	r3, r3, #12
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d002      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0x40>
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0x46>
 80026da:	e02d      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026dc:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026de:	623b      	str	r3, [r7, #32]
      break;
 80026e0:	e02d      	b.n	800273e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	0c9b      	lsrs	r3, r3, #18
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026ee:	4413      	add	r3, r2
 80026f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002700:	4b13      	ldr	r3, [pc, #76]	; (8002750 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	0c5b      	lsrs	r3, r3, #17
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800270e:	4413      	add	r3, r2
 8002710:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002714:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800271a:	fb02 f203 	mul.w	r2, r2, r3
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
 8002726:	e004      	b.n	8002732 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <HAL_RCC_GetSysClockFreq+0xbc>)
 800272c:	fb02 f303 	mul.w	r3, r2, r3
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	623b      	str	r3, [r7, #32]
      break;
 8002736:	e002      	b.n	800273e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_GetSysClockFreq+0xb8>)
 800273a:	623b      	str	r3, [r7, #32]
      break;
 800273c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273e:	6a3b      	ldr	r3, [r7, #32]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bc90      	pop	{r4, r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	080042b4 	.word	0x080042b4
 8002750:	40021000 	.word	0x40021000
 8002754:	007a1200 	.word	0x007a1200
 8002758:	003d0900 	.word	0x003d0900

0800275c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002760:	4b02      	ldr	r3, [pc, #8]	; (800276c <HAL_RCC_GetHCLKFreq+0x10>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	20000000 	.word	0x20000000

08002770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002774:	f7ff fff2 	bl	800275c <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x20>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	0a1b      	lsrs	r3, r3, #8
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	080042d4 	.word	0x080042d4

08002798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800279c:	f7ff ffde 	bl	800275c <HAL_RCC_GetHCLKFreq>
 80027a0:	4602      	mov	r2, r0
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0adb      	lsrs	r3, r3, #11
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	4903      	ldr	r1, [pc, #12]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40021000 	.word	0x40021000
 80027bc:	080042d4 	.word	0x080042d4

080027c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <RCC_Delay+0x34>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <RCC_Delay+0x38>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	0a5b      	lsrs	r3, r3, #9
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027dc:	bf00      	nop
  }
  while (Delay --);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	60fa      	str	r2, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f9      	bne.n	80027dc <RCC_Delay+0x1c>
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	20000000 	.word	0x20000000
 80027f8:	10624dd3 	.word	0x10624dd3

080027fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e041      	b.n	8002892 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fd fea6 	bl	8000574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3304      	adds	r3, #4
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	f000 fb7e 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d001      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e03a      	b.n	800292a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a18      	ldr	r2, [pc, #96]	; (8002934 <HAL_TIM_Base_Start_IT+0x98>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00e      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x58>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d009      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x58>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <HAL_TIM_Base_Start_IT+0x9c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_TIM_Base_Start_IT+0x58>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a13      	ldr	r2, [pc, #76]	; (800293c <HAL_TIM_Base_Start_IT+0xa0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d111      	bne.n	8002918 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b06      	cmp	r3, #6
 8002904:	d010      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002916:	e007      	b.n	8002928 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40000400 	.word	0x40000400
 800293c:	40000800 	.word	0x40000800

08002940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e041      	b.n	80029d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fd fe28 	bl	80005bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3304      	adds	r3, #4
 800297c:	4619      	mov	r1, r3
 800297e:	4610      	mov	r0, r2
 8002980:	f000 fadc 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d122      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d11b      	bne.n	8002a3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f06f 0202 	mvn.w	r2, #2
 8002a0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fa70 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
 8002a26:	e005      	b.n	8002a34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 fa63 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa72 	bl	8002f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d122      	bne.n	8002a8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d11b      	bne.n	8002a8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f06f 0204 	mvn.w	r2, #4
 8002a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fa46 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
 8002a7a:	e005      	b.n	8002a88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fa39 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa48 	bl	8002f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d122      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d11b      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f06f 0208 	mvn.w	r2, #8
 8002ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fa1c 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
 8002ace:	e005      	b.n	8002adc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fa0f 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fa1e 	bl	8002f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b10      	cmp	r3, #16
 8002aee:	d122      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d11b      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0210 	mvn.w	r2, #16
 8002b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f9f2 	bl	8002f06 <HAL_TIM_IC_CaptureCallback>
 8002b22:	e005      	b.n	8002b30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f9e5 	bl	8002ef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f9f4 	bl	8002f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10e      	bne.n	8002b62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d107      	bne.n	8002b62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f06f 0201 	mvn.w	r2, #1
 8002b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7fd fcc3 	bl	80004e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b80      	cmp	r3, #128	; 0x80
 8002b6e:	d10e      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7a:	2b80      	cmp	r3, #128	; 0x80
 8002b7c:	d107      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fcbe 	bl	800350a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d10e      	bne.n	8002bba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba6:	2b40      	cmp	r3, #64	; 0x40
 8002ba8:	d107      	bne.n	8002bba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f9b8 	bl	8002f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d10e      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d107      	bne.n	8002be6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f06f 0220 	mvn.w	r2, #32
 8002bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fc89 	bl	80034f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e0ac      	b.n	8002d64 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b0c      	cmp	r3, #12
 8002c16:	f200 809f 	bhi.w	8002d58 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002c1a:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c55 	.word	0x08002c55
 8002c24:	08002d59 	.word	0x08002d59
 8002c28:	08002d59 	.word	0x08002d59
 8002c2c:	08002d59 	.word	0x08002d59
 8002c30:	08002c95 	.word	0x08002c95
 8002c34:	08002d59 	.word	0x08002d59
 8002c38:	08002d59 	.word	0x08002d59
 8002c3c:	08002d59 	.word	0x08002d59
 8002c40:	08002cd7 	.word	0x08002cd7
 8002c44:	08002d59 	.word	0x08002d59
 8002c48:	08002d59 	.word	0x08002d59
 8002c4c:	08002d59 	.word	0x08002d59
 8002c50:	08002d17 	.word	0x08002d17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 f9d0 	bl	8003000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0208 	orr.w	r2, r2, #8
 8002c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0204 	bic.w	r2, r2, #4
 8002c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6999      	ldr	r1, [r3, #24]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	691a      	ldr	r2, [r3, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	619a      	str	r2, [r3, #24]
      break;
 8002c92:	e062      	b.n	8002d5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fa16 	bl	80030cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6999      	ldr	r1, [r3, #24]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	021a      	lsls	r2, r3, #8
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	619a      	str	r2, [r3, #24]
      break;
 8002cd4:	e041      	b.n	8002d5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fa5f 	bl	80031a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f042 0208 	orr.w	r2, r2, #8
 8002cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0204 	bic.w	r2, r2, #4
 8002d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69d9      	ldr	r1, [r3, #28]
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	61da      	str	r2, [r3, #28]
      break;
 8002d14:	e021      	b.n	8002d5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 faa9 	bl	8003274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69d9      	ldr	r1, [r3, #28]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	021a      	lsls	r2, r3, #8
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	61da      	str	r2, [r3, #28]
      break;
 8002d56:	e000      	b.n	8002d5a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIM_ConfigClockSource+0x18>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0b3      	b.n	8002eec <HAL_TIM_ConfigClockSource+0x180>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002da2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002daa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbc:	d03e      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0xd0>
 8002dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc2:	f200 8087 	bhi.w	8002ed4 <HAL_TIM_ConfigClockSource+0x168>
 8002dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dca:	f000 8085 	beq.w	8002ed8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd2:	d87f      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x168>
 8002dd4:	2b70      	cmp	r3, #112	; 0x70
 8002dd6:	d01a      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0xa2>
 8002dd8:	2b70      	cmp	r3, #112	; 0x70
 8002dda:	d87b      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x168>
 8002ddc:	2b60      	cmp	r3, #96	; 0x60
 8002dde:	d050      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0x116>
 8002de0:	2b60      	cmp	r3, #96	; 0x60
 8002de2:	d877      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x168>
 8002de4:	2b50      	cmp	r3, #80	; 0x50
 8002de6:	d03c      	beq.n	8002e62 <HAL_TIM_ConfigClockSource+0xf6>
 8002de8:	2b50      	cmp	r3, #80	; 0x50
 8002dea:	d873      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x168>
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d058      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x136>
 8002df0:	2b40      	cmp	r3, #64	; 0x40
 8002df2:	d86f      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x168>
 8002df4:	2b30      	cmp	r3, #48	; 0x30
 8002df6:	d064      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x156>
 8002df8:	2b30      	cmp	r3, #48	; 0x30
 8002dfa:	d86b      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x168>
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d060      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x156>
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d867      	bhi.n	8002ed4 <HAL_TIM_ConfigClockSource+0x168>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05c      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x156>
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d05a      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e0c:	e062      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f000 faee 	bl	80033fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e30:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	609a      	str	r2, [r3, #8]
      break;
 8002e3a:	e04e      	b.n	8002eda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f000 fad7 	bl	80033fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e5e:	609a      	str	r2, [r3, #8]
      break;
 8002e60:	e03b      	b.n	8002eda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f000 fa4e 	bl	8003310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2150      	movs	r1, #80	; 0x50
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 faa5 	bl	80033ca <TIM_ITRx_SetConfig>
      break;
 8002e80:	e02b      	b.n	8002eda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f000 fa6c 	bl	800336c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2160      	movs	r1, #96	; 0x60
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fa95 	bl	80033ca <TIM_ITRx_SetConfig>
      break;
 8002ea0:	e01b      	b.n	8002eda <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 fa2e 	bl	8003310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2140      	movs	r1, #64	; 0x40
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fa85 	bl	80033ca <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e00b      	b.n	8002eda <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f000 fa7c 	bl	80033ca <TIM_ITRx_SetConfig>
        break;
 8002ed2:	e002      	b.n	8002eda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ed4:	bf00      	nop
 8002ed6:	e000      	b.n	8002eda <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ed8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bc80      	pop	{r7}
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a29      	ldr	r2, [pc, #164]	; (8002ff4 <TIM_Base_SetConfig+0xb8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <TIM_Base_SetConfig+0x30>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d007      	beq.n	8002f6c <TIM_Base_SetConfig+0x30>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <TIM_Base_SetConfig+0xbc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d003      	beq.n	8002f6c <TIM_Base_SetConfig+0x30>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a25      	ldr	r2, [pc, #148]	; (8002ffc <TIM_Base_SetConfig+0xc0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d108      	bne.n	8002f7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1c      	ldr	r2, [pc, #112]	; (8002ff4 <TIM_Base_SetConfig+0xb8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00b      	beq.n	8002f9e <TIM_Base_SetConfig+0x62>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8c:	d007      	beq.n	8002f9e <TIM_Base_SetConfig+0x62>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a19      	ldr	r2, [pc, #100]	; (8002ff8 <TIM_Base_SetConfig+0xbc>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d003      	beq.n	8002f9e <TIM_Base_SetConfig+0x62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <TIM_Base_SetConfig+0xc0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d108      	bne.n	8002fb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <TIM_Base_SetConfig+0xb8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d103      	bne.n	8002fe4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	615a      	str	r2, [r3, #20]
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40000800 	.word	0x40000800

08003000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0201 	bic.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f023 0302 	bic.w	r3, r3, #2
 8003048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <TIM_OC1_SetConfig+0xc8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d10c      	bne.n	8003076 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f023 0308 	bic.w	r3, r3, #8
 8003062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <TIM_OC1_SetConfig+0xc8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d111      	bne.n	80030a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800308c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	621a      	str	r2, [r3, #32]
}
 80030bc:	bf00      	nop
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00

080030cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	f023 0210 	bic.w	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0320 	bic.w	r3, r3, #32
 8003116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1d      	ldr	r2, [pc, #116]	; (800319c <TIM_OC2_SetConfig+0xd0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10d      	bne.n	8003148 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003146:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a14      	ldr	r2, [pc, #80]	; (800319c <TIM_OC2_SetConfig+0xd0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d113      	bne.n	8003178 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800315e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685a      	ldr	r2, [r3, #4]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	bf00      	nop
 8003194:	371c      	adds	r7, #28
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	40012c00 	.word	0x40012c00

080031a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0303 	bic.w	r3, r3, #3
 80031d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <TIM_OC3_SetConfig+0xd0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d10d      	bne.n	800321a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a14      	ldr	r2, [pc, #80]	; (8003270 <TIM_OC3_SetConfig+0xd0>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d113      	bne.n	800324a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	621a      	str	r2, [r3, #32]
}
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40012c00 	.word	0x40012c00

08003274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	031b      	lsls	r3, r3, #12
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0f      	ldr	r2, [pc, #60]	; (800330c <TIM_OC4_SetConfig+0x98>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d109      	bne.n	80032e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	019b      	lsls	r3, r3, #6
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	621a      	str	r2, [r3, #32]
}
 8003302:	bf00      	nop
 8003304:	371c      	adds	r7, #28
 8003306:	46bd      	mov	sp, r7
 8003308:	bc80      	pop	{r7}
 800330a:	4770      	bx	lr
 800330c:	40012c00 	.word	0x40012c00

08003310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f023 0201 	bic.w	r2, r3, #1
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800333a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 030a 	bic.w	r3, r3, #10
 800334c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	4313      	orrs	r3, r2
 8003354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	621a      	str	r2, [r3, #32]
}
 8003362:	bf00      	nop
 8003364:	371c      	adds	r7, #28
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f023 0210 	bic.w	r2, r3, #16
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003396:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	031b      	lsls	r3, r3, #12
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	4313      	orrs	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	621a      	str	r2, [r3, #32]
}
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc80      	pop	{r7}
 80033c8:	4770      	bx	lr

080033ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b085      	sub	sp, #20
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f043 0307 	orr.w	r3, r3, #7
 80033ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	609a      	str	r2, [r3, #8]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033fe:	b480      	push	{r7}
 8003400:	b087      	sub	sp, #28
 8003402:	af00      	add	r7, sp, #0
 8003404:	60f8      	str	r0, [r7, #12]
 8003406:	60b9      	str	r1, [r7, #8]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003418:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	021a      	lsls	r2, r3, #8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	431a      	orrs	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	4313      	orrs	r3, r2
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	609a      	str	r2, [r3, #8]
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003450:	2302      	movs	r3, #2
 8003452:	e046      	b.n	80034e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a16      	ldr	r2, [pc, #88]	; (80034ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00e      	beq.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d009      	beq.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a10      	ldr	r2, [pc, #64]	; (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d10c      	bne.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bc80      	pop	{r7}
 80034ea:	4770      	bx	lr
 80034ec:	40012c00 	.word	0x40012c00
 80034f0:	40000400 	.word	0x40000400
 80034f4:	40000800 	.word	0x40000800

080034f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e03f      	b.n	80035ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fd f88a 	bl	800065c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2224      	movs	r2, #36	; 0x24
 800354c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f96d 	bl	8003840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b08a      	sub	sp, #40	; 0x28
 80035ba:	af02      	add	r7, sp, #8
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	d17c      	bne.n	80036d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_UART_Transmit+0x2c>
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e075      	b.n	80036d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_UART_Transmit+0x3e>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e06e      	b.n	80036d2 <HAL_UART_Transmit+0x11c>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2221      	movs	r2, #33	; 0x21
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800360a:	f7fe f9ef 	bl	80019ec <HAL_GetTick>
 800360e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	88fa      	ldrh	r2, [r7, #6]
 800361a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003624:	d108      	bne.n	8003638 <HAL_UART_Transmit+0x82>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d104      	bne.n	8003638 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	e003      	b.n	8003640 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800363c:	2300      	movs	r3, #0
 800363e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003648:	e02a      	b.n	80036a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2200      	movs	r2, #0
 8003652:	2180      	movs	r1, #128	; 0x80
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f870 	bl	800373a <UART_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e036      	b.n	80036d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003678:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	3302      	adds	r3, #2
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	e007      	b.n	8003692 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	3301      	adds	r3, #1
 8003690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1cf      	bne.n	800364a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2200      	movs	r2, #0
 80036b2:	2140      	movs	r1, #64	; 0x40
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f840 	bl	800373a <UART_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e006      	b.n	80036d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	e000      	b.n	80036d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
  }
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3720      	adds	r7, #32
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d11d      	bne.n	8003730 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_Receive_IT+0x26>
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e016      	b.n	8003732 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_UART_Receive_IT+0x38>
 800370e:	2302      	movs	r3, #2
 8003710:	e00f      	b.n	8003732 <HAL_UART_Receive_IT+0x58>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	461a      	mov	r2, r3
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f851 	bl	80037ce <UART_Start_Receive_IT>
 800372c:	4603      	mov	r3, r0
 800372e:	e000      	b.n	8003732 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4613      	mov	r3, r2
 8003748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374a:	e02c      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d028      	beq.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d007      	beq.n	800376a <UART_WaitOnFlagUntilTimeout+0x30>
 800375a:	f7fe f947 	bl	80019ec <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	429a      	cmp	r2, r3
 8003768:	d21d      	bcs.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003778:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e00f      	b.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d0c3      	beq.n	800374c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	4613      	mov	r3, r2
 80037da:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	88fa      	ldrh	r2, [r7, #6]
 80037ec:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2222      	movs	r2, #34	; 0x22
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003812:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0220 	orr.w	r2, r2, #32
 8003832:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800387a:	f023 030c 	bic.w	r3, r3, #12
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	430b      	orrs	r3, r1
 8003886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a2c      	ldr	r2, [pc, #176]	; (8003954 <UART_SetConfig+0x114>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d103      	bne.n	80038b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038a8:	f7fe ff76 	bl	8002798 <HAL_RCC_GetPCLK2Freq>
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	e002      	b.n	80038b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038b0:	f7fe ff5e 	bl	8002770 <HAL_RCC_GetPCLK1Freq>
 80038b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009a      	lsls	r2, r3, #2
 80038c0:	441a      	add	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	4a22      	ldr	r2, [pc, #136]	; (8003958 <UART_SetConfig+0x118>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	0119      	lsls	r1, r3, #4
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	009a      	lsls	r2, r3, #2
 80038e0:	441a      	add	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038ec:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <UART_SetConfig+0x118>)
 80038ee:	fba3 0302 	umull	r0, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2064      	movs	r0, #100	; 0x64
 80038f6:	fb00 f303 	mul.w	r3, r0, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	3332      	adds	r3, #50	; 0x32
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <UART_SetConfig+0x118>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800390c:	4419      	add	r1, r3
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4613      	mov	r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	009a      	lsls	r2, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	fbb2 f2f3 	udiv	r2, r2, r3
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <UART_SetConfig+0x118>)
 8003926:	fba3 0302 	umull	r0, r3, r3, r2
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	2064      	movs	r0, #100	; 0x64
 800392e:	fb00 f303 	mul.w	r3, r0, r3
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	3332      	adds	r3, #50	; 0x32
 8003938:	4a07      	ldr	r2, [pc, #28]	; (8003958 <UART_SetConfig+0x118>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	f003 020f 	and.w	r2, r3, #15
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	440a      	add	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40013800 	.word	0x40013800
 8003958:	51eb851f 	.word	0x51eb851f

0800395c <__errno>:
 800395c:	4b01      	ldr	r3, [pc, #4]	; (8003964 <__errno+0x8>)
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000068 	.word	0x20000068

08003968 <__libc_init_array>:
 8003968:	b570      	push	{r4, r5, r6, lr}
 800396a:	2600      	movs	r6, #0
 800396c:	4d0c      	ldr	r5, [pc, #48]	; (80039a0 <__libc_init_array+0x38>)
 800396e:	4c0d      	ldr	r4, [pc, #52]	; (80039a4 <__libc_init_array+0x3c>)
 8003970:	1b64      	subs	r4, r4, r5
 8003972:	10a4      	asrs	r4, r4, #2
 8003974:	42a6      	cmp	r6, r4
 8003976:	d109      	bne.n	800398c <__libc_init_array+0x24>
 8003978:	f000 fc6c 	bl	8004254 <_init>
 800397c:	2600      	movs	r6, #0
 800397e:	4d0a      	ldr	r5, [pc, #40]	; (80039a8 <__libc_init_array+0x40>)
 8003980:	4c0a      	ldr	r4, [pc, #40]	; (80039ac <__libc_init_array+0x44>)
 8003982:	1b64      	subs	r4, r4, r5
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	42a6      	cmp	r6, r4
 8003988:	d105      	bne.n	8003996 <__libc_init_array+0x2e>
 800398a:	bd70      	pop	{r4, r5, r6, pc}
 800398c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003990:	4798      	blx	r3
 8003992:	3601      	adds	r6, #1
 8003994:	e7ee      	b.n	8003974 <__libc_init_array+0xc>
 8003996:	f855 3b04 	ldr.w	r3, [r5], #4
 800399a:	4798      	blx	r3
 800399c:	3601      	adds	r6, #1
 800399e:	e7f2      	b.n	8003986 <__libc_init_array+0x1e>
 80039a0:	08004310 	.word	0x08004310
 80039a4:	08004310 	.word	0x08004310
 80039a8:	08004310 	.word	0x08004310
 80039ac:	08004314 	.word	0x08004314

080039b0 <malloc>:
 80039b0:	4b02      	ldr	r3, [pc, #8]	; (80039bc <malloc+0xc>)
 80039b2:	4601      	mov	r1, r0
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	f000 b85f 	b.w	8003a78 <_malloc_r>
 80039ba:	bf00      	nop
 80039bc:	20000068 	.word	0x20000068

080039c0 <free>:
 80039c0:	4b02      	ldr	r3, [pc, #8]	; (80039cc <free+0xc>)
 80039c2:	4601      	mov	r1, r0
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	f000 b80b 	b.w	80039e0 <_free_r>
 80039ca:	bf00      	nop
 80039cc:	20000068 	.word	0x20000068

080039d0 <memset>:
 80039d0:	4603      	mov	r3, r0
 80039d2:	4402      	add	r2, r0
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d100      	bne.n	80039da <memset+0xa>
 80039d8:	4770      	bx	lr
 80039da:	f803 1b01 	strb.w	r1, [r3], #1
 80039de:	e7f9      	b.n	80039d4 <memset+0x4>

080039e0 <_free_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4605      	mov	r5, r0
 80039e4:	2900      	cmp	r1, #0
 80039e6:	d043      	beq.n	8003a70 <_free_r+0x90>
 80039e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039ec:	1f0c      	subs	r4, r1, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	bfb8      	it	lt
 80039f2:	18e4      	addlt	r4, r4, r3
 80039f4:	f000 f8ca 	bl	8003b8c <__malloc_lock>
 80039f8:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <_free_r+0x94>)
 80039fa:	6813      	ldr	r3, [r2, #0]
 80039fc:	4610      	mov	r0, r2
 80039fe:	b933      	cbnz	r3, 8003a0e <_free_r+0x2e>
 8003a00:	6063      	str	r3, [r4, #4]
 8003a02:	6014      	str	r4, [r2, #0]
 8003a04:	4628      	mov	r0, r5
 8003a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a0a:	f000 b8c5 	b.w	8003b98 <__malloc_unlock>
 8003a0e:	42a3      	cmp	r3, r4
 8003a10:	d90a      	bls.n	8003a28 <_free_r+0x48>
 8003a12:	6821      	ldr	r1, [r4, #0]
 8003a14:	1862      	adds	r2, r4, r1
 8003a16:	4293      	cmp	r3, r2
 8003a18:	bf01      	itttt	eq
 8003a1a:	681a      	ldreq	r2, [r3, #0]
 8003a1c:	685b      	ldreq	r3, [r3, #4]
 8003a1e:	1852      	addeq	r2, r2, r1
 8003a20:	6022      	streq	r2, [r4, #0]
 8003a22:	6063      	str	r3, [r4, #4]
 8003a24:	6004      	str	r4, [r0, #0]
 8003a26:	e7ed      	b.n	8003a04 <_free_r+0x24>
 8003a28:	461a      	mov	r2, r3
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	b10b      	cbz	r3, 8003a32 <_free_r+0x52>
 8003a2e:	42a3      	cmp	r3, r4
 8003a30:	d9fa      	bls.n	8003a28 <_free_r+0x48>
 8003a32:	6811      	ldr	r1, [r2, #0]
 8003a34:	1850      	adds	r0, r2, r1
 8003a36:	42a0      	cmp	r0, r4
 8003a38:	d10b      	bne.n	8003a52 <_free_r+0x72>
 8003a3a:	6820      	ldr	r0, [r4, #0]
 8003a3c:	4401      	add	r1, r0
 8003a3e:	1850      	adds	r0, r2, r1
 8003a40:	4283      	cmp	r3, r0
 8003a42:	6011      	str	r1, [r2, #0]
 8003a44:	d1de      	bne.n	8003a04 <_free_r+0x24>
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4401      	add	r1, r0
 8003a4c:	6011      	str	r1, [r2, #0]
 8003a4e:	6053      	str	r3, [r2, #4]
 8003a50:	e7d8      	b.n	8003a04 <_free_r+0x24>
 8003a52:	d902      	bls.n	8003a5a <_free_r+0x7a>
 8003a54:	230c      	movs	r3, #12
 8003a56:	602b      	str	r3, [r5, #0]
 8003a58:	e7d4      	b.n	8003a04 <_free_r+0x24>
 8003a5a:	6820      	ldr	r0, [r4, #0]
 8003a5c:	1821      	adds	r1, r4, r0
 8003a5e:	428b      	cmp	r3, r1
 8003a60:	bf01      	itttt	eq
 8003a62:	6819      	ldreq	r1, [r3, #0]
 8003a64:	685b      	ldreq	r3, [r3, #4]
 8003a66:	1809      	addeq	r1, r1, r0
 8003a68:	6021      	streq	r1, [r4, #0]
 8003a6a:	6063      	str	r3, [r4, #4]
 8003a6c:	6054      	str	r4, [r2, #4]
 8003a6e:	e7c9      	b.n	8003a04 <_free_r+0x24>
 8003a70:	bd38      	pop	{r3, r4, r5, pc}
 8003a72:	bf00      	nop
 8003a74:	20000140 	.word	0x20000140

08003a78 <_malloc_r>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	1ccd      	adds	r5, r1, #3
 8003a7c:	f025 0503 	bic.w	r5, r5, #3
 8003a80:	3508      	adds	r5, #8
 8003a82:	2d0c      	cmp	r5, #12
 8003a84:	bf38      	it	cc
 8003a86:	250c      	movcc	r5, #12
 8003a88:	2d00      	cmp	r5, #0
 8003a8a:	4606      	mov	r6, r0
 8003a8c:	db01      	blt.n	8003a92 <_malloc_r+0x1a>
 8003a8e:	42a9      	cmp	r1, r5
 8003a90:	d903      	bls.n	8003a9a <_malloc_r+0x22>
 8003a92:	230c      	movs	r3, #12
 8003a94:	6033      	str	r3, [r6, #0]
 8003a96:	2000      	movs	r0, #0
 8003a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a9a:	f000 f877 	bl	8003b8c <__malloc_lock>
 8003a9e:	4921      	ldr	r1, [pc, #132]	; (8003b24 <_malloc_r+0xac>)
 8003aa0:	680a      	ldr	r2, [r1, #0]
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	b99c      	cbnz	r4, 8003ace <_malloc_r+0x56>
 8003aa6:	4f20      	ldr	r7, [pc, #128]	; (8003b28 <_malloc_r+0xb0>)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	b923      	cbnz	r3, 8003ab6 <_malloc_r+0x3e>
 8003aac:	4621      	mov	r1, r4
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f000 f83c 	bl	8003b2c <_sbrk_r>
 8003ab4:	6038      	str	r0, [r7, #0]
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f000 f837 	bl	8003b2c <_sbrk_r>
 8003abe:	1c43      	adds	r3, r0, #1
 8003ac0:	d123      	bne.n	8003b0a <_malloc_r+0x92>
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	4630      	mov	r0, r6
 8003ac6:	6033      	str	r3, [r6, #0]
 8003ac8:	f000 f866 	bl	8003b98 <__malloc_unlock>
 8003acc:	e7e3      	b.n	8003a96 <_malloc_r+0x1e>
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	1b5b      	subs	r3, r3, r5
 8003ad2:	d417      	bmi.n	8003b04 <_malloc_r+0x8c>
 8003ad4:	2b0b      	cmp	r3, #11
 8003ad6:	d903      	bls.n	8003ae0 <_malloc_r+0x68>
 8003ad8:	6023      	str	r3, [r4, #0]
 8003ada:	441c      	add	r4, r3
 8003adc:	6025      	str	r5, [r4, #0]
 8003ade:	e004      	b.n	8003aea <_malloc_r+0x72>
 8003ae0:	6863      	ldr	r3, [r4, #4]
 8003ae2:	42a2      	cmp	r2, r4
 8003ae4:	bf0c      	ite	eq
 8003ae6:	600b      	streq	r3, [r1, #0]
 8003ae8:	6053      	strne	r3, [r2, #4]
 8003aea:	4630      	mov	r0, r6
 8003aec:	f000 f854 	bl	8003b98 <__malloc_unlock>
 8003af0:	f104 000b 	add.w	r0, r4, #11
 8003af4:	1d23      	adds	r3, r4, #4
 8003af6:	f020 0007 	bic.w	r0, r0, #7
 8003afa:	1ac2      	subs	r2, r0, r3
 8003afc:	d0cc      	beq.n	8003a98 <_malloc_r+0x20>
 8003afe:	1a1b      	subs	r3, r3, r0
 8003b00:	50a3      	str	r3, [r4, r2]
 8003b02:	e7c9      	b.n	8003a98 <_malloc_r+0x20>
 8003b04:	4622      	mov	r2, r4
 8003b06:	6864      	ldr	r4, [r4, #4]
 8003b08:	e7cc      	b.n	8003aa4 <_malloc_r+0x2c>
 8003b0a:	1cc4      	adds	r4, r0, #3
 8003b0c:	f024 0403 	bic.w	r4, r4, #3
 8003b10:	42a0      	cmp	r0, r4
 8003b12:	d0e3      	beq.n	8003adc <_malloc_r+0x64>
 8003b14:	1a21      	subs	r1, r4, r0
 8003b16:	4630      	mov	r0, r6
 8003b18:	f000 f808 	bl	8003b2c <_sbrk_r>
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d1dd      	bne.n	8003adc <_malloc_r+0x64>
 8003b20:	e7cf      	b.n	8003ac2 <_malloc_r+0x4a>
 8003b22:	bf00      	nop
 8003b24:	20000140 	.word	0x20000140
 8003b28:	20000144 	.word	0x20000144

08003b2c <_sbrk_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	2300      	movs	r3, #0
 8003b30:	4d05      	ldr	r5, [pc, #20]	; (8003b48 <_sbrk_r+0x1c>)
 8003b32:	4604      	mov	r4, r0
 8003b34:	4608      	mov	r0, r1
 8003b36:	602b      	str	r3, [r5, #0]
 8003b38:	f7fc fe08 	bl	800074c <_sbrk>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d102      	bne.n	8003b46 <_sbrk_r+0x1a>
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	b103      	cbz	r3, 8003b46 <_sbrk_r+0x1a>
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
 8003b48:	20000260 	.word	0x20000260

08003b4c <siprintf>:
 8003b4c:	b40e      	push	{r1, r2, r3}
 8003b4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b52:	b500      	push	{lr}
 8003b54:	b09c      	sub	sp, #112	; 0x70
 8003b56:	ab1d      	add	r3, sp, #116	; 0x74
 8003b58:	9002      	str	r0, [sp, #8]
 8003b5a:	9006      	str	r0, [sp, #24]
 8003b5c:	9107      	str	r1, [sp, #28]
 8003b5e:	9104      	str	r1, [sp, #16]
 8003b60:	4808      	ldr	r0, [pc, #32]	; (8003b84 <siprintf+0x38>)
 8003b62:	4909      	ldr	r1, [pc, #36]	; (8003b88 <siprintf+0x3c>)
 8003b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b68:	9105      	str	r1, [sp, #20]
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	a902      	add	r1, sp, #8
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	f000 f874 	bl	8003c5c <_svfiprintf_r>
 8003b74:	2200      	movs	r2, #0
 8003b76:	9b02      	ldr	r3, [sp, #8]
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	b01c      	add	sp, #112	; 0x70
 8003b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b80:	b003      	add	sp, #12
 8003b82:	4770      	bx	lr
 8003b84:	20000068 	.word	0x20000068
 8003b88:	ffff0208 	.word	0xffff0208

08003b8c <__malloc_lock>:
 8003b8c:	4801      	ldr	r0, [pc, #4]	; (8003b94 <__malloc_lock+0x8>)
 8003b8e:	f000 bafb 	b.w	8004188 <__retarget_lock_acquire_recursive>
 8003b92:	bf00      	nop
 8003b94:	20000268 	.word	0x20000268

08003b98 <__malloc_unlock>:
 8003b98:	4801      	ldr	r0, [pc, #4]	; (8003ba0 <__malloc_unlock+0x8>)
 8003b9a:	f000 baf6 	b.w	800418a <__retarget_lock_release_recursive>
 8003b9e:	bf00      	nop
 8003ba0:	20000268 	.word	0x20000268

08003ba4 <__ssputs_r>:
 8003ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba8:	688e      	ldr	r6, [r1, #8]
 8003baa:	4682      	mov	sl, r0
 8003bac:	429e      	cmp	r6, r3
 8003bae:	460c      	mov	r4, r1
 8003bb0:	4690      	mov	r8, r2
 8003bb2:	461f      	mov	r7, r3
 8003bb4:	d838      	bhi.n	8003c28 <__ssputs_r+0x84>
 8003bb6:	898a      	ldrh	r2, [r1, #12]
 8003bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bbc:	d032      	beq.n	8003c24 <__ssputs_r+0x80>
 8003bbe:	6825      	ldr	r5, [r4, #0]
 8003bc0:	6909      	ldr	r1, [r1, #16]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	eba5 0901 	sub.w	r9, r5, r1
 8003bc8:	6965      	ldr	r5, [r4, #20]
 8003bca:	444b      	add	r3, r9
 8003bcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bd4:	106d      	asrs	r5, r5, #1
 8003bd6:	429d      	cmp	r5, r3
 8003bd8:	bf38      	it	cc
 8003bda:	461d      	movcc	r5, r3
 8003bdc:	0553      	lsls	r3, r2, #21
 8003bde:	d531      	bpl.n	8003c44 <__ssputs_r+0xa0>
 8003be0:	4629      	mov	r1, r5
 8003be2:	f7ff ff49 	bl	8003a78 <_malloc_r>
 8003be6:	4606      	mov	r6, r0
 8003be8:	b950      	cbnz	r0, 8003c00 <__ssputs_r+0x5c>
 8003bea:	230c      	movs	r3, #12
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	f8ca 3000 	str.w	r3, [sl]
 8003bf4:	89a3      	ldrh	r3, [r4, #12]
 8003bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c00:	464a      	mov	r2, r9
 8003c02:	6921      	ldr	r1, [r4, #16]
 8003c04:	f000 fad0 	bl	80041a8 <memcpy>
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c12:	81a3      	strh	r3, [r4, #12]
 8003c14:	6126      	str	r6, [r4, #16]
 8003c16:	444e      	add	r6, r9
 8003c18:	6026      	str	r6, [r4, #0]
 8003c1a:	463e      	mov	r6, r7
 8003c1c:	6165      	str	r5, [r4, #20]
 8003c1e:	eba5 0509 	sub.w	r5, r5, r9
 8003c22:	60a5      	str	r5, [r4, #8]
 8003c24:	42be      	cmp	r6, r7
 8003c26:	d900      	bls.n	8003c2a <__ssputs_r+0x86>
 8003c28:	463e      	mov	r6, r7
 8003c2a:	4632      	mov	r2, r6
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	6820      	ldr	r0, [r4, #0]
 8003c30:	f000 fac8 	bl	80041c4 <memmove>
 8003c34:	68a3      	ldr	r3, [r4, #8]
 8003c36:	6822      	ldr	r2, [r4, #0]
 8003c38:	1b9b      	subs	r3, r3, r6
 8003c3a:	4432      	add	r2, r6
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	60a3      	str	r3, [r4, #8]
 8003c40:	6022      	str	r2, [r4, #0]
 8003c42:	e7db      	b.n	8003bfc <__ssputs_r+0x58>
 8003c44:	462a      	mov	r2, r5
 8003c46:	f000 fad7 	bl	80041f8 <_realloc_r>
 8003c4a:	4606      	mov	r6, r0
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d1e1      	bne.n	8003c14 <__ssputs_r+0x70>
 8003c50:	4650      	mov	r0, sl
 8003c52:	6921      	ldr	r1, [r4, #16]
 8003c54:	f7ff fec4 	bl	80039e0 <_free_r>
 8003c58:	e7c7      	b.n	8003bea <__ssputs_r+0x46>
	...

08003c5c <_svfiprintf_r>:
 8003c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c60:	4698      	mov	r8, r3
 8003c62:	898b      	ldrh	r3, [r1, #12]
 8003c64:	4607      	mov	r7, r0
 8003c66:	061b      	lsls	r3, r3, #24
 8003c68:	460d      	mov	r5, r1
 8003c6a:	4614      	mov	r4, r2
 8003c6c:	b09d      	sub	sp, #116	; 0x74
 8003c6e:	d50e      	bpl.n	8003c8e <_svfiprintf_r+0x32>
 8003c70:	690b      	ldr	r3, [r1, #16]
 8003c72:	b963      	cbnz	r3, 8003c8e <_svfiprintf_r+0x32>
 8003c74:	2140      	movs	r1, #64	; 0x40
 8003c76:	f7ff feff 	bl	8003a78 <_malloc_r>
 8003c7a:	6028      	str	r0, [r5, #0]
 8003c7c:	6128      	str	r0, [r5, #16]
 8003c7e:	b920      	cbnz	r0, 8003c8a <_svfiprintf_r+0x2e>
 8003c80:	230c      	movs	r3, #12
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295
 8003c88:	e0d1      	b.n	8003e2e <_svfiprintf_r+0x1d2>
 8003c8a:	2340      	movs	r3, #64	; 0x40
 8003c8c:	616b      	str	r3, [r5, #20]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	9309      	str	r3, [sp, #36]	; 0x24
 8003c92:	2320      	movs	r3, #32
 8003c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c98:	2330      	movs	r3, #48	; 0x30
 8003c9a:	f04f 0901 	mov.w	r9, #1
 8003c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ca2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e48 <_svfiprintf_r+0x1ec>
 8003ca6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003caa:	4623      	mov	r3, r4
 8003cac:	469a      	mov	sl, r3
 8003cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cb2:	b10a      	cbz	r2, 8003cb8 <_svfiprintf_r+0x5c>
 8003cb4:	2a25      	cmp	r2, #37	; 0x25
 8003cb6:	d1f9      	bne.n	8003cac <_svfiprintf_r+0x50>
 8003cb8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cbc:	d00b      	beq.n	8003cd6 <_svfiprintf_r+0x7a>
 8003cbe:	465b      	mov	r3, fp
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	f7ff ff6d 	bl	8003ba4 <__ssputs_r>
 8003cca:	3001      	adds	r0, #1
 8003ccc:	f000 80aa 	beq.w	8003e24 <_svfiprintf_r+0x1c8>
 8003cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cd2:	445a      	add	r2, fp
 8003cd4:	9209      	str	r2, [sp, #36]	; 0x24
 8003cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80a2 	beq.w	8003e24 <_svfiprintf_r+0x1c8>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cea:	f10a 0a01 	add.w	sl, sl, #1
 8003cee:	9304      	str	r3, [sp, #16]
 8003cf0:	9307      	str	r3, [sp, #28]
 8003cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8003cf8:	4654      	mov	r4, sl
 8003cfa:	2205      	movs	r2, #5
 8003cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d00:	4851      	ldr	r0, [pc, #324]	; (8003e48 <_svfiprintf_r+0x1ec>)
 8003d02:	f000 fa43 	bl	800418c <memchr>
 8003d06:	9a04      	ldr	r2, [sp, #16]
 8003d08:	b9d8      	cbnz	r0, 8003d42 <_svfiprintf_r+0xe6>
 8003d0a:	06d0      	lsls	r0, r2, #27
 8003d0c:	bf44      	itt	mi
 8003d0e:	2320      	movmi	r3, #32
 8003d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d14:	0711      	lsls	r1, r2, #28
 8003d16:	bf44      	itt	mi
 8003d18:	232b      	movmi	r3, #43	; 0x2b
 8003d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d22:	2b2a      	cmp	r3, #42	; 0x2a
 8003d24:	d015      	beq.n	8003d52 <_svfiprintf_r+0xf6>
 8003d26:	4654      	mov	r4, sl
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f04f 0c0a 	mov.w	ip, #10
 8003d2e:	9a07      	ldr	r2, [sp, #28]
 8003d30:	4621      	mov	r1, r4
 8003d32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d36:	3b30      	subs	r3, #48	; 0x30
 8003d38:	2b09      	cmp	r3, #9
 8003d3a:	d94e      	bls.n	8003dda <_svfiprintf_r+0x17e>
 8003d3c:	b1b0      	cbz	r0, 8003d6c <_svfiprintf_r+0x110>
 8003d3e:	9207      	str	r2, [sp, #28]
 8003d40:	e014      	b.n	8003d6c <_svfiprintf_r+0x110>
 8003d42:	eba0 0308 	sub.w	r3, r0, r8
 8003d46:	fa09 f303 	lsl.w	r3, r9, r3
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	46a2      	mov	sl, r4
 8003d4e:	9304      	str	r3, [sp, #16]
 8003d50:	e7d2      	b.n	8003cf8 <_svfiprintf_r+0x9c>
 8003d52:	9b03      	ldr	r3, [sp, #12]
 8003d54:	1d19      	adds	r1, r3, #4
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	9103      	str	r1, [sp, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfbb      	ittet	lt
 8003d5e:	425b      	neglt	r3, r3
 8003d60:	f042 0202 	orrlt.w	r2, r2, #2
 8003d64:	9307      	strge	r3, [sp, #28]
 8003d66:	9307      	strlt	r3, [sp, #28]
 8003d68:	bfb8      	it	lt
 8003d6a:	9204      	strlt	r2, [sp, #16]
 8003d6c:	7823      	ldrb	r3, [r4, #0]
 8003d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8003d70:	d10c      	bne.n	8003d8c <_svfiprintf_r+0x130>
 8003d72:	7863      	ldrb	r3, [r4, #1]
 8003d74:	2b2a      	cmp	r3, #42	; 0x2a
 8003d76:	d135      	bne.n	8003de4 <_svfiprintf_r+0x188>
 8003d78:	9b03      	ldr	r3, [sp, #12]
 8003d7a:	3402      	adds	r4, #2
 8003d7c:	1d1a      	adds	r2, r3, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	9203      	str	r2, [sp, #12]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bfb8      	it	lt
 8003d86:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d8a:	9305      	str	r3, [sp, #20]
 8003d8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e58 <_svfiprintf_r+0x1fc>
 8003d90:	2203      	movs	r2, #3
 8003d92:	4650      	mov	r0, sl
 8003d94:	7821      	ldrb	r1, [r4, #0]
 8003d96:	f000 f9f9 	bl	800418c <memchr>
 8003d9a:	b140      	cbz	r0, 8003dae <_svfiprintf_r+0x152>
 8003d9c:	2340      	movs	r3, #64	; 0x40
 8003d9e:	eba0 000a 	sub.w	r0, r0, sl
 8003da2:	fa03 f000 	lsl.w	r0, r3, r0
 8003da6:	9b04      	ldr	r3, [sp, #16]
 8003da8:	3401      	adds	r4, #1
 8003daa:	4303      	orrs	r3, r0
 8003dac:	9304      	str	r3, [sp, #16]
 8003dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003db2:	2206      	movs	r2, #6
 8003db4:	4825      	ldr	r0, [pc, #148]	; (8003e4c <_svfiprintf_r+0x1f0>)
 8003db6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dba:	f000 f9e7 	bl	800418c <memchr>
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	d038      	beq.n	8003e34 <_svfiprintf_r+0x1d8>
 8003dc2:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <_svfiprintf_r+0x1f4>)
 8003dc4:	bb1b      	cbnz	r3, 8003e0e <_svfiprintf_r+0x1b2>
 8003dc6:	9b03      	ldr	r3, [sp, #12]
 8003dc8:	3307      	adds	r3, #7
 8003dca:	f023 0307 	bic.w	r3, r3, #7
 8003dce:	3308      	adds	r3, #8
 8003dd0:	9303      	str	r3, [sp, #12]
 8003dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dd4:	4433      	add	r3, r6
 8003dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003dd8:	e767      	b.n	8003caa <_svfiprintf_r+0x4e>
 8003dda:	460c      	mov	r4, r1
 8003ddc:	2001      	movs	r0, #1
 8003dde:	fb0c 3202 	mla	r2, ip, r2, r3
 8003de2:	e7a5      	b.n	8003d30 <_svfiprintf_r+0xd4>
 8003de4:	2300      	movs	r3, #0
 8003de6:	f04f 0c0a 	mov.w	ip, #10
 8003dea:	4619      	mov	r1, r3
 8003dec:	3401      	adds	r4, #1
 8003dee:	9305      	str	r3, [sp, #20]
 8003df0:	4620      	mov	r0, r4
 8003df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003df6:	3a30      	subs	r2, #48	; 0x30
 8003df8:	2a09      	cmp	r2, #9
 8003dfa:	d903      	bls.n	8003e04 <_svfiprintf_r+0x1a8>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0c5      	beq.n	8003d8c <_svfiprintf_r+0x130>
 8003e00:	9105      	str	r1, [sp, #20]
 8003e02:	e7c3      	b.n	8003d8c <_svfiprintf_r+0x130>
 8003e04:	4604      	mov	r4, r0
 8003e06:	2301      	movs	r3, #1
 8003e08:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e0c:	e7f0      	b.n	8003df0 <_svfiprintf_r+0x194>
 8003e0e:	ab03      	add	r3, sp, #12
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	462a      	mov	r2, r5
 8003e14:	4638      	mov	r0, r7
 8003e16:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <_svfiprintf_r+0x1f8>)
 8003e18:	a904      	add	r1, sp, #16
 8003e1a:	f3af 8000 	nop.w
 8003e1e:	1c42      	adds	r2, r0, #1
 8003e20:	4606      	mov	r6, r0
 8003e22:	d1d6      	bne.n	8003dd2 <_svfiprintf_r+0x176>
 8003e24:	89ab      	ldrh	r3, [r5, #12]
 8003e26:	065b      	lsls	r3, r3, #25
 8003e28:	f53f af2c 	bmi.w	8003c84 <_svfiprintf_r+0x28>
 8003e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e2e:	b01d      	add	sp, #116	; 0x74
 8003e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e34:	ab03      	add	r3, sp, #12
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	462a      	mov	r2, r5
 8003e3a:	4638      	mov	r0, r7
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <_svfiprintf_r+0x1f8>)
 8003e3e:	a904      	add	r1, sp, #16
 8003e40:	f000 f87c 	bl	8003f3c <_printf_i>
 8003e44:	e7eb      	b.n	8003e1e <_svfiprintf_r+0x1c2>
 8003e46:	bf00      	nop
 8003e48:	080042dc 	.word	0x080042dc
 8003e4c:	080042e6 	.word	0x080042e6
 8003e50:	00000000 	.word	0x00000000
 8003e54:	08003ba5 	.word	0x08003ba5
 8003e58:	080042e2 	.word	0x080042e2

08003e5c <_printf_common>:
 8003e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e60:	4616      	mov	r6, r2
 8003e62:	4699      	mov	r9, r3
 8003e64:	688a      	ldr	r2, [r1, #8]
 8003e66:	690b      	ldr	r3, [r1, #16]
 8003e68:	4607      	mov	r7, r0
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	bfb8      	it	lt
 8003e6e:	4613      	movlt	r3, r2
 8003e70:	6033      	str	r3, [r6, #0]
 8003e72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e76:	460c      	mov	r4, r1
 8003e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e7c:	b10a      	cbz	r2, 8003e82 <_printf_common+0x26>
 8003e7e:	3301      	adds	r3, #1
 8003e80:	6033      	str	r3, [r6, #0]
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	0699      	lsls	r1, r3, #26
 8003e86:	bf42      	ittt	mi
 8003e88:	6833      	ldrmi	r3, [r6, #0]
 8003e8a:	3302      	addmi	r3, #2
 8003e8c:	6033      	strmi	r3, [r6, #0]
 8003e8e:	6825      	ldr	r5, [r4, #0]
 8003e90:	f015 0506 	ands.w	r5, r5, #6
 8003e94:	d106      	bne.n	8003ea4 <_printf_common+0x48>
 8003e96:	f104 0a19 	add.w	sl, r4, #25
 8003e9a:	68e3      	ldr	r3, [r4, #12]
 8003e9c:	6832      	ldr	r2, [r6, #0]
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	42ab      	cmp	r3, r5
 8003ea2:	dc28      	bgt.n	8003ef6 <_printf_common+0x9a>
 8003ea4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ea8:	1e13      	subs	r3, r2, #0
 8003eaa:	6822      	ldr	r2, [r4, #0]
 8003eac:	bf18      	it	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	0692      	lsls	r2, r2, #26
 8003eb2:	d42d      	bmi.n	8003f10 <_printf_common+0xb4>
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	4638      	mov	r0, r7
 8003eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ebc:	47c0      	blx	r8
 8003ebe:	3001      	adds	r0, #1
 8003ec0:	d020      	beq.n	8003f04 <_printf_common+0xa8>
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	68e5      	ldr	r5, [r4, #12]
 8003ec6:	f003 0306 	and.w	r3, r3, #6
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	bf18      	it	ne
 8003ece:	2500      	movne	r5, #0
 8003ed0:	6832      	ldr	r2, [r6, #0]
 8003ed2:	f04f 0600 	mov.w	r6, #0
 8003ed6:	68a3      	ldr	r3, [r4, #8]
 8003ed8:	bf08      	it	eq
 8003eda:	1aad      	subeq	r5, r5, r2
 8003edc:	6922      	ldr	r2, [r4, #16]
 8003ede:	bf08      	it	eq
 8003ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	bfc4      	itt	gt
 8003ee8:	1a9b      	subgt	r3, r3, r2
 8003eea:	18ed      	addgt	r5, r5, r3
 8003eec:	341a      	adds	r4, #26
 8003eee:	42b5      	cmp	r5, r6
 8003ef0:	d11a      	bne.n	8003f28 <_printf_common+0xcc>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	e008      	b.n	8003f08 <_printf_common+0xac>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	4652      	mov	r2, sl
 8003efa:	4649      	mov	r1, r9
 8003efc:	4638      	mov	r0, r7
 8003efe:	47c0      	blx	r8
 8003f00:	3001      	adds	r0, #1
 8003f02:	d103      	bne.n	8003f0c <_printf_common+0xb0>
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f0c:	3501      	adds	r5, #1
 8003f0e:	e7c4      	b.n	8003e9a <_printf_common+0x3e>
 8003f10:	2030      	movs	r0, #48	; 0x30
 8003f12:	18e1      	adds	r1, r4, r3
 8003f14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f1e:	4422      	add	r2, r4
 8003f20:	3302      	adds	r3, #2
 8003f22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f26:	e7c5      	b.n	8003eb4 <_printf_common+0x58>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	4622      	mov	r2, r4
 8003f2c:	4649      	mov	r1, r9
 8003f2e:	4638      	mov	r0, r7
 8003f30:	47c0      	blx	r8
 8003f32:	3001      	adds	r0, #1
 8003f34:	d0e6      	beq.n	8003f04 <_printf_common+0xa8>
 8003f36:	3601      	adds	r6, #1
 8003f38:	e7d9      	b.n	8003eee <_printf_common+0x92>
	...

08003f3c <_printf_i>:
 8003f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f40:	460c      	mov	r4, r1
 8003f42:	7e27      	ldrb	r7, [r4, #24]
 8003f44:	4691      	mov	r9, r2
 8003f46:	2f78      	cmp	r7, #120	; 0x78
 8003f48:	4680      	mov	r8, r0
 8003f4a:	469a      	mov	sl, r3
 8003f4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f52:	d807      	bhi.n	8003f64 <_printf_i+0x28>
 8003f54:	2f62      	cmp	r7, #98	; 0x62
 8003f56:	d80a      	bhi.n	8003f6e <_printf_i+0x32>
 8003f58:	2f00      	cmp	r7, #0
 8003f5a:	f000 80d9 	beq.w	8004110 <_printf_i+0x1d4>
 8003f5e:	2f58      	cmp	r7, #88	; 0x58
 8003f60:	f000 80a4 	beq.w	80040ac <_printf_i+0x170>
 8003f64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f6c:	e03a      	b.n	8003fe4 <_printf_i+0xa8>
 8003f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f72:	2b15      	cmp	r3, #21
 8003f74:	d8f6      	bhi.n	8003f64 <_printf_i+0x28>
 8003f76:	a001      	add	r0, pc, #4	; (adr r0, 8003f7c <_printf_i+0x40>)
 8003f78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f7c:	08003fd5 	.word	0x08003fd5
 8003f80:	08003fe9 	.word	0x08003fe9
 8003f84:	08003f65 	.word	0x08003f65
 8003f88:	08003f65 	.word	0x08003f65
 8003f8c:	08003f65 	.word	0x08003f65
 8003f90:	08003f65 	.word	0x08003f65
 8003f94:	08003fe9 	.word	0x08003fe9
 8003f98:	08003f65 	.word	0x08003f65
 8003f9c:	08003f65 	.word	0x08003f65
 8003fa0:	08003f65 	.word	0x08003f65
 8003fa4:	08003f65 	.word	0x08003f65
 8003fa8:	080040f7 	.word	0x080040f7
 8003fac:	08004019 	.word	0x08004019
 8003fb0:	080040d9 	.word	0x080040d9
 8003fb4:	08003f65 	.word	0x08003f65
 8003fb8:	08003f65 	.word	0x08003f65
 8003fbc:	08004119 	.word	0x08004119
 8003fc0:	08003f65 	.word	0x08003f65
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08003f65 	.word	0x08003f65
 8003fcc:	08003f65 	.word	0x08003f65
 8003fd0:	080040e1 	.word	0x080040e1
 8003fd4:	680b      	ldr	r3, [r1, #0]
 8003fd6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fda:	1d1a      	adds	r2, r3, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	600a      	str	r2, [r1, #0]
 8003fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0a4      	b.n	8004132 <_printf_i+0x1f6>
 8003fe8:	6825      	ldr	r5, [r4, #0]
 8003fea:	6808      	ldr	r0, [r1, #0]
 8003fec:	062e      	lsls	r6, r5, #24
 8003fee:	f100 0304 	add.w	r3, r0, #4
 8003ff2:	d50a      	bpl.n	800400a <_printf_i+0xce>
 8003ff4:	6805      	ldr	r5, [r0, #0]
 8003ff6:	600b      	str	r3, [r1, #0]
 8003ff8:	2d00      	cmp	r5, #0
 8003ffa:	da03      	bge.n	8004004 <_printf_i+0xc8>
 8003ffc:	232d      	movs	r3, #45	; 0x2d
 8003ffe:	426d      	negs	r5, r5
 8004000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004004:	230a      	movs	r3, #10
 8004006:	485e      	ldr	r0, [pc, #376]	; (8004180 <_printf_i+0x244>)
 8004008:	e019      	b.n	800403e <_printf_i+0x102>
 800400a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800400e:	6805      	ldr	r5, [r0, #0]
 8004010:	600b      	str	r3, [r1, #0]
 8004012:	bf18      	it	ne
 8004014:	b22d      	sxthne	r5, r5
 8004016:	e7ef      	b.n	8003ff8 <_printf_i+0xbc>
 8004018:	680b      	ldr	r3, [r1, #0]
 800401a:	6825      	ldr	r5, [r4, #0]
 800401c:	1d18      	adds	r0, r3, #4
 800401e:	6008      	str	r0, [r1, #0]
 8004020:	0628      	lsls	r0, r5, #24
 8004022:	d501      	bpl.n	8004028 <_printf_i+0xec>
 8004024:	681d      	ldr	r5, [r3, #0]
 8004026:	e002      	b.n	800402e <_printf_i+0xf2>
 8004028:	0669      	lsls	r1, r5, #25
 800402a:	d5fb      	bpl.n	8004024 <_printf_i+0xe8>
 800402c:	881d      	ldrh	r5, [r3, #0]
 800402e:	2f6f      	cmp	r7, #111	; 0x6f
 8004030:	bf0c      	ite	eq
 8004032:	2308      	moveq	r3, #8
 8004034:	230a      	movne	r3, #10
 8004036:	4852      	ldr	r0, [pc, #328]	; (8004180 <_printf_i+0x244>)
 8004038:	2100      	movs	r1, #0
 800403a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800403e:	6866      	ldr	r6, [r4, #4]
 8004040:	2e00      	cmp	r6, #0
 8004042:	bfa8      	it	ge
 8004044:	6821      	ldrge	r1, [r4, #0]
 8004046:	60a6      	str	r6, [r4, #8]
 8004048:	bfa4      	itt	ge
 800404a:	f021 0104 	bicge.w	r1, r1, #4
 800404e:	6021      	strge	r1, [r4, #0]
 8004050:	b90d      	cbnz	r5, 8004056 <_printf_i+0x11a>
 8004052:	2e00      	cmp	r6, #0
 8004054:	d04d      	beq.n	80040f2 <_printf_i+0x1b6>
 8004056:	4616      	mov	r6, r2
 8004058:	fbb5 f1f3 	udiv	r1, r5, r3
 800405c:	fb03 5711 	mls	r7, r3, r1, r5
 8004060:	5dc7      	ldrb	r7, [r0, r7]
 8004062:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004066:	462f      	mov	r7, r5
 8004068:	42bb      	cmp	r3, r7
 800406a:	460d      	mov	r5, r1
 800406c:	d9f4      	bls.n	8004058 <_printf_i+0x11c>
 800406e:	2b08      	cmp	r3, #8
 8004070:	d10b      	bne.n	800408a <_printf_i+0x14e>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	07df      	lsls	r7, r3, #31
 8004076:	d508      	bpl.n	800408a <_printf_i+0x14e>
 8004078:	6923      	ldr	r3, [r4, #16]
 800407a:	6861      	ldr	r1, [r4, #4]
 800407c:	4299      	cmp	r1, r3
 800407e:	bfde      	ittt	le
 8004080:	2330      	movle	r3, #48	; 0x30
 8004082:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004086:	f106 36ff 	addle.w	r6, r6, #4294967295
 800408a:	1b92      	subs	r2, r2, r6
 800408c:	6122      	str	r2, [r4, #16]
 800408e:	464b      	mov	r3, r9
 8004090:	4621      	mov	r1, r4
 8004092:	4640      	mov	r0, r8
 8004094:	f8cd a000 	str.w	sl, [sp]
 8004098:	aa03      	add	r2, sp, #12
 800409a:	f7ff fedf 	bl	8003e5c <_printf_common>
 800409e:	3001      	adds	r0, #1
 80040a0:	d14c      	bne.n	800413c <_printf_i+0x200>
 80040a2:	f04f 30ff 	mov.w	r0, #4294967295
 80040a6:	b004      	add	sp, #16
 80040a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ac:	4834      	ldr	r0, [pc, #208]	; (8004180 <_printf_i+0x244>)
 80040ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80040b2:	680e      	ldr	r6, [r1, #0]
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80040ba:	061f      	lsls	r7, r3, #24
 80040bc:	600e      	str	r6, [r1, #0]
 80040be:	d514      	bpl.n	80040ea <_printf_i+0x1ae>
 80040c0:	07d9      	lsls	r1, r3, #31
 80040c2:	bf44      	itt	mi
 80040c4:	f043 0320 	orrmi.w	r3, r3, #32
 80040c8:	6023      	strmi	r3, [r4, #0]
 80040ca:	b91d      	cbnz	r5, 80040d4 <_printf_i+0x198>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	f023 0320 	bic.w	r3, r3, #32
 80040d2:	6023      	str	r3, [r4, #0]
 80040d4:	2310      	movs	r3, #16
 80040d6:	e7af      	b.n	8004038 <_printf_i+0xfc>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	f043 0320 	orr.w	r3, r3, #32
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	2378      	movs	r3, #120	; 0x78
 80040e2:	4828      	ldr	r0, [pc, #160]	; (8004184 <_printf_i+0x248>)
 80040e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040e8:	e7e3      	b.n	80040b2 <_printf_i+0x176>
 80040ea:	065e      	lsls	r6, r3, #25
 80040ec:	bf48      	it	mi
 80040ee:	b2ad      	uxthmi	r5, r5
 80040f0:	e7e6      	b.n	80040c0 <_printf_i+0x184>
 80040f2:	4616      	mov	r6, r2
 80040f4:	e7bb      	b.n	800406e <_printf_i+0x132>
 80040f6:	680b      	ldr	r3, [r1, #0]
 80040f8:	6826      	ldr	r6, [r4, #0]
 80040fa:	1d1d      	adds	r5, r3, #4
 80040fc:	6960      	ldr	r0, [r4, #20]
 80040fe:	600d      	str	r5, [r1, #0]
 8004100:	0635      	lsls	r5, r6, #24
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	d501      	bpl.n	800410a <_printf_i+0x1ce>
 8004106:	6018      	str	r0, [r3, #0]
 8004108:	e002      	b.n	8004110 <_printf_i+0x1d4>
 800410a:	0671      	lsls	r1, r6, #25
 800410c:	d5fb      	bpl.n	8004106 <_printf_i+0x1ca>
 800410e:	8018      	strh	r0, [r3, #0]
 8004110:	2300      	movs	r3, #0
 8004112:	4616      	mov	r6, r2
 8004114:	6123      	str	r3, [r4, #16]
 8004116:	e7ba      	b.n	800408e <_printf_i+0x152>
 8004118:	680b      	ldr	r3, [r1, #0]
 800411a:	1d1a      	adds	r2, r3, #4
 800411c:	600a      	str	r2, [r1, #0]
 800411e:	681e      	ldr	r6, [r3, #0]
 8004120:	2100      	movs	r1, #0
 8004122:	4630      	mov	r0, r6
 8004124:	6862      	ldr	r2, [r4, #4]
 8004126:	f000 f831 	bl	800418c <memchr>
 800412a:	b108      	cbz	r0, 8004130 <_printf_i+0x1f4>
 800412c:	1b80      	subs	r0, r0, r6
 800412e:	6060      	str	r0, [r4, #4]
 8004130:	6863      	ldr	r3, [r4, #4]
 8004132:	6123      	str	r3, [r4, #16]
 8004134:	2300      	movs	r3, #0
 8004136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800413a:	e7a8      	b.n	800408e <_printf_i+0x152>
 800413c:	4632      	mov	r2, r6
 800413e:	4649      	mov	r1, r9
 8004140:	4640      	mov	r0, r8
 8004142:	6923      	ldr	r3, [r4, #16]
 8004144:	47d0      	blx	sl
 8004146:	3001      	adds	r0, #1
 8004148:	d0ab      	beq.n	80040a2 <_printf_i+0x166>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	079b      	lsls	r3, r3, #30
 800414e:	d413      	bmi.n	8004178 <_printf_i+0x23c>
 8004150:	68e0      	ldr	r0, [r4, #12]
 8004152:	9b03      	ldr	r3, [sp, #12]
 8004154:	4298      	cmp	r0, r3
 8004156:	bfb8      	it	lt
 8004158:	4618      	movlt	r0, r3
 800415a:	e7a4      	b.n	80040a6 <_printf_i+0x16a>
 800415c:	2301      	movs	r3, #1
 800415e:	4632      	mov	r2, r6
 8004160:	4649      	mov	r1, r9
 8004162:	4640      	mov	r0, r8
 8004164:	47d0      	blx	sl
 8004166:	3001      	adds	r0, #1
 8004168:	d09b      	beq.n	80040a2 <_printf_i+0x166>
 800416a:	3501      	adds	r5, #1
 800416c:	68e3      	ldr	r3, [r4, #12]
 800416e:	9903      	ldr	r1, [sp, #12]
 8004170:	1a5b      	subs	r3, r3, r1
 8004172:	42ab      	cmp	r3, r5
 8004174:	dcf2      	bgt.n	800415c <_printf_i+0x220>
 8004176:	e7eb      	b.n	8004150 <_printf_i+0x214>
 8004178:	2500      	movs	r5, #0
 800417a:	f104 0619 	add.w	r6, r4, #25
 800417e:	e7f5      	b.n	800416c <_printf_i+0x230>
 8004180:	080042ed 	.word	0x080042ed
 8004184:	080042fe 	.word	0x080042fe

08004188 <__retarget_lock_acquire_recursive>:
 8004188:	4770      	bx	lr

0800418a <__retarget_lock_release_recursive>:
 800418a:	4770      	bx	lr

0800418c <memchr>:
 800418c:	4603      	mov	r3, r0
 800418e:	b510      	push	{r4, lr}
 8004190:	b2c9      	uxtb	r1, r1
 8004192:	4402      	add	r2, r0
 8004194:	4293      	cmp	r3, r2
 8004196:	4618      	mov	r0, r3
 8004198:	d101      	bne.n	800419e <memchr+0x12>
 800419a:	2000      	movs	r0, #0
 800419c:	e003      	b.n	80041a6 <memchr+0x1a>
 800419e:	7804      	ldrb	r4, [r0, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	428c      	cmp	r4, r1
 80041a4:	d1f6      	bne.n	8004194 <memchr+0x8>
 80041a6:	bd10      	pop	{r4, pc}

080041a8 <memcpy>:
 80041a8:	440a      	add	r2, r1
 80041aa:	4291      	cmp	r1, r2
 80041ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80041b0:	d100      	bne.n	80041b4 <memcpy+0xc>
 80041b2:	4770      	bx	lr
 80041b4:	b510      	push	{r4, lr}
 80041b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ba:	4291      	cmp	r1, r2
 80041bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c0:	d1f9      	bne.n	80041b6 <memcpy+0xe>
 80041c2:	bd10      	pop	{r4, pc}

080041c4 <memmove>:
 80041c4:	4288      	cmp	r0, r1
 80041c6:	b510      	push	{r4, lr}
 80041c8:	eb01 0402 	add.w	r4, r1, r2
 80041cc:	d902      	bls.n	80041d4 <memmove+0x10>
 80041ce:	4284      	cmp	r4, r0
 80041d0:	4623      	mov	r3, r4
 80041d2:	d807      	bhi.n	80041e4 <memmove+0x20>
 80041d4:	1e43      	subs	r3, r0, #1
 80041d6:	42a1      	cmp	r1, r4
 80041d8:	d008      	beq.n	80041ec <memmove+0x28>
 80041da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041e2:	e7f8      	b.n	80041d6 <memmove+0x12>
 80041e4:	4601      	mov	r1, r0
 80041e6:	4402      	add	r2, r0
 80041e8:	428a      	cmp	r2, r1
 80041ea:	d100      	bne.n	80041ee <memmove+0x2a>
 80041ec:	bd10      	pop	{r4, pc}
 80041ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041f6:	e7f7      	b.n	80041e8 <memmove+0x24>

080041f8 <_realloc_r>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	4607      	mov	r7, r0
 80041fc:	4614      	mov	r4, r2
 80041fe:	460e      	mov	r6, r1
 8004200:	b921      	cbnz	r1, 800420c <_realloc_r+0x14>
 8004202:	4611      	mov	r1, r2
 8004204:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004208:	f7ff bc36 	b.w	8003a78 <_malloc_r>
 800420c:	b922      	cbnz	r2, 8004218 <_realloc_r+0x20>
 800420e:	f7ff fbe7 	bl	80039e0 <_free_r>
 8004212:	4625      	mov	r5, r4
 8004214:	4628      	mov	r0, r5
 8004216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004218:	f000 f814 	bl	8004244 <_malloc_usable_size_r>
 800421c:	42a0      	cmp	r0, r4
 800421e:	d20f      	bcs.n	8004240 <_realloc_r+0x48>
 8004220:	4621      	mov	r1, r4
 8004222:	4638      	mov	r0, r7
 8004224:	f7ff fc28 	bl	8003a78 <_malloc_r>
 8004228:	4605      	mov	r5, r0
 800422a:	2800      	cmp	r0, #0
 800422c:	d0f2      	beq.n	8004214 <_realloc_r+0x1c>
 800422e:	4631      	mov	r1, r6
 8004230:	4622      	mov	r2, r4
 8004232:	f7ff ffb9 	bl	80041a8 <memcpy>
 8004236:	4631      	mov	r1, r6
 8004238:	4638      	mov	r0, r7
 800423a:	f7ff fbd1 	bl	80039e0 <_free_r>
 800423e:	e7e9      	b.n	8004214 <_realloc_r+0x1c>
 8004240:	4635      	mov	r5, r6
 8004242:	e7e7      	b.n	8004214 <_realloc_r+0x1c>

08004244 <_malloc_usable_size_r>:
 8004244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004248:	1f18      	subs	r0, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	bfbc      	itt	lt
 800424e:	580b      	ldrlt	r3, [r1, r0]
 8004250:	18c0      	addlt	r0, r0, r3
 8004252:	4770      	bx	lr

08004254 <_init>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr

08004260 <_fini>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	bf00      	nop
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr
